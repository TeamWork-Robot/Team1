// Created by Microsoft (R) C/C++ Compiler Version 12.00.31101.0 (52ee5ad7).
//
// d:\mine\课程\实时软件控制\homework\caffe\test\test\debug\teechart8.tlh
//
// C++ source equivalent of Win32 type library C:\\Windows\\SysWow64\\TeeChart8.ocx
// compiler-generated file created 01/09/16 at 22:07:09 - DO NOT EDIT!

#pragma once
#pragma pack(push, 8)

#include <comdef.h>

//
// Forward references and typedefs
//

struct __declspec(uuid("eb7a6012-79a9-4a1a-91af-f2a92fca3406"))
/* LIBID */ __TeeChart;
enum EPanelBevel;
enum EBorderStyle;
enum EDragMode;
enum EChartPenStyle;
enum ELegendStyle;
enum EMouseButton;
enum EDragState;
enum EGradientDirection;
enum EAxisLabelStyle;
enum EHorizontalAxis;
enum EBrushStyle;
enum EMultiArea;
enum EMultiBar;
enum EMarkStyle;
enum EBarStyle;
enum EChartScroll;
enum ELegendAlignment;
enum ELegendTextStyle;
enum EAxisType;
enum EDateTimeStep;
enum EJPEGPerformance;
enum EConstants;
enum EFunctionType;
enum EShapeXYStyle;
enum ECandleStyle;
enum EErrorWidthUnits;
enum EValueListOrder;
enum EShapeStyle;
enum ESeriesClass;
enum EPrinterOrientation;
enum EPointerStyle;
enum ETypeFitting;
enum EBackImageMode;
enum ETextAlignment;
enum EVerticalAxis;
enum EShiftState;
enum ETitleAlignment;
struct __declspec(uuid("c398ad7d-b57f-4e47-b183-b29ae925ee77"))
/* dual interface */ ITChart;
struct __declspec(uuid("8983725c-2d88-4ce9-994f-a4867c6fa9f0"))
/* dispinterface */ ITChartEvents;
struct /* coclass */ TChart;
struct __declspec(uuid("e4577d56-c19b-4aaf-9d26-b251e552046c"))
/* dual interface */ IPen;
struct __declspec(uuid("27c6e587-c91a-4a77-a532-d726a6087287"))
/* dual interface */ IBrush;
struct __declspec(uuid("2c5e2d8a-e836-4527-a67d-ae7416f843d3"))
/* dual interface */ IStrings;
struct __declspec(uuid("ad513158-58d1-40fb-9d87-d159b7bb03a6"))
/* dual interface */ ICanvas;
struct __declspec(uuid("850d4eeb-0bfe-4bda-8da2-7794c9cf67e6"))
/* dual interface */ IAspect;
struct __declspec(uuid("7cd97e43-6830-46fc-b135-d1958ae4c0aa"))
/* dual interface */ IAxes;
struct __declspec(uuid("6dcaf81b-d217-42cf-988d-9ff60bc17092"))
/* dual interface */ IAxis;
struct __declspec(uuid("49ab5e31-c5cc-462e-9850-07305b51a936"))
/* dual interface */ IAxisLabels;
struct __declspec(uuid("03d14814-70d1-4b2f-a854-4263d041aae8"))
/* dual interface */ IAxisTitle;
struct __declspec(uuid("f75284f3-50cd-441c-b56a-782cbe93c83e"))
/* dual interface */ ITeeCustomShape;
struct __declspec(uuid("a982bdd4-3218-4b4e-a9ca-bc62c6c56897"))
/* dual interface */ IExport;
struct __declspec(uuid("2e48cd4f-b190-4e84-9a5f-40d35133c19c"))
/* dual interface */ IImport;
struct __declspec(uuid("74373b5d-79be-472a-b19c-1784e5684e5a"))
/* dual interface */ IScroll;
struct __declspec(uuid("4556ad4f-aec5-4c29-837a-9531984de6eb"))
/* dual interface */ IZoom;
struct __declspec(uuid("75ced159-22dd-4bc1-90b3-2b71c03a3ae7"))
/* dual interface */ IPrinter;
struct __declspec(uuid("e11c0eda-65c9-4966-ba60-57ea7adf530f"))
/* dual interface */ IWall;
struct __declspec(uuid("6978d18c-ea1a-4302-a1ae-f76c12a60eaf"))
/* dual interface */ IWalls;
struct __declspec(uuid("36fd3a7b-2815-4cb4-925b-b64caaa6beab"))
/* dual interface */ ITeeShapePosition;
struct __declspec(uuid("e0d983e0-ee24-445b-9e93-ee6b4d342786"))
/* dual interface */ IGradient;
struct __declspec(uuid("b858dc45-4e07-450d-92ad-25cff13ac862"))
/* dual interface */ IPage;
struct __declspec(uuid("193fd985-9667-4cfc-b92b-bbf3d1a3e045"))
/* dual interface */ IPanel;
struct __declspec(uuid("1af8ec64-fdf2-4116-8c7f-116a6ebdb87f"))
/* dual interface */ ISeries;
struct __declspec(uuid("b6904850-ecb0-4cc8-8438-f707f1847c66"))
/* dual interface */ ITeeFunction;
struct __declspec(uuid("bc0cd837-1a8f-4c35-9c93-ccb2fe216f88"))
/* dual interface */ IMarks;
struct __declspec(uuid("0dbd6ec7-e3d1-4ee9-b23e-bfd21417ee71"))
/* dual interface */ IValueList;
struct __declspec(uuid("461bbbc1-0138-4b40-81c9-e7885afbdd40"))
/* dual interface */ IPointer;
struct __declspec(uuid("fad417ae-d2f3-4886-8541-a4f001792c04"))
/* dual interface */ ICustomSeries;
struct __declspec(uuid("c58036b1-dfc3-4d4f-9f57-f32a5bde6dc4"))
/* dual interface */ IAreaSeries;
struct __declspec(uuid("7d8be2e9-0d40-47da-a9e8-1e74386550ca"))
/* dual interface */ IPointSeries;
struct __declspec(uuid("82c96e46-fb05-43b2-b12b-8ccb2e5acab1"))
/* dual interface */ ILineSeries;
struct __declspec(uuid("8e052508-b9b9-4792-b3a3-8fd23440d281"))
/* dual interface */ IFastLineSeries;
struct __declspec(uuid("510fe54f-6121-4535-a1a9-586d9c98eede"))
/* dual interface */ ICircledSeries;
struct __declspec(uuid("d2798192-f2dc-4034-a25f-8f6f31f7c695"))
/* dual interface */ IPieSeries;
struct __declspec(uuid("7a1079c7-ecc1-4175-a701-be42d25c4ddd"))
/* dual interface */ IBubbleSeries;
struct __declspec(uuid("d5270c7e-5481-468a-91bb-87454e28ae7f"))
/* dual interface */ IGanttSeries;
struct __declspec(uuid("536c4b74-6e4f-447c-91b0-0d622193ddac"))
/* dual interface */ IShapeSeries;
struct __declspec(uuid("2fe69573-c208-4dc1-b53e-48677964220f"))
/* dual interface */ IArrowSeries;
struct __declspec(uuid("ae426285-482f-4798-be4b-0ff7cca75e94"))
/* dual interface */ ICustomBarSeries;
struct __declspec(uuid("425d090a-1024-4fad-bd2d-16444a7ed15c"))
/* dual interface */ IBarSeries;
struct __declspec(uuid("7c802aa5-86db-4451-9380-ead5b122f37a"))
/* dual interface */ IHorizBarSeries;
struct __declspec(uuid("24b7fe4c-6430-4ea3-8849-c433877309bc"))
/* dual interface */ ICandleSeries;
struct __declspec(uuid("452b59fd-7c07-444c-8a74-690d9666bcd6"))
/* dual interface */ ICustomPolarSeries;
struct __declspec(uuid("d02220d4-95b1-4f2f-a3f6-0adcfa8aa74d"))
/* dual interface */ ICustom3DSeries;
struct __declspec(uuid("edf445c6-f88a-42ce-8d9c-a389295d58f4"))
/* dual interface */ IErrorBarSeries;
struct __declspec(uuid("951d6253-b815-4d5c-a757-660a90c09b1a"))
/* dual interface */ IVolumeSeries;
struct __declspec(uuid("e547cc97-77e2-4625-b1e0-391f60ac80dc"))
/* dual interface */ IAddFunction;
struct __declspec(uuid("4e7e0e3f-0672-4015-b967-a0da224cff7b"))
/* dual interface */ ISubtractFunction;
struct __declspec(uuid("5298585c-9e56-4d38-b300-fa66d46ade03"))
/* dual interface */ IMultiplyFunction;
struct __declspec(uuid("7bc95ad4-3428-4668-9858-2c3d7959ca4a"))
/* dual interface */ IDivideFunction;
struct __declspec(uuid("7b19fc1b-a120-439e-b8e5-8dd89ec68318"))
/* dual interface */ IAverageFunction;
struct __declspec(uuid("4c062ad2-b1bc-46be-9c45-2cf9445a0727"))
/* dual interface */ IHighFunction;
struct __declspec(uuid("0b1eb999-6235-402f-9fff-7b94c7d8193b"))
/* dual interface */ ILowFunction;
struct __declspec(uuid("94741f5b-60cc-42fe-89dd-287310f0d751"))
/* dual interface */ ICurveFittingFunction;
struct __declspec(uuid("55d2d8be-36a4-4744-bf5e-9b1db78a9fb1"))
/* dual interface */ IExpAvgFunction;
struct __declspec(uuid("c7d93468-7413-4888-9ea6-d3d4dd9c4f38"))
/* dual interface */ IMovingAvgFunction;
struct __declspec(uuid("a7f9d92b-d0ca-4b75-8f57-ba8b859ee660"))
/* dual interface */ IChartFont;
struct __declspec(uuid("335ca049-7552-4529-a3c3-6331f88a5d41"))
/* dual interface */ IMomentumFunction;
enum ECanvasBackMode;
enum ECanvasTextAlign;
struct __declspec(uuid("6a70cdbb-8f5f-44c5-9568-b70f940f6c05"))
/* dual interface */ IPieOtherSlice;
enum EPieOtherStyle;
struct __declspec(uuid("2b24932b-ebf7-4fdc-b894-2283db7d526f"))
/* dual interface */ IExplodedSlices;
struct __declspec(uuid("7b37e5dd-9723-435b-bde2-042c04314e23"))
/* dual interface */ ICustom3DPaletteSeries;
struct __declspec(uuid("a06b5773-1991-48d8-a45f-6f377039e6c5"))
/* dual interface */ ICustom3DGridSeries;
struct __declspec(uuid("a19b072c-1482-4301-b5e7-6ad55c8a1667"))
/* dual interface */ IBezierSeries;
struct __declspec(uuid("9a1a0505-7bba-4a53-8b7f-60979d8de765"))
/* dual interface */ IRadarSeries;
struct __declspec(uuid("c33203c1-74be-42ff-9432-0a2952de3481"))
/* dual interface */ IErrorSeries;
struct __declspec(uuid("91464dd7-1ef0-4e2b-88ad-489b171a00d9"))
/* dual interface */ IPoint3DSeries;
struct __declspec(uuid("c01e2137-30c3-4f62-977c-70f211750c45"))
/* dual interface */ ISurfaceSeries;
struct __declspec(uuid("79dcb259-5717-4d2c-8c9d-9e1375bc4c25"))
/* dual interface */ ISeriesMarksPositions;
struct __declspec(uuid("5f90d762-b0ee-4e2f-a16b-61bb57b6f883"))
/* dual interface */ ISeriesMarkPosition;
struct __declspec(uuid("1421844b-d663-485b-bdd7-98923ea3a022"))
/* dual interface */ IPolarSeries;
struct __declspec(uuid("9171a5ba-c17e-4472-8585-87cadea6a3a5"))
/* dual interface */ ICircleLabels;
enum EErrorSeriesStyle;
enum EFunctionPeriodAlign;
enum EFunctionPeriodStyle;
struct __declspec(uuid("10ce1b06-dfdd-4e0e-9ae7-c0a52796be97"))
/* dual interface */ ITrendFunction;
struct __declspec(uuid("20aeefe9-f24f-4596-9f7f-9081bab13a1b"))
/* dual interface */ IStdDeviationFunction;
struct __declspec(uuid("fb7ae258-2c12-4941-a21d-8e337219e73d"))
/* dual interface */ ICumulativeFunction;
struct __declspec(uuid("f5c06e6c-1bc6-4f98-b1f0-b55cd1161a2a"))
/* dual interface */ IRSIFunction;
struct __declspec(uuid("ce625f32-e1fa-4d5f-88ce-023f31c544c6"))
/* dual interface */ ICountFunction;
struct __declspec(uuid("7e6a1018-d7b2-4585-9d43-2e32bc7e7006"))
/* dual interface */ IEnvironment;
struct __declspec(uuid("ab864f5b-9010-462b-b42b-1d68b155e8d2"))
/* dual interface */ ITeeLinked;
struct __declspec(uuid("d9faeb17-42b4-44d0-ab3d-dcc098e46315"))
/* dispinterface */ ITeeCommanderEvents;
struct __declspec(uuid("bab825e4-8f9a-4134-bb2a-78e63734a657"))
/* dual interface */ ITeeCommander;
struct __declspec(uuid("cf5727bf-4b10-40b3-b222-54a4867e7857"))
/* dual interface */ ITeeListBox;
struct __declspec(uuid("7de551a9-7505-4352-83c8-0f98516a6e52"))
/* dispinterface */ ITeeListBoxEvents;
struct /* coclass */ TeeListBox;
struct __declspec(uuid("e342e283-24ed-4bef-bc1e-89373a2e78ff"))
/* dual interface */ ITeeEditor;
struct __declspec(uuid("b7993725-ac8b-406f-9f0f-9ec465091165"))
/* dual interface */ ITeePreviewer;
struct /* coclass */ TeeEditor;
struct /* coclass */ TeePreviewer;
struct /* coclass */ TeeCommander;
enum ETeeEditorPage;
struct __declspec(uuid("2e6c8b07-3536-493c-8428-aacbfe973c8a"))
/* dual interface */ ITeePoint2D;
struct __declspec(uuid("99ac72d4-5370-4648-a9fe-b0971c6d62fe"))
/* dual interface */ ITeePoint3D;
struct __declspec(uuid("0a393716-3671-4183-9b10-95c1ec679dbb"))
/* dual interface */ ITeeEditorShowPages;
struct __declspec(uuid("a74b18af-8f25-43f8-b926-1f2cd5b47360"))
/* dual interface */ ITeeEditorOptions;
struct __declspec(uuid("690efd3f-d8d2-4e19-a475-05d61fb12ec0"))
/* dual interface */ ITeePreviewerOptions;
struct __declspec(uuid("3dbc6ba9-c2fd-4bf7-8f07-82d7ccfd1596"))
/* dual interface */ ITeeOpenGL;
struct __declspec(uuid("009e4459-2a9e-4b2a-ab6b-98b2078f41f6"))
/* dual interface */ IClockSeries;
struct __declspec(uuid("9c60f5a9-35ff-4b0d-97b9-5f9ab6c8272f"))
/* dual interface */ IWindRoseSeries;
struct __declspec(uuid("64552cb0-9205-49e1-bfd6-67914859f260"))
/* dual interface */ IBar3DSeries;
struct __declspec(uuid("43fbf4ef-22b2-4799-9e23-3db63f586ddf"))
/* dual interface */ IImageBarSeries;
enum EStreamType;
struct __declspec(uuid("ae0bef36-d1ec-4b81-bf59-38a8c8ce4dcf"))
/* dual interface */ ITools;
struct __declspec(uuid("270b42a2-acbf-448f-8a9b-2fc7ce965008"))
/* dual interface */ ICustomToolSeries;
enum ECursorToolStyle;
struct __declspec(uuid("bdde7ac5-d532-432e-9559-ff950114afd4"))
/* dual interface */ IDragMarksTool;
struct __declspec(uuid("7eb5e604-d875-407a-9241-f42690e97506"))
/* dual interface */ ICustomToolAxis;
struct __declspec(uuid("87455f47-67f4-4425-9b88-63f09d7f1d99"))
/* dual interface */ IDrawLineTool;
struct __declspec(uuid("487af4ba-21d0-4e2f-8b72-5d7f948ddcb4"))
/* dual interface */ INearestTool;
struct __declspec(uuid("23876356-6d35-4418-8003-0af198e4ac6b"))
/* dual interface */ IColorBandTool;
struct __declspec(uuid("b1a083c0-cdc7-418c-95fb-abaf6707f66f"))
/* dual interface */ IColorLineTool;
struct __declspec(uuid("f5c85e2d-3f4e-4740-b58f-3f3f6ee58ff2"))
/* dual interface */ IRotateTool;
enum EAxisArrowToolPosition;
enum ENearestToolStyle;
struct __declspec(uuid("7e60af48-f4e1-4c2c-88c3-6af354de9b1a"))
/* dual interface */ IHorizLineSeries;
struct __declspec(uuid("ed06dc24-bfaa-41f1-bf9d-8c67acc2accd"))
/* dual interface */ IBaseHighLowSeries;
struct __declspec(uuid("4488f2a6-57e7-4080-9f64-a30684c3bb02"))
/* dual interface */ ITitles;
enum EChartObjectShapeStyle;
struct __declspec(uuid("41cdccd7-8878-49d8-8581-0edcdce5e88d"))
/* dual interface */ IToolList;
enum EToolClass;
struct __declspec(uuid("dd6c1000-3809-4f21-bc98-bc74976ec22c"))
/* dual interface */ ILegendSymbol;
enum ELegendSymbolPosition;
enum ELegendSymbolSize;
struct __declspec(uuid("caa881dc-ad98-4d36-9c1d-e2d722af26e1"))
/* dual interface */ ITeeFont;
struct __declspec(uuid("809c6b72-1134-4cb9-b2bd-14927ead6e22"))
/* dual interface */ ITeeShadow;
enum ETeeZoomDirection;
struct __declspec(uuid("9ad08718-5ecd-46d8-8eaf-7fd5ac035c06"))
/* dual interface */ ITeePreviewPanel;
struct __declspec(uuid("7e979bf8-4f85-4a7f-9c3d-047695f12c64"))
/* dispinterface */ ITeePreviewPanelEvents;
struct /* coclass */ TeePreviewPanel;
enum ETeePreviewPanelOrientation;
struct __declspec(uuid("f47693f2-77de-4da8-8377-e2d00a86f2a7"))
/* dual interface */ IChartGrid;
struct __declspec(uuid("9b05c936-8915-4f46-9293-551417b32e58"))
/* dispinterface */ IChartGridEvents;
struct __declspec(uuid("f9e796c3-0b2b-4c52-be19-5ccd1463b846"))
/* dual interface */ IChartGridNavigator;
struct /* coclass */ ChartGridNavigator;
struct __declspec(uuid("187a1659-5e9d-4f99-a920-0701f0199c13"))
/* dual interface */ IChartPageNavigator;
struct /* coclass */ ChartPageNavigator;
struct __declspec(uuid("5a486910-c8b0-432b-b374-abd125471d91"))
/* dual interface */ IChartEditorPanel;
struct /* coclass */ ChartEditorPanel;
enum ERSIStyle;
enum ECustomSeriesStack;
enum ETeeVertAlign;
enum EAxisLabelAlign;
struct __declspec(uuid("0b2f7e6b-4d7d-4251-a11a-0189e5447b26"))
/* dual interface */ IContourLevels;
struct __declspec(uuid("361f642d-2de5-4359-a14b-5dbf38096886"))
/* dual interface */ IContourLevel;
struct __declspec(uuid("e0216daa-f2fd-497b-8c5a-8b12ccdc5d74"))
/* dual interface */ IDonutSeries;
struct __declspec(uuid("9e781c98-cce0-49b6-b352-699d559c695f"))
/* dual interface */ ITriSurfaceSeries;
struct __declspec(uuid("48b0335c-92e1-43b5-a39a-f67f928788d3"))
/* dual interface */ ICustomBoxSeries;
struct __declspec(uuid("63c98e03-2c0c-4e6a-8de8-3d0fc1e75a9c"))
/* dual interface */ IHorizBoxPlotSeries;
struct __declspec(uuid("fd061005-c104-46f2-bcca-dc854395495f"))
/* dual interface */ IHistogramSeries;
struct __declspec(uuid("b0ec6752-f5ec-4f8c-87e3-eb6717a3e592"))
/* dual interface */ IColorGridSeries;
struct __declspec(uuid("ba6d1c6d-36cf-42d5-9098-137252458eec"))
/* dual interface */ IBarJoinSeries;
struct __declspec(uuid("eae4ff42-7aab-4649-8b4c-b4e16bf983eb"))
/* dual interface */ IWaterfallSeries;
struct __declspec(uuid("0e0f46cc-adef-4d24-9925-3e0d224e8a7d"))
/* dual interface */ ISmithSeries;
struct __declspec(uuid("8ef1cb19-851b-49d7-ad61-b8e4de9654f3"))
/* dual interface */ IPyramidSeries;
struct __declspec(uuid("04a6ac54-0b24-46b6-8606-28895fed9551"))
/* dual interface */ IMapSeries;
struct __declspec(uuid("880e79b6-b0e0-4a14-a68f-c75912e6eb9d"))
/* dual interface */ IContourSeries;
struct __declspec(uuid("66906253-4755-480d-82b1-9492f09c7b9b"))
/* dual interface */ IBoxPlotSeries;
struct __declspec(uuid("a2c8cee0-605c-4d14-8a8f-27c65d744ba8"))
/* dual interface */ ITeePanelsList;
struct TeeRect;
enum EBezierStyle;
enum EPaletteStyle;
struct __declspec(uuid("e1c73990-abec-4354-801a-3224b3f8c77a"))
/* dual interface */ ICursorTool;
struct __declspec(uuid("eca0bac9-08dc-452a-bc80-26405650242d"))
/* dual interface */ IDrawLineList;
struct __declspec(uuid("e946191e-9bf3-4fdf-9a9f-97fb798fc797"))
/* dual interface */ IDrawLine;
struct __declspec(uuid("00746a35-1bcd-4115-83cb-30d9cd1ca389"))
/* dual interface */ IAxisArrowTool;
struct __declspec(uuid("a33fb91f-35cd-4a55-8742-8dcb20336569"))
/* dual interface */ IExportFormat;
struct __declspec(uuid("2af16e3d-7faa-4936-8856-6f2286551306"))
/* dual interface */ IJPEGExport;
struct __declspec(uuid("9f013ef3-4a91-4aa4-8fc1-f7d954d6a3c2"))
/* dual interface */ IPNGExport;
struct __declspec(uuid("d32b8599-b350-42a5-b2b1-94c9cff34a2d"))
/* dual interface */ IGIFExport;
enum EGIFCompression;
enum EGIFDitherMode;
enum EGIFColorReduction;
struct __declspec(uuid("5bced848-7c39-446c-9bed-cb19ac16f383"))
/* dual interface */ IPCXExport;
struct __declspec(uuid("f6004561-2aae-44da-979d-ec7cb53dd15b"))
/* dual interface */ IMetafileExport;
struct __declspec(uuid("1f9c089d-bcae-4141-b95b-6e0877819e08"))
/* dual interface */ IBMPExport;
enum EPixelFormat;
struct __declspec(uuid("73631c7c-3a02-4f9f-9c9f-83a1e0360f4b"))
/* dual interface */ IMarksTipTool;
struct __declspec(uuid("f81057f8-f2d4-4125-95dc-36e1116f6d40"))
/* dual interface */ IChartImageTool;
enum EMarkToolMouseAction;
struct __declspec(uuid("09098cb8-077e-4f99-bc28-5da7c8092a08"))
/* dual interface */ IMomentumDivFunction;
struct __declspec(uuid("b1720269-dc95-4b8f-acae-20c51cbe287e"))
/* dual interface */ IExpTrendFunction;
struct __declspec(uuid("bae278ab-f06b-493b-b060-6b25d5c48e29"))
/* dual interface */ IExpMovAvgFunction;
struct __declspec(uuid("03efaf27-3524-4dd2-9ea3-8546ea16fd94"))
/* dual interface */ IRMSFunction;
struct __declspec(uuid("21cc63ae-bf53-41f9-8871-4029ec3b388f"))
/* dual interface */ IMACDFunction;
struct __declspec(uuid("1c344736-72c9-46e1-bee6-98db3e88fc38"))
/* dual interface */ IStochasticFunction;
struct __declspec(uuid("54f59aca-6a98-4839-a5d8-fcbe40b458bc"))
/* dual interface */ IBollingerFunction;
struct __declspec(uuid("f2e58750-515c-496f-b96a-693c36d0c3de"))
/* dual interface */ IADXFunction;
struct __declspec(uuid("5706d771-e194-43b0-9d96-6708b72819b0"))
/* dual interface */ INativeExport;
struct __declspec(uuid("5a309c93-af6a-4991-bc28-1065134b0b85"))
/* dual interface */ IDataExport;
struct __declspec(uuid("75295a72-43b5-418c-ba98-be48fc7de7c5"))
/* dual interface */ IXMLExport;
struct __declspec(uuid("5f56734a-1e58-432b-872c-9116b314d304"))
/* dual interface */ IXLSExport;
struct __declspec(uuid("585ef2dc-4645-40c3-ac68-a569978f12eb"))
/* dual interface */ IHTMLExport;
struct __declspec(uuid("6ab1b24a-c466-4268-acf3-650000f12910"))
/* dual interface */ ITextExport;
struct __declspec(uuid("004303f2-ee70-4342-b85a-01d964725ddf"))
/* dual interface */ IMapPolygonList;
struct __declspec(uuid("c593e77c-0054-4ec6-8bdf-e5bf5bde37a1"))
/* dual interface */ IMapPolygon;
struct __declspec(uuid("a6b24b01-657e-4a5c-844c-a3b1251ee1d4"))
/* dual interface */ IFunnelSeries;
struct __declspec(uuid("10c77e47-24a3-4994-8f82-94ea32890ea7"))
/* dual interface */ ICalendarSeries;
enum ETeeCommanderControls;
struct __declspec(uuid("58ec1e68-c9d7-4d15-9f75-31b72bfd4949"))
/* dual interface */ ICalendarCell;
struct __declspec(uuid("74538277-5473-4ddb-94b3-442590cc03d9"))
/* dual interface */ ICalendarCellUpper;
struct __declspec(uuid("a542ef07-2cda-4617-8eac-6795425814fa"))
/* dual interface */ IAnnotationTool;
enum EAnnotationPosition;
struct __declspec(uuid("8e8b339e-a766-4a07-9f1b-69771f5d04b6"))
/* dual interface */ ILegend;
struct __declspec(uuid("a9996639-1fde-4a8c-8865-0ddf66c784ad"))
/* dual interface */ IPageNumTool;
struct __declspec(uuid("81c0441c-ca5b-4999-a827-32c1ad451c87"))
/* dual interface */ ISeriesSource;
struct __declspec(uuid("fa4fe59f-8cf1-45db-b5e9-9d229d58c438"))
/* dual interface */ ISeriesSourceFile;
struct __declspec(uuid("72b7ea89-dfb1-4c2e-b6f5-ae63de7547f8"))
/* dual interface */ ISeriesTextFields;
struct __declspec(uuid("2640f6d4-985a-484b-926e-bd4ef5053b0d"))
/* dual interface */ ISeriesTextField;
struct /* coclass */ ChartGrid;
enum EDatasourceType;
struct __declspec(uuid("64ecd605-294d-46d6-87b7-af89f388b793"))
/* dual interface */ IValueLists;
struct __declspec(uuid("eb29ab58-e3be-4805-847c-74bb83ed40d1"))
/* dual interface */ ITeeShapePanel;
struct __declspec(uuid("9836add3-5ed1-4394-bd5f-4dfc1445475b"))
/* dual interface */ IChartGridRows;
struct __declspec(uuid("6efeb88e-086f-456e-b25d-c9fd1146c147"))
/* dual interface */ IChartGridCols;
enum EPenEndStyle;
struct TeePoint2D;
struct __declspec(uuid("65602b2e-8f95-4a4a-9ce2-2331169a5909"))
/* dual interface */ IAxisLabelsItem;
enum EMarginUnits;
enum EColorLineStyle;
enum EArrowHeadStyle;
struct __declspec(uuid("ce3e920a-62dc-4fa5-a091-f9af6a3f816e"))
/* dual interface */ ICallout;
struct __declspec(uuid("85ad8716-345b-43bb-8283-fb0a529f90f1"))
/* dual interface */ IAnnotationCallout;
struct __declspec(uuid("389a80d6-77cd-4dfd-af14-4ff640cbc7d9"))
/* dual interface */ IMarksCallout;
struct __declspec(uuid("3b41be1c-a7f4-4c59-aa59-104376904b34"))
/* dual interface */ ISmoothPoints;
struct __declspec(uuid("75009193-06a4-4e3d-b145-0374a819461e"))
/* dual interface */ ILevelSegment;
struct __declspec(uuid("f8c384ed-b661-4cc5-bb9f-8c506d8b6a09"))
/* dual interface */ IGridTransposeTool;
struct __declspec(uuid("72ef6a88-f0cc-43fa-a27e-3433f5fdd70d"))
/* dual interface */ IExtraLegendTool;
struct __declspec(uuid("bf3ba486-178d-4629-8b7c-dfb39be2f891"))
/* dual interface */ ISeriesAnimationTool;
struct __declspec(uuid("2c0d1571-c240-4c42-a090-73a927c3e332"))
/* dual interface */ IGanttTool;
enum EGanttToolPartBar;
struct __declspec(uuid("d5ad136f-29a9-4bf2-96f9-d79414d3b369"))
/* dual interface */ IGridBandTool;
struct __declspec(uuid("8a2712f9-7df4-4190-8c57-df25aff1e5fb"))
/* dual interface */ IPieTool;
enum EPieToolStyle;
struct __declspec(uuid("09f39ccd-b5d6-4f33-aafb-25b568ddac27"))
/* dual interface */ ISmoothingFunction;
struct __declspec(uuid("ad589bfa-6e34-4da2-894e-7de4c9b127b3"))
/* dual interface */ ICustomFunction;
enum ECompressionPeriod;
struct __declspec(uuid("2bd3fedc-583e-4f97-bd6a-2f560a5e6b0c"))
/* dual interface */ ICompressFunction;
struct __declspec(uuid("fb76aaa9-db44-41cb-88d6-7cc55f7fc752"))
/* dual interface */ ICrossPointsFunction;
struct __declspec(uuid("8b8d64cb-8b2e-45b6-b859-5b87e6027847"))
/* dual interface */ ICLVFunction;
struct __declspec(uuid("e6466a2b-ec9e-48eb-94e5-6435c4dee97b"))
/* dual interface */ IOBVFunction;
struct __declspec(uuid("54242326-2d9d-45bd-9b0a-7a424a00ca92"))
/* dual interface */ ICCIFunction;
struct __declspec(uuid("5227cc4f-bb80-4cd0-a107-55bdc81285e0"))
/* dual interface */ IPVOFunction;
struct __declspec(uuid("059a33bb-181f-4b69-810a-bfb972239a93"))
/* dual interface */ IPerformanceFunction;
struct __declspec(uuid("21a5a8c7-526f-4931-9c61-0a7b66f1fc36"))
/* dual interface */ IHorizAreaSeries;
struct __declspec(uuid("766eccd5-e868-4a5a-9cbd-cbcc657ecf9b"))
/* dual interface */ IPointFigureSeries;
struct __declspec(uuid("0d1e861a-4eb6-4b7c-a081-60bd11e470f2"))
/* dual interface */ IGaugeSeries;
enum EHandStyle;
struct __declspec(uuid("10c205e0-73c6-41f3-8602-71359b4bde16"))
/* dual interface */ IVector3DSeries;
struct __declspec(uuid("8d0bd38d-8b31-4189-a9e8-782a501ee943"))
/* dual interface */ ITowerSeries;
enum ETowerStyle;
struct __declspec(uuid("15a88a3d-5195-4a80-bc81-85472f1876f7"))
/* dual interface */ ISeriesXMLSource;
struct /* coclass */ SeriesXMLSource;
struct __declspec(uuid("bc93a02e-14cf-4c44-817c-11e2e7bf6f12"))
/* dual interface */ IPDFExport;
struct __declspec(uuid("da158a28-f0e4-468a-a1c1-84d1b53a440c"))
/* dual interface */ IEPSExport;
struct __declspec(uuid("ad7ca61b-203e-42b4-9416-aaf4b6d3c6ea"))
/* dual interface */ ISeriesTextSource;
struct /* coclass */ SeriesTextSource;
struct __declspec(uuid("bbcbb4c6-96a3-452e-a960-57a6ebef8d95"))
/* dual interface */ ICrossTabSource;
enum EGroupFormula;
struct /* coclass */ CrossTabSource;
struct __declspec(uuid("59ce6014-fcd7-4854-ab61-7e66ef83f1e6"))
/* dual interface */ IGridBandBrush;
struct __declspec(uuid("4c47f2e5-b222-4819-b0a8-23123bbcfc66"))
/* dual interface */ ITeeRect;
struct __declspec(uuid("db5480ba-7f0b-41e5-815c-3358b3a01a59"))
/* dual interface */ IDragPointTool;
enum EDragPointStyle;
enum EPositionUnits;
struct __declspec(uuid("3ca138e7-5ded-423c-857f-609f39afb3f0"))
/* dual interface */ ITeeShape;
struct __declspec(uuid("2986db67-da5e-40a6-be81-e9ecc3f02c90"))
/* dual interface */ ILegendTitle;
struct __declspec(uuid("54eb0bad-76a8-4db2-8632-89eefb9c5cf1"))
/* dual interface */ ILegendScrollBarTool;
struct __declspec(uuid("e7c3e2ac-2e19-446f-88ac-237661961992"))
/* dual interface */ IMarksSymbol;
struct __declspec(uuid("0e0ee0be-95d1-42c8-8624-e145cc10cee2"))
/* dual interface */ ISVGExport;
enum EScrollBarDrawStyle;
struct __declspec(uuid("216a7c86-0d29-46bb-89fb-e553813d2d12"))
/* dual interface */ IPolarBarSeries;
struct __declspec(uuid("1267e579-8c87-47cb-b752-3a3ed3dff34c"))
/* dual interface */ IBubble3DSeries;
struct __declspec(uuid("57c96cd8-4316-4222-b4ea-9adda9cac20c"))
/* dual interface */ IHorizHistogramSeries;
struct __declspec(uuid("6da18fcd-ed89-412a-ac92-7d411fe2175f"))
/* dual interface */ ILightTool;
enum ELightStyle;
struct __declspec(uuid("eea3f5fe-8878-4b8c-9c67-7b00180b26b3"))
/* dual interface */ ISurfaceNearestTool;
struct __declspec(uuid("d88e90f1-17a7-4b13-b6b4-ab5344c0c32a"))
/* dual interface */ IAxisScrollTool;
struct __declspec(uuid("13ccdc95-896b-4cbe-be0d-e1677215f48f"))
/* dual interface */ ICustomSortedFunction;
struct __declspec(uuid("e6e22954-ba25-4d63-a2ee-be938746cb06"))
/* dual interface */ IModeFunction;
struct __declspec(uuid("0882c319-83fa-4f0d-a821-38e69cb2fdd4"))
/* dual interface */ IMedianFunction;
struct __declspec(uuid("ec2af49b-0ff6-4a6f-a627-27e2f6299b01"))
/* dual interface */ ICorrelationFunction;
struct __declspec(uuid("e700941d-8b89-4c99-9419-d9e3260f5b65"))
/* dual interface */ IVarianceFunction;
struct __declspec(uuid("4edc3fa7-4d93-4da2-8267-774d4e93e72f"))
/* dual interface */ IPerimeterFunction;
enum EChartTheme;
enum EColorPalette;
struct __declspec(uuid("d66d7eb7-7f65-43a1-86fc-6f1d69831115"))
/* dual interface */ IDownSamplingFunction;
enum EDownSampleMethod;
struct __declspec(uuid("2bd79012-fa21-4577-855a-2eb5bc52d926"))
/* dual interface */ ISeriesList;
struct __declspec(uuid("ecec2256-9ed2-45c2-9233-ce7f93fce378"))
/* dual interface */ ISeriesGroup;
enum ESeriesGroupActive;
struct __declspec(uuid("1a86275d-45f4-4b29-9397-84f0e30a70bb"))
/* dual interface */ ISeriesGroups;
enum ECheckBoxesStyle;
struct __declspec(uuid("509c90b9-e777-449c-b42a-c746538e7f08"))
/* dual interface */ ISeriesBandTool;
struct __declspec(uuid("4a6b2e0d-6ebe-4811-b2d5-8148d110cf97"))
/* dual interface */ ISelectorTool;
struct __declspec(uuid("24a005bb-eaa5-4da9-9116-ecad89cdd898"))
/* dual interface */ ITeeCommanderButton;
struct __declspec(uuid("62388638-1b14-48d5-b3b5-93b02ec9230a"))
/* dual interface */ IPointArray;
enum ECandleColorStyle;
struct __declspec(uuid("335e0902-9251-4f18-8037-0b242f42b16c"))
/* dual interface */ IRectangleTool;
struct __declspec(uuid("f1156040-7b16-48aa-85a7-da3332e46d5f"))
/* dual interface */ IDataTableTool;
struct __declspec(uuid("661d8268-cbcc-4574-9fb5-1628c5093cae"))
/* dual interface */ ITableLegend;
enum ELoadMode;
struct __declspec(uuid("79b82f2c-e7af-4b88-bb71-059544cc7213"))
/* dual interface */ IVolumePipeSeries;
struct __declspec(uuid("303d35c4-1f51-478d-b67b-266bb1b2d6ef"))
/* dual interface */ ILegendItem;
struct __declspec(uuid("c30d9607-2367-4d9c-aa6b-65a2509a42b2"))
/* dual interface */ ILegendItems;
struct __declspec(uuid("af553d41-9d55-47c5-8350-793033c2b78b"))
/* dual interface */ IMarksItem;
struct __declspec(uuid("872026d0-bd58-42cc-961b-3640c024609c"))
/* dual interface */ IIsoSurfaceSeries;
struct __declspec(uuid("89c25521-4887-4af5-9fad-7fd07a264239"))
/* dual interface */ ISurfaceSides;
struct __declspec(uuid("7d7c186a-38a2-42aa-9dec-a6ac928b598c"))
/* dual interface */ IDarvasSeries;
struct __declspec(uuid("21e55447-e34a-4c87-810b-26c784cfcd44"))
/* dual interface */ ISeriesStatsTool;
struct __declspec(uuid("4c672492-ae61-40fc-bce4-2c4fb5f20c73"))
/* dual interface */ IVideoTool;
struct __declspec(uuid("57f89bff-8267-4bc2-8e8a-f04ef8b60415"))
/* dual interface */ IVideoPlayerTool;
struct __declspec(uuid("c94121e7-766b-49eb-9085-bd821b644b85"))
/* dual interface */ ITeeFilter;
struct __declspec(uuid("b68c5d3c-e47c-4000-a548-7748afc9262c"))
/* dual interface */ IFilterRegion;
struct __declspec(uuid("5df2c570-75c1-4660-b366-f2c346cbe092"))
/* dual interface */ IFilterItems;
enum EFilterClass;
struct __declspec(uuid("142ce71e-2d1b-4a48-9c74-1fd531f2953a"))
/* dual interface */ ITransposeSeriesTool;
struct __declspec(uuid("c131277d-a85e-4289-b61c-55226a239994"))
/* dual interface */ ISeriesRegionTool;
struct __declspec(uuid("4cc1844c-a1c1-4d97-9eb2-4d29385fe9ba"))
/* dual interface */ IAntiAliasTool;
struct __declspec(uuid("19b4503e-f54c-4336-83af-eef8b30ddc27"))
/* dual interface */ ISubsetTeeFunction;
struct __declspec(uuid("bf8fb65b-e0ff-4bf1-a2d3-7fcb9af09f73"))
/* dual interface */ IHistogramFunction;
struct __declspec(uuid("7ba6e7aa-e5fc-451c-9056-d437aa074d27"))
/* dual interface */ ISARFunction;
struct __declspec(uuid("336c2e03-2f07-45e8-8834-26b4bcf504c3"))
/* dual interface */ IConvolveFilter;
struct __declspec(uuid("fbba3360-e18a-482a-bfae-8a19c2625e01"))
/* dual interface */ IBlurFilter;
struct __declspec(uuid("6d92f682-e70d-4a43-a7e7-a28b6fd9f372"))
/* dual interface */ IResizeFilter;
struct __declspec(uuid("3997d182-bb41-403b-ab2d-d695d888793d"))
/* dual interface */ ICropFilter;
struct __declspec(uuid("5ab21373-bca7-443e-a4d4-079c715ec09d"))
/* dual interface */ IInvertFilter;
enum EGrayMethod;
struct __declspec(uuid("99cbf1eb-64d1-4afc-a7f7-4cba70992561"))
/* dual interface */ IGrayScaleFilter;
struct __declspec(uuid("45c1af84-5df4-466a-b7eb-24c07c6e4526"))
/* dual interface */ IFlipFilter;
struct __declspec(uuid("72061ec4-730d-4ef4-9c4f-e75fd2ea16f6"))
/* dual interface */ IReverseFilter;
struct __declspec(uuid("e9612b8d-1d97-41f0-988c-31b3dd1c4d84"))
/* dual interface */ IAmountFilter;
struct __declspec(uuid("262477ec-9964-4cef-9127-b0521eb378bb"))
/* dual interface */ IMosaicFilter;
struct __declspec(uuid("c2310f60-ba01-400c-8b87-de6753e378a9"))
/* dual interface */ IBrightnessFilter;
struct __declspec(uuid("2c3bf213-1fdf-4175-8cda-bbc8d976126e"))
/* dual interface */ IContrastFilter;
struct __declspec(uuid("8097eb99-1f8e-433c-89b0-d8de32a4a9c0"))
/* dual interface */ IColorFilter;
struct __declspec(uuid("88c1b7a8-edf1-4236-813e-bdfb74ee521b"))
/* dual interface */ IHueLumSatFilter;
struct __declspec(uuid("e58887b4-fb87-4aff-ab68-d0fdcc28f476"))
/* dual interface */ ISharpenFilter;
struct __declspec(uuid("7322c787-efee-46d0-99a2-9323f7537933"))
/* dual interface */ IEmbossFilter;
struct __declspec(uuid("9e71a825-8554-4501-b72f-83e5aa82c35f"))
/* dual interface */ ISoftenFilter;
struct __declspec(uuid("004668ee-fe52-40c7-a330-3d10c231f65f"))
/* dual interface */ IGammaCorrectionFilter;
struct __declspec(uuid("171dbced-10eb-4445-ac86-ecbc6486924a"))
/* dual interface */ IRotateFilter;
enum EMirrorDirection;
struct __declspec(uuid("437752ad-402e-47c8-a712-79beb199db7e"))
/* dual interface */ IMirrorFilter;
struct __declspec(uuid("fed2af48-f5de-44b8-9544-4fe7c680a45a"))
/* dual interface */ ITileFilter;
struct __declspec(uuid("92481035-6d58-4bd4-81be-d3b6904dead0"))
/* dual interface */ IBevelFilter;
struct __declspec(uuid("f2986750-62fd-4eb7-9efd-ec440626302a"))
/* dual interface */ IZoomFilter;
enum EPenLineMode;
struct __declspec(uuid("84cc5df7-d92c-411f-bf1b-ff1b0c053f08"))
/* dual interface */ IChartAxisPen;
struct __declspec(uuid("71d5cf8e-4f37-4472-ba78-18693ad0be8b"))
/* dual interface */ IGLLight;
struct __declspec(uuid("73b0080b-6a79-463d-981f-083d0e023dda"))
/* dual interface */ IGLLightSource;
struct __declspec(uuid("898dd3ca-ee4d-4e29-8430-e7eaa6503b13"))
/* dual interface */ IGLPosition;
enum EScopeCursorStyle;
enum ESnapStyle;
enum EDrawLineStyle;
struct __declspec(uuid("62335e7b-c1e5-458b-b1a8-f6f3380a6d47"))
/* dual interface */ IAxisGridPen;
struct __declspec(uuid("c6a11401-589c-4ec4-94aa-4d9b3c145728"))
/* dual interface */ IClipSeriesTool;
enum EPenMode;
struct __declspec(uuid("f4469124-9eff-4c88-8697-df8b0fed1719"))
/* dual interface */ ITeeListBoxSection;
struct __declspec(uuid("f09906cb-3e06-47b9-a16e-20e6d73cce73"))
/* dual interface */ ISubGradient;
struct __declspec(uuid("4cc6e38c-0b1b-4e77-bbf9-21c6ce0a2656"))
/* dual interface */ IFaderTool;
enum EFaderStyle;
struct __declspec(uuid("f29662cb-eeed-4e0d-85e8-74bb6941acc5"))
/* dual interface */ IFrameTool;
struct __declspec(uuid("5d33bf3e-7a0a-40b0-bbbd-dea7e521f30b"))
/* dual interface */ IMagnifyTool;
struct __declspec(uuid("22f4542f-cf97-43a4-999d-928c0e1084ef"))
/* dual interface */ ILegendPaletteTool;
enum ELegendPaletteAxis;
struct __declspec(uuid("f2dd0f5f-1e6f-493c-87af-02ed0d228b3a"))
/* dual interface */ IChartHiddenPen;
struct __declspec(uuid("f6773452-1717-4136-b268-a722fdc6bd71"))
/* dual interface */ IBannerTool;
enum EScrollDirection;
struct __declspec(uuid("6a38a032-af85-4ce1-9d5d-d9c773feb8a3"))
/* dual interface */ IText3DTool;
struct __declspec(uuid("21c180f1-5b3d-426f-93da-3c2ce22ff8d5"))
/* dual interface */ IFloatXYZ;
enum ECanvas3DPlane;
enum ERotateToolStyle;
struct __declspec(uuid("dd6b8d73-6561-4207-9e05-f91b0897101b"))
/* dual interface */ ITeePicture;
struct __declspec(uuid("39b6aba0-95b6-4a31-8d9f-e80459f4f26f"))
/* dual interface */ IBackImage;
struct __declspec(uuid("d187ba8a-2d47-472b-8128-b8f1f9d8c2fc"))
/* dual interface */ IPrinterSettings;
struct __declspec(uuid("bbb0ac77-86e9-4a8b-9416-6c4d8662ede5"))
/* dual interface */ IScrollBarThumb;
enum EScrollThumbStyle;
struct __declspec(uuid("8bc26020-385f-4cb4-bdd5-b8665b29532d"))
/* dual interface */ IHighLowSeries;
struct __declspec(uuid("615c007a-5ca3-4580-a495-1ec755e33c26"))
/* dual interface */ IHighLowLineSeries;
struct __declspec(uuid("4bdb69f7-bfad-4f02-999f-feae6531350f"))
/* dual interface */ IPolarGridSeries;
enum EChartGridShow;
struct __declspec(uuid("03b9a1f0-2d6b-4841-ad3f-b638e8860f6d"))
/* dual interface */ ITeeRectArray;
enum ESeriesAnimationLoop;
struct __declspec(uuid("4649cf17-b8da-49a3-a8e4-52bbe5d354c0"))
/* dual interface */ ICustomImagePointSeries;
struct __declspec(uuid("c9e81247-a636-4015-b5fc-19143907753d"))
/* dual interface */ IDeltaPointSeries;
enum EDeltaImageStyle;
struct __declspec(uuid("0cf2cd0f-b6b0-4ceb-a143-25d37c8ee788"))
/* dual interface */ IImagePointSeries;
struct __declspec(uuid("11950626-7e9b-4473-b01e-caf6c4648c11"))
/* dual interface */ IOrgSeries;
struct __declspec(uuid("d0b1d417-532b-43b2-bd45-041b7ae7191c"))
/* dual interface */ IOrgItem;
struct __declspec(uuid("a6e6ca47-7656-4e3e-8190-e31264f5d233"))
/* dual interface */ IOrgShape;
struct __declspec(uuid("d8f55350-a1ec-4459-aa69-dffcdaf2992a"))
/* dual interface */ IOrgItemCollection;
enum EOrgLineStyle;
struct __declspec(uuid("91606cc5-d423-4446-8659-69c3e31494a9"))
/* dual interface */ ISpacing;
struct __declspec(uuid("aaa6ae5b-b976-459f-9380-e85b3f779880"))
/* dual interface */ IWorldSeries;
struct __declspec(uuid("6d8c1b52-50bc-4ecf-abb6-1c06a3bc9520"))
/* dual interface */ IContourMarks;
enum EWorldMap;
struct __declspec(uuid("c486e24f-95bc-44c0-99b5-e24957990017"))
/* dual interface */ ITagCloudSeries;
enum ETagCloudOrder;
struct __declspec(uuid("19143e66-8a53-4e32-ba49-06be1a7f03bd"))
/* dual interface */ IKagiSeries;
struct __declspec(uuid("534dc73b-3b82-4549-92a4-9bf3c7896ea8"))
/* dual interface */ IRenkoSeries;
struct __declspec(uuid("21343ba4-8a97-4c6d-9a39-7c68be79baf7"))
/* dual interface */ ITextShape;
enum ETreatNullsStyle;
enum EMultiPie;
struct __declspec(uuid("b108d6f9-1c82-4971-89b5-56dbe33ab334"))
/* dual interface */ IPieMarks;
struct __declspec(uuid("ecdff469-41d8-4f7b-9250-c84a307fa105"))
/* dual interface */ IXAMLExport;
struct __declspec(uuid("936a835c-57e9-4b90-9e6f-6dc6c0866c65"))
/* dual interface */ ILinkTool;
struct __declspec(uuid("75035ccb-6463-49b8-9a53-bc2327b6b341"))
/* dual interface */ ICustomGauge;
struct __declspec(uuid("6f8bdc44-2820-4bc9-934c-4933514e7db0"))
/* dual interface */ INumericGauge;
enum EDigitalFont;
struct __declspec(uuid("f9305261-4001-43fe-a40c-8bd11947c491"))
/* dual interface */ IFramedBorder;
struct __declspec(uuid("518a4d6f-69c9-4ee5-8e7a-984d45ec2992"))
/* dual interface */ IFrameBrush;
struct __declspec(uuid("ddb370db-0cc3-46b7-9b82-7595f3ffdf5f"))
/* dual interface */ ICustomGaugeMinMax;
struct __declspec(uuid("5b4b3f07-2ee7-48be-8f04-cc603959c88f"))
/* dual interface */ IGaugeSeriesPointer;
struct __declspec(uuid("73de645d-73e4-4921-bcbd-e839d2067215"))
/* dual interface */ IGaugePointerRange;
enum EGaugePointerStyles;
struct __declspec(uuid("32c8b5f5-ad20-4f33-ada7-1d028d1ce5d9"))
/* dual interface */ ILinearGauge;
struct __declspec(uuid("1c46cc17-ba97-4341-82e7-073600af4c49"))
/* dual interface */ ICircularGauge;
struct __declspec(uuid("87b5794c-a8f0-4837-93b5-be1af64574ff"))
/* dual interface */ IGaugeHand;
struct __declspec(uuid("22fdb456-9896-4d6f-b48c-82f84e26ef53"))
/* dual interface */ IFibonacciTool;
enum EFibonacciStyle;
struct __declspec(uuid("5b196b79-cae8-49e7-a321-cd96a3616d2f"))
/* dual interface */ IFibonacciLevels;
struct __declspec(uuid("56dd636a-7637-4ccc-bbff-d426fea5d186"))
/* dual interface */ IFibonacciItem;
struct __declspec(uuid("573b399a-75e6-4079-82f9-9c4895ef9cb7"))
/* dual interface */ IMargins;
enum EMarginsUnits;
struct __declspec(uuid("852ed3b2-ca4c-473a-8533-20dfad3b84d9"))
/* dual interface */ INumericMarker;
struct __declspec(uuid("37f98a5a-4bdc-40a6-a3cb-84d1b33d2c59"))
/* dual interface */ ICustomSeriesList;
struct __declspec(uuid("bd6c0aee-3977-4cbb-81a0-50db0e100be8"))
/* dual interface */ IFullScreenTool;

//
// Smart pointer typedef declarations
//

_COM_SMARTPTR_TYPEDEF(ITChartEvents, __uuidof(ITChartEvents));
_COM_SMARTPTR_TYPEDEF(IBrush, __uuidof(IBrush));
_COM_SMARTPTR_TYPEDEF(IStrings, __uuidof(IStrings));
_COM_SMARTPTR_TYPEDEF(IImport, __uuidof(IImport));
_COM_SMARTPTR_TYPEDEF(IScroll, __uuidof(IScroll));
_COM_SMARTPTR_TYPEDEF(IPage, __uuidof(IPage));
_COM_SMARTPTR_TYPEDEF(IValueList, __uuidof(IValueList));
_COM_SMARTPTR_TYPEDEF(IAddFunction, __uuidof(IAddFunction));
_COM_SMARTPTR_TYPEDEF(ISubtractFunction, __uuidof(ISubtractFunction));
_COM_SMARTPTR_TYPEDEF(IMultiplyFunction, __uuidof(IMultiplyFunction));
_COM_SMARTPTR_TYPEDEF(IDivideFunction, __uuidof(IDivideFunction));
_COM_SMARTPTR_TYPEDEF(IAverageFunction, __uuidof(IAverageFunction));
_COM_SMARTPTR_TYPEDEF(IHighFunction, __uuidof(IHighFunction));
_COM_SMARTPTR_TYPEDEF(ILowFunction, __uuidof(ILowFunction));
_COM_SMARTPTR_TYPEDEF(ICurveFittingFunction, __uuidof(ICurveFittingFunction));
_COM_SMARTPTR_TYPEDEF(IExpAvgFunction, __uuidof(IExpAvgFunction));
_COM_SMARTPTR_TYPEDEF(IMovingAvgFunction, __uuidof(IMovingAvgFunction));
_COM_SMARTPTR_TYPEDEF(IChartFont, __uuidof(IChartFont));
_COM_SMARTPTR_TYPEDEF(IMomentumFunction, __uuidof(IMomentumFunction));
_COM_SMARTPTR_TYPEDEF(IExplodedSlices, __uuidof(IExplodedSlices));
_COM_SMARTPTR_TYPEDEF(ICircleLabels, __uuidof(ICircleLabels));
_COM_SMARTPTR_TYPEDEF(ITrendFunction, __uuidof(ITrendFunction));
_COM_SMARTPTR_TYPEDEF(IStdDeviationFunction, __uuidof(IStdDeviationFunction));
_COM_SMARTPTR_TYPEDEF(ICumulativeFunction, __uuidof(ICumulativeFunction));
_COM_SMARTPTR_TYPEDEF(ICountFunction, __uuidof(ICountFunction));
_COM_SMARTPTR_TYPEDEF(IEnvironment, __uuidof(IEnvironment));
_COM_SMARTPTR_TYPEDEF(ITeeCommanderEvents, __uuidof(ITeeCommanderEvents));
_COM_SMARTPTR_TYPEDEF(ITeeListBoxEvents, __uuidof(ITeeListBoxEvents));
_COM_SMARTPTR_TYPEDEF(ITeePoint2D, __uuidof(ITeePoint2D));
_COM_SMARTPTR_TYPEDEF(ICircledSeries, __uuidof(ICircledSeries));
_COM_SMARTPTR_TYPEDEF(ISeriesMarkPosition, __uuidof(ISeriesMarkPosition));
_COM_SMARTPTR_TYPEDEF(ISeriesMarksPositions, __uuidof(ISeriesMarksPositions));
_COM_SMARTPTR_TYPEDEF(ITeePoint3D, __uuidof(ITeePoint3D));
_COM_SMARTPTR_TYPEDEF(ITeeEditorShowPages, __uuidof(ITeeEditorShowPages));
_COM_SMARTPTR_TYPEDEF(ITeeEditorOptions, __uuidof(ITeeEditorOptions));
_COM_SMARTPTR_TYPEDEF(ITeePreviewerOptions, __uuidof(ITeePreviewerOptions));
_COM_SMARTPTR_TYPEDEF(ICustomToolSeries, __uuidof(ICustomToolSeries));
_COM_SMARTPTR_TYPEDEF(IDragMarksTool, __uuidof(IDragMarksTool));
_COM_SMARTPTR_TYPEDEF(ICustomToolAxis, __uuidof(ICustomToolAxis));
_COM_SMARTPTR_TYPEDEF(IBaseHighLowSeries, __uuidof(IBaseHighLowSeries));
_COM_SMARTPTR_TYPEDEF(ITeeShadow, __uuidof(ITeeShadow));
_COM_SMARTPTR_TYPEDEF(ITeePreviewPanelEvents, __uuidof(ITeePreviewPanelEvents));
_COM_SMARTPTR_TYPEDEF(IChartGridEvents, __uuidof(IChartGridEvents));
_COM_SMARTPTR_TYPEDEF(IRSIFunction, __uuidof(IRSIFunction));
_COM_SMARTPTR_TYPEDEF(IPyramidSeries, __uuidof(IPyramidSeries));
_COM_SMARTPTR_TYPEDEF(ITeePanelsList, __uuidof(ITeePanelsList));
_COM_SMARTPTR_TYPEDEF(IExportFormat, __uuidof(IExportFormat));
_COM_SMARTPTR_TYPEDEF(IJPEGExport, __uuidof(IJPEGExport));
_COM_SMARTPTR_TYPEDEF(IPNGExport, __uuidof(IPNGExport));
_COM_SMARTPTR_TYPEDEF(IGIFExport, __uuidof(IGIFExport));
_COM_SMARTPTR_TYPEDEF(IPCXExport, __uuidof(IPCXExport));
_COM_SMARTPTR_TYPEDEF(IMetafileExport, __uuidof(IMetafileExport));
_COM_SMARTPTR_TYPEDEF(IBMPExport, __uuidof(IBMPExport));
_COM_SMARTPTR_TYPEDEF(IMarksTipTool, __uuidof(IMarksTipTool));
_COM_SMARTPTR_TYPEDEF(IMomentumDivFunction, __uuidof(IMomentumDivFunction));
_COM_SMARTPTR_TYPEDEF(IExpTrendFunction, __uuidof(IExpTrendFunction));
_COM_SMARTPTR_TYPEDEF(IExpMovAvgFunction, __uuidof(IExpMovAvgFunction));
_COM_SMARTPTR_TYPEDEF(IRMSFunction, __uuidof(IRMSFunction));
_COM_SMARTPTR_TYPEDEF(IStochasticFunction, __uuidof(IStochasticFunction));
_COM_SMARTPTR_TYPEDEF(INativeExport, __uuidof(INativeExport));
_COM_SMARTPTR_TYPEDEF(IDataExport, __uuidof(IDataExport));
_COM_SMARTPTR_TYPEDEF(IXMLExport, __uuidof(IXMLExport));
_COM_SMARTPTR_TYPEDEF(IXLSExport, __uuidof(IXLSExport));
_COM_SMARTPTR_TYPEDEF(IHTMLExport, __uuidof(IHTMLExport));
_COM_SMARTPTR_TYPEDEF(ITextExport, __uuidof(ITextExport));
_COM_SMARTPTR_TYPEDEF(ISeriesTextField, __uuidof(ISeriesTextField));
_COM_SMARTPTR_TYPEDEF(ISeriesTextFields, __uuidof(ISeriesTextFields));
_COM_SMARTPTR_TYPEDEF(IValueLists, __uuidof(IValueLists));
_COM_SMARTPTR_TYPEDEF(IChartGridRows, __uuidof(IChartGridRows));
_COM_SMARTPTR_TYPEDEF(IChartGridCols, __uuidof(IChartGridCols));
_COM_SMARTPTR_TYPEDEF(ISmoothPoints, __uuidof(ISmoothPoints));
_COM_SMARTPTR_TYPEDEF(ILevelSegment, __uuidof(ILevelSegment));
_COM_SMARTPTR_TYPEDEF(IGridTransposeTool, __uuidof(IGridTransposeTool));
_COM_SMARTPTR_TYPEDEF(ISmoothingFunction, __uuidof(ISmoothingFunction));
_COM_SMARTPTR_TYPEDEF(ICustomFunction, __uuidof(ICustomFunction));
_COM_SMARTPTR_TYPEDEF(ICompressFunction, __uuidof(ICompressFunction));
_COM_SMARTPTR_TYPEDEF(ICrossPointsFunction, __uuidof(ICrossPointsFunction));
_COM_SMARTPTR_TYPEDEF(ICLVFunction, __uuidof(ICLVFunction));
_COM_SMARTPTR_TYPEDEF(IOBVFunction, __uuidof(IOBVFunction));
_COM_SMARTPTR_TYPEDEF(ICCIFunction, __uuidof(ICCIFunction));
_COM_SMARTPTR_TYPEDEF(IPVOFunction, __uuidof(IPVOFunction));
_COM_SMARTPTR_TYPEDEF(IPerformanceFunction, __uuidof(IPerformanceFunction));
_COM_SMARTPTR_TYPEDEF(IPDFExport, __uuidof(IPDFExport));
_COM_SMARTPTR_TYPEDEF(IEPSExport, __uuidof(IEPSExport));
_COM_SMARTPTR_TYPEDEF(ITeeRect, __uuidof(ITeeRect));
_COM_SMARTPTR_TYPEDEF(IDragPointTool, __uuidof(IDragPointTool));
_COM_SMARTPTR_TYPEDEF(ISVGExport, __uuidof(ISVGExport));
_COM_SMARTPTR_TYPEDEF(ILightTool, __uuidof(ILightTool));
_COM_SMARTPTR_TYPEDEF(ISurfaceNearestTool, __uuidof(ISurfaceNearestTool));
_COM_SMARTPTR_TYPEDEF(IAxisScrollTool, __uuidof(IAxisScrollTool));
_COM_SMARTPTR_TYPEDEF(ICustomSortedFunction, __uuidof(ICustomSortedFunction));
_COM_SMARTPTR_TYPEDEF(IModeFunction, __uuidof(IModeFunction));
_COM_SMARTPTR_TYPEDEF(IMedianFunction, __uuidof(IMedianFunction));
_COM_SMARTPTR_TYPEDEF(ICorrelationFunction, __uuidof(ICorrelationFunction));
_COM_SMARTPTR_TYPEDEF(IVarianceFunction, __uuidof(IVarianceFunction));
_COM_SMARTPTR_TYPEDEF(IPerimeterFunction, __uuidof(IPerimeterFunction));
_COM_SMARTPTR_TYPEDEF(IDownSamplingFunction, __uuidof(IDownSamplingFunction));
_COM_SMARTPTR_TYPEDEF(ITeeCommanderButton, __uuidof(ITeeCommanderButton));
_COM_SMARTPTR_TYPEDEF(IPointArray, __uuidof(IPointArray));
_COM_SMARTPTR_TYPEDEF(ILegendItem, __uuidof(ILegendItem));
_COM_SMARTPTR_TYPEDEF(ILegendItems, __uuidof(ILegendItems));
_COM_SMARTPTR_TYPEDEF(ISeriesStatsTool, __uuidof(ISeriesStatsTool));
_COM_SMARTPTR_TYPEDEF(IVideoTool, __uuidof(IVideoTool));
_COM_SMARTPTR_TYPEDEF(IFilterRegion, __uuidof(IFilterRegion));
_COM_SMARTPTR_TYPEDEF(ITransposeSeriesTool, __uuidof(ITransposeSeriesTool));
_COM_SMARTPTR_TYPEDEF(ISubsetTeeFunction, __uuidof(ISubsetTeeFunction));
_COM_SMARTPTR_TYPEDEF(IHistogramFunction, __uuidof(IHistogramFunction));
_COM_SMARTPTR_TYPEDEF(ISARFunction, __uuidof(ISARFunction));
_COM_SMARTPTR_TYPEDEF(IConvolveFilter, __uuidof(IConvolveFilter));
_COM_SMARTPTR_TYPEDEF(IBlurFilter, __uuidof(IBlurFilter));
_COM_SMARTPTR_TYPEDEF(IResizeFilter, __uuidof(IResizeFilter));
_COM_SMARTPTR_TYPEDEF(ICropFilter, __uuidof(ICropFilter));
_COM_SMARTPTR_TYPEDEF(IInvertFilter, __uuidof(IInvertFilter));
_COM_SMARTPTR_TYPEDEF(IGrayScaleFilter, __uuidof(IGrayScaleFilter));
_COM_SMARTPTR_TYPEDEF(IFlipFilter, __uuidof(IFlipFilter));
_COM_SMARTPTR_TYPEDEF(IReverseFilter, __uuidof(IReverseFilter));
_COM_SMARTPTR_TYPEDEF(IAmountFilter, __uuidof(IAmountFilter));
_COM_SMARTPTR_TYPEDEF(IMosaicFilter, __uuidof(IMosaicFilter));
_COM_SMARTPTR_TYPEDEF(IBrightnessFilter, __uuidof(IBrightnessFilter));
_COM_SMARTPTR_TYPEDEF(IContrastFilter, __uuidof(IContrastFilter));
_COM_SMARTPTR_TYPEDEF(IColorFilter, __uuidof(IColorFilter));
_COM_SMARTPTR_TYPEDEF(IHueLumSatFilter, __uuidof(IHueLumSatFilter));
_COM_SMARTPTR_TYPEDEF(ISharpenFilter, __uuidof(ISharpenFilter));
_COM_SMARTPTR_TYPEDEF(IEmbossFilter, __uuidof(IEmbossFilter));
_COM_SMARTPTR_TYPEDEF(ISoftenFilter, __uuidof(ISoftenFilter));
_COM_SMARTPTR_TYPEDEF(IGammaCorrectionFilter, __uuidof(IGammaCorrectionFilter));
_COM_SMARTPTR_TYPEDEF(IRotateFilter, __uuidof(IRotateFilter));
_COM_SMARTPTR_TYPEDEF(IMirrorFilter, __uuidof(IMirrorFilter));
_COM_SMARTPTR_TYPEDEF(ITileFilter, __uuidof(ITileFilter));
_COM_SMARTPTR_TYPEDEF(IBevelFilter, __uuidof(IBevelFilter));
_COM_SMARTPTR_TYPEDEF(IZoomFilter, __uuidof(IZoomFilter));
_COM_SMARTPTR_TYPEDEF(ITeeFilter, __uuidof(ITeeFilter));
_COM_SMARTPTR_TYPEDEF(IFilterItems, __uuidof(IFilterItems));
_COM_SMARTPTR_TYPEDEF(IGLLight, __uuidof(IGLLight));
_COM_SMARTPTR_TYPEDEF(IGLPosition, __uuidof(IGLPosition));
_COM_SMARTPTR_TYPEDEF(IGLLightSource, __uuidof(IGLLightSource));
_COM_SMARTPTR_TYPEDEF(ITeeOpenGL, __uuidof(ITeeOpenGL));
_COM_SMARTPTR_TYPEDEF(IAspect, __uuidof(IAspect));
_COM_SMARTPTR_TYPEDEF(IAxisGridPen, __uuidof(IAxisGridPen));
_COM_SMARTPTR_TYPEDEF(IClipSeriesTool, __uuidof(IClipSeriesTool));
_COM_SMARTPTR_TYPEDEF(IPen, __uuidof(IPen));
_COM_SMARTPTR_TYPEDEF(ICanvas, __uuidof(ICanvas));
_COM_SMARTPTR_TYPEDEF(IZoom, __uuidof(IZoom));
_COM_SMARTPTR_TYPEDEF(ICustom3DSeries, __uuidof(ICustom3DSeries));
_COM_SMARTPTR_TYPEDEF(IVolumeSeries, __uuidof(IVolumeSeries));
_COM_SMARTPTR_TYPEDEF(ICustom3DPaletteSeries, __uuidof(ICustom3DPaletteSeries));
_COM_SMARTPTR_TYPEDEF(ICustom3DGridSeries, __uuidof(ICustom3DGridSeries));
_COM_SMARTPTR_TYPEDEF(INearestTool, __uuidof(INearestTool));
_COM_SMARTPTR_TYPEDEF(IColorLineTool, __uuidof(IColorLineTool));
_COM_SMARTPTR_TYPEDEF(IContourLevel, __uuidof(IContourLevel));
_COM_SMARTPTR_TYPEDEF(IContourLevels, __uuidof(IContourLevels));
_COM_SMARTPTR_TYPEDEF(ITriSurfaceSeries, __uuidof(ITriSurfaceSeries));
_COM_SMARTPTR_TYPEDEF(IHistogramSeries, __uuidof(IHistogramSeries));
_COM_SMARTPTR_TYPEDEF(ICursorTool, __uuidof(ICursorTool));
_COM_SMARTPTR_TYPEDEF(IDrawLine, __uuidof(IDrawLine));
_COM_SMARTPTR_TYPEDEF(IDrawLineList, __uuidof(IDrawLineList));
_COM_SMARTPTR_TYPEDEF(IDrawLineTool, __uuidof(IDrawLineTool));
_COM_SMARTPTR_TYPEDEF(IAxisArrowTool, __uuidof(IAxisArrowTool));
_COM_SMARTPTR_TYPEDEF(IChartImageTool, __uuidof(IChartImageTool));
_COM_SMARTPTR_TYPEDEF(IFunnelSeries, __uuidof(IFunnelSeries));
_COM_SMARTPTR_TYPEDEF(IPieTool, __uuidof(IPieTool));
_COM_SMARTPTR_TYPEDEF(IVector3DSeries, __uuidof(IVector3DSeries));
_COM_SMARTPTR_TYPEDEF(ITowerSeries, __uuidof(ITowerSeries));
_COM_SMARTPTR_TYPEDEF(IHorizHistogramSeries, __uuidof(IHorizHistogramSeries));
_COM_SMARTPTR_TYPEDEF(ISelectorTool, __uuidof(ISelectorTool));
_COM_SMARTPTR_TYPEDEF(ISurfaceSides, __uuidof(ISurfaceSides));
_COM_SMARTPTR_TYPEDEF(IChartAxisPen, __uuidof(IChartAxisPen));
_COM_SMARTPTR_TYPEDEF(ITeeListBoxSection, __uuidof(ITeeListBoxSection));
_COM_SMARTPTR_TYPEDEF(IFaderTool, __uuidof(IFaderTool));
_COM_SMARTPTR_TYPEDEF(IChartHiddenPen, __uuidof(IChartHiddenPen));
_COM_SMARTPTR_TYPEDEF(ISurfaceSeries, __uuidof(ISurfaceSeries));
_COM_SMARTPTR_TYPEDEF(IWaterfallSeries, __uuidof(IWaterfallSeries));
_COM_SMARTPTR_TYPEDEF(IIsoSurfaceSeries, __uuidof(IIsoSurfaceSeries));
_COM_SMARTPTR_TYPEDEF(IFloatXYZ, __uuidof(IFloatXYZ));
_COM_SMARTPTR_TYPEDEF(IColorGridSeries, __uuidof(IColorGridSeries));
_COM_SMARTPTR_TYPEDEF(IRotateTool, __uuidof(IRotateTool));
_COM_SMARTPTR_TYPEDEF(ITeePicture, __uuidof(ITeePicture));
_COM_SMARTPTR_TYPEDEF(IVideoPlayerTool, __uuidof(IVideoPlayerTool));
_COM_SMARTPTR_TYPEDEF(IAntiAliasTool, __uuidof(IAntiAliasTool));
_COM_SMARTPTR_TYPEDEF(IFrameTool, __uuidof(IFrameTool));
_COM_SMARTPTR_TYPEDEF(IBackImage, __uuidof(IBackImage));
_COM_SMARTPTR_TYPEDEF(IPrinterSettings, __uuidof(IPrinterSettings));
_COM_SMARTPTR_TYPEDEF(IPrinter, __uuidof(IPrinter));
_COM_SMARTPTR_TYPEDEF(IHighLowSeries, __uuidof(IHighLowSeries));
_COM_SMARTPTR_TYPEDEF(ITeeRectArray, __uuidof(ITeeRectArray));
_COM_SMARTPTR_TYPEDEF(ISeriesAnimationTool, __uuidof(ISeriesAnimationTool));
_COM_SMARTPTR_TYPEDEF(ISpacing, __uuidof(ISpacing));
_COM_SMARTPTR_TYPEDEF(IContourMarks, __uuidof(IContourMarks));
_COM_SMARTPTR_TYPEDEF(IRenkoSeries, __uuidof(IRenkoSeries));
_COM_SMARTPTR_TYPEDEF(IFastLineSeries, __uuidof(IFastLineSeries));
_COM_SMARTPTR_TYPEDEF(IPieMarks, __uuidof(IPieMarks));
_COM_SMARTPTR_TYPEDEF(IXAMLExport, __uuidof(IXAMLExport));
_COM_SMARTPTR_TYPEDEF(IExport, __uuidof(IExport));
_COM_SMARTPTR_TYPEDEF(IFibonacciItem, __uuidof(IFibonacciItem));
_COM_SMARTPTR_TYPEDEF(IFibonacciLevels, __uuidof(IFibonacciLevels));
_COM_SMARTPTR_TYPEDEF(IMargins, __uuidof(IMargins));
_COM_SMARTPTR_TYPEDEF(IFullScreenTool, __uuidof(IFullScreenTool));
_COM_SMARTPTR_TYPEDEF(ITChart, __uuidof(ITChart));
_COM_SMARTPTR_TYPEDEF(ITeeLinked, __uuidof(ITeeLinked));
_COM_SMARTPTR_TYPEDEF(ITeeEditor, __uuidof(ITeeEditor));
_COM_SMARTPTR_TYPEDEF(ITeePreviewer, __uuidof(ITeePreviewer));
_COM_SMARTPTR_TYPEDEF(IChartGrid, __uuidof(IChartGrid));
_COM_SMARTPTR_TYPEDEF(IChartGridNavigator, __uuidof(IChartGridNavigator));
_COM_SMARTPTR_TYPEDEF(IChartPageNavigator, __uuidof(IChartPageNavigator));
_COM_SMARTPTR_TYPEDEF(IChartEditorPanel, __uuidof(IChartEditorPanel));
_COM_SMARTPTR_TYPEDEF(ISeriesSource, __uuidof(ISeriesSource));
_COM_SMARTPTR_TYPEDEF(ISeriesSourceFile, __uuidof(ISeriesSourceFile));
_COM_SMARTPTR_TYPEDEF(ISeriesXMLSource, __uuidof(ISeriesXMLSource));
_COM_SMARTPTR_TYPEDEF(ISeriesTextSource, __uuidof(ISeriesTextSource));
_COM_SMARTPTR_TYPEDEF(ICrossTabSource, __uuidof(ICrossTabSource));
_COM_SMARTPTR_TYPEDEF(IAxes, __uuidof(IAxes));
_COM_SMARTPTR_TYPEDEF(IAxis, __uuidof(IAxis));
_COM_SMARTPTR_TYPEDEF(IAxisLabels, __uuidof(IAxisLabels));
_COM_SMARTPTR_TYPEDEF(IAxisTitle, __uuidof(IAxisTitle));
_COM_SMARTPTR_TYPEDEF(ITeeCustomShape, __uuidof(ITeeCustomShape));
_COM_SMARTPTR_TYPEDEF(ITeeShapePosition, __uuidof(ITeeShapePosition));
_COM_SMARTPTR_TYPEDEF(ITitles, __uuidof(ITitles));
_COM_SMARTPTR_TYPEDEF(ICalendarCell, __uuidof(ICalendarCell));
_COM_SMARTPTR_TYPEDEF(ICalendarCellUpper, __uuidof(ICalendarCellUpper));
_COM_SMARTPTR_TYPEDEF(ICalendarSeries, __uuidof(ICalendarSeries));
_COM_SMARTPTR_TYPEDEF(ITeeShapePanel, __uuidof(ITeeShapePanel));
_COM_SMARTPTR_TYPEDEF(IAxisLabelsItem, __uuidof(IAxisLabelsItem));
_COM_SMARTPTR_TYPEDEF(IMarksItem, __uuidof(IMarksItem));
_COM_SMARTPTR_TYPEDEF(IOrgShape, __uuidof(IOrgShape));
_COM_SMARTPTR_TYPEDEF(IOrgItem, __uuidof(IOrgItem));
_COM_SMARTPTR_TYPEDEF(IOrgItemCollection, __uuidof(IOrgItemCollection));
_COM_SMARTPTR_TYPEDEF(IOrgSeries, __uuidof(IOrgSeries));
_COM_SMARTPTR_TYPEDEF(ITextShape, __uuidof(ITextShape));
_COM_SMARTPTR_TYPEDEF(IWall, __uuidof(IWall));
_COM_SMARTPTR_TYPEDEF(IWalls, __uuidof(IWalls));
_COM_SMARTPTR_TYPEDEF(IGradient, __uuidof(IGradient));
_COM_SMARTPTR_TYPEDEF(IPanel, __uuidof(IPanel));
_COM_SMARTPTR_TYPEDEF(IPointer, __uuidof(IPointer));
_COM_SMARTPTR_TYPEDEF(ICustomSeries, __uuidof(ICustomSeries));
_COM_SMARTPTR_TYPEDEF(IAreaSeries, __uuidof(IAreaSeries));
_COM_SMARTPTR_TYPEDEF(IPointSeries, __uuidof(IPointSeries));
_COM_SMARTPTR_TYPEDEF(ILineSeries, __uuidof(ILineSeries));
_COM_SMARTPTR_TYPEDEF(IBubbleSeries, __uuidof(IBubbleSeries));
_COM_SMARTPTR_TYPEDEF(IGanttSeries, __uuidof(IGanttSeries));
_COM_SMARTPTR_TYPEDEF(IShapeSeries, __uuidof(IShapeSeries));
_COM_SMARTPTR_TYPEDEF(IArrowSeries, __uuidof(IArrowSeries));
_COM_SMARTPTR_TYPEDEF(ICustomBarSeries, __uuidof(ICustomBarSeries));
_COM_SMARTPTR_TYPEDEF(IBarSeries, __uuidof(IBarSeries));
_COM_SMARTPTR_TYPEDEF(IHorizBarSeries, __uuidof(IHorizBarSeries));
_COM_SMARTPTR_TYPEDEF(ICandleSeries, __uuidof(ICandleSeries));
_COM_SMARTPTR_TYPEDEF(ICustomPolarSeries, __uuidof(ICustomPolarSeries));
_COM_SMARTPTR_TYPEDEF(IErrorBarSeries, __uuidof(IErrorBarSeries));
_COM_SMARTPTR_TYPEDEF(IBezierSeries, __uuidof(IBezierSeries));
_COM_SMARTPTR_TYPEDEF(IRadarSeries, __uuidof(IRadarSeries));
_COM_SMARTPTR_TYPEDEF(IErrorSeries, __uuidof(IErrorSeries));
_COM_SMARTPTR_TYPEDEF(IPoint3DSeries, __uuidof(IPoint3DSeries));
_COM_SMARTPTR_TYPEDEF(IPolarSeries, __uuidof(IPolarSeries));
_COM_SMARTPTR_TYPEDEF(ITeeCommander, __uuidof(ITeeCommander));
_COM_SMARTPTR_TYPEDEF(IClockSeries, __uuidof(IClockSeries));
_COM_SMARTPTR_TYPEDEF(IWindRoseSeries, __uuidof(IWindRoseSeries));
_COM_SMARTPTR_TYPEDEF(IBar3DSeries, __uuidof(IBar3DSeries));
_COM_SMARTPTR_TYPEDEF(IImageBarSeries, __uuidof(IImageBarSeries));
_COM_SMARTPTR_TYPEDEF(IColorBandTool, __uuidof(IColorBandTool));
_COM_SMARTPTR_TYPEDEF(IHorizLineSeries, __uuidof(IHorizLineSeries));
_COM_SMARTPTR_TYPEDEF(ILegendSymbol, __uuidof(ILegendSymbol));
_COM_SMARTPTR_TYPEDEF(ITeeFont, __uuidof(ITeeFont));
_COM_SMARTPTR_TYPEDEF(ITeePreviewPanel, __uuidof(ITeePreviewPanel));
_COM_SMARTPTR_TYPEDEF(ICustomBoxSeries, __uuidof(ICustomBoxSeries));
_COM_SMARTPTR_TYPEDEF(IHorizBoxPlotSeries, __uuidof(IHorizBoxPlotSeries));
_COM_SMARTPTR_TYPEDEF(IBarJoinSeries, __uuidof(IBarJoinSeries));
_COM_SMARTPTR_TYPEDEF(ISmithSeries, __uuidof(ISmithSeries));
_COM_SMARTPTR_TYPEDEF(IContourSeries, __uuidof(IContourSeries));
_COM_SMARTPTR_TYPEDEF(IBoxPlotSeries, __uuidof(IBoxPlotSeries));
_COM_SMARTPTR_TYPEDEF(IMapPolygon, __uuidof(IMapPolygon));
_COM_SMARTPTR_TYPEDEF(IMapPolygonList, __uuidof(IMapPolygonList));
_COM_SMARTPTR_TYPEDEF(IMapSeries, __uuidof(IMapSeries));
_COM_SMARTPTR_TYPEDEF(ICallout, __uuidof(ICallout));
_COM_SMARTPTR_TYPEDEF(IAnnotationCallout, __uuidof(IAnnotationCallout));
_COM_SMARTPTR_TYPEDEF(IAnnotationTool, __uuidof(IAnnotationTool));
_COM_SMARTPTR_TYPEDEF(IPageNumTool, __uuidof(IPageNumTool));
_COM_SMARTPTR_TYPEDEF(IMarksCallout, __uuidof(IMarksCallout));
_COM_SMARTPTR_TYPEDEF(IGanttTool, __uuidof(IGanttTool));
_COM_SMARTPTR_TYPEDEF(IHorizAreaSeries, __uuidof(IHorizAreaSeries));
_COM_SMARTPTR_TYPEDEF(IPointFigureSeries, __uuidof(IPointFigureSeries));
_COM_SMARTPTR_TYPEDEF(IGaugeSeries, __uuidof(IGaugeSeries));
_COM_SMARTPTR_TYPEDEF(IGridBandBrush, __uuidof(IGridBandBrush));
_COM_SMARTPTR_TYPEDEF(IGridBandTool, __uuidof(IGridBandTool));
_COM_SMARTPTR_TYPEDEF(ITeeShape, __uuidof(ITeeShape));
_COM_SMARTPTR_TYPEDEF(ILegendTitle, __uuidof(ILegendTitle));
_COM_SMARTPTR_TYPEDEF(ILegend, __uuidof(ILegend));
_COM_SMARTPTR_TYPEDEF(IPieOtherSlice, __uuidof(IPieOtherSlice));
_COM_SMARTPTR_TYPEDEF(IPieSeries, __uuidof(IPieSeries));
_COM_SMARTPTR_TYPEDEF(IDonutSeries, __uuidof(IDonutSeries));
_COM_SMARTPTR_TYPEDEF(IExtraLegendTool, __uuidof(IExtraLegendTool));
_COM_SMARTPTR_TYPEDEF(IMarksSymbol, __uuidof(IMarksSymbol));
_COM_SMARTPTR_TYPEDEF(IMarks, __uuidof(IMarks));
_COM_SMARTPTR_TYPEDEF(IPolarBarSeries, __uuidof(IPolarBarSeries));
_COM_SMARTPTR_TYPEDEF(IBubble3DSeries, __uuidof(IBubble3DSeries));
_COM_SMARTPTR_TYPEDEF(ISeriesBandTool, __uuidof(ISeriesBandTool));
_COM_SMARTPTR_TYPEDEF(IRectangleTool, __uuidof(IRectangleTool));
_COM_SMARTPTR_TYPEDEF(ITableLegend, __uuidof(ITableLegend));
_COM_SMARTPTR_TYPEDEF(IDataTableTool, __uuidof(IDataTableTool));
_COM_SMARTPTR_TYPEDEF(IVolumePipeSeries, __uuidof(IVolumePipeSeries));
_COM_SMARTPTR_TYPEDEF(IDarvasSeries, __uuidof(IDarvasSeries));
_COM_SMARTPTR_TYPEDEF(ISeriesRegionTool, __uuidof(ISeriesRegionTool));
_COM_SMARTPTR_TYPEDEF(ISubGradient, __uuidof(ISubGradient));
_COM_SMARTPTR_TYPEDEF(IMagnifyTool, __uuidof(IMagnifyTool));
_COM_SMARTPTR_TYPEDEF(ILegendPaletteTool, __uuidof(ILegendPaletteTool));
_COM_SMARTPTR_TYPEDEF(IBannerTool, __uuidof(IBannerTool));
_COM_SMARTPTR_TYPEDEF(IText3DTool, __uuidof(IText3DTool));
_COM_SMARTPTR_TYPEDEF(IScrollBarThumb, __uuidof(IScrollBarThumb));
_COM_SMARTPTR_TYPEDEF(ILegendScrollBarTool, __uuidof(ILegendScrollBarTool));
_COM_SMARTPTR_TYPEDEF(IHighLowLineSeries, __uuidof(IHighLowLineSeries));
_COM_SMARTPTR_TYPEDEF(IPolarGridSeries, __uuidof(IPolarGridSeries));
_COM_SMARTPTR_TYPEDEF(ICustomImagePointSeries, __uuidof(ICustomImagePointSeries));
_COM_SMARTPTR_TYPEDEF(IDeltaPointSeries, __uuidof(IDeltaPointSeries));
_COM_SMARTPTR_TYPEDEF(IImagePointSeries, __uuidof(IImagePointSeries));
_COM_SMARTPTR_TYPEDEF(IWorldSeries, __uuidof(IWorldSeries));
_COM_SMARTPTR_TYPEDEF(ITagCloudSeries, __uuidof(ITagCloudSeries));
_COM_SMARTPTR_TYPEDEF(IKagiSeries, __uuidof(IKagiSeries));
_COM_SMARTPTR_TYPEDEF(ILinkTool, __uuidof(ILinkTool));
_COM_SMARTPTR_TYPEDEF(IFrameBrush, __uuidof(IFrameBrush));
_COM_SMARTPTR_TYPEDEF(IFramedBorder, __uuidof(IFramedBorder));
_COM_SMARTPTR_TYPEDEF(ICustomGauge, __uuidof(ICustomGauge));
_COM_SMARTPTR_TYPEDEF(IGaugeSeriesPointer, __uuidof(IGaugeSeriesPointer));
_COM_SMARTPTR_TYPEDEF(IGaugePointerRange, __uuidof(IGaugePointerRange));
_COM_SMARTPTR_TYPEDEF(ICustomGaugeMinMax, __uuidof(ICustomGaugeMinMax));
_COM_SMARTPTR_TYPEDEF(ILinearGauge, __uuidof(ILinearGauge));
_COM_SMARTPTR_TYPEDEF(ICircularGauge, __uuidof(ICircularGauge));
_COM_SMARTPTR_TYPEDEF(IGaugeHand, __uuidof(IGaugeHand));
_COM_SMARTPTR_TYPEDEF(IFibonacciTool, __uuidof(IFibonacciTool));
_COM_SMARTPTR_TYPEDEF(ITools, __uuidof(ITools));
_COM_SMARTPTR_TYPEDEF(IToolList, __uuidof(IToolList));
_COM_SMARTPTR_TYPEDEF(INumericMarker, __uuidof(INumericMarker));
_COM_SMARTPTR_TYPEDEF(INumericGauge, __uuidof(INumericGauge));
_COM_SMARTPTR_TYPEDEF(ISeries, __uuidof(ISeries));
_COM_SMARTPTR_TYPEDEF(IMACDFunction, __uuidof(IMACDFunction));
_COM_SMARTPTR_TYPEDEF(IBollingerFunction, __uuidof(IBollingerFunction));
_COM_SMARTPTR_TYPEDEF(IADXFunction, __uuidof(IADXFunction));
_COM_SMARTPTR_TYPEDEF(ITeeFunction, __uuidof(ITeeFunction));
_COM_SMARTPTR_TYPEDEF(ICustomSeriesList, __uuidof(ICustomSeriesList));
_COM_SMARTPTR_TYPEDEF(ISeriesGroup, __uuidof(ISeriesGroup));
_COM_SMARTPTR_TYPEDEF(ITeeListBox, __uuidof(ITeeListBox));
_COM_SMARTPTR_TYPEDEF(ISeriesGroups, __uuidof(ISeriesGroups));
_COM_SMARTPTR_TYPEDEF(ISeriesList, __uuidof(ISeriesList));

//
// Type library items
//

enum __declspec(uuid("76b626c7-5057-497a-bce8-5bdaeb37d8c9"))
EPanelBevel
{
    bvNone = 0,
    bvLowered = 1,
    bvRaised = 2
};

enum __declspec(uuid("47a5a944-9f96-4287-b271-f219774f0be6"))
EBorderStyle
{
    bsNone = 0,
    bsSingle = 1
};

enum __declspec(uuid("1c2614d6-8e92-44df-ab86-210c37e88543"))
EDragMode
{
    dmManual = 0,
    dmAutomatic = 1
};

enum __declspec(uuid("03762bab-be57-4fec-8973-94692460b24a"))
EChartPenStyle
{
    psSolid = 0,
    psDash = 1,
    psDot = 2,
    psDashDot = 3,
    psDashDotDot = 4,
    psClear = 5,
    psInsideFrame = 6,
    psSmallDots = 7
};

enum __declspec(uuid("55106078-4524-4ebf-b192-a155622abc6b"))
ELegendStyle
{
    lsAuto = 0,
    lsSeries = 1,
    lsValues = 2,
    lsLastValues = 3,
    lsSeriesGroups = 4
};

enum __declspec(uuid("785460b0-05a0-4167-b3f7-e1bb19959d3a"))
EMouseButton
{
    mbLeft = 1,
    mbRight = 2,
    mbMiddle = 4
};

enum __declspec(uuid("6229c070-3ab4-4606-b610-4d131d456a47"))
EDragState
{
    dsDragEnter = 0,
    dsDragLeave = 1,
    dsDragMove = 2
};

enum __declspec(uuid("9f8c32f6-391d-41ea-8026-e2e4685f966f"))
EGradientDirection
{
    gdTopBottom = 0,
    gdBottomTop = 1,
    gdLeftRight = 2,
    gdRightLeft = 3,
    gdFromCenter = 4,
    gdFromTopLeft = 5,
    gdFromBottomLeft = 6,
    gdRadial = 7,
    gdDiagonalUp = 8,
    gdDiagonalDown = 9
};

enum __declspec(uuid("24594b6b-59b3-4c2d-b912-bf25cd007510"))
EAxisLabelStyle
{
    talAuto = 0,
    talNone = 1,
    talValue = 2,
    talMark = 3,
    talText = 4
};

enum __declspec(uuid("0dd8062d-a4f0-4ef9-8f7f-930504ba0f40"))
EHorizontalAxis
{
    aTopAxis = 0,
    aBottomAxis = 1,
    aBothHorizAxis = 2,
    aCustomHorizAxis = 3
};

enum __declspec(uuid("59092a82-883e-4cab-bf2f-c0282e6d9a93"))
EBrushStyle
{
    bsSolid = 0,
    bsClear = 1,
    bsHorizontal = 2,
    bsVertical = 3,
    bsFDiagonal = 4,
    bsBDiagonal = 5,
    bsCross = 6,
    bsDiagCross = 7,
    bsFill80 = 8,
    bsFill60 = 9,
    bsFill40 = 10,
    bsFill20 = 11,
    bsFill10 = 12,
    bsZigZag = 13,
    bsVertSmall = 14,
    bsHorizSmall = 15,
    bsDiagSmall = 16,
    bsBackDiagSmall = 17,
    bsCrossSmall = 18,
    bsBackCrossSmall = 19
};

enum __declspec(uuid("04549692-5cba-4fc0-977a-f6e6b219556c"))
EMultiArea
{
    maNone = 0,
    maStacked = 1,
    maStacked100 = 2
};

enum __declspec(uuid("855c1e9d-ed4a-41d1-97b0-8b5065ed90a4"))
EMultiBar
{
    mbNone = 0,
    mbSide = 1,
    mbStacked = 2,
    mbStacked100 = 3,
    mbSideAll = 4,
    mbSelfStack = 5
};

enum __declspec(uuid("9ea52f35-b4de-4165-aa49-bc5feb457c45"))
EMarkStyle
{
    smsValue = 0,
    smsPercent = 1,
    smsLabel = 2,
    smsLabelPercent = 3,
    smsLabelValue = 4,
    smsLegend = 5,
    smsPercentTotal = 6,
    smsLabelPercentTotal = 7,
    smsXValue = 8,
    smsXY = 9,
    smsSeriesTitle = 10,
    smsPointIndex = 11,
    smsPercentRelative = 12
};

enum __declspec(uuid("058af602-f6dc-4900-94aa-f85f7288ce9c"))
EBarStyle
{
    bsRectangle = 0,
    bsPyramid = 1,
    bsInvPyramid = 2,
    bsCilinder = 3,
    bsEllipse = 4,
    bsArrow = 5,
    bsRectGradient = 6,
    bsCone = 7,
    bsBevel = 8,
    bsSlantCube = 9,
    bsDiamond = 10,
    bsInvArrow = 11,
    bsInvCone = 12
};

enum __declspec(uuid("85f39226-c1fb-49bd-904a-f5140a222c8f"))
EChartScroll
{
    pmNone = 0,
    pmHorizontal = 1,
    pmVertical = 2,
    pmBoth = 3
};

enum __declspec(uuid("45117f96-5a4a-43b6-b8f0-9005c61fc99c"))
ELegendAlignment
{
    laLeft = 0,
    laRight = 1,
    laTop = 2,
    laBottom = 3
};

enum __declspec(uuid("0610beca-39a5-45a6-a8f4-ee71a86673a6"))
ELegendTextStyle
{
    ltsPlain = 0,
    ltsLeftValue = 1,
    ltsRightValue = 2,
    ltsLeftPercent = 3,
    ltsRightPercent = 4,
    ltsXValue = 5,
    ltsValue = 6,
    ltsPercent = 7,
    ltsXAndValue = 8,
    ltsXAndPercent = 9
};

enum __declspec(uuid("35cb0dd5-0ada-4c5e-979a-cebcbe9c82a7"))
EAxisType
{
    atLeft = 0,
    atTop = 1,
    atRight = 2,
    atBottom = 3,
    atDepth = 4,
    atCustom = 5
};

enum __declspec(uuid("00875d1f-b38c-41c8-b93e-76a619f8c712"))
EDateTimeStep
{
    dtOneMicrosecond = 0,
    dtOneMillisecond = 1,
    dtOneSecond = 2,
    dtFiveSeconds = 3,
    dtTenSeconds = 4,
    dtFifteenSeconds = 5,
    dtThirtySeconds = 6,
    dtOneMinute = 7,
    dtFiveMinutes = 8,
    dtTenMinutes = 9,
    dtFifteenMinutes = 10,
    dtThirtyMinutes = 11,
    dtOneHour = 12,
    dtTwoHours = 13,
    dtSixHours = 14,
    dtTwelveHours = 15,
    dtOneDay = 16,
    dtTwoDays = 17,
    dtThreeDays = 18,
    dtOneWeek = 19,
    dtHalfMonth = 20,
    dtOneMonth = 21,
    dtTwoMonths = 22,
    dtThreeMonths = 23,
    dtFourMonths = 24,
    dtSixMonths = 25,
    dtOneYear = 26,
    dtNone = 27
};

enum __declspec(uuid("d97d3a82-1ec7-41aa-897a-16c6e4ed9798"))
EJPEGPerformance
{
    jpegBestQuality = 0,
    jpegBestSpeed = 1
};

enum __declspec(uuid("0989627a-3210-49ab-b87e-e76d80490d4f"))
EConstants
{
    clTeeColor = 536870912,
    clNone = 536870911
};

enum __declspec(uuid("5506b1cd-dfdb-480f-b4be-e0a6d067ab9d"))
EFunctionType
{
    tfCopy = 0,
    tfAdd = 1,
    tfSubtract = 2,
    tfMultiply = 3,
    tfDivide = 4,
    tfAverage = 5,
    tfHigh = 6,
    tfLow = 7,
    tfMovavg = 8,
    tfExpavg = 9,
    tfMomentum = 10,
    tfCurveFit = 11,
    tfRSI = 12,
    tfTrend = 13,
    tfStdDeviation = 14,
    tfCumulative = 15,
    tfCount = 16,
    tfExpTrend = 17,
    tfExpMovAvg = 18,
    tfMomentumDiv = 19,
    tfRMS = 20,
    tfMACD = 21,
    tfStochastic = 22,
    tfBollinger = 23,
    tfADX = 24,
    tfSmoothing = 25,
    tfCustom = 26,
    tfCompress = 27,
    tfCrossPoints = 28,
    tfCLV = 29,
    tfOBV = 30,
    tfCCI = 31,
    tfPVO = 32,
    tfPerformance = 33,
    tfMode = 34,
    tfMedian = 35,
    tfCorrelation = 36,
    tfVariance = 37,
    tfPerimeter = 38,
    tfDownSampleFun = 39,
    tfSubset = 40,
    tfHistogram = 41,
    tfSAR = 42
};

enum __declspec(uuid("6a4911fd-56d6-459b-94cb-2f52e42bb786"))
EShapeXYStyle
{
    xysPixels = 0,
    xysAxis = 1,
    xysAxisOrigin = 2
};

enum __declspec(uuid("626df2b8-1067-4a89-b937-442378d50494"))
ECandleStyle
{
    csCandleStick = 0,
    csCandleBar = 1,
    csOpenClose = 2,
    csLine = 3
};

enum __declspec(uuid("614640a3-6a12-45e7-aa6c-bc1772744b9f"))
EErrorWidthUnits
{
    ewuPercent = 0,
    ewuPixels = 1
};

enum __declspec(uuid("265bc9a1-d45e-4813-a3af-2d36b6aaa711"))
EValueListOrder
{
    loNone = 0,
    loAscending = 1,
    loDescending = 2
};

enum __declspec(uuid("ea8d7ca1-a4a7-4c73-a660-9d63fe03e225"))
EShapeStyle
{
    chasRectangle = 0,
    chasCircle = 1,
    chasVertLine = 2,
    chasHorizLine = 3,
    chasTriangle = 4,
    chasInvertTriangle = 5,
    chasLine = 6,
    chasDiamond = 7,
    chasCube = 8,
    chasCross = 9,
    chasDiagCross = 10,
    chasStar = 11,
    chasPyramid = 12,
    chasInvertPyramid = 13
};

enum __declspec(uuid("c96fee87-da1f-4ebd-ad30-7f98ddb48351"))
ESeriesClass
{
    scLine = 0,
    scBar = 1,
    scHorizBar = 2,
    scArea = 3,
    scPoint = 4,
    scPie = 5,
    scFastLine = 6,
    scShape = 7,
    scGantt = 8,
    scBubble = 9,
    scArrow = 10,
    scCandle = 11,
    scPolar = 12,
    scSurface = 13,
    scVolume = 14,
    scErrorBar = 15,
    scBezier = 16,
    scContour = 17,
    scError = 18,
    scPoint3D = 19,
    scRadar = 20,
    scClock = 21,
    scWindRose = 22,
    scBar3D = 23,
    scImageBar = 24,
    scDonut = 25,
    scTriSurface = 26,
    scBox = 27,
    scHorizBox = 28,
    scHistogram = 29,
    scColorGrid = 30,
    scBarJoin = 31,
    scHighLow = 32,
    scWaterfall = 33,
    scSmith = 34,
    scPyramid = 35,
    scMap = 36,
    scHorizLine = 37,
    scFunnel = 38,
    scCalendar = 39,
    scHorizArea = 40,
    scPointFigure = 41,
    scGauge = 42,
    scVector3D = 43,
    scTower = 44,
    scPolarBar = 45,
    scBubble3D = 46,
    scHorizHistogram = 47,
    scVolumePipe = 48,
    scIsoSurface = 49,
    scDarvas = 50,
    scHighLowLine = 51,
    scPolarGrid = 52,
    scDeltaPoint = 53,
    scImagePoint = 54,
    scOrganizational = 55,
    scWorld = 56,
    scTagCloud = 57,
    scKagi = 58,
    scRenko = 59,
    scNumericGauge = 60,
    scLinearGauge = 61,
    scCircularGauge = 62,
    scBigCandle = 63,
    scLinePoint = 64
};

enum __declspec(uuid("22365272-4c6f-4ab5-930b-4d61948a7216"))
EPrinterOrientation
{
    poPortrait = 0,
    poLandscape = 1
};

enum __declspec(uuid("dca7a027-bd71-4ef7-9d2c-7ca1521e3d8d"))
EPointerStyle
{
    psRectangle = 0,
    psCircle = 1,
    psTriangle = 2,
    psDownTriangle = 3,
    psCross = 4,
    psDiagCross = 5,
    psStar = 6,
    psDiamond = 7,
    psSmallDot = 8,
    psNothing = 9,
    psLeftTriangle = 10,
    psRightTriangle = 11,
    psHexagon = 12
};

enum __declspec(uuid("f36424bc-e89b-46aa-8821-e574a5851d58"))
ETypeFitting
{
    cfPolynomial = 0,
    cfLogarithmic = 1,
    cfExponential = 2
};

enum __declspec(uuid("e903b4d6-f03a-4ecd-b48d-e75b984b581f"))
EBackImageMode
{
    pbmStretch = 0,
    pbmTile = 1,
    pbmCenter = 2,
    pbmCustom = 3
};

enum __declspec(uuid("fc800fcb-3bfa-4e61-906f-63037d07d321"))
ETextAlignment
{
    aLeft = 0,
    aRight = 1,
    aCenter = 2
};

enum __declspec(uuid("62ae1ea8-281d-4535-a08c-90383e768ce3"))
EVerticalAxis
{
    aLeftAxis = 0,
    aRightAxis = 1,
    aBothVertAxis = 2,
    aCustomVertAxis = 3
};

enum __declspec(uuid("592fa4cc-b86a-4628-868b-4c96bfee3b37"))
EShiftState
{
    ssShift = 1,
    ssAlt = 2,
    ssCtrl = 4,
    ssNone = 0
};

enum __declspec(uuid("4b211d02-6d00-44c1-be53-d0d7008b21ea"))
ETitleAlignment
{
    taLeftJustify = 0,
    taRightJustify = 1,
    taCenter = 2
};

struct __declspec(uuid("8983725c-2d88-4ce9-994f-a4867c6fa9f0"))
ITChartEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT OnAfterDraw ( );
    HRESULT OnBeforeDrawSeries ( );
    HRESULT OnBeforeDrawAxes ( );
    HRESULT OnClick ( );
    HRESULT OnClickAxis (
        long Axis,
        enum EMouseButton Button,
        enum EShiftState Shift,
        long X,
        long Y );
    HRESULT OnClickBackground (
        enum EMouseButton Button,
        enum EShiftState Shift,
        long X,
        long Y );
    HRESULT OnClickLegend (
        enum EMouseButton Button,
        enum EShiftState Shift,
        long X,
        long Y );
    HRESULT OnClickSeries (
        long SeriesIndex,
        long ValueIndex,
        enum EMouseButton Button,
        enum EShiftState Shift,
        long X,
        long Y );
    HRESULT OnDblClick ( );
    HRESULT OnDragDrop (
        long X,
        long Y );
    HRESULT OnDragOver (
        long X,
        long Y,
        enum EDragState State,
        VARIANT_BOOL * Accept );
    HRESULT OnEndDrag (
        long X,
        long Y );
    HRESULT OnEnter ( );
    HRESULT OnExit ( );
    HRESULT OnGetAxisLabel (
        long Axis,
        long SeriesIndex,
        long ValueIndex,
        BSTR * LabelText );
    HRESULT OnGetLegendRect (
        long * Left,
        long * Top,
        long * Right,
        long * Bottom );
    HRESULT OnGetNextAxisLabel (
        long Axis,
        long LabelIndex,
        double * LabelValue,
        VARIANT_BOOL * MoreLabels );
    HRESULT OnMouseDown (
        enum EMouseButton Button,
        enum EShiftState Shift,
        long X,
        long Y );
    HRESULT OnMouseMove (
        enum EShiftState Shift,
        long X,
        long Y );
    HRESULT OnMouseUp (
        enum EMouseButton Button,
        enum EShiftState Shift,
        long X,
        long Y );
    HRESULT OnPageChange ( );
    HRESULT OnResize ( );
    HRESULT OnScroll ( );
    HRESULT OnStartDrag ( );
    HRESULT OnUndoZoom ( );
    HRESULT OnZoom ( );
    HRESULT OnAllowScroll (
        enum EAxisType Axis,
        double * AMin,
        double * AMax,
        VARIANT_BOOL * AllowScroll );
    HRESULT OnGetLegendPos (
        long ItemIndex,
        long * X,
        long * Y,
        long * XColor );
    HRESULT OnGetLegendText (
        long LegendStyle,
        long ValueIndex,
        BSTR * LegendText );
    HRESULT OnDatabaseRecord (
        long SeriesIndex,
        long Index,
        VARIANT_BOOL * StopRetrieve );
    HRESULT OnTimer ( );
    HRESULT OnGetSeriesMark (
        long SeriesIndex,
        long ValueIndex,
        BSTR * MarkText );
    HRESULT OnGetSeriesPointerStyle (
        long SeriesIndex,
        long ValueIndex,
        enum EPointerStyle * AStyle );
    HRESULT OnGetSeriesContourLevel (
        long SeriesIndex,
        long LevelIndex,
        double * LevelValue,
        OLE_COLOR * LevelColor );
    HRESULT OnBeforeDrawChart ( );
    HRESULT OnSeriesBeforeDrawValues (
        long SeriesIndex );
    HRESULT OnSeriesAfterDrawValues (
        long SeriesIndex );
    HRESULT OnMarkTipToolGetText (
        long Tool,
        BSTR * Text );
    HRESULT OnCursorToolChange (
        long Tool,
        long X,
        long Y,
        double XVal,
        double YVal,
        long Series,
        long ValueIndex );
    HRESULT OnDrawLineToolLineDrag ( );
    HRESULT OnDrawLineToolNewLine ( );
    HRESULT OnDrawLineToolDraggedLine ( );
    HRESULT OnDrawLineToolSelectLine ( );
    HRESULT OnCalendarSeriesChange (
        long Series,
        double Value );
    HRESULT OnSeriesBeforeAdd (
        long SeriesIndex,
        VARIANT_BOOL * MoreValues );
    HRESULT OnMouseEnterSeries (
        long SeriesIndex );
    HRESULT OnMouseLeaveSeries (
        long SeriesIndex );
    HRESULT OnSeriesContourBeforeDrawLevel (
        long SeriesIndex,
        long LevelIndex );
    HRESULT OnSeriesAnimationToolStep (
        long Tool,
        long Step );
    HRESULT OnGanttToolDragBar (
        long Tool,
        long GanttBar );
    HRESULT OnGanttToolResizeBar (
        long Tool,
        long GanttBar,
        enum EGanttToolPartBar BarPart );
    HRESULT OnFunctionCalculate (
        long SeriesIndex,
        double X,
        double * Y );
    HRESULT OnCompressFunctionGetDate (
        long FunctionSeriesIndex,
        long SourceSeriesIndex,
        long ValueIndex,
        DATE * D );
    HRESULT OnGaugeChange (
        long SeriesIndex );
    HRESULT OnNearestToolChange ( );
    HRESULT OnBeforePrint ( );
    HRESULT OnKeyDown (
        long KeyCode,
        enum EShiftState Shift );
    HRESULT OnKeyUp (
        long KeyCode,
        enum EShiftState Shift );
    HRESULT OnLegendScrollBarToolScrolled ( );
    HRESULT OnSurfaceNearestToolSelectCell ( );
    HRESULT OnDrawAxisLabel (
        long Axis,
        long X,
        long Y,
        BSTR * LabelText );
    HRESULT OnLegendDrawSymbol (
        long Series,
        long ValueIndex,
        long Left,
        long Top,
        long Right,
        long Bottom );
    HRESULT OnColorBandToolClick (
        enum EMouseButton Button,
        enum EShiftState Shift,
        long X,
        long Y );
    HRESULT OnRotateToolRotate ( );
    HRESULT OnColorLineToolBeginDragLine ( );
    HRESULT OnColorLineToolDragLine ( );
    HRESULT OnColorLineToolEndDragLine ( );
    HRESULT OnDragPointToolDragPoint (
        long Index );
    HRESULT OnDrawLineToolSelecting (
        long Index,
        VARIANT_BOOL AllowSelect );
    HRESULT OnSelectorToolDragged ( );
    HRESULT OnSelectorToolDragging ( );
    HRESULT OnSelectorToolResized ( );
    HRESULT OnSelectorToolResizing ( );
    HRESULT OnSelectorToolSelected ( );
    HRESULT OnAnnotationToolClick (
        enum EMouseButton Button,
        enum EShiftState Shift,
        long X,
        long Y );
    HRESULT OnRectangleToolDragging ( );
    HRESULT OnRectangleToolResizing ( );
    HRESULT OnRectangleToolClick (
        enum EMouseButton Button,
        enum EShiftState Shift,
        long X,
        long Y );
    HRESULT OnSeriesAfterAdd (
        long SeriesIndex,
        long ValueIndex );
    HRESULT OnGetSeriesBarStyle (
        long SeriesIndex,
        long ValueIndex,
        enum EBarStyle * BarStyle );
    HRESULT OnVideoToolNewFrame ( );
    HRESULT OnVideoToolStart ( );
    HRESULT OnVideoToolStop ( );
    HRESULT OnVideoPlayerToolFrame ( );
    HRESULT OnOpenGLInit ( );
    HRESULT OnOpenGLRepaint ( );
    HRESULT OnCursorToolSnapChange (
        long Tool,
        long X,
        long Y,
        double XVal,
        double YVal,
        long Series,
        long ValueIndex );
    HRESULT OnDragMarksToolDraggedMark (
        long Index,
        enum EMouseButton Button,
        enum EShiftState Shift,
        long X,
        long Y );
    HRESULT OnDragMarksToolDraggingMark (
        long Index,
        enum EMouseButton Button,
        enum EShiftState Shift,
        long X,
        long Y );
    HRESULT OnRectangleToolDragged ( );
    HRESULT OnRectangleToolResized ( );
    HRESULT OnMarkTipToolCancelHint ( );
    HRESULT OnSeriesClickPointer (
        long SeriesIndex,
        long ValueIndex,
        long X,
        long Y );
    HRESULT OnSeriesClickPointer3D (
        long SeriesIndex,
        long ValueIndex,
        long X,
        long Y );
    HRESULT OnFaderToolStop ( );
    HRESULT OnAxisArrowToolClick (
        long ToolIndex,
        VARIANT_BOOL AtStart );
    HRESULT OnColorBandToolResized ( );
    HRESULT OnAddSeries (
        long SeriesIndex );
    HRESULT OnRemoveSeries (
        long SeriesIndex );
    HRESULT OnLegendScrollBarToolChangeSize ( );
    HRESULT OnLegendScrollBarToolSetPosition (
        long Value );
    HRESULT OnImageSeriesGetImage (
        long SeriesIndex,
        long ValueIndex,
        struct ITeePicture * * Picture );
    HRESULT OnGetSeriesCircleLabel (
        long SeriesIndex,
        double Angle,
        long Index,
        BSTR * Text );
    HRESULT OnTagCloudSeriesDrawTag (
        long SeriesIndex,
        long ValueIndex );
    HRESULT OnSurfaceSeriesGetYValue (
        long SeriesIndex,
        long X,
        long Z,
        double * Y );
    HRESULT OnDataTableToolFilterSeries (
        long SeriesIndex,
        VARIANT_BOOL * Accept );
};

struct __declspec(uuid("bdeb0088-66f9-4a55-abd2-0bf8deec1196"))
TChart;
    // [ default ] interface ITChart
    // [ default, source ] dispinterface ITChartEvents

struct __declspec(uuid("27c6e587-c91a-4a77-a532-d726a6087287"))
IBrush : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;
    __declspec(property(get=GetStyle,put=PutStyle))
    enum EBrushStyle Style;
    __declspec(property(get=GetHandle))
    long Handle;
    __declspec(property(get=GetBackColor,put=PutBackColor))
    OLE_COLOR BackColor;
    __declspec(property(get=GetBrushLink))
    long BrushLink;

    //
    // Wrapper methods for error-handling
    //

    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR Color );
    enum EBrushStyle GetStyle ( );
    void PutStyle (
        enum EBrushStyle Style );
    HRESULT LoadImage (
        _bstr_t FileName );
    HRESULT AssignImage (
        long ImageHandle );
    HRESULT ClearImage ( );
    HRESULT ShowEditor ( );
    long GetHandle ( );
    OLE_COLOR GetBackColor ( );
    void PutBackColor (
        OLE_COLOR Value );
    long GetBrushLink ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * Color ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR Color ) = 0;
      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ enum EBrushStyle * Style ) = 0;
      virtual HRESULT __stdcall put_Style (
        /*[in]*/ enum EBrushStyle Style ) = 0;
      virtual HRESULT __stdcall raw_LoadImage (
        /*[in]*/ BSTR FileName ) = 0;
      virtual HRESULT __stdcall raw_AssignImage (
        /*[in]*/ long ImageHandle ) = 0;
      virtual HRESULT __stdcall raw_ClearImage ( ) = 0;
      virtual HRESULT __stdcall raw_ShowEditor ( ) = 0;
      virtual HRESULT __stdcall get_Handle (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_BackColor (
        /*[out,retval]*/ OLE_COLOR * Value ) = 0;
      virtual HRESULT __stdcall put_BackColor (
        /*[in]*/ OLE_COLOR Value ) = 0;
      virtual HRESULT __stdcall get_BrushLink (
        /*[out,retval]*/ long * Value ) = 0;
};

struct __declspec(uuid("2c5e2d8a-e836-4527-a67d-ae7416f843d3"))
IStrings : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetControlDefault,put=PutControlDefault))
    _variant_t ControlDefault[];
    __declspec(property(get=GetItem,put=PutItem))
    _variant_t Item[];
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetControlDefault (
        long Index );
    void PutControlDefault (
        long Index,
        const _variant_t & Value );
    long Count ( );
    _variant_t GetItem (
        long Index );
    void PutItem (
        long Index,
        const _variant_t & Value );
    HRESULT Remove (
        long Index );
    HRESULT Clear ( );
    long Add (
        const _variant_t & AItem );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ControlDefault (
        /*[in]*/ long Index,
        /*[out,retval]*/ VARIANT * Value ) = 0;
      virtual HRESULT __stdcall put_ControlDefault (
        /*[in]*/ long Index,
        /*[in]*/ VARIANT Value ) = 0;
      virtual HRESULT __stdcall raw_Count (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ VARIANT * Value ) = 0;
      virtual HRESULT __stdcall put_Item (
        /*[in]*/ long Index,
        /*[in]*/ VARIANT Value ) = 0;
      virtual HRESULT __stdcall raw_Remove (
        /*[in]*/ long Index ) = 0;
      virtual HRESULT __stdcall raw_Clear ( ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ VARIANT AItem,
        /*[out,retval]*/ long * Item ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR Value ) = 0;
};

struct __declspec(uuid("2e48cd4f-b190-4e84-9a5f-40d35133c19c"))
IImport : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetV5TeeCompatible,put=PutV5TeeCompatible))
    VARIANT_BOOL V5TeeCompatible;

    //
    // Wrapper methods for error-handling
    //

    HRESULT LoadFromFile (
        _bstr_t FileName );
    HRESULT LoadFromURL (
        _bstr_t URL );
    HRESULT LoadFromStream (
        const _variant_t & AStream );
    HRESULT LoadFromBase64Stream (
        const _variant_t & AStream );
    VARIANT_BOOL GetV5TeeCompatible ( );
    void PutV5TeeCompatible (
        VARIANT_BOOL Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_LoadFromFile (
        /*[in]*/ BSTR FileName ) = 0;
      virtual HRESULT __stdcall raw_LoadFromURL (
        /*[in]*/ BSTR URL ) = 0;
      virtual HRESULT __stdcall raw_LoadFromStream (
        /*[in]*/ VARIANT AStream ) = 0;
      virtual HRESULT __stdcall raw_LoadFromBase64Stream (
        /*[in]*/ VARIANT AStream ) = 0;
      virtual HRESULT __stdcall get_V5TeeCompatible (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_V5TeeCompatible (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
};

struct __declspec(uuid("74373b5d-79be-472a-b19c-1784e5684e5a"))
IScroll : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEnable,put=PutEnable))
    enum EChartScroll Enable;
    __declspec(property(get=GetMouseButton,put=PutMouseButton))
    enum EMouseButton MouseButton;

    //
    // Wrapper methods for error-handling
    //

    enum EChartScroll GetEnable ( );
    void PutEnable (
        enum EChartScroll Enable );
    enum EMouseButton GetMouseButton ( );
    void PutMouseButton (
        enum EMouseButton Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Enable (
        /*[out,retval]*/ enum EChartScroll * Enable ) = 0;
      virtual HRESULT __stdcall put_Enable (
        /*[in]*/ enum EChartScroll Enable ) = 0;
      virtual HRESULT __stdcall get_MouseButton (
        /*[out,retval]*/ enum EMouseButton * Value ) = 0;
      virtual HRESULT __stdcall put_MouseButton (
        /*[in]*/ enum EMouseButton Value ) = 0;
};

struct __declspec(uuid("b858dc45-4e07-450d-92ad-25cff13ac862"))
IPage : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetFirstValueIndex))
    long FirstValueIndex;
    __declspec(property(get=GetAutoScale,put=PutAutoScale))
    VARIANT_BOOL AutoScale;
    __declspec(property(get=GetMaxPointsPerPage,put=PutMaxPointsPerPage))
    long MaxPointsPerPage;
    __declspec(property(get=GetCurrent,put=PutCurrent))
    long Current;
    __declspec(property(get=GetScaleLastPage,put=PutScaleLastPage))
    VARIANT_BOOL ScaleLastPage;

    //
    // Wrapper methods for error-handling
    //

    HRESULT Next ( );
    HRESULT Previous ( );
    long GetMaxPointsPerPage ( );
    void PutMaxPointsPerPage (
        long MaxPointsPerPage );
    long GetCurrent ( );
    void PutCurrent (
        long Current );
    VARIANT_BOOL GetScaleLastPage ( );
    void PutScaleLastPage (
        VARIANT_BOOL ScaleLastPage );
    long GetCount ( );
    long GetFirstValueIndex ( );
    VARIANT_BOOL GetAutoScale ( );
    void PutAutoScale (
        VARIANT_BOOL Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Next ( ) = 0;
      virtual HRESULT __stdcall raw_Previous ( ) = 0;
      virtual HRESULT __stdcall get_MaxPointsPerPage (
        /*[out,retval]*/ long * MaxPointsPerPage ) = 0;
      virtual HRESULT __stdcall put_MaxPointsPerPage (
        /*[in]*/ long MaxPointsPerPage ) = 0;
      virtual HRESULT __stdcall get_Current (
        /*[out,retval]*/ long * Current ) = 0;
      virtual HRESULT __stdcall put_Current (
        /*[in]*/ long Current ) = 0;
      virtual HRESULT __stdcall get_ScaleLastPage (
        /*[out,retval]*/ VARIANT_BOOL * ScaleLastPage ) = 0;
      virtual HRESULT __stdcall put_ScaleLastPage (
        /*[in]*/ VARIANT_BOOL ScaleLastPage ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall get_FirstValueIndex (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_AutoScale (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_AutoScale (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
};

struct __declspec(uuid("0dbd6ec7-e3d1-4ee9-b23e-bfd21417ee71"))
IValueList : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetDateTime,put=PutDateTime))
    VARIANT_BOOL DateTime;
    __declspec(property(get=GetFirst))
    double First;
    __declspec(property(get=GetLast))
    double Last;
    __declspec(property(get=GetMaximum))
    double Maximum;
    __declspec(property(get=GetMinimum))
    double Minimum;
    __declspec(property(get=GetOrder,put=PutOrder))
    enum EValueListOrder Order;
    __declspec(property(get=GetTotal))
    double Total;
    __declspec(property(get=GetTotalABS))
    double TotalABS;
    __declspec(property(get=GetValue,put=PutValue))
    double Value[];
    __declspec(property(get=GetValueSource,put=PutValueSource))
    _bstr_t ValueSource;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetModified,put=PutModified))
    VARIANT_BOOL Modified;
    __declspec(property(get=GetTempValue,put=PutTempValue))
    double TempValue;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    VARIANT_BOOL GetDateTime ( );
    void PutDateTime (
        VARIANT_BOOL DateTime );
    double GetFirst ( );
    double GetLast ( );
    double GetMaximum ( );
    double GetMinimum ( );
    enum EValueListOrder GetOrder ( );
    void PutOrder (
        enum EValueListOrder Order );
    double GetTotal ( );
    double GetTotalABS ( );
    double GetValue (
        long Index );
    void PutValue (
        long Index,
        double Value );
    _bstr_t GetValueSource ( );
    void PutValueSource (
        _bstr_t ValueSource );
    HRESULT Delete (
        long Index );
    HRESULT FillSequence ( );
    long Locate (
        double SomeValue );
    HRESULT Sort ( );
    VARIANT_BOOL GetModified ( );
    void PutModified (
        VARIANT_BOOL Value );
    double GetTempValue ( );
    void PutTempValue (
        double Value );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall get_DateTime (
        /*[out,retval]*/ VARIANT_BOOL * DateTime ) = 0;
      virtual HRESULT __stdcall put_DateTime (
        /*[in]*/ VARIANT_BOOL DateTime ) = 0;
      virtual HRESULT __stdcall get_First (
        /*[out,retval]*/ double * First ) = 0;
      virtual HRESULT __stdcall get_Last (
        /*[out,retval]*/ double * Last ) = 0;
      virtual HRESULT __stdcall get_Maximum (
        /*[out,retval]*/ double * Maximum ) = 0;
      virtual HRESULT __stdcall get_Minimum (
        /*[out,retval]*/ double * Minimum ) = 0;
      virtual HRESULT __stdcall get_Order (
        /*[out,retval]*/ enum EValueListOrder * Order ) = 0;
      virtual HRESULT __stdcall put_Order (
        /*[in]*/ enum EValueListOrder Order ) = 0;
      virtual HRESULT __stdcall get_Total (
        /*[out,retval]*/ double * Total ) = 0;
      virtual HRESULT __stdcall get_TotalABS (
        /*[out,retval]*/ double * TotalABS ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[in]*/ long Index,
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ long Index,
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall get_ValueSource (
        /*[out,retval]*/ BSTR * ValueSource ) = 0;
      virtual HRESULT __stdcall put_ValueSource (
        /*[in]*/ BSTR ValueSource ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[in]*/ long Index ) = 0;
      virtual HRESULT __stdcall raw_FillSequence ( ) = 0;
      virtual HRESULT __stdcall raw_Locate (
        /*[in]*/ double SomeValue,
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall raw_Sort ( ) = 0;
      virtual HRESULT __stdcall get_Modified (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Modified (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_TempValue (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_TempValue (
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR Value ) = 0;
};

struct __declspec(uuid("e547cc97-77e2-4625-b1e0-391f60ac80dc"))
IAddFunction : IDispatch
{};

struct __declspec(uuid("4e7e0e3f-0672-4015-b967-a0da224cff7b"))
ISubtractFunction : IDispatch
{};

struct __declspec(uuid("5298585c-9e56-4d38-b300-fa66d46ade03"))
IMultiplyFunction : IDispatch
{};

struct __declspec(uuid("7bc95ad4-3428-4668-9858-2c3d7959ca4a"))
IDivideFunction : IDispatch
{};

struct __declspec(uuid("7b19fc1b-a120-439e-b8e5-8dd89ec68318"))
IAverageFunction : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIncludeNulls,put=PutIncludeNulls))
    VARIANT_BOOL IncludeNulls;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIncludeNulls ( );
    void PutIncludeNulls (
        VARIANT_BOOL Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IncludeNulls (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_IncludeNulls (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
};

struct __declspec(uuid("4c062ad2-b1bc-46be-9c45-2cf9445a0727"))
IHighFunction : IDispatch
{};

struct __declspec(uuid("0b1eb999-6235-402f-9fff-7b94c7d8193b"))
ILowFunction : IDispatch
{};

struct __declspec(uuid("94741f5b-60cc-42fe-89dd-287310f0d751"))
ICurveFittingFunction : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPolyDegree,put=PutPolyDegree))
    long PolyDegree;
    __declspec(property(get=GetTypeFitting,put=PutTypeFitting))
    enum ETypeFitting TypeFitting;
    __declspec(property(get=GetFirstPoint,put=PutFirstPoint))
    long FirstPoint;
    __declspec(property(get=GetLastPoint,put=PutLastPoint))
    long LastPoint;
    __declspec(property(get=GetFirstCalcPoint,put=PutFirstCalcPoint))
    long FirstCalcPoint;
    __declspec(property(get=GetLastCalcPoint,put=PutLastCalcPoint))
    long LastCalcPoint;
    __declspec(property(get=GetAnswerVector))
    double AnswerVector[];

    //
    // Wrapper methods for error-handling
    //

    long GetPolyDegree ( );
    void PutPolyDegree (
        long PolyDegree );
    enum ETypeFitting GetTypeFitting ( );
    void PutTypeFitting (
        enum ETypeFitting TypeFitting );
    long GetFirstPoint ( );
    void PutFirstPoint (
        long FirstPoint );
    long GetLastPoint ( );
    void PutLastPoint (
        long LastPoint );
    long GetFirstCalcPoint ( );
    void PutFirstCalcPoint (
        long FirstCalcPoint );
    long GetLastCalcPoint ( );
    void PutLastCalcPoint (
        long LastCalcPoint );
    double GetAnswerVector (
        long Index );
    double GetCurveYValue (
        double X );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_PolyDegree (
        /*[out,retval]*/ long * PolyDegree ) = 0;
      virtual HRESULT __stdcall put_PolyDegree (
        /*[in]*/ long PolyDegree ) = 0;
      virtual HRESULT __stdcall get_TypeFitting (
        /*[out,retval]*/ enum ETypeFitting * TypeFitting ) = 0;
      virtual HRESULT __stdcall put_TypeFitting (
        /*[in]*/ enum ETypeFitting TypeFitting ) = 0;
      virtual HRESULT __stdcall get_FirstPoint (
        /*[out,retval]*/ long * FirstPoint ) = 0;
      virtual HRESULT __stdcall put_FirstPoint (
        /*[in]*/ long FirstPoint ) = 0;
      virtual HRESULT __stdcall get_LastPoint (
        /*[out,retval]*/ long * LastPoint ) = 0;
      virtual HRESULT __stdcall put_LastPoint (
        /*[in]*/ long LastPoint ) = 0;
      virtual HRESULT __stdcall get_FirstCalcPoint (
        /*[out,retval]*/ long * FirstCalcPoint ) = 0;
      virtual HRESULT __stdcall put_FirstCalcPoint (
        /*[in]*/ long FirstCalcPoint ) = 0;
      virtual HRESULT __stdcall get_LastCalcPoint (
        /*[out,retval]*/ long * LastCalcPoint ) = 0;
      virtual HRESULT __stdcall put_LastCalcPoint (
        /*[in]*/ long LastCalcPoint ) = 0;
      virtual HRESULT __stdcall get_AnswerVector (
        /*[in]*/ long Index,
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall raw_GetCurveYValue (
        /*[in]*/ double X,
        /*[out,retval]*/ double * Value ) = 0;
};

struct __declspec(uuid("55d2d8be-36a4-4744-bf5e-9b1db78a9fb1"))
IExpAvgFunction : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetWeight,put=PutWeight))
    double Weight;

    //
    // Wrapper methods for error-handling
    //

    double GetWeight ( );
    void PutWeight (
        double Weight );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Weight (
        /*[out,retval]*/ double * Weight ) = 0;
      virtual HRESULT __stdcall put_Weight (
        /*[in]*/ double Weight ) = 0;
};

struct __declspec(uuid("c7d93468-7413-4888-9ea6-d3d4dd9c4f38"))
IMovingAvgFunction : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetWeighted,put=PutWeighted))
    VARIANT_BOOL Weighted;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetWeighted ( );
    void PutWeighted (
        VARIANT_BOOL Weighted );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Weighted (
        /*[out,retval]*/ VARIANT_BOOL * Weighted ) = 0;
      virtual HRESULT __stdcall put_Weighted (
        /*[in]*/ VARIANT_BOOL Weighted ) = 0;
};

struct __declspec(uuid("a7f9d92b-d0ca-4b75-8f57-ba8b859ee660"))
IChartFont : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetSize,put=PutSize))
    long Size;
    __declspec(property(get=GetBold,put=PutBold))
    VARIANT_BOOL Bold;
    __declspec(property(get=GetItalic,put=PutItalic))
    VARIANT_BOOL Italic;
    __declspec(property(get=GetUnderline,put=PutUnderline))
    VARIANT_BOOL Underline;
    __declspec(property(get=GetStrikethrough,put=PutStrikethrough))
    VARIANT_BOOL Strikethrough;
    __declspec(property(get=GetHeight,put=PutHeight))
    long Height;
    __declspec(property(get=GetCharset,put=PutCharset))
    short Charset;
    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;
    __declspec(property(get=GetPixelsPerInch))
    long PixelsPerInch;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    void PutName (
        _bstr_t Name );
    long GetSize ( );
    void PutSize (
        long Size );
    VARIANT_BOOL GetBold ( );
    void PutBold (
        VARIANT_BOOL Bold );
    VARIANT_BOOL GetItalic ( );
    void PutItalic (
        VARIANT_BOOL Italic );
    VARIANT_BOOL GetUnderline ( );
    void PutUnderline (
        VARIANT_BOOL Underline );
    VARIANT_BOOL GetStrikethrough ( );
    void PutStrikethrough (
        VARIANT_BOOL Strikethrough );
    short GetCharset ( );
    void PutCharset (
        short Charset );
    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR Value );
    long GetHeight ( );
    void PutHeight (
        long Value );
    long GetPixelsPerInch ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR Name ) = 0;
      virtual HRESULT __stdcall get_Size (
        /*[out,retval]*/ long * Size ) = 0;
      virtual HRESULT __stdcall put_Size (
        /*[in]*/ long Size ) = 0;
      virtual HRESULT __stdcall get_Bold (
        /*[out,retval]*/ VARIANT_BOOL * Bold ) = 0;
      virtual HRESULT __stdcall put_Bold (
        /*[in]*/ VARIANT_BOOL Bold ) = 0;
      virtual HRESULT __stdcall get_Italic (
        /*[out,retval]*/ VARIANT_BOOL * Italic ) = 0;
      virtual HRESULT __stdcall put_Italic (
        /*[in]*/ VARIANT_BOOL Italic ) = 0;
      virtual HRESULT __stdcall get_Underline (
        /*[out,retval]*/ VARIANT_BOOL * Underline ) = 0;
      virtual HRESULT __stdcall put_Underline (
        /*[in]*/ VARIANT_BOOL Underline ) = 0;
      virtual HRESULT __stdcall get_Strikethrough (
        /*[out,retval]*/ VARIANT_BOOL * Strikethrough ) = 0;
      virtual HRESULT __stdcall put_Strikethrough (
        /*[in]*/ VARIANT_BOOL Strikethrough ) = 0;
      virtual HRESULT __stdcall get_Charset (
        /*[out,retval]*/ short * Charset ) = 0;
      virtual HRESULT __stdcall put_Charset (
        /*[in]*/ short Charset ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * Value ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR Value ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_PixelsPerInch (
        /*[out,retval]*/ long * Value ) = 0;
};

struct __declspec(uuid("335ca049-7552-4529-a3c3-6331f88a5d41"))
IMomentumFunction : IDispatch
{};

enum __declspec(uuid("60b4da42-487d-44fe-ab9e-f3f4cdbc58b2"))
ECanvasBackMode
{
    cbmOpaque = 2,
    cbmTransparent = 1,
    cbmNone = 0
};

enum __declspec(uuid("13475ed7-d8cc-4658-be60-d24c16d5db0b"))
ECanvasTextAlign
{
    ctaLeft = 0,
    ctaCenter = 1,
    ctaRight = 2
};

enum __declspec(uuid("309bb792-f936-4372-bd55-29bcd5a4d3de"))
EPieOtherStyle
{
    poNone = 0,
    poBelowPercent = 1,
    poBelowValue = 2
};

struct __declspec(uuid("2b24932b-ebf7-4fdc-b894-2283db7d526f"))
IExplodedSlices : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetValue,put=PutValue))
    long Value[];

    //
    // Wrapper methods for error-handling
    //

    long GetValue (
        long Index );
    void PutValue (
        long Index,
        long Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Value (
        /*[in]*/ long Index,
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ long Index,
        /*[in]*/ long Value ) = 0;
};

struct __declspec(uuid("9171a5ba-c17e-4472-8585-87cadea6a3a5"))
ICircleLabels : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetFont))
    IChartFontPtr Font;
    __declspec(property(get=GetRotated,put=PutRotated))
    VARIANT_BOOL Rotated;
    __declspec(property(get=GetDegreeSymbol,put=PutDegreeSymbol))
    _bstr_t DegreeSymbol;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL Value );
    IChartFontPtr GetFont ( );
    VARIANT_BOOL GetRotated ( );
    void PutRotated (
        VARIANT_BOOL Value );
    _bstr_t GetDegreeSymbol ( );
    void PutDegreeSymbol (
        _bstr_t Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ struct IChartFont * * Value ) = 0;
      virtual HRESULT __stdcall get_Rotated (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Rotated (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_DegreeSymbol (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall put_DegreeSymbol (
        /*[in]*/ BSTR Value ) = 0;
};

enum __declspec(uuid("8db36b0f-506d-4e82-b5e1-efac565c10d7"))
EErrorSeriesStyle
{
    essLeft = 0,
    essRight = 1,
    essLeftRight = 2,
    essTop = 3,
    essBottom = 4,
    essTopBottom = 5
};

enum __declspec(uuid("f25f9070-2e08-412c-900b-c9585bf0b076"))
EFunctionPeriodAlign
{
    paFirst = 0,
    paCenter = 1,
    paLast = 2
};

enum __declspec(uuid("28b0a524-59e0-4539-be9d-7459ca7189a2"))
EFunctionPeriodStyle
{
    psNumPoints = 0,
    psRange = 1
};

struct __declspec(uuid("10ce1b06-dfdd-4e0e-9ae7-c0a52796be97"))
ITrendFunction : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    long CalculateTrend (
        double * m,
        double * b,
        long SourceSeriesIndex,
        long FirstIndex,
        long LastIndex );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_CalculateTrend (
        /*[in,out]*/ double * m,
        /*[in,out]*/ double * b,
        /*[in]*/ long SourceSeriesIndex,
        /*[in]*/ long FirstIndex,
        /*[in]*/ long LastIndex,
        /*[out,retval]*/ long * Value ) = 0;
};

struct __declspec(uuid("20aeefe9-f24f-4596-9f7f-9081bab13a1b"))
IStdDeviationFunction : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetComplete,put=PutComplete))
    VARIANT_BOOL Complete;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetComplete ( );
    void PutComplete (
        VARIANT_BOOL Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Complete (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Complete (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
};

struct __declspec(uuid("fb7ae258-2c12-4941-a21d-8e337219e73d"))
ICumulativeFunction : IDispatch
{};

struct __declspec(uuid("ce625f32-e1fa-4d5f-88ce-023f31c544c6"))
ICountFunction : IDispatch
{};

struct __declspec(uuid("7e6a1018-d7b2-4585-9d43-2e32bc7e7006"))
IEnvironment : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIEPrintWithPage,put=PutIEPrintWithPage))
    VARIANT_BOOL IEPrintWithPage;
    __declspec(property(get=GetMouseWheelScroll,put=PutMouseWheelScroll))
    VARIANT_BOOL MouseWheelScroll;
    __declspec(property(get=GetDecimalSeparator))
    _bstr_t DecimalSeparator;
    __declspec(property(get=GetTeeClipWhenPrinting,put=PutTeeClipWhenPrinting))
    VARIANT_BOOL TeeClipWhenPrinting;
    __declspec(property(get=GetTeeClipWhenMetafiling,put=PutTeeClipWhenMetafiling))
    VARIANT_BOOL TeeClipWhenMetafiling;
    __declspec(property(get=GetChartVisible,put=PutChartVisible))
    VARIANT_BOOL ChartVisible;
    __declspec(property(get=GetNoPromptDBConnect,put=PutNoPromptDBConnect))
    VARIANT_BOOL NoPromptDBConnect;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetNoPromptDBConnect ( );
    void PutNoPromptDBConnect (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetIEPrintWithPage ( );
    void PutIEPrintWithPage (
        VARIANT_BOOL Value );
    HRESULT InternalRepaint ( );
    VARIANT_BOOL GetMouseWheelScroll ( );
    void PutMouseWheelScroll (
        VARIANT_BOOL Value );
    _bstr_t GetDecimalSeparator ( );
    VARIANT_BOOL GetTeeClipWhenPrinting ( );
    void PutTeeClipWhenPrinting (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetTeeClipWhenMetafiling ( );
    void PutTeeClipWhenMetafiling (
        VARIANT_BOOL Value );
    _bstr_t DecodeUTF8String (
        _bstr_t aString );
    _bstr_t CodeUTF8String (
        _bstr_t aString,
        VARIANT_BOOL addPrefix );
    VARIANT_BOOL GetChartVisible ( );
    void PutChartVisible (
        VARIANT_BOOL Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_NoPromptDBConnect (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_NoPromptDBConnect (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_IEPrintWithPage (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_IEPrintWithPage (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall raw_InternalRepaint ( ) = 0;
      virtual HRESULT __stdcall get_MouseWheelScroll (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_MouseWheelScroll (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_DecimalSeparator (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall get_TeeClipWhenPrinting (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_TeeClipWhenPrinting (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_TeeClipWhenMetafiling (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_TeeClipWhenMetafiling (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall raw_DecodeUTF8String (
        /*[in]*/ BSTR aString,
        /*[out,retval]*/ BSTR * result ) = 0;
      virtual HRESULT __stdcall raw_CodeUTF8String (
        /*[in]*/ BSTR aString,
        /*[in]*/ VARIANT_BOOL addPrefix,
        /*[out,retval]*/ BSTR * result ) = 0;
      virtual HRESULT __stdcall get_ChartVisible (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_ChartVisible (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
};

struct __declspec(uuid("d9faeb17-42b4-44d0-ab3d-dcc098e46315"))
ITeeCommanderEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT OnEditedChart ( );
};

struct __declspec(uuid("7de551a9-7505-4352-83c8-0f98516a6e52"))
ITeeListBoxEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT OnDblClickSeries (
        long SeriesIndex );
    HRESULT OnClick ( );
    HRESULT OnChangeActive (
        long SeriesIndex );
    HRESULT OnMouseUp (
        enum EMouseButton Button,
        enum EShiftState Shift,
        long X,
        long Y );
    HRESULT OnMouseDown (
        enum EMouseButton Button,
        enum EShiftState Shift,
        long X,
        long Y );
    HRESULT OnMouseMove (
        enum EShiftState Shift,
        long X,
        long Y );
    HRESULT OnChangeColor (
        long SeriesIndex );
    HRESULT OnChangeOrder (
        long SeriesIndex1,
        long SeriesIndex2 );
    HRESULT OnOtherItemsChange ( );
    HRESULT OnRefresh ( );
    HRESULT OnRemovedSeries (
        long SeriesIndex );
};

struct __declspec(uuid("efcf0174-d132-4139-9462-cf57bb531a0e"))
TeeListBox;
    // [ default ] interface ITeeListBox
    // [ default, source ] dispinterface ITeeListBoxEvents

struct __declspec(uuid("dae41fb8-1815-4f01-a7a1-6c2517f6dcdb"))
TeeEditor;
    // [ default ] interface ITeeEditor

struct __declspec(uuid("b0fbb8bb-8bb1-4811-8e06-7094bb02ea72"))
TeePreviewer;
    // [ default ] interface ITeePreviewer

struct __declspec(uuid("dcab77d9-709f-4bb0-92b9-5cfe7a5170eb"))
TeeCommander;
    // [ default ] interface ITeeCommander
    // [ default, source ] dispinterface ITeeCommanderEvents

enum __declspec(uuid("394f646d-0f4a-401e-ac85-6dbad2e49f61"))
ETeeEditorPage
{
    epMain = 0,
    epGeneral = 1,
    epAxis = 2,
    epTitles = 3,
    epLegend = 4,
    epPanel = 5,
    epPaging = 6,
    epWalls = 7,
    epAspect = 8,
    epSeriesGeneral = 9,
    epSeriesMarks = 10,
    epAllSeries = 11,
    epSeriesData = 12,
    epExport = 13,
    epTools = 14,
    epPrintPreview = 15,
    epOpenGL = 16
};

struct __declspec(uuid("2e6c8b07-3536-493c-8428-aacbfe973c8a"))
ITeePoint2D : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetX,put=PutX))
    double X;
    __declspec(property(get=GetY,put=PutY))
    double Y;

    //
    // Wrapper methods for error-handling
    //

    double GetX ( );
    void PutX (
        double Value );
    double GetY ( );
    void PutY (
        double Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_X (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_X (
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall get_Y (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_Y (
        /*[in]*/ double Value ) = 0;
};

struct __declspec(uuid("510fe54f-6121-4535-a1a9-586d9c98eede"))
ICircledSeries : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetXRadius,put=PutXRadius))
    long XRadius;
    __declspec(property(get=GetYRadius,put=PutYRadius))
    long YRadius;
    __declspec(property(get=GetXCenter))
    long XCenter;
    __declspec(property(get=GetYCenter))
    long YCenter;
    __declspec(property(get=GetCircleWidth))
    long CircleWidth;
    __declspec(property(get=GetCircleHeight))
    long CircleHeight;
    __declspec(property(get=GetCircleBackColor,put=PutCircleBackColor))
    OLE_COLOR CircleBackColor;
    __declspec(property(get=GetCircled,put=PutCircled))
    VARIANT_BOOL Circled;
    __declspec(property(get=GetRotationAngle,put=PutRotationAngle))
    long RotationAngle;

    //
    // Wrapper methods for error-handling
    //

    long GetXRadius ( );
    void PutXRadius (
        long XRadius );
    long GetYRadius ( );
    void PutYRadius (
        long YRadius );
    long GetXCenter ( );
    long GetYCenter ( );
    long GetCircleWidth ( );
    long GetCircleHeight ( );
    OLE_COLOR GetCircleBackColor ( );
    void PutCircleBackColor (
        OLE_COLOR CircleBackColor );
    VARIANT_BOOL GetCircled ( );
    void PutCircled (
        VARIANT_BOOL Circled );
    long GetRotationAngle ( );
    void PutRotationAngle (
        long RotationAngle );
    ITeePoint2DPtr AngleToPoint (
        double Angle,
        double AXRadius,
        double AYRadius );
    double PointToAngle (
        long XCoord,
        long YCoord );
    double PointToRadius (
        long XCoord,
        long YCoord );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_XRadius (
        /*[out,retval]*/ long * XRadius ) = 0;
      virtual HRESULT __stdcall put_XRadius (
        /*[in]*/ long XRadius ) = 0;
      virtual HRESULT __stdcall get_YRadius (
        /*[out,retval]*/ long * YRadius ) = 0;
      virtual HRESULT __stdcall put_YRadius (
        /*[in]*/ long YRadius ) = 0;
      virtual HRESULT __stdcall get_XCenter (
        /*[out,retval]*/ long * XCenter ) = 0;
      virtual HRESULT __stdcall get_YCenter (
        /*[out,retval]*/ long * YCenter ) = 0;
      virtual HRESULT __stdcall get_CircleWidth (
        /*[out,retval]*/ long * CircleWidth ) = 0;
      virtual HRESULT __stdcall get_CircleHeight (
        /*[out,retval]*/ long * CircleHeight ) = 0;
      virtual HRESULT __stdcall get_CircleBackColor (
        /*[out,retval]*/ OLE_COLOR * CircleBackColor ) = 0;
      virtual HRESULT __stdcall put_CircleBackColor (
        /*[in]*/ OLE_COLOR CircleBackColor ) = 0;
      virtual HRESULT __stdcall get_Circled (
        /*[out,retval]*/ VARIANT_BOOL * Circled ) = 0;
      virtual HRESULT __stdcall put_Circled (
        /*[in]*/ VARIANT_BOOL Circled ) = 0;
      virtual HRESULT __stdcall get_RotationAngle (
        /*[out,retval]*/ long * RotationAngle ) = 0;
      virtual HRESULT __stdcall put_RotationAngle (
        /*[in]*/ long RotationAngle ) = 0;
      virtual HRESULT __stdcall raw_AngleToPoint (
        /*[in]*/ double Angle,
        /*[in]*/ double AXRadius,
        /*[in]*/ double AYRadius,
        /*[out,retval]*/ struct ITeePoint2D * * Value ) = 0;
      virtual HRESULT __stdcall raw_PointToAngle (
        /*[in]*/ long XCoord,
        /*[in]*/ long YCoord,
        /*[out,retval]*/ double * Y ) = 0;
      virtual HRESULT __stdcall raw_PointToRadius (
        /*[in]*/ long XCoord,
        /*[in]*/ long YCoord,
        /*[out,retval]*/ double * Y ) = 0;
};

struct __declspec(uuid("5f90d762-b0ee-4e2f-a16b-61bb57b6f883"))
ISeriesMarkPosition : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetArrowFrom))
    ITeePoint2DPtr ArrowFrom;
    __declspec(property(get=GetArrowTo))
    ITeePoint2DPtr ArrowTo;
    __declspec(property(get=GetCustom,put=PutCustom))
    VARIANT_BOOL Custom;
    __declspec(property(get=GetHeight,put=PutHeight))
    long Height;
    __declspec(property(get=GetLeftTop))
    ITeePoint2DPtr LeftTop;
    __declspec(property(get=GetWidth,put=PutWidth))
    long Width;

    //
    // Wrapper methods for error-handling
    //

    ITeePoint2DPtr GetArrowFrom ( );
    ITeePoint2DPtr GetArrowTo ( );
    VARIANT_BOOL GetCustom ( );
    void PutCustom (
        VARIANT_BOOL Value );
    long GetHeight ( );
    void PutHeight (
        long Value );
    ITeePoint2DPtr GetLeftTop ( );
    long GetWidth ( );
    void PutWidth (
        long Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ArrowFrom (
        /*[out,retval]*/ struct ITeePoint2D * * Value ) = 0;
      virtual HRESULT __stdcall get_ArrowTo (
        /*[out,retval]*/ struct ITeePoint2D * * Value ) = 0;
      virtual HRESULT __stdcall get_Custom (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Custom (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_LeftTop (
        /*[out,retval]*/ struct ITeePoint2D * * Value ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ long Value ) = 0;
};

struct __declspec(uuid("79dcb259-5717-4d2c-8c9d-9e1375bc4c25"))
ISeriesMarksPositions : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPosition))
    ISeriesMarkPositionPtr Position[];

    //
    // Wrapper methods for error-handling
    //

    ISeriesMarkPositionPtr GetPosition (
        long Index );
    HRESULT Automatic (
        long Index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Position (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct ISeriesMarkPosition * * Value ) = 0;
      virtual HRESULT __stdcall raw_Automatic (
        /*[in]*/ long Index ) = 0;
};

struct __declspec(uuid("99ac72d4-5370-4648-a9fe-b0971c6d62fe"))
ITeePoint3D : ITeePoint2D
{
    //
    // Property data
    //

    __declspec(property(get=GetZ,put=PutZ))
    double Z;

    //
    // Wrapper methods for error-handling
    //

    double GetZ ( );
    void PutZ (
        double Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Z (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_Z (
        /*[in]*/ double Value ) = 0;
};

struct __declspec(uuid("0a393716-3671-4183-9b10-95c1ec679dbb"))
ITeeEditorShowPages : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetMain,put=PutMain))
    VARIANT_BOOL Main;
    __declspec(property(get=GetGeneral,put=PutGeneral))
    VARIANT_BOOL General;
    __declspec(property(get=GetAxis,put=PutAxis))
    VARIANT_BOOL Axis;
    __declspec(property(get=GetTitles,put=PutTitles))
    VARIANT_BOOL Titles;
    __declspec(property(get=GetLegend,put=PutLegend))
    VARIANT_BOOL Legend;
    __declspec(property(get=GetPanel,put=PutPanel))
    VARIANT_BOOL Panel;
    __declspec(property(get=GetPaging,put=PutPaging))
    VARIANT_BOOL Paging;
    __declspec(property(get=GetWalls,put=PutWalls))
    VARIANT_BOOL Walls;
    __declspec(property(get=GetAspect,put=PutAspect))
    VARIANT_BOOL Aspect;
    __declspec(property(get=GetSeriesGeneral,put=PutSeriesGeneral))
    VARIANT_BOOL SeriesGeneral;
    __declspec(property(get=GetSeriesMarks,put=PutSeriesMarks))
    VARIANT_BOOL SeriesMarks;
    __declspec(property(get=GetTools,put=PutTools))
    VARIANT_BOOL Tools;
    __declspec(property(get=GetSeriesData,put=PutSeriesData))
    VARIANT_BOOL SeriesData;
    __declspec(property(get=GetExportDialog,put=PutExportDialog))
    VARIANT_BOOL ExportDialog;
    __declspec(property(get=GetPrintPreview,put=PutPrintPreview))
    VARIANT_BOOL PrintPreview;
    __declspec(property(get=GetOpenGL,put=PutOpenGL))
    VARIANT_BOOL OpenGL;
    __declspec(property(put=PutThemes))
    VARIANT_BOOL Themes;
    __declspec(property(get=GetExportNative,put=PutExportNative))
    VARIANT_BOOL ExportNative;
    __declspec(property(get=GetAllSeries,put=PutAllSeries))
    VARIANT_BOOL AllSeries;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetMain ( );
    void PutMain (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetGeneral ( );
    void PutGeneral (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetAxis ( );
    void PutAxis (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetTitles ( );
    void PutTitles (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetLegend ( );
    void PutLegend (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetPanel ( );
    void PutPanel (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetPaging ( );
    void PutPaging (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetWalls ( );
    void PutWalls (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetAspect ( );
    void PutAspect (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetSeriesGeneral ( );
    void PutSeriesGeneral (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetSeriesMarks ( );
    void PutSeriesMarks (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetTools ( );
    void PutTools (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetSeriesData ( );
    void PutSeriesData (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetExportDialog ( );
    void PutExportDialog (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetPrintPreview ( );
    void PutPrintPreview (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetOpenGL ( );
    void PutOpenGL (
        VARIANT_BOOL Value );
    void PutThemes (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetExportNative ( );
    void PutExportNative (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetAllSeries ( );
    void PutAllSeries (
        VARIANT_BOOL Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Main (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Main (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_General (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_General (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_Axis (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Axis (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_Titles (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Titles (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_Legend (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Legend (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_Panel (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Panel (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_Paging (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Paging (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_Walls (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Walls (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_Aspect (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Aspect (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_SeriesGeneral (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_SeriesGeneral (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_SeriesMarks (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_SeriesMarks (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_Tools (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Tools (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_SeriesData (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_SeriesData (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_ExportDialog (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_ExportDialog (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_PrintPreview (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_PrintPreview (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_OpenGL (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_OpenGL (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall put_Themes (
        /*[in]*/ VARIANT_BOOL _arg1 ) = 0;
      virtual HRESULT __stdcall get_ExportNative (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_ExportNative (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_AllSeries (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_AllSeries (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
};

struct __declspec(uuid("a74b18af-8f25-43f8-b926-1f2cd5b47360"))
ITeeEditorOptions : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAdd,put=PutAdd))
    VARIANT_BOOL Add;
    __declspec(property(get=GetDelete,put=PutDelete))
    VARIANT_BOOL Delete;
    __declspec(property(get=GetChange,put=PutChange))
    VARIANT_BOOL Change;
    __declspec(property(get=GetClone,put=PutClone))
    VARIANT_BOOL Clone;
    __declspec(property(get=GetDataSource,put=PutDataSource))
    VARIANT_BOOL DataSource;
    __declspec(property(get=GetTitle,put=PutTitle))
    VARIANT_BOOL Title;
    __declspec(property(get=GetHelp,put=PutHelp))
    VARIANT_BOOL Help;
    __declspec(property(get=GetGroups,put=PutGroups))
    VARIANT_BOOL Groups;
    __declspec(property(get=GetAllGroups,put=PutAllGroups))
    VARIANT_BOOL AllGroups;
    __declspec(property(get=GetOrderSeries,put=PutOrderSeries))
    VARIANT_BOOL OrderSeries;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetAdd ( );
    void PutAdd (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetDelete ( );
    void PutDelete (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetChange ( );
    void PutChange (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetClone ( );
    void PutClone (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetDataSource ( );
    void PutDataSource (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetTitle ( );
    void PutTitle (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetHelp ( );
    void PutHelp (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetGroups ( );
    void PutGroups (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetAllGroups ( );
    void PutAllGroups (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetOrderSeries ( );
    void PutOrderSeries (
        VARIANT_BOOL Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Add (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Add (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_Delete (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Delete (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_Change (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Change (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_Clone (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Clone (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_DataSource (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_DataSource (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_Title (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Title (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_Help (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Help (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_Groups (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Groups (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_AllGroups (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_AllGroups (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_OrderSeries (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_OrderSeries (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
};

struct __declspec(uuid("690efd3f-d8d2-4e19-a475-05d61fb12ec0"))
ITeePreviewerOptions : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetChangePrinter,put=PutChangePrinter))
    VARIANT_BOOL ChangePrinter;
    __declspec(property(get=GetSetupPrinter,put=PutSetupPrinter))
    VARIANT_BOOL SetupPrinter;
    __declspec(property(get=GetResizeImage,put=PutResizeImage))
    VARIANT_BOOL ResizeImage;
    __declspec(property(get=GetMoveImage,put=PutMoveImage))
    VARIANT_BOOL MoveImage;
    __declspec(property(get=GetChangeDetail,put=PutChangeDetail))
    VARIANT_BOOL ChangeDetail;
    __declspec(property(get=GetChangePaperOrientation,put=PutChangePaperOrientation))
    VARIANT_BOOL ChangePaperOrientation;
    __declspec(property(get=GetChangeMargins,put=PutChangeMargins))
    VARIANT_BOOL ChangeMargins;
    __declspec(property(get=GetDragImage,put=PutDragImage))
    VARIANT_BOOL DragImage;
    __declspec(property(get=GetPrintPanel,put=PutPrintPanel))
    VARIANT_BOOL PrintPanel;
    __declspec(property(get=GetAsBitmap,put=PutAsBitmap))
    VARIANT_BOOL AsBitmap;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetChangePrinter ( );
    void PutChangePrinter (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetSetupPrinter ( );
    void PutSetupPrinter (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetResizeImage ( );
    void PutResizeImage (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetMoveImage ( );
    void PutMoveImage (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetChangeDetail ( );
    void PutChangeDetail (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetChangePaperOrientation ( );
    void PutChangePaperOrientation (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetChangeMargins ( );
    void PutChangeMargins (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetDragImage ( );
    void PutDragImage (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetPrintPanel ( );
    void PutPrintPanel (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetAsBitmap ( );
    void PutAsBitmap (
        VARIANT_BOOL Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ChangePrinter (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_ChangePrinter (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_SetupPrinter (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_SetupPrinter (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_ResizeImage (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_ResizeImage (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_MoveImage (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_MoveImage (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_ChangeDetail (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_ChangeDetail (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_ChangePaperOrientation (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_ChangePaperOrientation (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_ChangeMargins (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_ChangeMargins (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_DragImage (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_DragImage (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_PrintPanel (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_PrintPanel (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_AsBitmap (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_AsBitmap (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
};

enum __declspec(uuid("8c00fb36-204d-41f4-8c67-379cc1244168"))
EStreamType
{
    stJpeg = 0,
    stTeeTemplate = 1
};

struct __declspec(uuid("270b42a2-acbf-448f-8a9b-2fc7ce965008"))
ICustomToolSeries : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetSeries,put=PutSeries))
    _variant_t Series;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetSeries ( );
    void PutSeries (
        const _variant_t & Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Series (
        /*[out,retval]*/ VARIANT * Value ) = 0;
      virtual HRESULT __stdcall put_Series (
        /*[in]*/ VARIANT Value ) = 0;
};

enum __declspec(uuid("ce82e500-ac09-478c-992c-799de411c43a"))
ECursorToolStyle
{
    cssHorizontal = 0,
    cssVertical = 1,
    cssBoth = 2,
    cssScope = 3
};

struct __declspec(uuid("bdde7ac5-d532-432e-9559-ff950114afd4"))
IDragMarksTool : ICustomToolSeries
{};

struct __declspec(uuid("7eb5e604-d875-407a-9241-f42690e97506"))
ICustomToolAxis : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAxis,put=PutAxis))
    _variant_t Axis;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetAxis ( );
    void PutAxis (
        const _variant_t & Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Axis (
        /*[out,retval]*/ VARIANT * Value ) = 0;
      virtual HRESULT __stdcall put_Axis (
        /*[in]*/ VARIANT Value ) = 0;
};

enum __declspec(uuid("b8bb62c3-6f3d-44b8-a6e6-6d7eb6a7ef52"))
EAxisArrowToolPosition
{
    aaStart = 0,
    aaEnd = 1,
    aaBoth = 2
};

enum __declspec(uuid("1fdda3b0-1aee-455e-9416-6b20a686e08b"))
ENearestToolStyle
{
    hsNone = 0,
    hsCircle = 1,
    hsRectangle = 2,
    hsDiamond = 3,
    hsSeries = 4
};

struct __declspec(uuid("ed06dc24-bfaa-41f1-bf9d-8c67acc2accd"))
IBaseHighLowSeries : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetHighValues))
    IValueListPtr HighValues;
    __declspec(property(get=GetLowValues))
    IValueListPtr LowValues;

    //
    // Wrapper methods for error-handling
    //

    long AddHighLow (
        double AX,
        double AHigh,
        double ALow,
        _bstr_t AXLabel,
        OLE_COLOR AColor );
    IValueListPtr GetHighValues ( );
    IValueListPtr GetLowValues ( );
    double MaxYValue ( );
    double MinYValue ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_AddHighLow (
        /*[in]*/ double AX,
        /*[in]*/ double AHigh,
        /*[in]*/ double ALow,
        /*[in]*/ BSTR AXLabel,
        /*[in]*/ OLE_COLOR AColor,
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_HighValues (
        /*[out,retval]*/ struct IValueList * * Value ) = 0;
      virtual HRESULT __stdcall get_LowValues (
        /*[out,retval]*/ struct IValueList * * Value ) = 0;
      virtual HRESULT __stdcall raw_MaxYValue (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall raw_MinYValue (
        /*[out,retval]*/ double * Value ) = 0;
};

enum __declspec(uuid("931ec43f-4426-44c4-8430-04d90ee92629"))
EChartObjectShapeStyle
{
    fosRectangle = 0,
    fosRoundRectangle = 1
};

enum __declspec(uuid("59de41f7-0a70-427b-a05d-1e36da8cef6a"))
EToolClass
{
    tcCursor = 0,
    tcDragMarks = 1,
    tcAxisArrow = 2,
    tcDrawLine = 3,
    tcNearest = 4,
    tcColorband = 5,
    tcColorLine = 6,
    tcRotate = 7,
    tcMarksTip = 8,
    tcChartImage = 9,
    tcAnnotate = 10,
    tcPageNumber = 11,
    tcGridTranspose = 12,
    tcExtraLegend = 13,
    tcSeriesAnimation = 14,
    tcGantt = 15,
    tcGridBand = 16,
    tcPie = 17,
    tcDragPoint = 18,
    tcLegendScrollBar = 19,
    tcLight = 20,
    tcSurfaceNearest = 21,
    tcAxisScroll = 22,
    tcSeriesBand = 23,
    tcSelector = 24,
    tcRectangle = 25,
    tcDataTable = 26,
    tcClipSeries = 27,
    tcSeriesStats = 28,
    tcVideo = 29,
    tcVideoPlayer = 30,
    tcTransposeSeries = 31,
    tcSeriesRegion = 32,
    tcAntiAlias = 33,
    tcFader = 34,
    tcFrame = 35,
    tcMagnify = 36,
    tcLegendPalette = 37,
    tcBanner = 38,
    tcText3D = 39,
    tcSubChart = 40,
    tcLink = 41,
    tcFibonacci = 42,
    tcFullScreen = 43
};

enum __declspec(uuid("9d5fa683-d092-459f-a118-9f14afae6df6"))
ELegendSymbolPosition
{
    spLeft = 0,
    spRight = 1
};

enum __declspec(uuid("7e1709c4-082c-4c61-ba7d-96cc41e9ffac"))
ELegendSymbolSize
{
    lcsPercent = 0,
    lcsPixels = 1
};

struct __declspec(uuid("809c6b72-1134-4cb9-b2bd-14927ead6e22"))
ITeeShadow : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetHorizSize,put=PutHorizSize))
    long HorizSize;
    __declspec(property(get=GetVertSize,put=PutVertSize))
    long VertSize;
    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;
    __declspec(property(get=GetTransparency,put=PutTransparency))
    long Transparency;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetSmooth,put=PutSmooth))
    VARIANT_BOOL Smooth;
    __declspec(property(get=GetSmoothBlur,put=PutSmoothBlur))
    long SmoothBlur;
    __declspec(property(get=GetClip,put=PutClip))
    VARIANT_BOOL Clip;

    //
    // Wrapper methods for error-handling
    //

    long GetHorizSize ( );
    void PutHorizSize (
        long Value );
    long GetVertSize ( );
    void PutVertSize (
        long Value );
    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR Value );
    long GetTransparency ( );
    void PutTransparency (
        long Value );
    HRESULT ShowEditor ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetSmooth ( );
    void PutSmooth (
        VARIANT_BOOL Value );
    long GetSmoothBlur ( );
    void PutSmoothBlur (
        long Value );
    VARIANT_BOOL GetClip ( );
    void PutClip (
        VARIANT_BOOL Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_HorizSize (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_HorizSize (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_VertSize (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_VertSize (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * Value ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR Value ) = 0;
      virtual HRESULT __stdcall get_Transparency (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Transparency (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_ShowEditor ( ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_Smooth (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Smooth (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_SmoothBlur (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_SmoothBlur (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_Clip (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Clip (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
};

enum __declspec(uuid("bba01989-3df2-486c-8d33-fdd555b2ee0b"))
ETeeZoomDirection
{
    tzdHorizontal = 0,
    tzdVertical = 1,
    tzdBoth = 2
};

struct __declspec(uuid("7e979bf8-4f85-4a7f-9c3d-047695f12c64"))
ITeePreviewPanelEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT OnChangeMargins (
        VARIANT_BOOL DisableProportional,
        long Left,
        long Top,
        long Right,
        long Bottom );
    HRESULT OnAfterDraw ( );
};

struct __declspec(uuid("232856bb-8228-4047-84d6-d268fbe7df27"))
TeePreviewPanel;
    // [ default ] interface ITeePreviewPanel
    // [ default, source ] dispinterface ITeePreviewPanelEvents

enum __declspec(uuid("db979004-772a-4fef-b619-830634fb237a"))
ETeePreviewPanelOrientation
{
    ppoDefault = 0,
    ppoPortrait = 1,
    ppoLandscape = 2
};

struct __declspec(uuid("9b05c936-8915-4f46-9293-551417b32e58"))
IChartGridEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT OnClick ( );
};

struct __declspec(uuid("cca57a27-7b4e-49d0-ba80-cf0814bc9cb3"))
ChartGridNavigator;
    // [ default ] interface IChartGridNavigator

struct __declspec(uuid("0c7f407c-adaa-49de-a497-f03c5752aece"))
ChartPageNavigator;
    // [ default ] interface IChartPageNavigator

struct __declspec(uuid("bfbfcf89-fe34-422f-9883-25f44387b138"))
ChartEditorPanel;
    // [ default ] interface IChartEditorPanel

enum __declspec(uuid("03bfbdbc-58ea-4e54-9751-3185041b7775"))
ERSIStyle
{
    rsiOpenClose = 0,
    rsiClose = 1
};

struct __declspec(uuid("f5c06e6c-1bc6-4f98-b1f0-b55cd1161a2a"))
IRSIFunction : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetStyle,put=PutStyle))
    enum ERSIStyle Style;

    //
    // Wrapper methods for error-handling
    //

    enum ERSIStyle GetStyle ( );
    void PutStyle (
        enum ERSIStyle Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ enum ERSIStyle * Value ) = 0;
      virtual HRESULT __stdcall put_Style (
        /*[in]*/ enum ERSIStyle Value ) = 0;
};

enum __declspec(uuid("6ac8b6c2-e012-4603-ba14-0a6f58b0fca3"))
ECustomSeriesStack
{
    cssNone = 0,
    cssOverlap = 1,
    cssStack = 2,
    cssStack100 = 3
};

enum __declspec(uuid("8294c398-24e0-4e74-9ac1-dae95c52b272"))
ETeeVertAlign
{
    vaTop = 0,
    vaCenter = 1,
    vaBottom = 2
};

enum __declspec(uuid("6564d864-c93d-4dee-a61f-3f6bdeea6764"))
EAxisLabelAlign
{
    alDefault = 0,
    alOpposite = 1
};

struct __declspec(uuid("8ef1cb19-851b-49d7-ad61-b8e4de9654f3"))
IPyramidSeries : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetSizePercent,put=PutSizePercent))
    long SizePercent;

    //
    // Wrapper methods for error-handling
    //

    long GetSizePercent ( );
    void PutSizePercent (
        long Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_SizePercent (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_SizePercent (
        /*[in]*/ long Value ) = 0;
};

struct __declspec(uuid("a2c8cee0-605c-4d14-8a8f-27c65d744ba8"))
ITeePanelsList : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    HRESULT Delete (
        long Index );
    HRESULT Clear ( );
    long GetCount ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Delete (
        /*[in]*/ long Index ) = 0;
      virtual HRESULT __stdcall raw_Clear ( ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Value ) = 0;
};

#pragma pack(push, 4)

struct __declspec(uuid("7b0ce044-e87d-4341-9b75-9ed53e706c4a"))
TeeRect
{
    long Left;
    long Top;
    long Right;
    long Bottom;
};

#pragma pack(pop)

enum __declspec(uuid("d79cf9be-c4b6-49c6-8116-80ad92d07f9a"))
EBezierStyle
{
    bsWindows = 0,
    bsBezier3 = 1,
    bsBezier4 = 2
};

enum __declspec(uuid("5d1c39fe-d848-4291-b894-800e7c6e34e0"))
EPaletteStyle
{
    psPale = 0,
    psStrong = 1,
    psGrayScale = 2,
    psInvGray = 3,
    psRainbow = 4,
    psCustom = 5
};

struct __declspec(uuid("a33fb91f-35cd-4a55-8742-8dcb20336569"))
IExportFormat : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetWidth,put=PutWidth))
    long Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    long Height;

    //
    // Wrapper methods for error-handling
    //

    long GetWidth ( );
    void PutWidth (
        long Value );
    long GetHeight ( );
    void PutHeight (
        long Value );
    HRESULT SaveToFile (
        _bstr_t FileName );
    _variant_t SaveToStream ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_SaveToFile (
        /*[in]*/ BSTR FileName ) = 0;
      virtual HRESULT __stdcall raw_SaveToStream (
        /*[out,retval]*/ VARIANT * Value ) = 0;
};

struct __declspec(uuid("2af16e3d-7faa-4936-8856-6f2286551306"))
IJPEGExport : IExportFormat
{
    //
    // Property data
    //

    __declspec(property(get=GetGrayScale,put=PutGrayScale))
    VARIANT_BOOL GrayScale;
    __declspec(property(get=GetCompressionQuality,put=PutCompressionQuality))
    long CompressionQuality;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetGrayScale ( );
    void PutGrayScale (
        VARIANT_BOOL Value );
    long GetCompressionQuality ( );
    void PutCompressionQuality (
        long Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_GrayScale (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_GrayScale (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_CompressionQuality (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_CompressionQuality (
        /*[in]*/ long Value ) = 0;
};

struct __declspec(uuid("9f013ef3-4a91-4aa4-8fc1-f7d954d6a3c2"))
IPNGExport : IExportFormat
{
    //
    // Property data
    //

    __declspec(property(get=GetCompressionLevel,put=PutCompressionLevel))
    long CompressionLevel;

    //
    // Wrapper methods for error-handling
    //

    long GetCompressionLevel ( );
    void PutCompressionLevel (
        long Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_CompressionLevel (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_CompressionLevel (
        /*[in]*/ long Value ) = 0;
};

enum __declspec(uuid("503b5a12-2b06-4529-a727-ce8b2c81b26b"))
EGIFCompression
{
    gcLZW = 0,
    gcRLE = 1
};

enum __declspec(uuid("00ab148e-994e-4790-a2aa-357f3ed5cc34"))
EGIFDitherMode
{
    dmNearest = 0,
    dmFloydSteinberg = 1,
    dmStucki = 2,
    dmSierra = 3,
    dmJaJuNI = 4,
    dmSteveArche = 5,
    dmBurkes = 6
};

enum __declspec(uuid("65a72146-0807-4b0e-a5a4-30a858653615"))
EGIFColorReduction
{
    rmNone = 0,
    rmWindows20 = 1,
    rmWindows256 = 2,
    rmWindowsGray = 3,
    rmMonochrome = 4,
    rmGrayScale = 5,
    rmNetscape = 6,
    rmQuantize = 7,
    rmQuantize256 = 8
};

struct __declspec(uuid("d32b8599-b350-42a5-b2b1-94c9cff34a2d"))
IGIFExport : IExportFormat
{
    //
    // Property data
    //

    __declspec(property(get=GetCompression,put=PutCompression))
    enum EGIFCompression Compression;
    __declspec(property(get=GetDitherMode,put=PutDitherMode))
    enum EGIFDitherMode DitherMode;
    __declspec(property(get=GetColorReduction,put=PutColorReduction))
    enum EGIFColorReduction ColorReduction;

    //
    // Wrapper methods for error-handling
    //

    enum EGIFCompression GetCompression ( );
    void PutCompression (
        enum EGIFCompression Value );
    enum EGIFDitherMode GetDitherMode ( );
    void PutDitherMode (
        enum EGIFDitherMode Value );
    enum EGIFColorReduction GetColorReduction ( );
    void PutColorReduction (
        enum EGIFColorReduction Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Compression (
        /*[out,retval]*/ enum EGIFCompression * Value ) = 0;
      virtual HRESULT __stdcall put_Compression (
        /*[in]*/ enum EGIFCompression Value ) = 0;
      virtual HRESULT __stdcall get_DitherMode (
        /*[out,retval]*/ enum EGIFDitherMode * Value ) = 0;
      virtual HRESULT __stdcall put_DitherMode (
        /*[in]*/ enum EGIFDitherMode Value ) = 0;
      virtual HRESULT __stdcall get_ColorReduction (
        /*[out,retval]*/ enum EGIFColorReduction * Value ) = 0;
      virtual HRESULT __stdcall put_ColorReduction (
        /*[in]*/ enum EGIFColorReduction Value ) = 0;
};

struct __declspec(uuid("5bced848-7c39-446c-9bed-cb19ac16f383"))
IPCXExport : IExportFormat
{};

struct __declspec(uuid("f6004561-2aae-44da-979d-ec7cb53dd15b"))
IMetafileExport : IExportFormat
{
    //
    // Property data
    //

    __declspec(property(get=GetEnhanced,put=PutEnhanced))
    VARIANT_BOOL Enhanced;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetEnhanced ( );
    void PutEnhanced (
        VARIANT_BOOL Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Enhanced (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Enhanced (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
};

enum __declspec(uuid("5014c994-6195-4dfa-a575-7fd1596042ce"))
EPixelFormat
{
    pfDevice = 0,
    pf1bit = 1,
    pf4bit = 2,
    pf8bit = 3,
    pf15bit = 4,
    pf16bit = 5,
    pf24bit = 6,
    pf32bit = 7
};

struct __declspec(uuid("1f9c089d-bcae-4141-b95b-6e0877819e08"))
IBMPExport : IExportFormat
{
    //
    // Property data
    //

    __declspec(property(get=GetColors,put=PutColors))
    enum EPixelFormat Colors;
    __declspec(property(get=GetMonochrome,put=PutMonochrome))
    VARIANT_BOOL Monochrome;

    //
    // Wrapper methods for error-handling
    //

    enum EPixelFormat GetColors ( );
    void PutColors (
        enum EPixelFormat Value );
    VARIANT_BOOL GetMonochrome ( );
    void PutMonochrome (
        VARIANT_BOOL Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Colors (
        /*[out,retval]*/ enum EPixelFormat * Value ) = 0;
      virtual HRESULT __stdcall put_Colors (
        /*[in]*/ enum EPixelFormat Value ) = 0;
      virtual HRESULT __stdcall get_Monochrome (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Monochrome (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
};

enum __declspec(uuid("0048d73b-7681-4c33-b8c5-a4147c635c20"))
EMarkToolMouseAction
{
    mtmMove = 0,
    mtmClick = 1
};

struct __declspec(uuid("73631c7c-3a02-4f9f-9c9f-83a1e0360f4b"))
IMarksTipTool : ICustomToolSeries
{
    //
    // Property data
    //

    __declspec(property(get=GetMouseAction,put=PutMouseAction))
    enum EMarkToolMouseAction MouseAction;
    __declspec(property(get=GetStyle,put=PutStyle))
    enum EMarkStyle Style;
    __declspec(property(get=GetDelay,put=PutDelay))
    long Delay;
    __declspec(property(get=GetHideDelay,put=PutHideDelay))
    long HideDelay;

    //
    // Wrapper methods for error-handling
    //

    enum EMarkToolMouseAction GetMouseAction ( );
    void PutMouseAction (
        enum EMarkToolMouseAction Value );
    enum EMarkStyle GetStyle ( );
    void PutStyle (
        enum EMarkStyle Value );
    long GetDelay ( );
    void PutDelay (
        long Value );
    long GetHideDelay ( );
    void PutHideDelay (
        long Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_MouseAction (
        /*[out,retval]*/ enum EMarkToolMouseAction * Value ) = 0;
      virtual HRESULT __stdcall put_MouseAction (
        /*[in]*/ enum EMarkToolMouseAction Value ) = 0;
      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ enum EMarkStyle * Value ) = 0;
      virtual HRESULT __stdcall put_Style (
        /*[in]*/ enum EMarkStyle Value ) = 0;
      virtual HRESULT __stdcall get_Delay (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Delay (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_HideDelay (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_HideDelay (
        /*[in]*/ long Value ) = 0;
};

struct __declspec(uuid("09098cb8-077e-4f99-bc28-5da7c8092a08"))
IMomentumDivFunction : IDispatch
{};

struct __declspec(uuid("b1720269-dc95-4b8f-acae-20c51cbe287e"))
IExpTrendFunction : IDispatch
{};

struct __declspec(uuid("bae278ab-f06b-493b-b060-6b25d5c48e29"))
IExpMovAvgFunction : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIgnoreNulls,put=PutIgnoreNulls))
    VARIANT_BOOL IgnoreNulls;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIgnoreNulls ( );
    void PutIgnoreNulls (
        VARIANT_BOOL Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IgnoreNulls (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_IgnoreNulls (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
};

struct __declspec(uuid("03efaf27-3524-4dd2-9ea3-8546ea16fd94"))
IRMSFunction : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetComplete,put=PutComplete))
    VARIANT_BOOL Complete;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetComplete ( );
    void PutComplete (
        VARIANT_BOOL Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Complete (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Complete (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
};

struct __declspec(uuid("1c344736-72c9-46e1-bee6-98db3e88fc38"))
IStochasticFunction : IDispatch
{};

struct __declspec(uuid("5706d771-e194-43b0-9d96-6708b72819b0"))
INativeExport : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT SaveToFile (
        _bstr_t FileName,
        VARIANT_BOOL IncludeData );
    _variant_t SaveToStream (
        VARIANT_BOOL IncludeData );
    _variant_t SaveToBase64Stream (
        VARIANT_BOOL IncludeData );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_SaveToFile (
        /*[in]*/ BSTR FileName,
        /*[in]*/ VARIANT_BOOL IncludeData ) = 0;
      virtual HRESULT __stdcall raw_SaveToStream (
        /*[in]*/ VARIANT_BOOL IncludeData,
        /*[out,retval]*/ VARIANT * Value ) = 0;
      virtual HRESULT __stdcall raw_SaveToBase64Stream (
        /*[in]*/ VARIANT_BOOL IncludeData,
        /*[out,retval]*/ VARIANT * retVal ) = 0;
};

struct __declspec(uuid("5a309c93-af6a-4991-bc28-1065134b0b85"))
IDataExport : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIncludeHeader,put=PutIncludeHeader))
    VARIANT_BOOL IncludeHeader;
    __declspec(property(get=GetIncludeLabels,put=PutIncludeLabels))
    VARIANT_BOOL IncludeLabels;
    __declspec(property(get=GetIncludeIndex,put=PutIncludeIndex))
    VARIANT_BOOL IncludeIndex;
    __declspec(property(get=GetSeries,put=PutSeries))
    _variant_t Series;
    __declspec(property(get=GetIncludeColors,put=PutIncludeColors))
    VARIANT_BOOL IncludeColors;
    __declspec(property(get=GetUseSeriesFormat,put=PutUseSeriesFormat))
    VARIANT_BOOL UseSeriesFormat;
    __declspec(property(get=GetValueFormat,put=PutValueFormat))
    _bstr_t ValueFormat;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIncludeHeader ( );
    void PutIncludeHeader (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetIncludeLabels ( );
    void PutIncludeLabels (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetIncludeIndex ( );
    void PutIncludeIndex (
        VARIANT_BOOL Value );
    _variant_t GetSeries ( );
    void PutSeries (
        const _variant_t & Value );
    HRESULT SaveToFile (
        _bstr_t FileName );
    _variant_t SaveToStream ( );
    _bstr_t AsString ( );
    VARIANT_BOOL GetIncludeColors ( );
    void PutIncludeColors (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetUseSeriesFormat ( );
    void PutUseSeriesFormat (
        VARIANT_BOOL Value );
    _bstr_t GetValueFormat ( );
    void PutValueFormat (
        _bstr_t Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IncludeHeader (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_IncludeHeader (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_IncludeLabels (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_IncludeLabels (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_IncludeIndex (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_IncludeIndex (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_Series (
        /*[out,retval]*/ VARIANT * Value ) = 0;
      virtual HRESULT __stdcall put_Series (
        /*[in]*/ VARIANT Value ) = 0;
      virtual HRESULT __stdcall raw_SaveToFile (
        /*[in]*/ BSTR FileName ) = 0;
      virtual HRESULT __stdcall raw_SaveToStream (
        /*[out,retval]*/ VARIANT * Value ) = 0;
      virtual HRESULT __stdcall raw_AsString (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall get_IncludeColors (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_IncludeColors (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_UseSeriesFormat (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_UseSeriesFormat (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_ValueFormat (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall put_ValueFormat (
        /*[in]*/ BSTR Value ) = 0;
};

struct __declspec(uuid("75295a72-43b5-418c-ba98-be48fc7de7c5"))
IXMLExport : IDataExport
{};

struct __declspec(uuid("5f56734a-1e58-432b-872c-9116b314d304"))
IXLSExport : IDataExport
{};

struct __declspec(uuid("585ef2dc-4645-40c3-ac68-a569978f12eb"))
IHTMLExport : IDataExport
{};

struct __declspec(uuid("6ab1b24a-c466-4268-acf3-650000f12910"))
ITextExport : IDataExport
{
    //
    // Property data
    //

    __declspec(property(get=GetTextDelimiter,put=PutTextDelimiter))
    _bstr_t TextDelimiter;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetTextDelimiter ( );
    void PutTextDelimiter (
        _bstr_t Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_TextDelimiter (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall put_TextDelimiter (
        /*[in]*/ BSTR Value ) = 0;
};

enum __declspec(uuid("31fdfce7-416b-4e80-948f-f5ecdb8e2170"))
ETeeCommanderControls
{
    tcbNormal = 0,
    tcbSeparator = 1,
    tcbRotate = 2,
    tcbMove = 3,
    tcbZoom = 4,
    tcbDepth = 5,
    tcbEdit = 6,
    tcbPrintPreview = 7,
    tcbCopy = 8,
    tcbSave = 9,
    tcbLabel = 10,
    tcb3D = 11
};

enum __declspec(uuid("c24dff83-21e0-4bb7-a959-a1aadd0c81bd"))
EAnnotationPosition
{
    ppLeftTop = 0,
    ppLeftBottom = 1,
    ppRightTop = 2,
    ppRightBottom = 3,
    ppCenter = 4
};

struct __declspec(uuid("2640f6d4-985a-484b-926e-bd4ef5053b0d"))
ISeriesTextField : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetFieldIndex,put=PutFieldIndex))
    long FieldIndex;
    __declspec(property(get=GetFieldName,put=PutFieldName))
    _bstr_t FieldName;

    //
    // Wrapper methods for error-handling
    //

    long GetFieldIndex ( );
    void PutFieldIndex (
        long Value );
    _bstr_t GetFieldName ( );
    void PutFieldName (
        _bstr_t Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_FieldIndex (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_FieldIndex (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_FieldName (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall put_FieldName (
        /*[in]*/ BSTR Value ) = 0;
};

struct __declspec(uuid("72b7ea89-dfb1-4c2e-b6f5-ae63de7547f8"))
ISeriesTextFields : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItems))
    ISeriesTextFieldPtr Items[];
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    ISeriesTextFieldPtr GetItems (
        long Index );
    HRESULT Clear ( );
    HRESULT Delete (
        long Index );
    long GetCount ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Items (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct ISeriesTextField * * Value ) = 0;
      virtual HRESULT __stdcall raw_Clear ( ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[in]*/ long Index ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Value ) = 0;
};

struct __declspec(uuid("de74b69e-27f4-4643-be3e-0179dd186b80"))
ChartGrid;
    // [ default ] interface IChartGrid
    // [ default, source ] dispinterface IChartGridEvents

enum __declspec(uuid("3c96ff2f-c950-4190-9297-0784bcb0f04a"))
EDatasourceType
{
    dstAllRecords = 0,
    dstSingleRecord = 1
};

struct __declspec(uuid("64ecd605-294d-46d6-87b7-af89f388b793"))
IValueLists : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetItems))
    IValueListPtr Items[];

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    IValueListPtr GetItems (
        long Index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_Items (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IValueList * * Value ) = 0;
};

struct __declspec(uuid("9836add3-5ed1-4394-bd5f-4dfc1445475b"))
IChartGridRows : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetHeights,put=PutHeights))
    long Heights[];
    __declspec(property(get=GetRow,put=PutRow))
    long Row;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    long GetRow ( );
    void PutRow (
        long Value );
    long GetCount ( );
    long GetHeights (
        long Index );
    void PutHeights (
        long Index,
        long Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Row (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Row (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_Heights (
        /*[in]*/ long Index,
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Heights (
        /*[in]*/ long Index,
        /*[in]*/ long Value ) = 0;
};

struct __declspec(uuid("6efeb88e-086f-456e-b25d-c9fd1146c147"))
IChartGridCols : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCol,put=PutCol))
    long Col;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetWidths,put=PutWidths))
    long Widths[];

    //
    // Wrapper methods for error-handling
    //

    long GetCol ( );
    void PutCol (
        long Value );
    long GetCount ( );
    long GetWidths (
        long Index );
    void PutWidths (
        long Index,
        long Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Col (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Col (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_Widths (
        /*[in]*/ long Index,
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Widths (
        /*[in]*/ long Index,
        /*[in]*/ long Value ) = 0;
};

enum __declspec(uuid("edfc7366-be05-4578-abc4-5d725c22a67f"))
EPenEndStyle
{
    esRound = 0,
    esSquare = 1,
    esFlat = 2
};

#pragma pack(push, 4)

struct __declspec(uuid("46597bbe-4cfb-4279-a47a-96358e108558"))
TeePoint2D
{
    long X;
    long Y;
};

#pragma pack(pop)

enum __declspec(uuid("60601cb4-8ca4-4719-9fcc-39b2f4f7ae04"))
EMarginUnits
{
    muPercent = 0,
    muPixels = 1
};

enum __declspec(uuid("e0e665e9-5850-4583-9b82-eedce21a0022"))
EColorLineStyle
{
    clCustom = 0,
    clMaximum = 1,
    clCenter = 2,
    clMinimum = 3
};

enum __declspec(uuid("a783e8ef-37dc-4c7c-ac34-b3a99de9c170"))
EArrowHeadStyle
{
    ahNone = 0,
    ahLine = 1,
    ahSolid = 2
};

struct __declspec(uuid("3b41be1c-a7f4-4c59-aa59-104376904b34"))
ISmoothPoints : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetActive,put=PutActive))
    VARIANT_BOOL Active;
    __declspec(property(get=GetInterpolate,put=PutInterpolate))
    VARIANT_BOOL Interpolate;
    __declspec(property(get=GetFactor,put=PutFactor))
    long Factor;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetActive ( );
    void PutActive (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetInterpolate ( );
    void PutInterpolate (
        VARIANT_BOOL Value );
    long GetFactor ( );
    void PutFactor (
        long Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Active (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Active (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_Interpolate (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Interpolate (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_Factor (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Factor (
        /*[in]*/ long Value ) = 0;
};

struct __declspec(uuid("75009193-06a4-4e3d-b145-0374a819461e"))
ILevelSegment : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetNumPoints))
    long NumPoints;
    __declspec(property(get=GetPoints))
    ITeePoint2DPtr Points[];

    //
    // Wrapper methods for error-handling
    //

    long GetNumPoints ( );
    ITeePoint2DPtr GetPoints (
        long Index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_NumPoints (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_Points (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct ITeePoint2D * * Value ) = 0;
};

struct __declspec(uuid("f8c384ed-b661-4cc5-bb9f-8c506d8b6a09"))
IGridTransposeTool : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetSeries,put=PutSeries))
    _variant_t Series;

    //
    // Wrapper methods for error-handling
    //

    HRESULT Transpose ( );
    _variant_t GetSeries ( );
    void PutSeries (
        const _variant_t & Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Transpose ( ) = 0;
      virtual HRESULT __stdcall get_Series (
        /*[out,retval]*/ VARIANT * Value ) = 0;
      virtual HRESULT __stdcall put_Series (
        /*[in]*/ VARIANT Value ) = 0;
};

enum __declspec(uuid("c9b1e5fe-1d29-49e9-b721-9336502c7602"))
EGanttToolPartBar
{
    pbStart = 0,
    pbAll = 1,
    pbEnd = 2
};

enum __declspec(uuid("0f45c470-3368-4b8a-b92e-5fad1df3999a"))
EPieToolStyle
{
    ptFocus = 0,
    ptExplode = 1
};

struct __declspec(uuid("09f39ccd-b5d6-4f33-aafb-25b568ddac27"))
ISmoothingFunction : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetInterpolate,put=PutInterpolate))
    VARIANT_BOOL Interpolate;
    __declspec(property(get=GetFactor,put=PutFactor))
    long Factor;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetInterpolate ( );
    void PutInterpolate (
        VARIANT_BOOL Value );
    long GetFactor ( );
    void PutFactor (
        long Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Interpolate (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Interpolate (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_Factor (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Factor (
        /*[in]*/ long Value ) = 0;
};

struct __declspec(uuid("ad589bfa-6e34-4da2-894e-7de4c9b127b3"))
ICustomFunction : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetX,put=PutX))
    double X;
    __declspec(property(get=GetNumPoints,put=PutNumPoints))
    long NumPoints;
    __declspec(property(get=GetStartX,put=PutStartX))
    double StartX;

    //
    // Wrapper methods for error-handling
    //

    long GetNumPoints ( );
    void PutNumPoints (
        long Value );
    double GetStartX ( );
    void PutStartX (
        double Value );
    double GetX ( );
    void PutX (
        double Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_NumPoints (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_NumPoints (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_StartX (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_StartX (
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall get_X (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_X (
        /*[in]*/ double Value ) = 0;
};

enum __declspec(uuid("7f14ccf3-44ca-4ddf-a200-49a683a07888"))
ECompressionPeriod
{
    ocDay = 0,
    ocWeek = 1,
    ocMonth = 2,
    ocBiMonth = 3,
    ocQuarter = 4,
    ocYear = 5
};

struct __declspec(uuid("2bd3fedc-583e-4f97-bd6a-2f560a5e6b0c"))
ICompressFunction : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCompress,put=PutCompress))
    enum ECompressionPeriod Compress;

    //
    // Wrapper methods for error-handling
    //

    enum ECompressionPeriod GetCompress ( );
    void PutCompress (
        enum ECompressionPeriod Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Compress (
        /*[out,retval]*/ enum ECompressionPeriod * Value ) = 0;
      virtual HRESULT __stdcall put_Compress (
        /*[in]*/ enum ECompressionPeriod Value ) = 0;
};

struct __declspec(uuid("fb76aaa9-db44-41cb-88d6-7cc55f7fc752"))
ICrossPointsFunction : IDispatch
{};

struct __declspec(uuid("8b8d64cb-8b2e-45b6-b859-5b87e6027847"))
ICLVFunction : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAccumulate,put=PutAccumulate))
    VARIANT_BOOL Accumulate;
    __declspec(property(get=GetVolume,put=PutVolume))
    _variant_t Volume;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetAccumulate ( );
    void PutAccumulate (
        VARIANT_BOOL Value );
    _variant_t GetVolume ( );
    void PutVolume (
        const _variant_t & Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Accumulate (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Accumulate (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_Volume (
        /*[out,retval]*/ VARIANT * Value ) = 0;
      virtual HRESULT __stdcall put_Volume (
        /*[in]*/ VARIANT Value ) = 0;
};

struct __declspec(uuid("e6466a2b-ec9e-48eb-94e5-6435c4dee97b"))
IOBVFunction : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetVolume,put=PutVolume))
    _variant_t Volume;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetVolume ( );
    void PutVolume (
        const _variant_t & Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Volume (
        /*[out,retval]*/ VARIANT * Value ) = 0;
      virtual HRESULT __stdcall put_Volume (
        /*[in]*/ VARIANT Value ) = 0;
};

struct __declspec(uuid("54242326-2d9d-45bd-9b0a-7a424a00ca92"))
ICCIFunction : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetConstant,put=PutConstant))
    double Constant;

    //
    // Wrapper methods for error-handling
    //

    double GetConstant ( );
    void PutConstant (
        double Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Constant (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_Constant (
        /*[in]*/ double Value ) = 0;
};

struct __declspec(uuid("5227cc4f-bb80-4cd0-a107-55bdc81285e0"))
IPVOFunction : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPercentage,put=PutPercentage))
    VARIANT_BOOL Percentage;
    __declspec(property(get=GetPeriod2,put=PutPeriod2))
    long Period2;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetPercentage ( );
    void PutPercentage (
        VARIANT_BOOL Value );
    long GetPeriod2 ( );
    void PutPeriod2 (
        long Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Percentage (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Percentage (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_Period2 (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Period2 (
        /*[in]*/ long Value ) = 0;
};

struct __declspec(uuid("059a33bb-181f-4b69-810a-bfb972239a93"))
IPerformanceFunction : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    double Calculate (
        long SourceSeriesIndex,
        long FirstIndex,
        long LastIndex );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Calculate (
        /*[in]*/ long SourceSeriesIndex,
        /*[in]*/ long FirstIndex,
        /*[in]*/ long LastIndex,
        /*[out,retval]*/ double * Value ) = 0;
};

enum __declspec(uuid("2da49b5d-56a4-47d8-8af2-6842041c4e7d"))
EHandStyle
{
    hsLine = 0,
    hsTriangle = 1
};

enum __declspec(uuid("f1c7d9d9-5a04-430b-9dc5-eb5e4c2e8c3f"))
ETowerStyle
{
    tsCube = 0,
    tsRectangle = 1,
    tsCover = 2,
    tsCylinder = 3,
    tsArrow = 4,
    tsCone = 5,
    tsPyramid = 6,
    tsSlantCube = 7
};

struct __declspec(uuid("17d6df37-ec2a-45cd-8fd6-336d9833f82d"))
SeriesXMLSource;
    // [ default ] interface ISeriesXMLSource

struct __declspec(uuid("bc93a02e-14cf-4c44-817c-11e2e7bf6f12"))
IPDFExport : IExportFormat
{};

struct __declspec(uuid("da158a28-f0e4-468a-a1c1-84d1b53a440c"))
IEPSExport : IExportFormat
{};

struct __declspec(uuid("510ce799-7da0-4338-828e-389bb5ce2555"))
SeriesTextSource;
    // [ default ] interface ISeriesTextSource

enum __declspec(uuid("a0d23238-0a36-4133-b03b-ea44826e1e4c"))
EGroupFormula
{
    gfCount = 0,
    gfSum = 1
};

struct __declspec(uuid("69909491-86c6-48ee-967c-d0a3317bf0e8"))
CrossTabSource;
    // [ default ] interface ICrossTabSource

struct __declspec(uuid("4c47f2e5-b222-4819-b0a8-23123bbcfc66"))
ITeeRect : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLeft))
    long Left;
    __declspec(property(get=GetTop))
    long Top;
    __declspec(property(get=GetRight))
    long Right;
    __declspec(property(get=GetBottom))
    long Bottom;

    //
    // Wrapper methods for error-handling
    //

    long GetLeft ( );
    long GetTop ( );
    long GetRight ( );
    long GetBottom ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_Right (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_Bottom (
        /*[out,retval]*/ long * Value ) = 0;
};

enum __declspec(uuid("11469df5-e502-4784-afa9-f82997564ac1"))
EDragPointStyle
{
    dsX = 0,
    dsY = 1,
    dsBoth = 2
};

struct __declspec(uuid("db5480ba-7f0b-41e5-815c-3358b3a01a59"))
IDragPointTool : ICustomToolSeries
{
    //
    // Property data
    //

    __declspec(property(get=GetDragStyle,put=PutDragStyle))
    enum EDragPointStyle DragStyle;

    //
    // Wrapper methods for error-handling
    //

    enum EDragPointStyle GetDragStyle ( );
    void PutDragStyle (
        enum EDragPointStyle Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_DragStyle (
        /*[out,retval]*/ enum EDragPointStyle * Value ) = 0;
      virtual HRESULT __stdcall put_DragStyle (
        /*[in]*/ enum EDragPointStyle Value ) = 0;
};

enum __declspec(uuid("94923928-927f-4839-be50-48489eea0a73"))
EPositionUnits
{
    puPercent = 0,
    puPixels = 1
};

struct __declspec(uuid("0e0ee0be-95d1-42c8-8624-e145cc10cee2"))
ISVGExport : IExportFormat
{};

enum __declspec(uuid("701ccdae-2ec0-40fe-b997-8753c462272b"))
EScrollBarDrawStyle
{
    dsAlways = 0,
    dsWhenNeeded = 1
};

enum __declspec(uuid("b9318063-020c-40d2-a49b-37577e15a220"))
ELightStyle
{
    lsLinear = 0,
    lsSpotLight = 1
};

struct __declspec(uuid("6da18fcd-ed89-412a-ac92-7d411fe2175f"))
ILightTool : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetFactor,put=PutFactor))
    long Factor;
    __declspec(property(get=GetLeft,put=PutLeft))
    long Left;
    __declspec(property(get=GetStyle,put=PutStyle))
    enum ELightStyle Style;
    __declspec(property(get=GetTop,put=PutTop))
    long Top;
    __declspec(property(get=GetFollowMouse,put=PutFollowMouse))
    VARIANT_BOOL FollowMouse;

    //
    // Wrapper methods for error-handling
    //

    long GetFactor ( );
    void PutFactor (
        long Value );
    long GetLeft ( );
    void PutLeft (
        long Value );
    enum ELightStyle GetStyle ( );
    void PutStyle (
        enum ELightStyle Value );
    long GetTop ( );
    void PutTop (
        long Value );
    VARIANT_BOOL GetFollowMouse ( );
    void PutFollowMouse (
        VARIANT_BOOL Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Factor (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Factor (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ enum ELightStyle * Value ) = 0;
      virtual HRESULT __stdcall put_Style (
        /*[in]*/ enum ELightStyle Value ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_FollowMouse (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_FollowMouse (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
};

struct __declspec(uuid("eea3f5fe-8878-4b8c-9c67-7b00180b26b3"))
ISurfaceNearestTool : ICustomToolSeries
{
    //
    // Property data
    //

    __declspec(property(get=GetCellColor,put=PutCellColor))
    OLE_COLOR CellColor;
    __declspec(property(get=GetColumnColor,put=PutColumnColor))
    OLE_COLOR ColumnColor;
    __declspec(property(get=GetRowColor,put=PutRowColor))
    OLE_COLOR RowColor;
    __declspec(property(get=GetSelectedCell,put=PutSelectedCell))
    long SelectedCell;

    //
    // Wrapper methods for error-handling
    //

    OLE_COLOR GetCellColor ( );
    void PutCellColor (
        OLE_COLOR Value );
    OLE_COLOR GetColumnColor ( );
    void PutColumnColor (
        OLE_COLOR Value );
    OLE_COLOR GetRowColor ( );
    void PutRowColor (
        OLE_COLOR Value );
    long GetSelectedCell ( );
    void PutSelectedCell (
        long Value );
    long GetRow ( );
    long GetCol ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_CellColor (
        /*[out,retval]*/ OLE_COLOR * Value ) = 0;
      virtual HRESULT __stdcall put_CellColor (
        /*[in]*/ OLE_COLOR Value ) = 0;
      virtual HRESULT __stdcall get_ColumnColor (
        /*[out,retval]*/ OLE_COLOR * Value ) = 0;
      virtual HRESULT __stdcall put_ColumnColor (
        /*[in]*/ OLE_COLOR Value ) = 0;
      virtual HRESULT __stdcall get_RowColor (
        /*[out,retval]*/ OLE_COLOR * Value ) = 0;
      virtual HRESULT __stdcall put_RowColor (
        /*[in]*/ OLE_COLOR Value ) = 0;
      virtual HRESULT __stdcall get_SelectedCell (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_SelectedCell (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_GetRow (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall raw_GetCol (
        /*[out,retval]*/ long * Value ) = 0;
};

struct __declspec(uuid("d88e90f1-17a7-4b13-b6b4-ab5344c0c32a"))
IAxisScrollTool : ICustomToolAxis
{
    //
    // Property data
    //

    __declspec(property(get=GetScrollInverted,put=PutScrollInverted))
    VARIANT_BOOL ScrollInverted;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetScrollInverted ( );
    void PutScrollInverted (
        VARIANT_BOOL Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ScrollInverted (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_ScrollInverted (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
};

struct __declspec(uuid("13ccdc95-896b-4cbe-be0d-e1677215f48f"))
ICustomSortedFunction : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIncludeNulls,put=PutIncludeNulls))
    VARIANT_BOOL IncludeNulls;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIncludeNulls ( );
    void PutIncludeNulls (
        VARIANT_BOOL Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IncludeNulls (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_IncludeNulls (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
};

struct __declspec(uuid("e6e22954-ba25-4d63-a2ee-be938746cb06"))
IModeFunction : ICustomSortedFunction
{};

struct __declspec(uuid("0882c319-83fa-4f0d-a821-38e69cb2fdd4"))
IMedianFunction : ICustomSortedFunction
{};

struct __declspec(uuid("ec2af49b-0ff6-4a6f-a627-27e2f6299b01"))
ICorrelationFunction : IDispatch
{};

struct __declspec(uuid("e700941d-8b89-4c99-9419-d9e3260f5b65"))
IVarianceFunction : IDispatch
{};

struct __declspec(uuid("4edc3fa7-4d93-4da2-8267-774d4e93e72f"))
IPerimeterFunction : IDispatch
{};

enum __declspec(uuid("c34275f3-ccb1-4afe-b7d1-4d385b87a230"))
EChartTheme
{
    ctDefault = 0,
    ctExcel = 1,
    ctClassic = 2,
    ctBusiness = 3,
    ctWeb = 4,
    ctWindowsXP = 5,
    ctBlueSky = 6,
    ctFacts = 7,
    ctRandom = 8,
    ctOpera = 9
};

enum __declspec(uuid("af61d0eb-4edd-4d7a-8ca5-a25954525862"))
EColorPalette
{
    cpTeeChart = 0,
    cpExcel = 1,
    cpVictorian = 2,
    cpPastel = 3,
    cpSolid = 4,
    cpClassic = 5,
    cpWeb = 6,
    cpModern = 7,
    cpRainbow = 8,
    cpWindowsXP = 9,
    cpMacOS = 10,
    cpWinVista = 11,
    cpGrayScale = 12,
    cpOpera = 13,
    cpWarm = 14,
    cpCool = 15
};

enum __declspec(uuid("ddce0b47-ac12-42a5-b29c-eec89280689d"))
EDownSampleMethod
{
    dsDouglas = 0,
    dsMax = 1,
    dsMin = 2,
    dsMinMax = 3,
    dsAverage = 4
};

struct __declspec(uuid("d66d7eb7-7f65-43a1-86fc-6f1d69831115"))
IDownSamplingFunction : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetDownSampleMethod,put=PutDownSampleMethod))
    enum EDownSampleMethod DownSampleMethod;
    __declspec(property(get=GetTolerance,put=PutTolerance))
    long Tolerance;
    __declspec(property(get=GetReducedSize))
    long ReducedSize;

    //
    // Wrapper methods for error-handling
    //

    enum EDownSampleMethod GetDownSampleMethod ( );
    void PutDownSampleMethod (
        enum EDownSampleMethod Value );
    long GetTolerance ( );
    void PutTolerance (
        long Value );
    long GetReducedSize ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_DownSampleMethod (
        /*[out,retval]*/ enum EDownSampleMethod * Value ) = 0;
      virtual HRESULT __stdcall put_DownSampleMethod (
        /*[in]*/ enum EDownSampleMethod Value ) = 0;
      virtual HRESULT __stdcall get_Tolerance (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Tolerance (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_ReducedSize (
        /*[out,retval]*/ long * Value ) = 0;
};

enum __declspec(uuid("cac167e6-5617-4454-b0c2-a17935bb178f"))
ESeriesGroupActive
{
    gaYes = 0,
    gaNo = 1,
    gaSome = 2
};

enum __declspec(uuid("7221bf32-e7fc-4cfb-9dbf-92360df49329"))
ECheckBoxesStyle
{
    cbsCheck = 0,
    cbsRadio = 1
};

struct __declspec(uuid("24a005bb-eaa5-4da9-9116-ecad89cdd898"))
ITeeCommanderButton : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT Hide ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Hide ( ) = 0;
};

struct __declspec(uuid("62388638-1b14-48d5-b3b5-93b02ec9230a"))
IPointArray : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetItem))
    ITeePoint2DPtr Item[];

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    ITeePoint2DPtr GetItem (
        long Index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct ITeePoint2D * * Value ) = 0;
};

enum __declspec(uuid("66c6fa26-5deb-4d46-9327-07029a639936"))
ECandleColorStyle
{
    cssRelativeToOpen = 0,
    cssRelativeToClose = 1
};

enum __declspec(uuid("466050cd-14a9-478a-91ef-78a21e970b0e"))
ELoadMode
{
    lmClear = 0,
    lmAppend = 1
};

struct __declspec(uuid("303d35c4-1f51-478d-b67b-266bb1b2d6ef"))
ILegendItem : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetSymbolRect,put=PutSymbolRect))
    struct TeeRect SymbolRect;
    __declspec(property(get=GetAlign))
    long Align;
    __declspec(property(get=GetLeft))
    long Left;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetTop))
    long Top;

    //
    // Wrapper methods for error-handling
    //

    struct TeeRect GetSymbolRect ( );
    void PutSymbolRect (
        struct TeeRect Value );
    long GetAlign ( );
    long GetLeft ( );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t Value );
    long GetTop ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_SymbolRect (
        /*[out,retval]*/ struct TeeRect * Value ) = 0;
      virtual HRESULT __stdcall put_SymbolRect (
        /*[in]*/ struct TeeRect Value ) = 0;
      virtual HRESULT __stdcall get_Align (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR Value ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ long * Value ) = 0;
};

struct __declspec(uuid("c30d9607-2367-4d9c-aa6b-65a2509a42b2"))
ILegendItems : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCustom,put=PutCustom))
    VARIANT_BOOL Custom;
    __declspec(property(get=GetItems))
    ILegendItemPtr Items[];

    //
    // Wrapper methods for error-handling
    //

    HRESULT Clear ( );
    VARIANT_BOOL GetCustom ( );
    void PutCustom (
        VARIANT_BOOL Value );
    ILegendItemPtr GetItems (
        long Index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Clear ( ) = 0;
      virtual HRESULT __stdcall get_Custom (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Custom (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_Items (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct ILegendItem * * Value ) = 0;
};

struct __declspec(uuid("21e55447-e34a-4c87-810b-26c784cfcd44"))
ISeriesStatsTool : ICustomToolSeries
{
    //
    // Property data
    //

    __declspec(property(get=GetStatistics))
    IStringsPtr Statistics;

    //
    // Wrapper methods for error-handling
    //

    IStringsPtr GetStatistics ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Statistics (
        /*[out,retval]*/ struct IStrings * * Value ) = 0;
};

struct __declspec(uuid("4c672492-ae61-40fc-bce4-2c4fb5f20c73"))
IVideoTool : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetFrameCount))
    long FrameCount;
    __declspec(property(get=GetIsRecording))
    VARIANT_BOOL IsRecording;
    __declspec(property(get=GetCompression,put=PutCompression))
    _bstr_t Compression;
    __declspec(property(get=GetCompressionQuality,put=PutCompressionQuality))
    long CompressionQuality;
    __declspec(property(get=GetFileName,put=PutFileName))
    _bstr_t FileName;
    __declspec(property(get=GetFrameDuration,put=PutFrameDuration))
    long FrameDuration;

    //
    // Wrapper methods for error-handling
    //

    HRESULT StartRecording (
        _bstr_t FileName );
    HRESULT StopRecording ( );
    long GetFrameCount ( );
    VARIANT_BOOL GetIsRecording ( );
    _bstr_t GetCompression ( );
    void PutCompression (
        _bstr_t Value );
    long GetCompressionQuality ( );
    void PutCompressionQuality (
        long Value );
    _bstr_t GetFileName ( );
    void PutFileName (
        _bstr_t Value );
    long GetFrameDuration ( );
    void PutFrameDuration (
        long Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_StartRecording (
        /*[in]*/ BSTR FileName ) = 0;
      virtual HRESULT __stdcall raw_StopRecording ( ) = 0;
      virtual HRESULT __stdcall get_FrameCount (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_IsRecording (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall get_Compression (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall put_Compression (
        /*[in]*/ BSTR Value ) = 0;
      virtual HRESULT __stdcall get_CompressionQuality (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_CompressionQuality (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_FileName (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall put_FileName (
        /*[in]*/ BSTR Value ) = 0;
      virtual HRESULT __stdcall get_FrameDuration (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_FrameDuration (
        /*[in]*/ long Value ) = 0;
};

struct __declspec(uuid("b68c5d3c-e47c-4000-a548-7748afc9262c"))
IFilterRegion : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetHeight,put=PutHeight))
    long Height;
    __declspec(property(get=GetLeft,put=PutLeft))
    long Left;
    __declspec(property(get=GetTop,put=PutTop))
    long Top;
    __declspec(property(get=GetWidth,put=PutWidth))
    long Width;

    //
    // Wrapper methods for error-handling
    //

    HRESULT SetRectangle (
        long Left,
        long Top,
        long Right,
        long Bottom );
    long GetHeight ( );
    void PutHeight (
        long Value );
    long GetLeft ( );
    void PutLeft (
        long Value );
    long GetTop ( );
    void PutTop (
        long Value );
    long GetWidth ( );
    void PutWidth (
        long Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_SetRectangle (
        /*[in]*/ long Left,
        /*[in]*/ long Top,
        /*[in]*/ long Right,
        /*[in]*/ long Bottom ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ long Value ) = 0;
};

enum __declspec(uuid("5c9b8186-1833-4d28-969a-5436e8042762"))
EFilterClass
{
    fcConvolve = 0,
    fcBlur = 1,
    fcResize = 2,
    fcCrop = 3,
    fcInvert = 4,
    fcGrayScale = 5,
    fcFlip = 6,
    fcReverse = 7,
    fcAmount = 8,
    fcMosaic = 9,
    fcBrightness = 10,
    fcContrast = 11,
    fcColor = 12,
    fcHueLumSat = 13,
    fcSharpen = 14,
    fcEmboss = 15,
    fcSoften = 16,
    fcGammaCorrection = 17,
    fcRotate = 18,
    fcMirror = 19,
    fcTile = 20,
    fcBevel = 21,
    fcZoom = 22
};

struct __declspec(uuid("142ce71e-2d1b-4a48-9c74-1fd531f2953a"))
ITransposeSeriesTool : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT Transpose ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Transpose ( ) = 0;
};

struct __declspec(uuid("19b4503e-f54c-4336-83af-eef8b30ddc27"))
ISubsetTeeFunction : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetStartValue,put=PutStartValue))
    double StartValue;
    __declspec(property(get=GetEndValue,put=PutEndValue))
    double EndValue;

    //
    // Wrapper methods for error-handling
    //

    double GetStartValue ( );
    void PutStartValue (
        double Value );
    double GetEndValue ( );
    void PutEndValue (
        double Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_StartValue (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_StartValue (
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall get_EndValue (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_EndValue (
        /*[in]*/ double Value ) = 0;
};

struct __declspec(uuid("bf8fb65b-e0ff-4bf1-a2d3-7fcb9af09f73"))
IHistogramFunction : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCumulative,put=PutCumulative))
    VARIANT_BOOL Cumulative;
    __declspec(property(get=GetNumBins,put=PutNumBins))
    long NumBins;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetCumulative ( );
    void PutCumulative (
        VARIANT_BOOL Value );
    long GetNumBins ( );
    void PutNumBins (
        long Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Cumulative (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Cumulative (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_NumBins (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_NumBins (
        /*[in]*/ long Value ) = 0;
};

struct __declspec(uuid("7ba6e7aa-e5fc-451c-9056-d437aa074d27"))
ISARFunction : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAccelerationFactor,put=PutAccelerationFactor))
    double AccelerationFactor;
    __declspec(property(get=GetMaxStep,put=PutMaxStep))
    double MaxStep;

    //
    // Wrapper methods for error-handling
    //

    double GetAccelerationFactor ( );
    void PutAccelerationFactor (
        double Value );
    double GetMaxStep ( );
    void PutMaxStep (
        double Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_AccelerationFactor (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_AccelerationFactor (
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall get_MaxStep (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_MaxStep (
        /*[in]*/ double Value ) = 0;
};

struct __declspec(uuid("336c2e03-2f07-45e8-8834-26b4bcf504c3"))
IConvolveFilter : IDispatch
{};

struct __declspec(uuid("fbba3360-e18a-482a-bfae-8a19c2625e01"))
IBlurFilter : IConvolveFilter
{
    //
    // Property data
    //

    __declspec(property(get=GetAmount,put=PutAmount))
    long Amount;
    __declspec(property(get=GetSteps,put=PutSteps))
    long Steps;

    //
    // Wrapper methods for error-handling
    //

    long GetAmount ( );
    void PutAmount (
        long Value );
    long GetSteps ( );
    void PutSteps (
        long Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Amount (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Amount (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_Steps (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Steps (
        /*[in]*/ long Value ) = 0;
};

struct __declspec(uuid("6d92f682-e70d-4a43-a7e7-a28b6fd9f372"))
IResizeFilter : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetWidth,put=PutWidth))
    long Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    long Height;

    //
    // Wrapper methods for error-handling
    //

    long GetWidth ( );
    void PutWidth (
        long Value );
    long GetHeight ( );
    void PutHeight (
        long Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ long Value ) = 0;
};

struct __declspec(uuid("3997d182-bb41-403b-ab2d-d695d888793d"))
ICropFilter : IResizeFilter
{
    //
    // Property data
    //

    __declspec(property(get=GetLeft,put=PutLeft))
    long Left;
    __declspec(property(get=GetTop,put=PutTop))
    long Top;

    //
    // Wrapper methods for error-handling
    //

    long GetLeft ( );
    void PutLeft (
        long Value );
    long GetTop ( );
    void PutTop (
        long Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ long Value ) = 0;
};

struct __declspec(uuid("5ab21373-bca7-443e-a4d4-079c715ec09d"))
IInvertFilter : IDispatch
{};

enum __declspec(uuid("3e611b72-4592-4319-85a2-23045e4ef680"))
EGrayMethod
{
    gmSimple = 0,
    gmEye = 1,
    gmEye2 = 2
};

struct __declspec(uuid("99cbf1eb-64d1-4afc-a7f7-4cba70992561"))
IGrayScaleFilter : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetMethod,put=PutMethod))
    enum EGrayMethod Method;

    //
    // Wrapper methods for error-handling
    //

    enum EGrayMethod GetMethod ( );
    void PutMethod (
        enum EGrayMethod Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Method (
        /*[out,retval]*/ enum EGrayMethod * Value ) = 0;
      virtual HRESULT __stdcall put_Method (
        /*[in]*/ enum EGrayMethod Value ) = 0;
};

struct __declspec(uuid("45c1af84-5df4-466a-b7eb-24c07c6e4526"))
IFlipFilter : IDispatch
{};

struct __declspec(uuid("72061ec4-730d-4ef4-9c4f-e75fd2ea16f6"))
IReverseFilter : IDispatch
{};

struct __declspec(uuid("e9612b8d-1d97-41f0-988c-31b3dd1c4d84"))
IAmountFilter : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPercent,put=PutPercent))
    VARIANT_BOOL Percent;
    __declspec(property(get=GetAmount,put=PutAmount))
    long Amount;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetPercent ( );
    void PutPercent (
        VARIANT_BOOL Value );
    long GetAmount ( );
    void PutAmount (
        long Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Percent (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Percent (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_Amount (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Amount (
        /*[in]*/ long Value ) = 0;
};

struct __declspec(uuid("262477ec-9964-4cef-9127-b0521eb378bb"))
IMosaicFilter : IAmountFilter
{};

struct __declspec(uuid("c2310f60-ba01-400c-8b87-de6753e378a9"))
IBrightnessFilter : IAmountFilter
{};

struct __declspec(uuid("2c3bf213-1fdf-4175-8cda-bbc8d976126e"))
IContrastFilter : IAmountFilter
{};

struct __declspec(uuid("8097eb99-1f8e-433c-89b0-d8de32a4a9c0"))
IColorFilter : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetRed,put=PutRed))
    long Red;
    __declspec(property(get=GetGreen,put=PutGreen))
    long Green;
    __declspec(property(get=GetBlue,put=PutBlue))
    long Blue;

    //
    // Wrapper methods for error-handling
    //

    long GetRed ( );
    void PutRed (
        long Value );
    long GetGreen ( );
    void PutGreen (
        long Value );
    long GetBlue ( );
    void PutBlue (
        long Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Red (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Red (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_Green (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Green (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_Blue (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Blue (
        /*[in]*/ long Value ) = 0;
};

struct __declspec(uuid("88c1b7a8-edf1-4236-813e-bdfb74ee521b"))
IHueLumSatFilter : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetHue,put=PutHue))
    long Hue;
    __declspec(property(get=GetLuminance,put=PutLuminance))
    long Luminance;
    __declspec(property(get=GetSaturation,put=PutSaturation))
    long Saturation;

    //
    // Wrapper methods for error-handling
    //

    long GetHue ( );
    void PutHue (
        long Value );
    long GetLuminance ( );
    void PutLuminance (
        long Value );
    long GetSaturation ( );
    void PutSaturation (
        long Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Hue (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Hue (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_Luminance (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Luminance (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_Saturation (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Saturation (
        /*[in]*/ long Value ) = 0;
};

struct __declspec(uuid("e58887b4-fb87-4aff-ab68-d0fdcc28f476"))
ISharpenFilter : IConvolveFilter
{};

struct __declspec(uuid("7322c787-efee-46d0-99a2-9323f7537933"))
IEmbossFilter : IConvolveFilter
{};

struct __declspec(uuid("9e71a825-8554-4501-b72f-83e5aa82c35f"))
ISoftenFilter : IConvolveFilter
{};

struct __declspec(uuid("004668ee-fe52-40c7-a330-3d10c231f65f"))
IGammaCorrectionFilter : IAmountFilter
{};

struct __declspec(uuid("171dbced-10eb-4445-ac86-ecbc6486924a"))
IRotateFilter : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAngle,put=PutAngle))
    double Angle;
    __declspec(property(get=GetAutoSize,put=PutAutoSize))
    VARIANT_BOOL AutoSize;
    __declspec(property(get=GetBackColor,put=PutBackColor))
    OLE_COLOR BackColor;

    //
    // Wrapper methods for error-handling
    //

    double GetAngle ( );
    void PutAngle (
        double Value );
    VARIANT_BOOL GetAutoSize ( );
    void PutAutoSize (
        VARIANT_BOOL Value );
    OLE_COLOR GetBackColor ( );
    void PutBackColor (
        OLE_COLOR Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Angle (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_Angle (
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall get_AutoSize (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_AutoSize (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_BackColor (
        /*[out,retval]*/ OLE_COLOR * Value ) = 0;
      virtual HRESULT __stdcall put_BackColor (
        /*[in]*/ OLE_COLOR Value ) = 0;
};

enum __declspec(uuid("f37c1a52-6799-43f9-9818-1ca908b7c6d6"))
EMirrorDirection
{
    mdDown = 0,
    mdUp = 1,
    mdRight = 2,
    mdLeft = 3
};

struct __declspec(uuid("437752ad-402e-47c8-a712-79beb199db7e"))
IMirrorFilter : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetDirection,put=PutDirection))
    enum EMirrorDirection Direction;

    //
    // Wrapper methods for error-handling
    //

    enum EMirrorDirection GetDirection ( );
    void PutDirection (
        enum EMirrorDirection Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Direction (
        /*[out,retval]*/ enum EMirrorDirection * Value ) = 0;
      virtual HRESULT __stdcall put_Direction (
        /*[in]*/ enum EMirrorDirection Value ) = 0;
};

struct __declspec(uuid("fed2af48-f5de-44b8-9544-4fe7c680a45a"))
ITileFilter : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetNumCols,put=PutNumCols))
    long NumCols;
    __declspec(property(get=GetNumRows,put=PutNumRows))
    long NumRows;

    //
    // Wrapper methods for error-handling
    //

    long GetNumCols ( );
    void PutNumCols (
        long Value );
    long GetNumRows ( );
    void PutNumRows (
        long Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_NumCols (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_NumCols (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_NumRows (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_NumRows (
        /*[in]*/ long Value ) = 0;
};

struct __declspec(uuid("92481035-6d58-4bd4-81be-d3b6904dead0"))
IBevelFilter : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBright,put=PutBright))
    long Bright;
    __declspec(property(get=GetSize,put=PutSize))
    long Size;

    //
    // Wrapper methods for error-handling
    //

    long GetBright ( );
    void PutBright (
        long Value );
    long GetSize ( );
    void PutSize (
        long Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Bright (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Bright (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_Size (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Size (
        /*[in]*/ long Value ) = 0;
};

struct __declspec(uuid("f2986750-62fd-4eb7-9efd-ec440626302a"))
IZoomFilter : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPercent,put=PutPercent))
    double Percent;
    __declspec(property(get=GetSmooth,put=PutSmooth))
    VARIANT_BOOL Smooth;

    //
    // Wrapper methods for error-handling
    //

    double GetPercent ( );
    void PutPercent (
        double Value );
    VARIANT_BOOL GetSmooth ( );
    void PutSmooth (
        VARIANT_BOOL Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Percent (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_Percent (
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall get_Smooth (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Smooth (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
};

struct __declspec(uuid("c94121e7-766b-49eb-9085-bd821b644b85"))
ITeeFilter : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetasAmount))
    IAmountFilterPtr asAmount;
    __declspec(property(get=GetasResize))
    IResizeFilterPtr asResize;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetRegion))
    IFilterRegionPtr Region;
    __declspec(property(get=GetasCrop))
    ICropFilterPtr asCrop;
    __declspec(property(get=GetasGrayScale))
    IGrayScaleFilterPtr asGrayScale;
    __declspec(property(get=GetasMosaic))
    IMosaicFilterPtr asMosaic;
    __declspec(property(get=GetasColor))
    IColorFilterPtr asColor;
    __declspec(property(get=GetasHueLumSat))
    IHueLumSatFilterPtr asHueLumSat;
    __declspec(property(get=GetasRotate))
    IRotateFilterPtr asRotate;
    __declspec(property(get=GetasMirror))
    IMirrorFilterPtr asMirror;
    __declspec(property(get=GetasBlur))
    IBlurFilterPtr asBlur;
    __declspec(property(get=GetasBrightness))
    IBrightnessFilterPtr asBrightness;
    __declspec(property(get=GetasContrast))
    IContrastFilterPtr asContrast;
    __declspec(property(get=GetasGammaCorrection))
    IGammaCorrectionFilterPtr asGammaCorrection;
    __declspec(property(get=GetasSharpen))
    ISharpenFilterPtr asSharpen;
    __declspec(property(get=GetasEmboss))
    IEmbossFilterPtr asEmboss;
    __declspec(property(get=GetasSoften))
    ISoftenFilterPtr asSoften;
    __declspec(property(get=GetasTile))
    ITileFilterPtr asTile;
    __declspec(property(get=GetasBevel))
    IBevelFilterPtr asBevel;
    __declspec(property(get=GetasZoom))
    IZoomFilterPtr asZoom;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL Value );
    IFilterRegionPtr GetRegion ( );
    IResizeFilterPtr GetasResize ( );
    ICropFilterPtr GetasCrop ( );
    IGrayScaleFilterPtr GetasGrayScale ( );
    IMosaicFilterPtr GetasMosaic ( );
    IColorFilterPtr GetasColor ( );
    IHueLumSatFilterPtr GetasHueLumSat ( );
    IRotateFilterPtr GetasRotate ( );
    IMirrorFilterPtr GetasMirror ( );
    IBlurFilterPtr GetasBlur ( );
    IBrightnessFilterPtr GetasBrightness ( );
    IContrastFilterPtr GetasContrast ( );
    IGammaCorrectionFilterPtr GetasGammaCorrection ( );
    IAmountFilterPtr GetasAmount ( );
    ISharpenFilterPtr GetasSharpen ( );
    IEmbossFilterPtr GetasEmboss ( );
    ISoftenFilterPtr GetasSoften ( );
    ITileFilterPtr GetasTile ( );
    IBevelFilterPtr GetasBevel ( );
    IZoomFilterPtr GetasZoom ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_Region (
        /*[out,retval]*/ struct IFilterRegion * * Value ) = 0;
      virtual HRESULT __stdcall get_asResize (
        /*[out,retval]*/ struct IResizeFilter * * Value ) = 0;
      virtual HRESULT __stdcall get_asCrop (
        /*[out,retval]*/ struct ICropFilter * * Value ) = 0;
      virtual HRESULT __stdcall get_asGrayScale (
        /*[out,retval]*/ struct IGrayScaleFilter * * Value ) = 0;
      virtual HRESULT __stdcall get_asMosaic (
        /*[out,retval]*/ struct IMosaicFilter * * Value ) = 0;
      virtual HRESULT __stdcall get_asColor (
        /*[out,retval]*/ struct IColorFilter * * Value ) = 0;
      virtual HRESULT __stdcall get_asHueLumSat (
        /*[out,retval]*/ struct IHueLumSatFilter * * Value ) = 0;
      virtual HRESULT __stdcall get_asRotate (
        /*[out,retval]*/ struct IRotateFilter * * Value ) = 0;
      virtual HRESULT __stdcall get_asMirror (
        /*[out,retval]*/ struct IMirrorFilter * * Value ) = 0;
      virtual HRESULT __stdcall get_asBlur (
        /*[out,retval]*/ struct IBlurFilter * * Value ) = 0;
      virtual HRESULT __stdcall get_asBrightness (
        /*[out,retval]*/ struct IBrightnessFilter * * Value ) = 0;
      virtual HRESULT __stdcall get_asContrast (
        /*[out,retval]*/ struct IContrastFilter * * Value ) = 0;
      virtual HRESULT __stdcall get_asGammaCorrection (
        /*[out,retval]*/ struct IGammaCorrectionFilter * * Value ) = 0;
      virtual HRESULT __stdcall get_asAmount (
        /*[out,retval]*/ struct IAmountFilter * * Value ) = 0;
      virtual HRESULT __stdcall get_asSharpen (
        /*[out,retval]*/ struct ISharpenFilter * * Value ) = 0;
      virtual HRESULT __stdcall get_asEmboss (
        /*[out,retval]*/ struct IEmbossFilter * * Value ) = 0;
      virtual HRESULT __stdcall get_asSoften (
        /*[out,retval]*/ struct ISoftenFilter * * Value ) = 0;
      virtual HRESULT __stdcall get_asTile (
        /*[out,retval]*/ struct ITileFilter * * Value ) = 0;
      virtual HRESULT __stdcall get_asBevel (
        /*[out,retval]*/ struct IBevelFilter * * Value ) = 0;
      virtual HRESULT __stdcall get_asZoom (
        /*[out,retval]*/ struct IZoomFilter * * Value ) = 0;
};

struct __declspec(uuid("5df2c570-75c1-4660-b366-f2c346cbe092"))
IFilterItems : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    ITeeFilterPtr Item[];

    //
    // Wrapper methods for error-handling
    //

    long Add (
        enum EFilterClass FilterClass );
    HRESULT LoadImage (
        _bstr_t FileName );
    ITeeFilterPtr GetItem (
        long Index );
    HRESULT AssignImage (
        long ImageHandle );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ enum EFilterClass FilterClass,
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall raw_LoadImage (
        /*[in]*/ BSTR FileName ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct ITeeFilter * * Value ) = 0;
      virtual HRESULT __stdcall raw_AssignImage (
        /*[in]*/ long ImageHandle ) = 0;
};

enum __declspec(uuid("4c17c98e-c8a7-40da-9a23-e621b9034914"))
EPenLineMode
{
    lmLine = 0,
    lmCylinder = 1,
    lmRectangle = 2
};

struct __declspec(uuid("71d5cf8e-4f37-4472-ba78-18693ad0be8b"))
IGLLight : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;

    //
    // Wrapper methods for error-handling
    //

    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR Value );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * Value ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR Value ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
};

struct __declspec(uuid("898dd3ca-ee4d-4e29-8430-e7eaa6503b13"))
IGLPosition : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetX,put=PutX))
    double X;
    __declspec(property(get=GetY,put=PutY))
    double Y;
    __declspec(property(get=GetZ,put=PutZ))
    double Z;

    //
    // Wrapper methods for error-handling
    //

    double GetX ( );
    void PutX (
        double Value );
    double GetY ( );
    void PutY (
        double Value );
    double GetZ ( );
    void PutZ (
        double Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_X (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_X (
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall get_Y (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_Y (
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall get_Z (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_Z (
        /*[in]*/ double Value ) = 0;
};

struct __declspec(uuid("73b0080b-6a79-463d-981f-083d0e023dda"))
IGLLightSource : IGLLight
{
    //
    // Property data
    //

    __declspec(property(get=GetDirection))
    IGLPositionPtr Direction;
    __declspec(property(get=GetFixedPosition,put=PutFixedPosition))
    VARIANT_BOOL FixedPosition;
    __declspec(property(get=GetPosition))
    IGLPositionPtr Position;
    __declspec(property(get=GetSpotDegrees,put=PutSpotDegrees))
    double SpotDegrees;
    __declspec(property(get=GetUseDirection,put=PutUseDirection))
    VARIANT_BOOL UseDirection;

    //
    // Wrapper methods for error-handling
    //

    IGLPositionPtr GetDirection ( );
    VARIANT_BOOL GetFixedPosition ( );
    void PutFixedPosition (
        VARIANT_BOOL Value );
    IGLPositionPtr GetPosition ( );
    double GetSpotDegrees ( );
    void PutSpotDegrees (
        double Value );
    VARIANT_BOOL GetUseDirection ( );
    void PutUseDirection (
        VARIANT_BOOL Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Direction (
        /*[out,retval]*/ struct IGLPosition * * Value ) = 0;
      virtual HRESULT __stdcall get_FixedPosition (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_FixedPosition (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_Position (
        /*[out,retval]*/ struct IGLPosition * * Value ) = 0;
      virtual HRESULT __stdcall get_SpotDegrees (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_SpotDegrees (
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall get_UseDirection (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_UseDirection (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
};

struct __declspec(uuid("3dbc6ba9-c2fd-4bf7-8f07-82d7ccfd1596"))
ITeeOpenGL : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAmbientLight,put=PutAmbientLight))
    long AmbientLight;
    __declspec(property(get=GetLightPosition))
    ITeePoint3DPtr LightPosition;
    __declspec(property(get=GetActive,put=PutActive))
    VARIANT_BOOL Active;
    __declspec(property(get=GetLightColor,put=PutLightColor))
    OLE_COLOR LightColor;
    __declspec(property(get=GetFontOutlines,put=PutFontOutlines))
    VARIANT_BOOL FontOutlines;
    __declspec(property(get=GetShadeQuality,put=PutShadeQuality))
    VARIANT_BOOL ShadeQuality;
    __declspec(property(get=GetAntialias,put=PutAntialias))
    VARIANT_BOOL Antialias;
    __declspec(property(get=GetFontExtrusion,put=PutFontExtrusion))
    long FontExtrusion;
    __declspec(property(get=GetLight))
    IGLLightSourcePtr Light;
    __declspec(property(get=GetLight1))
    IGLLightSourcePtr Light1;
    __declspec(property(get=GetLight2))
    IGLLightSourcePtr Light2;
    __declspec(property(get=GetShininess,put=PutShininess))
    double Shininess;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetActive ( );
    void PutActive (
        VARIANT_BOOL Value );
    long GetAmbientLight ( );
    void PutAmbientLight (
        long Value );
    ITeePoint3DPtr GetLightPosition ( );
    OLE_COLOR GetLightColor ( );
    void PutLightColor (
        OLE_COLOR Value );
    VARIANT_BOOL GetFontOutlines ( );
    void PutFontOutlines (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetShadeQuality ( );
    void PutShadeQuality (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetAntialias ( );
    void PutAntialias (
        VARIANT_BOOL Value );
    long GetFontExtrusion ( );
    void PutFontExtrusion (
        long Value );
    IGLLightSourcePtr GetLight ( );
    IGLLightSourcePtr GetLight1 ( );
    IGLLightSourcePtr GetLight2 ( );
    double GetShininess ( );
    void PutShininess (
        double Value );
    HRESULT ShowEditor ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Active (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Active (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_AmbientLight (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_AmbientLight (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_LightPosition (
        /*[out,retval]*/ struct ITeePoint3D * * Value ) = 0;
      virtual HRESULT __stdcall get_LightColor (
        /*[out,retval]*/ OLE_COLOR * Value ) = 0;
      virtual HRESULT __stdcall put_LightColor (
        /*[in]*/ OLE_COLOR Value ) = 0;
      virtual HRESULT __stdcall get_FontOutlines (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_FontOutlines (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_ShadeQuality (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_ShadeQuality (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_Antialias (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Antialias (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_FontExtrusion (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_FontExtrusion (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_Light (
        /*[out,retval]*/ struct IGLLightSource * * Value ) = 0;
      virtual HRESULT __stdcall get_Light1 (
        /*[out,retval]*/ struct IGLLightSource * * Value ) = 0;
      virtual HRESULT __stdcall get_Light2 (
        /*[out,retval]*/ struct IGLLightSource * * Value ) = 0;
      virtual HRESULT __stdcall get_Shininess (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_Shininess (
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall raw_ShowEditor ( ) = 0;
};

struct __declspec(uuid("850d4eeb-0bfe-4bda-8da2-7794c9cf67e6"))
IAspect : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetRotation,put=PutRotation))
    long Rotation;
    __declspec(property(get=GetElevation,put=PutElevation))
    long Elevation;
    __declspec(property(get=GetZoomText,put=PutZoomText))
    VARIANT_BOOL ZoomText;
    __declspec(property(get=GetZoom,put=PutZoom))
    long Zoom;
    __declspec(property(get=GetOpenGL))
    ITeeOpenGLPtr OpenGL;
    __declspec(property(get=GetHorizOffset,put=PutHorizOffset))
    long HorizOffset;
    __declspec(property(get=GetVertOffset,put=PutVertOffset))
    long VertOffset;
    __declspec(property(get=GetTilt,put=PutTilt))
    long Tilt;
    __declspec(property(get=GetChart3DPercent,put=PutChart3DPercent))
    long Chart3DPercent;
    __declspec(property(get=GetOrthogonal,put=PutOrthogonal))
    VARIANT_BOOL Orthogonal;
    __declspec(property(get=GetPerspective,put=PutPerspective))
    long Perspective;
    __declspec(property(get=GetOrthoAngle,put=PutOrthoAngle))
    long OrthoAngle;
    __declspec(property(get=GetElevationFloat,put=PutElevationFloat))
    double ElevationFloat;
    __declspec(property(get=GetRotationFloat,put=PutRotationFloat))
    double RotationFloat;
    __declspec(property(get=GetFontZoom,put=PutFontZoom))
    long FontZoom;
    __declspec(property(get=GetApplyZOrder,put=PutApplyZOrder))
    VARIANT_BOOL ApplyZOrder;
    __declspec(property(get=GetWidth3D))
    long Width3D;
    __declspec(property(get=GetHeight3D))
    long Height3D;
    __declspec(property(get=GetView3D,put=PutView3D))
    VARIANT_BOOL View3D;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetApplyZOrder ( );
    void PutApplyZOrder (
        VARIANT_BOOL ApplyZOrder );
    long GetChart3DPercent ( );
    void PutChart3DPercent (
        long Chart3DPercent );
    long GetHeight3D ( );
    VARIANT_BOOL GetView3D ( );
    void PutView3D (
        VARIANT_BOOL View3D );
    long GetWidth3D ( );
    long GetRotation ( );
    void PutRotation (
        long RotationX );
    long GetElevation ( );
    void PutElevation (
        long RotationY );
    long GetZoom ( );
    void PutZoom (
        long Zoom );
    VARIANT_BOOL GetZoomText ( );
    void PutZoomText (
        VARIANT_BOOL Value );
    long GetHorizOffset ( );
    void PutHorizOffset (
        long Value );
    long GetVertOffset ( );
    void PutVertOffset (
        long Value );
    long GetTilt ( );
    void PutTilt (
        long Value );
    VARIANT_BOOL GetOrthogonal ( );
    void PutOrthogonal (
        VARIANT_BOOL Value );
    long GetPerspective ( );
    void PutPerspective (
        long Value );
    ITeeOpenGLPtr GetOpenGL ( );
    long GetOrthoAngle ( );
    void PutOrthoAngle (
        long Value );
    double GetElevationFloat ( );
    void PutElevationFloat (
        double Value );
    double GetRotationFloat ( );
    void PutRotationFloat (
        double Value );
    long GetFontZoom ( );
    void PutFontZoom (
        long Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ApplyZOrder (
        /*[out,retval]*/ VARIANT_BOOL * ApplyZOrder ) = 0;
      virtual HRESULT __stdcall put_ApplyZOrder (
        /*[in]*/ VARIANT_BOOL ApplyZOrder ) = 0;
      virtual HRESULT __stdcall get_Chart3DPercent (
        /*[out,retval]*/ long * Chart3DPercent ) = 0;
      virtual HRESULT __stdcall put_Chart3DPercent (
        /*[in]*/ long Chart3DPercent ) = 0;
      virtual HRESULT __stdcall get_Height3D (
        /*[out,retval]*/ long * Height3D ) = 0;
      virtual HRESULT __stdcall get_View3D (
        /*[out,retval]*/ VARIANT_BOOL * View3D ) = 0;
      virtual HRESULT __stdcall put_View3D (
        /*[in]*/ VARIANT_BOOL View3D ) = 0;
      virtual HRESULT __stdcall get_Width3D (
        /*[out,retval]*/ long * Width3D ) = 0;
      virtual HRESULT __stdcall get_Rotation (
        /*[out,retval]*/ long * RotationX ) = 0;
      virtual HRESULT __stdcall put_Rotation (
        /*[in]*/ long RotationX ) = 0;
      virtual HRESULT __stdcall get_Elevation (
        /*[out,retval]*/ long * RotationY ) = 0;
      virtual HRESULT __stdcall put_Elevation (
        /*[in]*/ long RotationY ) = 0;
      virtual HRESULT __stdcall get_Zoom (
        /*[out,retval]*/ long * Zoom ) = 0;
      virtual HRESULT __stdcall put_Zoom (
        /*[in]*/ long Zoom ) = 0;
      virtual HRESULT __stdcall get_ZoomText (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_ZoomText (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_HorizOffset (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_HorizOffset (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_VertOffset (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_VertOffset (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_Tilt (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Tilt (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_Orthogonal (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Orthogonal (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_Perspective (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Perspective (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_OpenGL (
        /*[out,retval]*/ struct ITeeOpenGL * * Value ) = 0;
      virtual HRESULT __stdcall get_OrthoAngle (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_OrthoAngle (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_ElevationFloat (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_ElevationFloat (
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall get_RotationFloat (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_RotationFloat (
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall get_FontZoom (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_FontZoom (
        /*[in]*/ long Value ) = 0;
};

enum __declspec(uuid("694b5b4a-de87-4d7c-b1dc-58a0010283b2"))
EScopeCursorStyle
{
    scsRectangle = 0,
    scsCircle = 1,
    scsDiamond = 2,
    scsEmpty = 3,
    scsCamera = 4
};

enum __declspec(uuid("4eeada88-3bf1-4502-becc-9e4b83aa10ab"))
ESnapStyle
{
    ssDefault = 0,
    ssHorizontal = 1,
    ssVertical = 2
};

enum __declspec(uuid("65b47076-822c-4ff7-890b-b47c4dd7b2a6"))
EDrawLineStyle
{
    dlLine = 0,
    dlHorizParallel = 1,
    dlVertParallel = 2,
    dlRectangle = 3,
    dlEllipse = 4
};

struct __declspec(uuid("62335e7b-c1e5-458b-b1a8-f6f3380a6d47"))
IAxisGridPen : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetDrawEvery,put=PutDrawEvery))
    long DrawEvery;
    __declspec(property(get=GetZPosition,put=PutZPosition))
    double ZPosition;

    //
    // Wrapper methods for error-handling
    //

    long GetDrawEvery ( );
    void PutDrawEvery (
        long Value );
    double GetZPosition ( );
    void PutZPosition (
        double Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_DrawEvery (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_DrawEvery (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_ZPosition (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_ZPosition (
        /*[in]*/ double Value ) = 0;
};

struct __declspec(uuid("c6a11401-589c-4ec4-94aa-4d9b3c145728"))
IClipSeriesTool : ICustomToolSeries
{};

enum __declspec(uuid("12a52f68-28a0-4264-8f26-2741fe9634f0"))
EPenMode
{
    pmBlack = 0,
    pmWhite = 1,
    pmNop = 2,
    pmNot = 3,
    pmCopy = 4,
    pmNotCopy = 5,
    pmMergePenNot = 6,
    pmMaskPenNot = 7,
    pmMergeNotPen = 8,
    pmMaskNotPen = 9,
    pmMerge = 10,
    pmNotMerge = 11,
    pmMask = 12,
    pmNotMask = 13,
    pmXor = 14,
    pmNotXor = 15
};

struct __declspec(uuid("e4577d56-c19b-4aaf-9d26-b251e552046c"))
IPen : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;
    __declspec(property(get=GetWidth,put=PutWidth))
    long Width;
    __declspec(property(get=GetStyle,put=PutStyle))
    enum EChartPenStyle Style;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetEndStyle,put=PutEndStyle))
    enum EPenEndStyle EndStyle;
    __declspec(property(get=GetSmallSpace,put=PutSmallSpace))
    long SmallSpace;
    __declspec(property(get=GetMode,put=PutMode))
    enum EPenMode Mode;

    //
    // Wrapper methods for error-handling
    //

    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR Color );
    long GetWidth ( );
    void PutWidth (
        long Width );
    enum EChartPenStyle GetStyle ( );
    void PutStyle (
        enum EChartPenStyle Style );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL Visible );
    enum EPenEndStyle GetEndStyle ( );
    void PutEndStyle (
        enum EPenEndStyle Value );
    HRESULT ShowEditor (
        VARIANT_BOOL HideColor,
        _bstr_t Title );
    long GetSmallSpace ( );
    void PutSmallSpace (
        long Value );
    enum EPenMode GetMode ( );
    void PutMode (
        enum EPenMode Value );
    HRESULT Show ( );
    HRESULT Hide ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * Color ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR Color ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ long * Width ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ long Width ) = 0;
      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ enum EChartPenStyle * Style ) = 0;
      virtual HRESULT __stdcall put_Style (
        /*[in]*/ enum EChartPenStyle Style ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * Visible ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL Visible ) = 0;
      virtual HRESULT __stdcall get_EndStyle (
        /*[out,retval]*/ enum EPenEndStyle * Value ) = 0;
      virtual HRESULT __stdcall put_EndStyle (
        /*[in]*/ enum EPenEndStyle Value ) = 0;
      virtual HRESULT __stdcall raw_ShowEditor (
        /*[in]*/ VARIANT_BOOL HideColor,
        /*[in]*/ BSTR Title ) = 0;
      virtual HRESULT __stdcall get_SmallSpace (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_SmallSpace (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_Mode (
        /*[out,retval]*/ enum EPenMode * Value ) = 0;
      virtual HRESULT __stdcall put_Mode (
        /*[in]*/ enum EPenMode Value ) = 0;
      virtual HRESULT __stdcall raw_Show ( ) = 0;
      virtual HRESULT __stdcall raw_Hide ( ) = 0;
};

struct __declspec(uuid("ad513158-58d1-40fb-9d87-d159b7bb03a6"))
ICanvas : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBrush))
    IBrushPtr Brush;
    __declspec(property(get=GetPen))
    IPenPtr Pen;
    __declspec(property(get=GetHandleDC))
    _variant_t HandleDC;
    __declspec(property(get=GetFont))
    IChartFontPtr Font;
    __declspec(property(get=GetRotationCenter))
    ITeePoint3DPtr RotationCenter;
    __declspec(property(get=GetChartXCenter))
    long ChartXCenter;
    __declspec(property(get=GetChartYCenter))
    long ChartYCenter;
    __declspec(property(get=GetTop))
    long Top;
    __declspec(property(get=GetLeft))
    long Left;
    __declspec(property(get=GetWidth))
    long Width;
    __declspec(property(get=GetHeight))
    long Height;
    __declspec(property(get=GetBackMode,put=PutBackMode))
    enum ECanvasBackMode BackMode;
    __declspec(property(get=GetBackColor,put=PutBackColor))
    OLE_COLOR BackColor;
    __declspec(property(get=GetSupportsFullRotation))
    VARIANT_BOOL SupportsFullRotation;
    __declspec(property(get=GetUseBuffer,put=PutUseBuffer))
    VARIANT_BOOL UseBuffer;
    __declspec(property(get=GetTextAlign,put=PutTextAlign))
    enum ECanvasTextAlign TextAlign;
    __declspec(property(get=GetUseAntiAlias,put=PutUseAntiAlias))
    VARIANT_BOOL UseAntiAlias;
    __declspec(property(get=GetTeeCheckPenWidth))
    VARIANT_BOOL TeeCheckPenWidth;
    __declspec(property(get=GetMetafiling,put=PutMetafiling))
    VARIANT_BOOL Metafiling;
    __declspec(property(get=GetMonochrome,put=PutMonochrome))
    VARIANT_BOOL Monochrome;
    __declspec(property(get=GetFontHeight))
    long FontHeight;
    __declspec(property(get=GetGetPixels3D))
    OLE_COLOR GetPixels3D[][][];
    __declspec(property(get=GetGetPixels))
    OLE_COLOR GetPixels[][];
    __declspec(property(get=GetSupports3DText))
    VARIANT_BOOL Supports3DText;

    //
    // Wrapper methods for error-handling
    //

    IBrushPtr GetBrush ( );
    IPenPtr GetPen ( );
    HRESULT LineTo (
        long X,
        long Y );
    HRESULT MoveTo (
        long X,
        long Y );
    HRESULT Rectangle (
        long Left,
        long Top,
        long Right,
        long Bottom );
    IChartFontPtr GetFont ( );
    HRESULT Arc (
        long X1,
        long Y1,
        long X2,
        long Y2,
        long X3,
        long Y3,
        long X4,
        long Y4 );
    HRESULT Ellipse (
        long X1,
        long Y1,
        long X2,
        long Y2 );
    HRESULT TextOut (
        long X,
        long Y,
        _bstr_t Text );
    long TextHeight (
        _bstr_t SomeText );
    long TextWidth (
        _bstr_t SomeText );
    HRESULT ClipRectangle (
        long Left,
        long Top,
        long Right,
        long Bottom );
    HRESULT UnClipRectangle ( );
    HRESULT RotateLabel (
        long X,
        long Y,
        _bstr_t St,
        long RotDegree );
    VARIANT_BOOL IsScreenHighColor ( );
    long GetTop ( );
    long GetLeft ( );
    long GetWidth ( );
    long GetHeight ( );
    enum ECanvasBackMode GetBackMode ( );
    void PutBackMode (
        enum ECanvasBackMode Value );
    OLE_COLOR GetBackColor ( );
    void PutBackColor (
        OLE_COLOR Value );
    VARIANT_BOOL GetSupportsFullRotation ( );
    VARIANT_BOOL GetUseBuffer ( );
    void PutUseBuffer (
        VARIANT_BOOL Value );
    HRESULT Pie3D (
        long XCenter,
        long YCenter,
        long XRadius,
        long YRadius,
        long Z0,
        long Z1,
        double StartAngle,
        double EndAngle,
        VARIANT_BOOL DarkSides,
        VARIANT_BOOL DrawSides );
    HRESULT LineWithZ (
        long X0,
        long Y0,
        long X1,
        long Y1,
        long Z );
    HRESULT MoveTo3D (
        long X,
        long Y,
        long Z );
    HRESULT LineTo3D (
        long X,
        long Y,
        long Z );
    HRESULT Plane3D (
        long X0,
        long Y0,
        long X1,
        long Y1,
        long Z0,
        long Z1 );
    HRESULT ZLine3D (
        long X,
        long Y,
        long Z0,
        long Z1 );
    HRESULT RotateLabel3D (
        long X,
        long Y,
        long Z,
        _bstr_t St,
        long RotDegree );
    enum ECanvasTextAlign GetTextAlign ( );
    void PutTextAlign (
        enum ECanvasTextAlign Value );
    HRESULT VertLine3D (
        long X,
        long Top,
        long Bottom,
        long Z );
    HRESULT HorizLine3D (
        long Left,
        long Right,
        long Y,
        long Z );
    HRESULT Cylinder (
        VARIANT_BOOL Vertical,
        long Left,
        long Top,
        long Right,
        long Bottom,
        long Z0,
        long Z1,
        VARIANT_BOOL DarkCover );
    HRESULT Cube (
        long Left,
        long Right,
        long Top,
        long Bottom,
        long Z0,
        long Z1,
        VARIANT_BOOL DarkSides );
    HRESULT EllipseWithZ (
        long X1,
        long Y1,
        long X2,
        long Y2,
        long Z );
    HRESULT PlaneWithZ (
        long X1,
        long Y1,
        long X2,
        long Y2,
        long X3,
        long Y3,
        long X4,
        long Y4,
        long Z );
    HRESULT PlaneFour3D (
        long X1,
        long Y1,
        long X2,
        long Y2,
        long X3,
        long Y3,
        long X4,
        long Y4,
        long Z0,
        long Z1 );
    HRESULT RectangleWithZ (
        long Left,
        long Top,
        long Right,
        long Bottom,
        long Z );
    HRESULT RectangleZ (
        long Left,
        long Top,
        long Bottom,
        long Z0,
        long Z1 );
    HRESULT TextOut3D (
        long X,
        long Y,
        long Z,
        _bstr_t Text );
    HRESULT TriangleWithZ (
        long X1,
        long Y1,
        long X2,
        long Y2,
        long X3,
        long Y3,
        long Z );
    HRESULT Frame3D (
        long Left,
        long Top,
        long Right,
        long Bottom,
        OLE_COLOR TopColor,
        OLE_COLOR BottomColor,
        long Width );
    HRESULT EraseBackground (
        long Left,
        long Top,
        long Right,
        long Bottom );
    HRESULT GradientFill (
        long Left,
        long Top,
        long Right,
        long Bottom,
        OLE_COLOR StartColor,
        OLE_COLOR EndColor,
        enum EGradientDirection Direction );
    HRESULT Line (
        long X0,
        long Y0,
        long X1,
        long Y1 );
    HRESULT RectangleY (
        long Left,
        long Top,
        long Right,
        long Z0,
        long Z1 );
    HRESULT Pixels3D (
        long X,
        long Y,
        long Z,
        OLE_COLOR Value );
    _variant_t GetHandleDC ( );
    HRESULT Cone (
        VARIANT_BOOL Vertical,
        long Left,
        long Top,
        long Right,
        long Bottom,
        long Z0,
        long Z1,
        VARIANT_BOOL Dark3D,
        long ConePercent );
    HRESULT Sphere (
        long X,
        long Y,
        long Z,
        double Radius );
    HRESULT Arrow (
        VARIANT_BOOL Filled,
        long X0,
        long Y0,
        long X1,
        long Y1,
        long HeadWidth,
        long HeadHeight,
        long Z );
    HRESULT Draw (
        long X,
        long Y,
        struct IPicture * Image );
    ITeePoint3DPtr GetRotationCenter ( );
    long GetChartXCenter ( );
    long GetChartYCenter ( );
    HRESULT GrayScale (
        VARIANT_BOOL Inverted );
    HRESULT Polyline (
        long ArraySize,
        const _variant_t & XArray,
        const _variant_t & YArray,
        long Z );
    HRESULT RotatedEllipse (
        long Left,
        long Top,
        long Right,
        long Bottom,
        long Z,
        double Angle );
    HRESULT StretchDraw (
        long Left,
        long Top,
        long Right,
        long Bottom,
        struct IPicture * Image );
    HRESULT StretchDrawZ (
        long Left,
        long Top,
        long Right,
        long Bottom,
        struct IPicture * Image,
        long Z );
    HRESULT Pie (
        long X1,
        long Y1,
        long X2,
        long Y2,
        long X3,
        long Y3,
        long X4,
        long Y4 );
    HRESULT PolygonWithZ (
        long ArraySize,
        const _variant_t & XArray,
        const _variant_t & YArray,
        long Z );
    VARIANT_BOOL GetUseAntiAlias ( );
    void PutUseAntiAlias (
        VARIANT_BOOL Value );
    HRESULT Polygon (
        long NumPoints,
        const _variant_t & Points );
    HRESULT DrawBevel (
        enum EPanelBevel Value,
        long Left,
        long Top,
        long Right,
        long Bottom,
        long Size );
    OLE_COLOR ApplyDark (
        OLE_COLOR Color,
        long HowMuch );
    HRESULT DrawLine (
        long X0,
        long Y0,
        long X1,
        long Y1 );
    VARIANT_BOOL GetTeeCheckPenWidth ( );
    VARIANT_BOOL GetMetafiling ( );
    void PutMetafiling (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetMonochrome ( );
    void PutMonochrome (
        VARIANT_BOOL Value );
    HRESULT AssignBrush (
        long ABrush );
    long GetFontHeight ( );
    OLE_COLOR GetGetPixels3D (
        long X,
        long Y,
        long Z );
    HRESULT Pixels (
        long X,
        long Y,
        OLE_COLOR Value );
    OLE_COLOR GetGetPixels (
        long X,
        long Y );
    VARIANT_BOOL GetSupports3DText ( );
    HRESULT ClipRoundRectangle (
        long Left,
        long Top,
        long Right,
        long Bottom,
        long RoundSize );
    HRESULT ClipEllipse (
        long Left,
        long Top,
        long Right,
        long Bottom );
    HRESULT ClipPolygon (
        VARIANT * Points,
        long NumPoints );
    HRESULT PolygonGradient (
        long ArraySize,
        VARIANT * Points,
        OLE_COLOR StartColor,
        OLE_COLOR MiddleColor,
        OLE_COLOR EndColor,
        enum EGradientDirection Direction );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Brush (
        /*[out,retval]*/ struct IBrush * * Brush ) = 0;
      virtual HRESULT __stdcall get_Pen (
        /*[out,retval]*/ struct IPen * * Pen ) = 0;
      virtual HRESULT __stdcall raw_LineTo (
        /*[in]*/ long X,
        /*[in]*/ long Y ) = 0;
      virtual HRESULT __stdcall raw_MoveTo (
        /*[in]*/ long X,
        /*[in]*/ long Y ) = 0;
      virtual HRESULT __stdcall raw_Rectangle (
        /*[in]*/ long Left,
        /*[in]*/ long Top,
        /*[in]*/ long Right,
        /*[in]*/ long Bottom ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ struct IChartFont * * Font ) = 0;
      virtual HRESULT __stdcall raw_Arc (
        /*[in]*/ long X1,
        /*[in]*/ long Y1,
        /*[in]*/ long X2,
        /*[in]*/ long Y2,
        /*[in]*/ long X3,
        /*[in]*/ long Y3,
        /*[in]*/ long X4,
        /*[in]*/ long Y4 ) = 0;
      virtual HRESULT __stdcall raw_Ellipse (
        /*[in]*/ long X1,
        /*[in]*/ long Y1,
        /*[in]*/ long X2,
        /*[in]*/ long Y2 ) = 0;
      virtual HRESULT __stdcall raw_TextOut (
        /*[in]*/ long X,
        /*[in]*/ long Y,
        /*[in]*/ BSTR Text ) = 0;
      virtual HRESULT __stdcall raw_TextHeight (
        /*[in]*/ BSTR SomeText,
        /*[out,retval]*/ long * St ) = 0;
      virtual HRESULT __stdcall raw_TextWidth (
        /*[in]*/ BSTR SomeText,
        /*[out,retval]*/ long * St ) = 0;
      virtual HRESULT __stdcall raw_ClipRectangle (
        /*[in]*/ long Left,
        /*[in]*/ long Top,
        /*[in]*/ long Right,
        /*[in]*/ long Bottom ) = 0;
      virtual HRESULT __stdcall raw_UnClipRectangle ( ) = 0;
      virtual HRESULT __stdcall raw_RotateLabel (
        /*[in]*/ long X,
        /*[in]*/ long Y,
        /*[in]*/ BSTR St,
        /*[in]*/ long RotDegree ) = 0;
      virtual HRESULT __stdcall raw_IsScreenHighColor (
        /*[out,retval]*/ VARIANT_BOOL * IsScreenHighColor ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ long * Top ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ long * Left ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ long * Width ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ long * Height ) = 0;
      virtual HRESULT __stdcall get_BackMode (
        /*[out,retval]*/ enum ECanvasBackMode * Value ) = 0;
      virtual HRESULT __stdcall put_BackMode (
        /*[in]*/ enum ECanvasBackMode Value ) = 0;
      virtual HRESULT __stdcall get_BackColor (
        /*[out,retval]*/ OLE_COLOR * Value ) = 0;
      virtual HRESULT __stdcall put_BackColor (
        /*[in]*/ OLE_COLOR Value ) = 0;
      virtual HRESULT __stdcall get_SupportsFullRotation (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall get_UseBuffer (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_UseBuffer (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall raw_Pie3D (
        /*[in]*/ long XCenter,
        /*[in]*/ long YCenter,
        /*[in]*/ long XRadius,
        /*[in]*/ long YRadius,
        /*[in]*/ long Z0,
        /*[in]*/ long Z1,
        /*[in]*/ double StartAngle,
        /*[in]*/ double EndAngle,
        /*[in]*/ VARIANT_BOOL DarkSides,
        /*[in]*/ VARIANT_BOOL DrawSides ) = 0;
      virtual HRESULT __stdcall raw_LineWithZ (
        /*[in]*/ long X0,
        /*[in]*/ long Y0,
        /*[in]*/ long X1,
        /*[in]*/ long Y1,
        /*[in]*/ long Z ) = 0;
      virtual HRESULT __stdcall raw_MoveTo3D (
        /*[in]*/ long X,
        /*[in]*/ long Y,
        /*[in]*/ long Z ) = 0;
      virtual HRESULT __stdcall raw_LineTo3D (
        /*[in]*/ long X,
        /*[in]*/ long Y,
        /*[in]*/ long Z ) = 0;
      virtual HRESULT __stdcall raw_Plane3D (
        /*[in]*/ long X0,
        /*[in]*/ long Y0,
        /*[in]*/ long X1,
        /*[in]*/ long Y1,
        /*[in]*/ long Z0,
        /*[in]*/ long Z1 ) = 0;
      virtual HRESULT __stdcall raw_ZLine3D (
        /*[in]*/ long X,
        /*[in]*/ long Y,
        /*[in]*/ long Z0,
        /*[in]*/ long Z1 ) = 0;
      virtual HRESULT __stdcall raw_RotateLabel3D (
        /*[in]*/ long X,
        /*[in]*/ long Y,
        /*[in]*/ long Z,
        /*[in]*/ BSTR St,
        /*[in]*/ long RotDegree ) = 0;
      virtual HRESULT __stdcall get_TextAlign (
        /*[out,retval]*/ enum ECanvasTextAlign * Value ) = 0;
      virtual HRESULT __stdcall put_TextAlign (
        /*[in]*/ enum ECanvasTextAlign Value ) = 0;
      virtual HRESULT __stdcall raw_VertLine3D (
        /*[in]*/ long X,
        /*[in]*/ long Top,
        /*[in]*/ long Bottom,
        /*[in]*/ long Z ) = 0;
      virtual HRESULT __stdcall raw_HorizLine3D (
        /*[in]*/ long Left,
        /*[in]*/ long Right,
        /*[in]*/ long Y,
        /*[in]*/ long Z ) = 0;
      virtual HRESULT __stdcall raw_Cylinder (
        /*[in]*/ VARIANT_BOOL Vertical,
        /*[in]*/ long Left,
        /*[in]*/ long Top,
        /*[in]*/ long Right,
        /*[in]*/ long Bottom,
        /*[in]*/ long Z0,
        /*[in]*/ long Z1,
        /*[in]*/ VARIANT_BOOL DarkCover ) = 0;
      virtual HRESULT __stdcall raw_Cube (
        /*[in]*/ long Left,
        /*[in]*/ long Right,
        /*[in]*/ long Top,
        /*[in]*/ long Bottom,
        /*[in]*/ long Z0,
        /*[in]*/ long Z1,
        /*[in]*/ VARIANT_BOOL DarkSides ) = 0;
      virtual HRESULT __stdcall raw_EllipseWithZ (
        /*[in]*/ long X1,
        /*[in]*/ long Y1,
        /*[in]*/ long X2,
        /*[in]*/ long Y2,
        /*[in]*/ long Z ) = 0;
      virtual HRESULT __stdcall raw_PlaneWithZ (
        /*[in]*/ long X1,
        /*[in]*/ long Y1,
        /*[in]*/ long X2,
        /*[in]*/ long Y2,
        /*[in]*/ long X3,
        /*[in]*/ long Y3,
        /*[in]*/ long X4,
        /*[in]*/ long Y4,
        /*[in]*/ long Z ) = 0;
      virtual HRESULT __stdcall raw_PlaneFour3D (
        /*[in]*/ long X1,
        /*[in]*/ long Y1,
        /*[in]*/ long X2,
        /*[in]*/ long Y2,
        /*[in]*/ long X3,
        /*[in]*/ long Y3,
        /*[in]*/ long X4,
        /*[in]*/ long Y4,
        /*[in]*/ long Z0,
        /*[in]*/ long Z1 ) = 0;
      virtual HRESULT __stdcall raw_RectangleWithZ (
        /*[in]*/ long Left,
        /*[in]*/ long Top,
        /*[in]*/ long Right,
        /*[in]*/ long Bottom,
        /*[in]*/ long Z ) = 0;
      virtual HRESULT __stdcall raw_RectangleZ (
        /*[in]*/ long Left,
        /*[in]*/ long Top,
        /*[in]*/ long Bottom,
        /*[in]*/ long Z0,
        /*[in]*/ long Z1 ) = 0;
      virtual HRESULT __stdcall raw_TextOut3D (
        /*[in]*/ long X,
        /*[in]*/ long Y,
        /*[in]*/ long Z,
        /*[in]*/ BSTR Text ) = 0;
      virtual HRESULT __stdcall raw_TriangleWithZ (
        /*[in]*/ long X1,
        /*[in]*/ long Y1,
        /*[in]*/ long X2,
        /*[in]*/ long Y2,
        /*[in]*/ long X3,
        /*[in]*/ long Y3,
        /*[in]*/ long Z ) = 0;
      virtual HRESULT __stdcall raw_Frame3D (
        /*[in]*/ long Left,
        /*[in]*/ long Top,
        /*[in]*/ long Right,
        /*[in]*/ long Bottom,
        /*[in]*/ OLE_COLOR TopColor,
        /*[in]*/ OLE_COLOR BottomColor,
        /*[in]*/ long Width ) = 0;
      virtual HRESULT __stdcall raw_EraseBackground (
        /*[in]*/ long Left,
        /*[in]*/ long Top,
        /*[in]*/ long Right,
        /*[in]*/ long Bottom ) = 0;
      virtual HRESULT __stdcall raw_GradientFill (
        /*[in]*/ long Left,
        /*[in]*/ long Top,
        /*[in]*/ long Right,
        /*[in]*/ long Bottom,
        /*[in]*/ OLE_COLOR StartColor,
        /*[in]*/ OLE_COLOR EndColor,
        /*[in]*/ enum EGradientDirection Direction ) = 0;
      virtual HRESULT __stdcall raw_Line (
        /*[in]*/ long X0,
        /*[in]*/ long Y0,
        /*[in]*/ long X1,
        /*[in]*/ long Y1 ) = 0;
      virtual HRESULT __stdcall raw_RectangleY (
        /*[in]*/ long Left,
        /*[in]*/ long Top,
        /*[in]*/ long Right,
        /*[in]*/ long Z0,
        /*[in]*/ long Z1 ) = 0;
      virtual HRESULT __stdcall raw_Pixels3D (
        /*[in]*/ long X,
        /*[in]*/ long Y,
        /*[in]*/ long Z,
        /*[in]*/ OLE_COLOR Value ) = 0;
      virtual HRESULT __stdcall get_HandleDC (
        /*[out,retval]*/ VARIANT * Value ) = 0;
      virtual HRESULT __stdcall raw_Cone (
        /*[in]*/ VARIANT_BOOL Vertical,
        /*[in]*/ long Left,
        /*[in]*/ long Top,
        /*[in]*/ long Right,
        /*[in]*/ long Bottom,
        /*[in]*/ long Z0,
        /*[in]*/ long Z1,
        /*[in]*/ VARIANT_BOOL Dark3D,
        /*[in]*/ long ConePercent ) = 0;
      virtual HRESULT __stdcall raw_Sphere (
        /*[in]*/ long X,
        /*[in]*/ long Y,
        /*[in]*/ long Z,
        /*[in]*/ double Radius ) = 0;
      virtual HRESULT __stdcall raw_Arrow (
        /*[in]*/ VARIANT_BOOL Filled,
        /*[in]*/ long X0,
        /*[in]*/ long Y0,
        /*[in]*/ long X1,
        /*[in]*/ long Y1,
        /*[in]*/ long HeadWidth,
        /*[in]*/ long HeadHeight,
        /*[in]*/ long Z ) = 0;
      virtual HRESULT __stdcall raw_Draw (
        /*[in]*/ long X,
        /*[in]*/ long Y,
        /*[in]*/ struct IPicture * Image ) = 0;
      virtual HRESULT __stdcall get_RotationCenter (
        /*[out,retval]*/ struct ITeePoint3D * * Value ) = 0;
      virtual HRESULT __stdcall get_ChartXCenter (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_ChartYCenter (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall raw_GrayScale (
        /*[in]*/ VARIANT_BOOL Inverted ) = 0;
      virtual HRESULT __stdcall raw_Polyline (
        /*[in]*/ long ArraySize,
        /*[in]*/ VARIANT XArray,
        /*[in]*/ VARIANT YArray,
        /*[in]*/ long Z ) = 0;
      virtual HRESULT __stdcall raw_RotatedEllipse (
        /*[in]*/ long Left,
        /*[in]*/ long Top,
        /*[in]*/ long Right,
        /*[in]*/ long Bottom,
        /*[in]*/ long Z,
        /*[in]*/ double Angle ) = 0;
      virtual HRESULT __stdcall raw_StretchDraw (
        /*[in]*/ long Left,
        /*[in]*/ long Top,
        /*[in]*/ long Right,
        /*[in]*/ long Bottom,
        /*[in]*/ struct IPicture * Image ) = 0;
      virtual HRESULT __stdcall raw_StretchDrawZ (
        /*[in]*/ long Left,
        /*[in]*/ long Top,
        /*[in]*/ long Right,
        /*[in]*/ long Bottom,
        /*[in]*/ struct IPicture * Image,
        /*[in]*/ long Z ) = 0;
      virtual HRESULT __stdcall raw_Pie (
        /*[in]*/ long X1,
        /*[in]*/ long Y1,
        /*[in]*/ long X2,
        /*[in]*/ long Y2,
        /*[in]*/ long X3,
        /*[in]*/ long Y3,
        /*[in]*/ long X4,
        /*[in]*/ long Y4 ) = 0;
      virtual HRESULT __stdcall raw_PolygonWithZ (
        /*[in]*/ long ArraySize,
        /*[in]*/ VARIANT XArray,
        /*[in]*/ VARIANT YArray,
        /*[in]*/ long Z ) = 0;
      virtual HRESULT __stdcall get_UseAntiAlias (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_UseAntiAlias (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall raw_Polygon (
        /*[in]*/ long NumPoints,
        /*[in]*/ VARIANT Points ) = 0;
      virtual HRESULT __stdcall raw_DrawBevel (
        /*[in]*/ enum EPanelBevel Value,
        /*[in]*/ long Left,
        /*[in]*/ long Top,
        /*[in]*/ long Right,
        /*[in]*/ long Bottom,
        /*[in]*/ long Size ) = 0;
      virtual HRESULT __stdcall raw_ApplyDark (
        /*[in]*/ OLE_COLOR Color,
        /*[in]*/ long HowMuch,
        /*[out,retval]*/ OLE_COLOR * retVal ) = 0;
      virtual HRESULT __stdcall raw_DrawLine (
        /*[in]*/ long X0,
        /*[in]*/ long Y0,
        /*[in]*/ long X1,
        /*[in]*/ long Y1 ) = 0;
      virtual HRESULT __stdcall get_TeeCheckPenWidth (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall get_Metafiling (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Metafiling (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_Monochrome (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Monochrome (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall raw_AssignBrush (
        /*[in]*/ long ABrush ) = 0;
      virtual HRESULT __stdcall get_FontHeight (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_GetPixels3D (
        /*[in]*/ long X,
        /*[in]*/ long Y,
        /*[in]*/ long Z,
        /*[out,retval]*/ OLE_COLOR * Value ) = 0;
      virtual HRESULT __stdcall raw_Pixels (
        /*[in]*/ long X,
        /*[in]*/ long Y,
        /*[in]*/ OLE_COLOR Value ) = 0;
      virtual HRESULT __stdcall get_GetPixels (
        /*[in]*/ long X,
        /*[in]*/ long Y,
        /*[out,retval]*/ OLE_COLOR * Value ) = 0;
      virtual HRESULT __stdcall get_Supports3DText (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall raw_ClipRoundRectangle (
        /*[in]*/ long Left,
        /*[in]*/ long Top,
        /*[in]*/ long Right,
        /*[in]*/ long Bottom,
        /*[in]*/ long RoundSize ) = 0;
      virtual HRESULT __stdcall raw_ClipEllipse (
        /*[in]*/ long Left,
        /*[in]*/ long Top,
        /*[in]*/ long Right,
        /*[in]*/ long Bottom ) = 0;
      virtual HRESULT __stdcall raw_ClipPolygon (
        /*[in,out]*/ VARIANT * Points,
        /*[in]*/ long NumPoints ) = 0;
      virtual HRESULT __stdcall raw_PolygonGradient (
        /*[in]*/ long ArraySize,
        /*[in,out]*/ VARIANT * Points,
        /*[in]*/ OLE_COLOR StartColor,
        /*[in]*/ OLE_COLOR MiddleColor,
        /*[in]*/ OLE_COLOR EndColor,
        /*[in]*/ enum EGradientDirection Direction ) = 0;
};

struct __declspec(uuid("4556ad4f-aec5-4c29-837a-9531984de6eb"))
IZoom : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetZoomed))
    VARIANT_BOOL Zoomed;
    __declspec(property(get=GetPen))
    IPenPtr Pen;
    __declspec(property(get=GetEnable,put=PutEnable))
    VARIANT_BOOL Enable;
    __declspec(property(get=GetMinimumPixels,put=PutMinimumPixels))
    long MinimumPixels;
    __declspec(property(get=GetAnimated,put=PutAnimated))
    VARIANT_BOOL Animated;
    __declspec(property(get=GetAnimatedSteps,put=PutAnimatedSteps))
    long AnimatedSteps;
    __declspec(property(get=GetMouseButton,put=PutMouseButton))
    enum EMouseButton MouseButton;
    __declspec(property(get=GetDirection,put=PutDirection))
    enum ETeeZoomDirection Direction;
    __declspec(property(get=GetBrush))
    IBrushPtr Brush;
    __declspec(property(get=GetUpLeftZooms,put=PutUpLeftZooms))
    VARIANT_BOOL UpLeftZooms;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetEnable ( );
    void PutEnable (
        VARIANT_BOOL Enable );
    VARIANT_BOOL GetAnimated ( );
    void PutAnimated (
        VARIANT_BOOL Animated );
    long GetAnimatedSteps ( );
    void PutAnimatedSteps (
        long AnimatedSteps );
    HRESULT Undo ( );
    HRESULT ZoomRect (
        long Left,
        long Top,
        long Right,
        long Bottom );
    VARIANT_BOOL GetZoomed ( );
    IPenPtr GetPen ( );
    long GetMinimumPixels ( );
    void PutMinimumPixels (
        long Value );
    enum EMouseButton GetMouseButton ( );
    void PutMouseButton (
        enum EMouseButton Value );
    enum ETeeZoomDirection GetDirection ( );
    void PutDirection (
        enum ETeeZoomDirection Value );
    IBrushPtr GetBrush ( );
    HRESULT ZoomPercent (
        double PercentZoom );
    VARIANT_BOOL GetUpLeftZooms ( );
    void PutUpLeftZooms (
        VARIANT_BOOL Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Enable (
        /*[out,retval]*/ VARIANT_BOOL * Enable ) = 0;
      virtual HRESULT __stdcall put_Enable (
        /*[in]*/ VARIANT_BOOL Enable ) = 0;
      virtual HRESULT __stdcall get_Animated (
        /*[out,retval]*/ VARIANT_BOOL * Animated ) = 0;
      virtual HRESULT __stdcall put_Animated (
        /*[in]*/ VARIANT_BOOL Animated ) = 0;
      virtual HRESULT __stdcall get_AnimatedSteps (
        /*[out,retval]*/ long * AnimatedSteps ) = 0;
      virtual HRESULT __stdcall put_AnimatedSteps (
        /*[in]*/ long AnimatedSteps ) = 0;
      virtual HRESULT __stdcall raw_Undo ( ) = 0;
      virtual HRESULT __stdcall raw_ZoomRect (
        /*[in]*/ long Left,
        /*[in]*/ long Top,
        /*[in]*/ long Right,
        /*[in]*/ long Bottom ) = 0;
      virtual HRESULT __stdcall get_Zoomed (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall get_Pen (
        /*[out,retval]*/ struct IPen * * Value ) = 0;
      virtual HRESULT __stdcall get_MinimumPixels (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_MinimumPixels (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_MouseButton (
        /*[out,retval]*/ enum EMouseButton * Value ) = 0;
      virtual HRESULT __stdcall put_MouseButton (
        /*[in]*/ enum EMouseButton Value ) = 0;
      virtual HRESULT __stdcall get_Direction (
        /*[out,retval]*/ enum ETeeZoomDirection * Value ) = 0;
      virtual HRESULT __stdcall put_Direction (
        /*[in]*/ enum ETeeZoomDirection Value ) = 0;
      virtual HRESULT __stdcall get_Brush (
        /*[out,retval]*/ struct IBrush * * Value ) = 0;
      virtual HRESULT __stdcall raw_ZoomPercent (
        /*[in]*/ double PercentZoom ) = 0;
      virtual HRESULT __stdcall get_UpLeftZooms (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_UpLeftZooms (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
};

struct __declspec(uuid("d02220d4-95b1-4f2f-a3f6-0adcfa8aa74d"))
ICustom3DSeries : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBrush))
    IBrushPtr Brush;
    __declspec(property(get=GetZValue,put=PutZValue))
    double ZValue[];
    __declspec(property(get=GetPen))
    IPenPtr Pen;
    __declspec(property(get=GetTimesZOrder,put=PutTimesZOrder))
    long TimesZOrder;
    __declspec(property(get=GetZValues))
    IValueListPtr ZValues;

    //
    // Wrapper methods for error-handling
    //

    long AddXYZ (
        double AX,
        double AY,
        double AZ,
        _bstr_t AXLabel,
        OLE_COLOR Value );
    double MaxZValue ( );
    double MinZValue ( );
    long GetTimesZOrder ( );
    void PutTimesZOrder (
        long TimesZOrder );
    IValueListPtr GetZValues ( );
    double GetZValue (
        long Index );
    void PutZValue (
        long Index,
        double Value );
    IBrushPtr GetBrush ( );
    IPenPtr GetPen ( );
    HRESULT AddArrayXYZ (
        const _variant_t & XArray,
        const _variant_t & YArray,
        const _variant_t & ZArray );
    HRESULT AddArrayGrid (
        long NumX,
        long NumZ,
        const _variant_t & XZArray );
    long CalcZPos (
        long ValueIndex );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_AddXYZ (
        /*[in]*/ double AX,
        /*[in]*/ double AY,
        /*[in]*/ double AZ,
        /*[in]*/ BSTR AXLabel,
        /*[in]*/ OLE_COLOR Value,
        /*[out,retval]*/ long * AColor ) = 0;
      virtual HRESULT __stdcall raw_MaxZValue (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall raw_MinZValue (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall get_TimesZOrder (
        /*[out,retval]*/ long * TimesZOrder ) = 0;
      virtual HRESULT __stdcall put_TimesZOrder (
        /*[in]*/ long TimesZOrder ) = 0;
      virtual HRESULT __stdcall get_ZValues (
        /*[out,retval]*/ struct IValueList * * ZValues ) = 0;
      virtual HRESULT __stdcall get_ZValue (
        /*[in]*/ long Index,
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_ZValue (
        /*[in]*/ long Index,
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall get_Brush (
        /*[out,retval]*/ struct IBrush * * Brush ) = 0;
      virtual HRESULT __stdcall get_Pen (
        /*[out,retval]*/ struct IPen * * Pen ) = 0;
      virtual HRESULT __stdcall raw_AddArrayXYZ (
        /*[in]*/ VARIANT XArray,
        /*[in]*/ VARIANT YArray,
        /*[in]*/ VARIANT ZArray ) = 0;
      virtual HRESULT __stdcall raw_AddArrayGrid (
        /*[in]*/ long NumX,
        /*[in]*/ long NumZ,
        /*[in]*/ VARIANT XZArray ) = 0;
      virtual HRESULT __stdcall raw_CalcZPos (
        /*[in]*/ long ValueIndex,
        /*[out,retval]*/ long * Value ) = 0;
};

struct __declspec(uuid("951d6253-b815-4d5c-a757-660a90c09b1a"))
IVolumeSeries : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetUseYOrigin,put=PutUseYOrigin))
    VARIANT_BOOL UseYOrigin;
    __declspec(property(get=GetYOrigin,put=PutYOrigin))
    double YOrigin;
    __declspec(property(get=GetLinePen))
    IPenPtr LinePen;
    __declspec(property(get=GetVolumeValues))
    IValueListPtr VolumeValues;

    //
    // Wrapper methods for error-handling
    //

    IValueListPtr GetVolumeValues ( );
    IPenPtr GetLinePen ( );
    VARIANT_BOOL GetUseYOrigin ( );
    void PutUseYOrigin (
        VARIANT_BOOL Value );
    double GetYOrigin ( );
    void PutYOrigin (
        double Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_VolumeValues (
        /*[out,retval]*/ struct IValueList * * VolumeValues ) = 0;
      virtual HRESULT __stdcall get_LinePen (
        /*[out,retval]*/ struct IPen * * LinePen ) = 0;
      virtual HRESULT __stdcall get_UseYOrigin (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_UseYOrigin (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_YOrigin (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_YOrigin (
        /*[in]*/ double Value ) = 0;
};

struct __declspec(uuid("7b37e5dd-9723-435b-bde2-042c04314e23"))
ICustom3DPaletteSeries : ICustom3DSeries
{
    //
    // Property data
    //

    __declspec(property(get=GetMidColor,put=PutMidColor))
    OLE_COLOR MidColor;
    __declspec(property(get=GetPaletteStyle,put=PutPaletteStyle))
    enum EPaletteStyle PaletteStyle;
    __declspec(property(get=GetEndColor,put=PutEndColor))
    OLE_COLOR EndColor;
    __declspec(property(get=GetPaletteSteps,put=PutPaletteSteps))
    long PaletteSteps;
    __declspec(property(get=GetStartColor,put=PutStartColor))
    OLE_COLOR StartColor;
    __declspec(property(get=GetUseColorRange,put=PutUseColorRange))
    VARIANT_BOOL UseColorRange;
    __declspec(property(get=GetUsePalette,put=PutUsePalette))
    VARIANT_BOOL UsePalette;
    __declspec(property(get=GetUsePaletteMin,put=PutUsePaletteMin))
    VARIANT_BOOL UsePaletteMin;
    __declspec(property(get=GetPaletteMin,put=PutPaletteMin))
    double PaletteMin;
    __declspec(property(get=GetPaletteStep,put=PutPaletteStep))
    double PaletteStep;

    //
    // Wrapper methods for error-handling
    //

    long AddPalette (
        double Value,
        OLE_COLOR Color );
    OLE_COLOR GetStartColor ( );
    void PutStartColor (
        OLE_COLOR Value );
    OLE_COLOR GetEndColor ( );
    void PutEndColor (
        OLE_COLOR Value );
    long GetPaletteSteps ( );
    void PutPaletteSteps (
        long Value );
    VARIANT_BOOL GetUsePalette ( );
    void PutUsePalette (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetUseColorRange ( );
    void PutUseColorRange (
        VARIANT_BOOL Value );
    HRESULT ClearPalette ( );
    HRESULT CreateDefaultPalette (
        long NumSteps );
    OLE_COLOR GetSurfacePaletteColor (
        double Y );
    OLE_COLOR GetMidColor ( );
    void PutMidColor (
        OLE_COLOR Value );
    HRESULT CreateRangePalette ( );
    enum EPaletteStyle GetPaletteStyle ( );
    void PutPaletteStyle (
        enum EPaletteStyle Value );
    VARIANT_BOOL GetUsePaletteMin ( );
    void PutUsePaletteMin (
        VARIANT_BOOL Value );
    double GetPaletteMin ( );
    void PutPaletteMin (
        double Value );
    double GetPaletteStep ( );
    void PutPaletteStep (
        double Value );
    HRESULT InvertPalette ( );
    HRESULT AddCustomPalette (
        const _variant_t & colorArray );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_AddPalette (
        /*[in]*/ double Value,
        /*[in]*/ OLE_COLOR Color,
        /*[out,retval]*/ long * Value1 ) = 0;
      virtual HRESULT __stdcall get_StartColor (
        /*[out,retval]*/ OLE_COLOR * Value ) = 0;
      virtual HRESULT __stdcall put_StartColor (
        /*[in]*/ OLE_COLOR Value ) = 0;
      virtual HRESULT __stdcall get_EndColor (
        /*[out,retval]*/ OLE_COLOR * Value ) = 0;
      virtual HRESULT __stdcall put_EndColor (
        /*[in]*/ OLE_COLOR Value ) = 0;
      virtual HRESULT __stdcall get_PaletteSteps (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_PaletteSteps (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_UsePalette (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_UsePalette (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_UseColorRange (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_UseColorRange (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall raw_ClearPalette ( ) = 0;
      virtual HRESULT __stdcall raw_CreateDefaultPalette (
        /*[in]*/ long NumSteps ) = 0;
      virtual HRESULT __stdcall raw_GetSurfacePaletteColor (
        /*[in]*/ double Y,
        /*[out,retval]*/ OLE_COLOR * Value ) = 0;
      virtual HRESULT __stdcall get_MidColor (
        /*[out,retval]*/ OLE_COLOR * Value ) = 0;
      virtual HRESULT __stdcall put_MidColor (
        /*[in]*/ OLE_COLOR Value ) = 0;
      virtual HRESULT __stdcall raw_CreateRangePalette ( ) = 0;
      virtual HRESULT __stdcall get_PaletteStyle (
        /*[out,retval]*/ enum EPaletteStyle * Value ) = 0;
      virtual HRESULT __stdcall put_PaletteStyle (
        /*[in]*/ enum EPaletteStyle Value ) = 0;
      virtual HRESULT __stdcall get_UsePaletteMin (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_UsePaletteMin (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_PaletteMin (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_PaletteMin (
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall get_PaletteStep (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_PaletteStep (
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall raw_InvertPalette ( ) = 0;
      virtual HRESULT __stdcall raw_AddCustomPalette (
        /*[in]*/ VARIANT colorArray ) = 0;
};

struct __declspec(uuid("a06b5773-1991-48d8-a45f-6f377039e6c5"))
ICustom3DGridSeries : ICustom3DPaletteSeries
{
    //
    // Property data
    //

    __declspec(property(get=GetNumXValues,put=PutNumXValues))
    long NumXValues;
    __declspec(property(get=GetNumZValues,put=PutNumZValues))
    long NumZValues;
    __declspec(property(get=GetReuseGridIndex,put=PutReuseGridIndex))
    VARIANT_BOOL ReuseGridIndex;
    __declspec(property(get=GetIrregularGrid,put=PutIrregularGrid))
    VARIANT_BOOL IrregularGrid;

    //
    // Wrapper methods for error-handling
    //

    long GetNumXValues ( );
    void PutNumXValues (
        long Value );
    long GetNumZValues ( );
    void PutNumZValues (
        long Value );
    double GetXZValue (
        long X,
        long Z );
    VARIANT_BOOL GetIrregularGrid ( );
    void PutIrregularGrid (
        VARIANT_BOOL Value );
    HRESULT SmoothGrid3D ( );
    VARIANT_BOOL GetReuseGridIndex ( );
    void PutReuseGridIndex (
        VARIANT_BOOL Value );
    HRESULT FillGridIndex (
        long StartIndex );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_NumXValues (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_NumXValues (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_NumZValues (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_NumZValues (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_GetXZValue (
        /*[in]*/ long X,
        /*[in]*/ long Z,
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall get_IrregularGrid (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_IrregularGrid (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall raw_SmoothGrid3D ( ) = 0;
      virtual HRESULT __stdcall get_ReuseGridIndex (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_ReuseGridIndex (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall raw_FillGridIndex (
        /*[in]*/ long StartIndex ) = 0;
};

struct __declspec(uuid("487af4ba-21d0-4e2f-8b72-5d7f948ddcb4"))
INearestTool : ICustomToolSeries
{
    //
    // Property data
    //

    __declspec(property(get=GetPoint,put=PutPoint))
    long Point;
    __declspec(property(get=GetBrush))
    IBrushPtr Brush;
    __declspec(property(get=GetDrawLine,put=PutDrawLine))
    VARIANT_BOOL DrawLine;
    __declspec(property(get=GetFullRepaint,put=PutFullRepaint))
    VARIANT_BOOL FullRepaint;
    __declspec(property(get=GetPen))
    IPenPtr Pen;
    __declspec(property(get=GetSize,put=PutSize))
    long Size;
    __declspec(property(get=GetStyle,put=PutStyle))
    enum ENearestToolStyle Style;

    //
    // Wrapper methods for error-handling
    //

    IBrushPtr GetBrush ( );
    VARIANT_BOOL GetDrawLine ( );
    void PutDrawLine (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetFullRepaint ( );
    void PutFullRepaint (
        VARIANT_BOOL Value );
    IPenPtr GetPen ( );
    long GetSize ( );
    void PutSize (
        long Value );
    enum ENearestToolStyle GetStyle ( );
    void PutStyle (
        enum ENearestToolStyle Value );
    long GetPoint ( );
    void PutPoint (
        long Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Brush (
        /*[out,retval]*/ struct IBrush * * Value ) = 0;
      virtual HRESULT __stdcall get_DrawLine (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_DrawLine (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_FullRepaint (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_FullRepaint (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_Pen (
        /*[out,retval]*/ struct IPen * * Value ) = 0;
      virtual HRESULT __stdcall get_Size (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Size (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ enum ENearestToolStyle * Value ) = 0;
      virtual HRESULT __stdcall put_Style (
        /*[in]*/ enum ENearestToolStyle Value ) = 0;
      virtual HRESULT __stdcall get_Point (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Point (
        /*[in]*/ long Value ) = 0;
};

struct __declspec(uuid("b1a083c0-cdc7-418c-95fb-abaf6707f66f"))
IColorLineTool : ICustomToolAxis
{
    //
    // Property data
    //

    __declspec(property(get=GetAllowDrag,put=PutAllowDrag))
    VARIANT_BOOL AllowDrag;
    __declspec(property(get=GetPen))
    IPenPtr Pen;
    __declspec(property(get=GetValue,put=PutValue))
    double Value;
    __declspec(property(get=GetDragRepaint,put=PutDragRepaint))
    VARIANT_BOOL DragRepaint;
    __declspec(property(get=GetNoLimitDrag,put=PutNoLimitDrag))
    VARIANT_BOOL NoLimitDrag;
    __declspec(property(get=GetDraw3D,put=PutDraw3D))
    VARIANT_BOOL Draw3D;
    __declspec(property(get=GetStyle,put=PutStyle))
    enum EColorLineStyle Style;
    __declspec(property(get=GetDrawBehind,put=PutDrawBehind))
    VARIANT_BOOL DrawBehind;

    //
    // Wrapper methods for error-handling
    //

    IPenPtr GetPen ( );
    double GetValue ( );
    void PutValue (
        double Value );
    VARIANT_BOOL GetAllowDrag ( );
    void PutAllowDrag (
        VARIANT_BOOL Value );
    VARIANT_BOOL Clicked (
        long X,
        long Y );
    VARIANT_BOOL GetDragRepaint ( );
    void PutDragRepaint (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetNoLimitDrag ( );
    void PutNoLimitDrag (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetDraw3D ( );
    void PutDraw3D (
        VARIANT_BOOL Value );
    enum EColorLineStyle GetStyle ( );
    void PutStyle (
        enum EColorLineStyle Value );
    VARIANT_BOOL GetDrawBehind ( );
    void PutDrawBehind (
        VARIANT_BOOL Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Pen (
        /*[out,retval]*/ struct IPen * * Value ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall get_AllowDrag (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_AllowDrag (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall raw_Clicked (
        /*[in]*/ long X,
        /*[in]*/ long Y,
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall get_DragRepaint (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_DragRepaint (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_NoLimitDrag (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_NoLimitDrag (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_Draw3D (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Draw3D (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ enum EColorLineStyle * Value ) = 0;
      virtual HRESULT __stdcall put_Style (
        /*[in]*/ enum EColorLineStyle Value ) = 0;
      virtual HRESULT __stdcall get_DrawBehind (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_DrawBehind (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
};

struct __declspec(uuid("361f642d-2de5-4359-a14b-5dbf38096886"))
IContourLevel : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;
    __declspec(property(get=GetUpToValue,put=PutUpToValue))
    double UpToValue;
    __declspec(property(get=GetSegments))
    ILevelSegmentPtr Segments[];
    __declspec(property(get=GetNumSegments))
    long NumSegments;
    __declspec(property(get=GetPen))
    IPenPtr Pen;
    __declspec(property(get=GetDefaultPen))
    VARIANT_BOOL DefaultPen;

    //
    // Wrapper methods for error-handling
    //

    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR Value );
    double GetUpToValue ( );
    void PutUpToValue (
        double Value );
    ILevelSegmentPtr GetSegments (
        long Index );
    long GetNumSegments ( );
    IPenPtr GetPen ( );
    HRESULT ClearSegments ( );
    VARIANT_BOOL Clicked (
        long XCoord,
        long YCoord,
        long * SegmentIndex,
        long * PointIndex );
    VARIANT_BOOL ClickedSegment (
        long XCoord,
        long YCoord,
        long SegmentIndex,
        long * PointIndex );
    VARIANT_BOOL GetDefaultPen ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * Value ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR Value ) = 0;
      virtual HRESULT __stdcall get_UpToValue (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_UpToValue (
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall get_Segments (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct ILevelSegment * * Value ) = 0;
      virtual HRESULT __stdcall get_NumSegments (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_Pen (
        /*[out,retval]*/ struct IPen * * Value ) = 0;
      virtual HRESULT __stdcall raw_ClearSegments ( ) = 0;
      virtual HRESULT __stdcall raw_Clicked (
        /*[in]*/ long XCoord,
        /*[in]*/ long YCoord,
        /*[in,out]*/ long * SegmentIndex,
        /*[in,out]*/ long * PointIndex,
        /*[out,retval]*/ VARIANT_BOOL * Res ) = 0;
      virtual HRESULT __stdcall raw_ClickedSegment (
        /*[in]*/ long XCoord,
        /*[in]*/ long YCoord,
        /*[in]*/ long SegmentIndex,
        /*[in,out]*/ long * PointIndex,
        /*[out,retval]*/ VARIANT_BOOL * Res ) = 0;
      virtual HRESULT __stdcall get_DefaultPen (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
};

struct __declspec(uuid("0b2f7e6b-4d7d-4251-a11a-0189e5447b26"))
IContourLevels : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItems))
    IContourLevelPtr Items[];

    //
    // Wrapper methods for error-handling
    //

    IContourLevelPtr GetItems (
        long Index );
    long Clicked (
        long XCoord,
        long YCoord,
        long * SegmentIndex,
        long * PointIndex );
    long AddLevel (
        double LevelValue,
        OLE_COLOR Color );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Items (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IContourLevel * * Value ) = 0;
      virtual HRESULT __stdcall raw_Clicked (
        /*[in]*/ long XCoord,
        /*[in]*/ long YCoord,
        /*[in,out]*/ long * SegmentIndex,
        /*[in,out]*/ long * PointIndex,
        /*[out,retval]*/ long * LevelIndex ) = 0;
      virtual HRESULT __stdcall raw_AddLevel (
        /*[in]*/ double LevelValue,
        /*[in]*/ OLE_COLOR Color,
        /*[out,retval]*/ long * Value ) = 0;
};

struct __declspec(uuid("9e781c98-cce0-49b6-b352-699d559c695f"))
ITriSurfaceSeries : ICustom3DPaletteSeries
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    IPenPtr Border;
    __declspec(property(get=GetHideTriangles,put=PutHideTriangles))
    VARIANT_BOOL HideTriangles;
    __declspec(property(get=GetCacheTriangles,put=PutCacheTriangles))
    VARIANT_BOOL CacheTriangles;

    //
    // Wrapper methods for error-handling
    //

    IPenPtr GetBorder ( );
    VARIANT_BOOL GetHideTriangles ( );
    void PutHideTriangles (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetCacheTriangles ( );
    void PutCacheTriangles (
        VARIANT_BOOL Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct IPen * * Value ) = 0;
      virtual HRESULT __stdcall get_HideTriangles (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_HideTriangles (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_CacheTriangles (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_CacheTriangles (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
};

struct __declspec(uuid("fd061005-c104-46f2-bcca-dc854395495f"))
IHistogramSeries : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetTransparency,put=PutTransparency))
    long Transparency;
    __declspec(property(get=GetBrush))
    IBrushPtr Brush;
    __declspec(property(get=GetLinePen))
    IPenPtr LinePen;
    __declspec(property(get=GetLinesPen))
    IPenPtr LinesPen;

    //
    // Wrapper methods for error-handling
    //

    IPenPtr GetLinesPen ( );
    long GetTransparency ( );
    void PutTransparency (
        long Value );
    IPenPtr GetLinePen ( );
    IBrushPtr GetBrush ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_LinesPen (
        /*[out,retval]*/ struct IPen * * Value ) = 0;
      virtual HRESULT __stdcall get_Transparency (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Transparency (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_LinePen (
        /*[out,retval]*/ struct IPen * * Value ) = 0;
      virtual HRESULT __stdcall get_Brush (
        /*[out,retval]*/ struct IBrush * * Value ) = 0;
};

struct __declspec(uuid("e1c73990-abec-4354-801a-3224b3f8c77a"))
ICursorTool : ICustomToolSeries
{
    //
    // Property data
    //

    __declspec(property(get=GetXVal,put=PutXVal))
    double XVal;
    __declspec(property(get=GetFollowMouse,put=PutFollowMouse))
    VARIANT_BOOL FollowMouse;
    __declspec(property(get=GetPen))
    IPenPtr Pen;
    __declspec(property(get=GetYVal,put=PutYVal))
    double YVal;
    __declspec(property(get=GetSnap,put=PutSnap))
    VARIANT_BOOL Snap;
    __declspec(property(get=GetStyle,put=PutStyle))
    enum ECursorToolStyle Style;
    __declspec(property(get=GetClickTolerance,put=PutClickTolerance))
    long ClickTolerance;
    __declspec(property(get=GetHorizSize,put=PutHorizSize))
    long HorizSize;
    __declspec(property(get=GetScopeSize,put=PutScopeSize))
    long ScopeSize;
    __declspec(property(get=GetScopeStyle,put=PutScopeStyle))
    enum EScopeCursorStyle ScopeStyle;
    __declspec(property(get=GetSnapStyle,put=PutSnapStyle))
    enum ESnapStyle SnapStyle;
    __declspec(property(get=GetUseSeriesZ,put=PutUseSeriesZ))
    VARIANT_BOOL UseSeriesZ;
    __declspec(property(get=GetVertSize,put=PutVertSize))
    long VertSize;
    __declspec(property(get=GetUseChartRect,put=PutUseChartRect))
    VARIANT_BOOL UseChartRect;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetFollowMouse ( );
    void PutFollowMouse (
        VARIANT_BOOL Value );
    IPenPtr GetPen ( );
    VARIANT_BOOL GetSnap ( );
    void PutSnap (
        VARIANT_BOOL Value );
    enum ECursorToolStyle GetStyle ( );
    void PutStyle (
        enum ECursorToolStyle Value );
    double GetXVal ( );
    void PutXVal (
        double Value );
    double GetYVal ( );
    void PutYVal (
        double Value );
    long GetClickTolerance ( );
    void PutClickTolerance (
        long Value );
    long GetHorizSize ( );
    void PutHorizSize (
        long Value );
    long GetScopeSize ( );
    void PutScopeSize (
        long Value );
    enum EScopeCursorStyle GetScopeStyle ( );
    void PutScopeStyle (
        enum EScopeCursorStyle Value );
    enum ESnapStyle GetSnapStyle ( );
    void PutSnapStyle (
        enum ESnapStyle Value );
    VARIANT_BOOL GetUseSeriesZ ( );
    void PutUseSeriesZ (
        VARIANT_BOOL Value );
    long GetVertSize ( );
    void PutVertSize (
        long Value );
    VARIANT_BOOL GetUseChartRect ( );
    void PutUseChartRect (
        VARIANT_BOOL Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_FollowMouse (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_FollowMouse (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_Pen (
        /*[out,retval]*/ struct IPen * * Value ) = 0;
      virtual HRESULT __stdcall get_Snap (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Snap (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ enum ECursorToolStyle * Value ) = 0;
      virtual HRESULT __stdcall put_Style (
        /*[in]*/ enum ECursorToolStyle Value ) = 0;
      virtual HRESULT __stdcall get_XVal (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_XVal (
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall get_YVal (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_YVal (
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall get_ClickTolerance (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_ClickTolerance (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_HorizSize (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_HorizSize (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_ScopeSize (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_ScopeSize (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_ScopeStyle (
        /*[out,retval]*/ enum EScopeCursorStyle * Value ) = 0;
      virtual HRESULT __stdcall put_ScopeStyle (
        /*[in]*/ enum EScopeCursorStyle Value ) = 0;
      virtual HRESULT __stdcall get_SnapStyle (
        /*[out,retval]*/ enum ESnapStyle * Value ) = 0;
      virtual HRESULT __stdcall put_SnapStyle (
        /*[in]*/ enum ESnapStyle Value ) = 0;
      virtual HRESULT __stdcall get_UseSeriesZ (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_UseSeriesZ (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_VertSize (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_VertSize (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_UseChartRect (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_UseChartRect (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
};

struct __declspec(uuid("e946191e-9bf3-4fdf-9a9f-97fb798fc797"))
IDrawLine : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEndPos))
    ITeePoint2DPtr EndPos;
    __declspec(property(get=GetStartPos))
    ITeePoint2DPtr StartPos;
    __declspec(property(get=GetPen))
    IPenPtr Pen;
    __declspec(property(get=GetStyle,put=PutStyle))
    enum EDrawLineStyle Style;

    //
    // Wrapper methods for error-handling
    //

    ITeePoint2DPtr GetEndPos ( );
    ITeePoint2DPtr GetStartPos ( );
    IPenPtr GetPen ( );
    HRESULT DrawHandles ( );
    struct TeeRect EndHandle ( );
    struct TeeRect StartHandle ( );
    enum EDrawLineStyle GetStyle ( );
    void PutStyle (
        enum EDrawLineStyle Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_EndPos (
        /*[out,retval]*/ struct ITeePoint2D * * Value ) = 0;
      virtual HRESULT __stdcall get_StartPos (
        /*[out,retval]*/ struct ITeePoint2D * * Value ) = 0;
      virtual HRESULT __stdcall get_Pen (
        /*[out,retval]*/ struct IPen * * Value ) = 0;
      virtual HRESULT __stdcall raw_DrawHandles ( ) = 0;
      virtual HRESULT __stdcall raw_EndHandle (
        /*[out,retval]*/ struct TeeRect * Value ) = 0;
      virtual HRESULT __stdcall raw_StartHandle (
        /*[out,retval]*/ struct TeeRect * Value ) = 0;
      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ enum EDrawLineStyle * Value ) = 0;
      virtual HRESULT __stdcall put_Style (
        /*[in]*/ enum EDrawLineStyle Value ) = 0;
};

struct __declspec(uuid("eca0bac9-08dc-452a-bc80-26405650242d"))
IDrawLineList : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetControlDefault))
    _variant_t ControlDefault[];
    __declspec(property(get=GetItems))
    IDrawLinePtr Items[];
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    IDrawLinePtr GetItems (
        long Index );
    _variant_t GetControlDefault (
        long Index );
    HRESULT Clear ( );
    HRESULT Delete (
        long Index );
    long GetCount ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Items (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IDrawLine * * Value ) = 0;
      virtual HRESULT __stdcall get_ControlDefault (
        /*[in]*/ long Index,
        /*[out,retval]*/ VARIANT * Value ) = 0;
      virtual HRESULT __stdcall raw_Clear ( ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[in]*/ long Index ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Value ) = 0;
};

struct __declspec(uuid("87455f47-67f4-4425-9b88-63f09d7f1d99"))
IDrawLineTool : ICustomToolSeries
{
    //
    // Property data
    //

    __declspec(property(get=GetFromPoint))
    ITeePoint2DPtr FromPoint;
    __declspec(property(get=GetToPoint))
    ITeePoint2DPtr ToPoint;
    __declspec(property(get=GetLines))
    IDrawLineListPtr Lines;
    __declspec(property(get=GetSelected,put=PutSelected))
    long Selected;
    __declspec(property(get=GetButton,put=PutButton))
    enum EMouseButton Button;
    __declspec(property(get=GetEnableDraw,put=PutEnableDraw))
    VARIANT_BOOL EnableDraw;
    __declspec(property(get=GetEnableSelect,put=PutEnableSelect))
    VARIANT_BOOL EnableSelect;
    __declspec(property(get=GetPen))
    IPenPtr Pen;
    __declspec(property(get=GetClickTolerance,put=PutClickTolerance))
    long ClickTolerance;
    __declspec(property(get=GetSelectNewLines,put=PutSelectNewLines))
    VARIANT_BOOL SelectNewLines;
    __declspec(property(get=GetStyle,put=PutStyle))
    enum EDrawLineStyle Style;

    //
    // Wrapper methods for error-handling
    //

    ITeePoint2DPtr GetFromPoint ( );
    ITeePoint2DPtr GetToPoint ( );
    ITeePoint2DPtr AxisPoint (
        double X,
        double Y );
    long Clicked (
        long X,
        long Y );
    HRESULT DeleteSelected ( );
    ITeePoint2DPtr ScreenPoint (
        long X,
        long Y );
    IDrawLineListPtr GetLines ( );
    long GetSelected ( );
    void PutSelected (
        long Index );
    enum EMouseButton GetButton ( );
    void PutButton (
        enum EMouseButton Value );
    VARIANT_BOOL GetEnableDraw ( );
    void PutEnableDraw (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetEnableSelect ( );
    void PutEnableSelect (
        VARIANT_BOOL Value );
    IPenPtr GetPen ( );
    long AddLine (
        double FromX,
        double FromY,
        double ToX,
        double ToY );
    long GetClickTolerance ( );
    void PutClickTolerance (
        long Value );
    VARIANT_BOOL GetSelectNewLines ( );
    void PutSelectNewLines (
        VARIANT_BOOL Value );
    enum EDrawLineStyle GetStyle ( );
    void PutStyle (
        enum EDrawLineStyle Value );
    long ClickedTolerance (
        long X,
        long Y,
        long ClickTolerance );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_FromPoint (
        /*[out,retval]*/ struct ITeePoint2D * * Value ) = 0;
      virtual HRESULT __stdcall get_ToPoint (
        /*[out,retval]*/ struct ITeePoint2D * * Value ) = 0;
      virtual HRESULT __stdcall raw_AxisPoint (
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[out,retval]*/ struct ITeePoint2D * * Value ) = 0;
      virtual HRESULT __stdcall raw_Clicked (
        /*[in]*/ long X,
        /*[in]*/ long Y,
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall raw_DeleteSelected ( ) = 0;
      virtual HRESULT __stdcall raw_ScreenPoint (
        /*[in]*/ long X,
        /*[in]*/ long Y,
        /*[out,retval]*/ struct ITeePoint2D * * Value ) = 0;
      virtual HRESULT __stdcall get_Lines (
        /*[out,retval]*/ struct IDrawLineList * * Value ) = 0;
      virtual HRESULT __stdcall get_Selected (
        /*[out,retval]*/ long * Index ) = 0;
      virtual HRESULT __stdcall put_Selected (
        /*[in]*/ long Index ) = 0;
      virtual HRESULT __stdcall get_Button (
        /*[out,retval]*/ enum EMouseButton * Value ) = 0;
      virtual HRESULT __stdcall put_Button (
        /*[in]*/ enum EMouseButton Value ) = 0;
      virtual HRESULT __stdcall get_EnableDraw (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_EnableDraw (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_EnableSelect (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_EnableSelect (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_Pen (
        /*[out,retval]*/ struct IPen * * Value ) = 0;
      virtual HRESULT __stdcall raw_AddLine (
        /*[in]*/ double FromX,
        /*[in]*/ double FromY,
        /*[in]*/ double ToX,
        /*[in]*/ double ToY,
        /*[out,retval]*/ long * retVal ) = 0;
      virtual HRESULT __stdcall get_ClickTolerance (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_ClickTolerance (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_SelectNewLines (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_SelectNewLines (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ enum EDrawLineStyle * Value ) = 0;
      virtual HRESULT __stdcall put_Style (
        /*[in]*/ enum EDrawLineStyle Value ) = 0;
      virtual HRESULT __stdcall raw_ClickedTolerance (
        /*[in]*/ long X,
        /*[in]*/ long Y,
        /*[in]*/ long ClickTolerance,
        /*[out,retval]*/ long * Value ) = 0;
};

struct __declspec(uuid("00746a35-1bcd-4115-83cb-30d9cd1ca389"))
IAxisArrowTool : ICustomToolAxis
{
    //
    // Property data
    //

    __declspec(property(get=GetScrollInverted,put=PutScrollInverted))
    VARIANT_BOOL ScrollInverted;
    __declspec(property(get=GetPosition,put=PutPosition))
    enum EAxisArrowToolPosition Position;
    __declspec(property(get=GetBrush))
    IBrushPtr Brush;
    __declspec(property(get=GetLength,put=PutLength))
    long Length;
    __declspec(property(get=GetPen))
    IPenPtr Pen;
    __declspec(property(get=GetScrollPercent,put=PutScrollPercent))
    long ScrollPercent;
    __declspec(property(get=GetHeadWidth,put=PutHeadWidth))
    long HeadWidth;
    __declspec(property(get=GetSizePercent,put=PutSizePercent))
    long SizePercent;

    //
    // Wrapper methods for error-handling
    //

    enum EAxisArrowToolPosition GetPosition ( );
    void PutPosition (
        enum EAxisArrowToolPosition Value );
    IBrushPtr GetBrush ( );
    long GetLength ( );
    void PutLength (
        long Value );
    IPenPtr GetPen ( );
    long GetScrollPercent ( );
    void PutScrollPercent (
        long Value );
    VARIANT_BOOL GetScrollInverted ( );
    void PutScrollInverted (
        VARIANT_BOOL Value );
    long GetHeadWidth ( );
    void PutHeadWidth (
        long Value );
    long GetSizePercent ( );
    void PutSizePercent (
        long Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Position (
        /*[out,retval]*/ enum EAxisArrowToolPosition * Value ) = 0;
      virtual HRESULT __stdcall put_Position (
        /*[in]*/ enum EAxisArrowToolPosition Value ) = 0;
      virtual HRESULT __stdcall get_Brush (
        /*[out,retval]*/ struct IBrush * * Value ) = 0;
      virtual HRESULT __stdcall get_Length (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Length (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_Pen (
        /*[out,retval]*/ struct IPen * * Value ) = 0;
      virtual HRESULT __stdcall get_ScrollPercent (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_ScrollPercent (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_ScrollInverted (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_ScrollInverted (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_HeadWidth (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_HeadWidth (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_SizePercent (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_SizePercent (
        /*[in]*/ long Value ) = 0;
};

struct __declspec(uuid("f81057f8-f2d4-4125-95dc-36e1116f6d40"))
IChartImageTool : ICustomToolSeries
{
    //
    // Property data
    //

    __declspec(property(get=GetPen))
    IPenPtr Pen;

    //
    // Wrapper methods for error-handling
    //

    HRESULT ImageLoad (
        _bstr_t FileName );
    HRESULT ImageClear ( );
    IPenPtr GetPen ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_ImageLoad (
        /*[in]*/ BSTR FileName ) = 0;
      virtual HRESULT __stdcall raw_ImageClear ( ) = 0;
      virtual HRESULT __stdcall get_Pen (
        /*[out,retval]*/ struct IPen * * Value ) = 0;
};

struct __declspec(uuid("a6b24b01-657e-4a5c-844c-a3b1251ee1d4"))
IFunnelSeries : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBrush))
    IBrushPtr Brush;
    __declspec(property(get=GetPen))
    IPenPtr Pen;
    __declspec(property(get=GetLinesPen))
    IPenPtr LinesPen;
    __declspec(property(get=GetAutoUpdate,put=PutAutoUpdate))
    VARIANT_BOOL AutoUpdate;
    __declspec(property(get=GetQuotesSorted,put=PutQuotesSorted))
    VARIANT_BOOL QuotesSorted;
    __declspec(property(get=GetDifferenceLimit,put=PutDifferenceLimit))
    double DifferenceLimit;
    __declspec(property(get=GetAboveColor,put=PutAboveColor))
    OLE_COLOR AboveColor;
    __declspec(property(get=GetWithinColor,put=PutWithinColor))
    OLE_COLOR WithinColor;
    __declspec(property(get=GetBelowColor,put=PutBelowColor))
    OLE_COLOR BelowColor;
    __declspec(property(get=GetOpportunityValues))
    IValueListPtr OpportunityValues;
    __declspec(property(get=GetQuoteValues))
    IValueListPtr QuoteValues;

    //
    // Wrapper methods for error-handling
    //

    long AddSegment (
        double AQuote,
        double AOpportunity,
        _bstr_t ALabel,
        OLE_COLOR AColor );
    HRESULT Recalc ( );
    IBrushPtr GetBrush ( );
    IPenPtr GetPen ( );
    IPenPtr GetLinesPen ( );
    VARIANT_BOOL GetAutoUpdate ( );
    void PutAutoUpdate (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetQuotesSorted ( );
    void PutQuotesSorted (
        VARIANT_BOOL Value );
    double GetDifferenceLimit ( );
    void PutDifferenceLimit (
        double Value );
    OLE_COLOR GetAboveColor ( );
    void PutAboveColor (
        OLE_COLOR Value );
    OLE_COLOR GetWithinColor ( );
    void PutWithinColor (
        OLE_COLOR Value );
    OLE_COLOR GetBelowColor ( );
    void PutBelowColor (
        OLE_COLOR Value );
    IValueListPtr GetOpportunityValues ( );
    IValueListPtr GetQuoteValues ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_AddSegment (
        /*[in]*/ double AQuote,
        /*[in]*/ double AOpportunity,
        /*[in]*/ BSTR ALabel,
        /*[in]*/ OLE_COLOR AColor,
        /*[out,retval]*/ long * Index ) = 0;
      virtual HRESULT __stdcall raw_Recalc ( ) = 0;
      virtual HRESULT __stdcall get_Brush (
        /*[out,retval]*/ struct IBrush * * Value ) = 0;
      virtual HRESULT __stdcall get_Pen (
        /*[out,retval]*/ struct IPen * * Value ) = 0;
      virtual HRESULT __stdcall get_LinesPen (
        /*[out,retval]*/ struct IPen * * Value ) = 0;
      virtual HRESULT __stdcall get_AutoUpdate (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_AutoUpdate (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_QuotesSorted (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_QuotesSorted (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_DifferenceLimit (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_DifferenceLimit (
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall get_AboveColor (
        /*[out,retval]*/ OLE_COLOR * Value ) = 0;
      virtual HRESULT __stdcall put_AboveColor (
        /*[in]*/ OLE_COLOR Value ) = 0;
      virtual HRESULT __stdcall get_WithinColor (
        /*[out,retval]*/ OLE_COLOR * Value ) = 0;
      virtual HRESULT __stdcall put_WithinColor (
        /*[in]*/ OLE_COLOR Value ) = 0;
      virtual HRESULT __stdcall get_BelowColor (
        /*[out,retval]*/ OLE_COLOR * Value ) = 0;
      virtual HRESULT __stdcall put_BelowColor (
        /*[in]*/ OLE_COLOR Value ) = 0;
      virtual HRESULT __stdcall get_OpportunityValues (
        /*[out,retval]*/ struct IValueList * * Value ) = 0;
      virtual HRESULT __stdcall get_QuoteValues (
        /*[out,retval]*/ struct IValueList * * Value ) = 0;
};

struct __declspec(uuid("8a2712f9-7df4-4190-8c57-df25aff1e5fb"))
IPieTool : ICustomToolSeries
{
    //
    // Property data
    //

    __declspec(property(get=GetPen))
    IPenPtr Pen;
    __declspec(property(get=GetStyle,put=PutStyle))
    enum EPieToolStyle Style;
    __declspec(property(get=GetSlice))
    long Slice;

    //
    // Wrapper methods for error-handling
    //

    IPenPtr GetPen ( );
    enum EPieToolStyle GetStyle ( );
    void PutStyle (
        enum EPieToolStyle Value );
    long GetSlice ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Pen (
        /*[out,retval]*/ struct IPen * * Value ) = 0;
      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ enum EPieToolStyle * Value ) = 0;
      virtual HRESULT __stdcall put_Style (
        /*[in]*/ enum EPieToolStyle Value ) = 0;
      virtual HRESULT __stdcall get_Slice (
        /*[out,retval]*/ long * Value ) = 0;
};

struct __declspec(uuid("10c205e0-73c6-41f3-8602-71359b4bde16"))
IVector3DSeries : ICustom3DPaletteSeries
{
    //
    // Property data
    //

    __declspec(property(get=GetArrowHeight,put=PutArrowHeight))
    long ArrowHeight;
    __declspec(property(get=GetArrowWidth,put=PutArrowWidth))
    long ArrowWidth;
    __declspec(property(get=GetEndArrow))
    IPenPtr EndArrow;
    __declspec(property(get=GetEndXValues))
    IValueListPtr EndXValues;
    __declspec(property(get=GetEndYValues))
    IValueListPtr EndYValues;
    __declspec(property(get=GetEndZValues))
    IValueListPtr EndZValues;
    __declspec(property(get=GetStartArrow))
    IPenPtr StartArrow;

    //
    // Wrapper methods for error-handling
    //

    long AddVector (
        double X0,
        double Y0,
        double Z0,
        double X1,
        double Y1,
        double Z1,
        _bstr_t ALabel,
        OLE_COLOR AColor );
    long GetArrowHeight ( );
    void PutArrowHeight (
        long Value );
    long GetArrowWidth ( );
    void PutArrowWidth (
        long Value );
    IPenPtr GetEndArrow ( );
    IValueListPtr GetEndXValues ( );
    IValueListPtr GetEndYValues ( );
    IValueListPtr GetEndZValues ( );
    double MinXValueVector ( );
    double MaxXValueVector ( );
    double MinYValueVector ( );
    double MaxYValueVector ( );
    double MinZValueVector ( );
    double MaxZValueVector ( );
    IPenPtr GetStartArrow ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_AddVector (
        /*[in]*/ double X0,
        /*[in]*/ double Y0,
        /*[in]*/ double Z0,
        /*[in]*/ double X1,
        /*[in]*/ double Y1,
        /*[in]*/ double Z1,
        /*[in]*/ BSTR ALabel,
        /*[in]*/ OLE_COLOR AColor,
        /*[out,retval]*/ long * AValue ) = 0;
      virtual HRESULT __stdcall get_ArrowHeight (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_ArrowHeight (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_ArrowWidth (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_ArrowWidth (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_EndArrow (
        /*[out,retval]*/ struct IPen * * Value ) = 0;
      virtual HRESULT __stdcall get_EndXValues (
        /*[out,retval]*/ struct IValueList * * Value ) = 0;
      virtual HRESULT __stdcall get_EndYValues (
        /*[out,retval]*/ struct IValueList * * Value ) = 0;
      virtual HRESULT __stdcall get_EndZValues (
        /*[out,retval]*/ struct IValueList * * Value ) = 0;
      virtual HRESULT __stdcall raw_MinXValueVector (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall raw_MaxXValueVector (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall raw_MinYValueVector (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall raw_MaxYValueVector (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall raw_MinZValueVector (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall raw_MaxZValueVector (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall get_StartArrow (
        /*[out,retval]*/ struct IPen * * Value ) = 0;
};

struct __declspec(uuid("8d0bd38d-8b31-4189-a9e8-782a501ee943"))
ITowerSeries : ICustom3DGridSeries
{
    //
    // Property data
    //

    __declspec(property(get=GetUseOrigin,put=PutUseOrigin))
    VARIANT_BOOL UseOrigin;
    __declspec(property(get=GetDark3D,put=PutDark3D))
    VARIANT_BOOL Dark3D;
    __declspec(property(get=GetPercentDepth,put=PutPercentDepth))
    long PercentDepth;
    __declspec(property(get=GetOrigin,put=PutOrigin))
    double Origin;
    __declspec(property(get=GetTowerStyle,put=PutTowerStyle))
    enum ETowerStyle TowerStyle;
    __declspec(property(get=GetTransparency,put=PutTransparency))
    long Transparency;
    __declspec(property(get=GetPercentWidth,put=PutPercentWidth))
    long PercentWidth;

    //
    // Wrapper methods for error-handling
    //

    long Clicked (
        long X,
        long Y );
    VARIANT_BOOL GetDark3D ( );
    void PutDark3D (
        VARIANT_BOOL Value );
    long GetPercentDepth ( );
    void PutPercentDepth (
        long Value );
    double GetOrigin ( );
    void PutOrigin (
        double Value );
    enum ETowerStyle GetTowerStyle ( );
    void PutTowerStyle (
        enum ETowerStyle Value );
    long GetTransparency ( );
    void PutTransparency (
        long Value );
    long GetPercentWidth ( );
    void PutPercentWidth (
        long Value );
    VARIANT_BOOL GetUseOrigin ( );
    void PutUseOrigin (
        VARIANT_BOOL Value );
    double MinXValueTower ( );
    double MaxXValueTower ( );
    double MinZValueTower ( );
    double MaxZValueTower ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Clicked (
        /*[in]*/ long X,
        /*[in]*/ long Y,
        /*[out,retval]*/ long * AValue ) = 0;
      virtual HRESULT __stdcall get_Dark3D (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Dark3D (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_PercentDepth (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_PercentDepth (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_Origin (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_Origin (
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall get_TowerStyle (
        /*[out,retval]*/ enum ETowerStyle * Value ) = 0;
      virtual HRESULT __stdcall put_TowerStyle (
        /*[in]*/ enum ETowerStyle Value ) = 0;
      virtual HRESULT __stdcall get_Transparency (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Transparency (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_PercentWidth (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_PercentWidth (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_UseOrigin (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_UseOrigin (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall raw_MinXValueTower (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall raw_MaxXValueTower (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall raw_MinZValueTower (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall raw_MaxZValueTower (
        /*[out,retval]*/ double * Value ) = 0;
};

struct __declspec(uuid("57c96cd8-4316-4222-b4ea-9adda9cac20c"))
IHorizHistogramSeries : IHistogramSeries
{};

struct __declspec(uuid("4a6b2e0d-6ebe-4811-b2d5-8148d110cf97"))
ISelectorTool : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAllowDrag,put=PutAllowDrag))
    VARIANT_BOOL AllowDrag;
    __declspec(property(get=GetAllowResizeChart,put=PutAllowResizeChart))
    VARIANT_BOOL AllowResizeChart;
    __declspec(property(get=GetBrush))
    IBrushPtr Brush;
    __declspec(property(get=GetHandleSize,put=PutHandleSize))
    long HandleSize;
    __declspec(property(get=GetPen))
    IPenPtr Pen;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetAllowDrag ( );
    void PutAllowDrag (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetAllowResizeChart ( );
    void PutAllowResizeChart (
        VARIANT_BOOL Value );
    IBrushPtr GetBrush ( );
    long GetHandleSize ( );
    void PutHandleSize (
        long Value );
    IPenPtr GetPen ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_AllowDrag (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_AllowDrag (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_AllowResizeChart (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_AllowResizeChart (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_Brush (
        /*[out,retval]*/ struct IBrush * * Value ) = 0;
      virtual HRESULT __stdcall get_HandleSize (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_HandleSize (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_Pen (
        /*[out,retval]*/ struct IPen * * Value ) = 0;
};

struct __declspec(uuid("89c25521-4887-4af5-9fad-7fd07a264239"))
ISurfaceSides : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBrush))
    IBrushPtr Brush;
    __declspec(property(get=GetLevels,put=PutLevels))
    VARIANT_BOOL Levels;
    __declspec(property(get=GetPen))
    IPenPtr Pen;

    //
    // Wrapper methods for error-handling
    //

    IBrushPtr GetBrush ( );
    VARIANT_BOOL GetLevels ( );
    void PutLevels (
        VARIANT_BOOL Value );
    IPenPtr GetPen ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Brush (
        /*[out,retval]*/ struct IBrush * * Value ) = 0;
      virtual HRESULT __stdcall get_Levels (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Levels (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_Pen (
        /*[out,retval]*/ struct IPen * * Value ) = 0;
};

struct __declspec(uuid("84cc5df7-d92c-411f-bf1b-ff1b0c053f08"))
IChartAxisPen : IPen
{
    //
    // Property data
    //

    __declspec(property(get=GetLineMode,put=PutLineMode))
    enum EPenLineMode LineMode;

    //
    // Wrapper methods for error-handling
    //

    enum EPenLineMode GetLineMode ( );
    void PutLineMode (
        enum EPenLineMode Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_LineMode (
        /*[out,retval]*/ enum EPenLineMode * Value ) = 0;
      virtual HRESULT __stdcall put_LineMode (
        /*[in]*/ enum EPenLineMode Value ) = 0;
};

struct __declspec(uuid("f4469124-9eff-4c88-8697-df8b0fed1719"))
ITeeListBoxSection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetWidth,put=PutWidth))
    long Width;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;

    //
    // Wrapper methods for error-handling
    //

    long GetWidth ( );
    void PutWidth (
        long Value );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
};

enum __declspec(uuid("2433c402-6684-467b-a8a6-3b29e5832338"))
EFaderStyle
{
    fsFadeIn = 0,
    fsFadeOut = 1
};

struct __declspec(uuid("4cc6e38c-0b1b-4e77-bbf9-21c6ce0a2656"))
IFaderTool : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;
    __declspec(property(get=GetInitialDelay,put=PutInitialDelay))
    long InitialDelay;
    __declspec(property(get=GetSpeed,put=PutSpeed))
    double Speed;
    __declspec(property(get=GetStyle,put=PutStyle))
    enum EFaderStyle Style;

    //
    // Wrapper methods for error-handling
    //

    HRESULT Start ( );
    HRESULT Stop ( );
    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR Value );
    long GetInitialDelay ( );
    void PutInitialDelay (
        long Value );
    double GetSpeed ( );
    void PutSpeed (
        double Value );
    enum EFaderStyle GetStyle ( );
    void PutStyle (
        enum EFaderStyle Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Start ( ) = 0;
      virtual HRESULT __stdcall raw_Stop ( ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * Value ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR Value ) = 0;
      virtual HRESULT __stdcall get_InitialDelay (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_InitialDelay (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_Speed (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_Speed (
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ enum EFaderStyle * Value ) = 0;
      virtual HRESULT __stdcall put_Style (
        /*[in]*/ enum EFaderStyle Value ) = 0;
};

enum __declspec(uuid("4ca04105-75ec-4aa0-be6d-65830579c55f"))
ELegendPaletteAxis
{
    laDefault = 0,
    laOther = 1,
    laBoth = 2
};

struct __declspec(uuid("f2dd0f5f-1e6f-493c-87af-02ed0d228b3a"))
IChartHiddenPen : IPen
{};

struct __declspec(uuid("c01e2137-30c3-4f62-977c-70f211750c45"))
ISurfaceSeries : ICustom3DGridSeries
{
    //
    // Property data
    //

    __declspec(property(get=GetSideBrush))
    IBrushPtr SideBrush;
    __declspec(property(get=GetDotFrame,put=PutDotFrame))
    VARIANT_BOOL DotFrame;
    __declspec(property(get=GetWireFrame,put=PutWireFrame))
    VARIANT_BOOL WireFrame;
    __declspec(property(get=GetSmoothPalette,put=PutSmoothPalette))
    VARIANT_BOOL SmoothPalette;
    __declspec(property(get=GetTransparency,put=PutTransparency))
    long Transparency;
    __declspec(property(get=GetFastBrush,put=PutFastBrush))
    VARIANT_BOOL FastBrush;
    __declspec(property(get=GetHideCells,put=PutHideCells))
    VARIANT_BOOL HideCells;
    __declspec(property(get=GetSideLines))
    IChartHiddenPenPtr SideLines;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetDotFrame ( );
    void PutDotFrame (
        VARIANT_BOOL DotFrame );
    VARIANT_BOOL GetWireFrame ( );
    void PutWireFrame (
        VARIANT_BOOL Value );
    IBrushPtr GetSideBrush ( );
    VARIANT_BOOL GetSmoothPalette ( );
    void PutSmoothPalette (
        VARIANT_BOOL Value );
    long GetTransparency ( );
    void PutTransparency (
        long Value );
    VARIANT_BOOL GetFastBrush ( );
    void PutFastBrush (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetHideCells ( );
    void PutHideCells (
        VARIANT_BOOL Value );
    IChartHiddenPenPtr GetSideLines ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_DotFrame (
        /*[out,retval]*/ VARIANT_BOOL * DotFrame ) = 0;
      virtual HRESULT __stdcall put_DotFrame (
        /*[in]*/ VARIANT_BOOL DotFrame ) = 0;
      virtual HRESULT __stdcall get_WireFrame (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_WireFrame (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_SideBrush (
        /*[out,retval]*/ struct IBrush * * Value ) = 0;
      virtual HRESULT __stdcall get_SmoothPalette (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_SmoothPalette (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_Transparency (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Transparency (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_FastBrush (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_FastBrush (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_HideCells (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_HideCells (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_SideLines (
        /*[out,retval]*/ struct IChartHiddenPen * * Value ) = 0;
};

struct __declspec(uuid("eae4ff42-7aab-4649-8b4c-b4e16bf983eb"))
IWaterfallSeries : ISurfaceSeries
{
    //
    // Property data
    //

    __declspec(property(get=GetWaterfall,put=PutWaterfall))
    VARIANT_BOOL Waterfall;
    __declspec(property(get=GetWaterLines))
    IPenPtr WaterLines;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetWaterfall ( );
    void PutWaterfall (
        VARIANT_BOOL Value );
    IPenPtr GetWaterLines ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Waterfall (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Waterfall (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_WaterLines (
        /*[out,retval]*/ struct IPen * * Value ) = 0;
};

struct __declspec(uuid("872026d0-bd58-42cc-961b-3640c024609c"))
IIsoSurfaceSeries : ISurfaceSeries
{
    //
    // Property data
    //

    __declspec(property(get=GetUseYPosition,put=PutUseYPosition))
    VARIANT_BOOL UseYPosition;
    __declspec(property(get=GetYPosition,put=PutYPosition))
    double YPosition;
    __declspec(property(get=GetBandPen))
    IPenPtr BandPen;
    __declspec(property(get=GetSides))
    ISurfaceSidesPtr Sides;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetUseYPosition ( );
    void PutUseYPosition (
        VARIANT_BOOL Value );
    double GetYPosition ( );
    void PutYPosition (
        double Value );
    IPenPtr GetBandPen ( );
    ISurfaceSidesPtr GetSides ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_UseYPosition (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_UseYPosition (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_YPosition (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_YPosition (
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall get_BandPen (
        /*[out,retval]*/ struct IPen * * Value ) = 0;
      virtual HRESULT __stdcall get_Sides (
        /*[out,retval]*/ struct ISurfaceSides * * Value ) = 0;
};

enum __declspec(uuid("d1b633aa-663b-4aab-a31a-f5f7e290546e"))
EScrollDirection
{
    sdRightLeft = 0,
    sdLeftRight = 1
};

struct __declspec(uuid("21c180f1-5b3d-426f-93da-3c2ce22ff8d5"))
IFloatXYZ : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetX,put=PutX))
    double X;
    __declspec(property(get=GetY,put=PutY))
    double Y;
    __declspec(property(get=GetZ,put=PutZ))
    double Z;

    //
    // Wrapper methods for error-handling
    //

    double GetX ( );
    void PutX (
        double Value );
    double GetY ( );
    void PutY (
        double Value );
    double GetZ ( );
    void PutZ (
        double Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_X (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_X (
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall get_Y (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_Y (
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall get_Z (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_Z (
        /*[in]*/ double Value ) = 0;
};

enum __declspec(uuid("00b74b65-7695-4140-93db-40ecbb176c5d"))
ECanvas3DPlane
{
    cpX = 0,
    cpY = 1,
    cpZ = 2
};

struct __declspec(uuid("b0ec6752-f5ec-4f8c-87e3-eb6717a3e592"))
IColorGridSeries : ICustom3DGridSeries
{
    //
    // Property data
    //

    __declspec(property(get=GetCenteredPoints,put=PutCenteredPoints))
    VARIANT_BOOL CenteredPoints;
    __declspec(property(get=GetSmoothBitmap,put=PutSmoothBitmap))
    VARIANT_BOOL SmoothBitmap;
    __declspec(property(put=PutBitmap))
    long Bitmap;
    __declspec(property(get=GetTransparency,put=PutTransparency))
    long Transparency;
    __declspec(property(get=GetDrawPlane3D,put=PutDrawPlane3D))
    enum ECanvas3DPlane DrawPlane3D;
    __declspec(property(get=GetDrawPosition,put=PutDrawPosition))
    long DrawPosition;
    __declspec(property(get=GetFrame))
    IChartHiddenPenPtr Frame;
    __declspec(property(get=GetXGridEvery,put=PutXGridEvery))
    long XGridEvery;
    __declspec(property(get=GetZGridEvery,put=PutZGridEvery))
    long ZGridEvery;

    //
    // Wrapper methods for error-handling
    //

    double MaxXValue ( );
    double MaxYValue ( );
    double MinYValue ( );
    VARIANT_BOOL GetCenteredPoints ( );
    void PutCenteredPoints (
        VARIANT_BOOL Value );
    void PutBitmap (
        long _arg1 );
    VARIANT_BOOL GetSmoothBitmap ( );
    void PutSmoothBitmap (
        VARIANT_BOOL Value );
    long GetTransparency ( );
    void PutTransparency (
        long Value );
    enum ECanvas3DPlane GetDrawPlane3D ( );
    void PutDrawPlane3D (
        enum ECanvas3DPlane Value );
    long GetDrawPosition ( );
    void PutDrawPosition (
        long Value );
    IChartHiddenPenPtr GetFrame ( );
    long GetXGridEvery ( );
    void PutXGridEvery (
        long Value );
    long GetZGridEvery ( );
    void PutZGridEvery (
        long Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_MaxXValue (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall raw_MaxYValue (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall raw_MinYValue (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall get_CenteredPoints (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_CenteredPoints (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall put_Bitmap (
        /*[in]*/ long _arg1 ) = 0;
      virtual HRESULT __stdcall get_SmoothBitmap (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_SmoothBitmap (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_Transparency (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Transparency (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_DrawPlane3D (
        /*[out,retval]*/ enum ECanvas3DPlane * Value ) = 0;
      virtual HRESULT __stdcall put_DrawPlane3D (
        /*[in]*/ enum ECanvas3DPlane Value ) = 0;
      virtual HRESULT __stdcall get_DrawPosition (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_DrawPosition (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_Frame (
        /*[out,retval]*/ struct IChartHiddenPen * * Value ) = 0;
      virtual HRESULT __stdcall get_XGridEvery (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_XGridEvery (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_ZGridEvery (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_ZGridEvery (
        /*[in]*/ long Value ) = 0;
};

enum __declspec(uuid("ae1e232c-7f12-4cd2-870d-2bf8c5d9c15f"))
ERotateToolStyle
{
    rsAll = 0,
    rsRotation = 1,
    rsElevation = 2
};

struct __declspec(uuid("f5c85e2d-3f4e-4740-b58f-3f3f6ee58ff2"))
IRotateTool : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetActive,put=PutActive))
    VARIANT_BOOL Active;
    __declspec(property(get=GetButton,put=PutButton))
    enum EMouseButton Button;
    __declspec(property(get=GetOutline))
    IPenPtr Outline;
    __declspec(property(get=GetCursor,put=PutCursor))
    short Cursor;
    __declspec(property(get=GetInertia,put=PutInertia))
    long Inertia;
    __declspec(property(get=GetInverted,put=PutInverted))
    VARIANT_BOOL Inverted;
    __declspec(property(get=GetSpeed,put=PutSpeed))
    long Speed;
    __declspec(property(get=GetStyle,put=PutStyle))
    enum ERotateToolStyle Style;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetActive ( );
    void PutActive (
        VARIANT_BOOL Value );
    enum EMouseButton GetButton ( );
    void PutButton (
        enum EMouseButton Value );
    _bstr_t Description ( );
    IPenPtr GetOutline ( );
    short GetCursor ( );
    void PutCursor (
        short Value );
    long GetInertia ( );
    void PutInertia (
        long Value );
    VARIANT_BOOL GetInverted ( );
    void PutInverted (
        VARIANT_BOOL Value );
    long GetSpeed ( );
    void PutSpeed (
        long Value );
    enum ERotateToolStyle GetStyle ( );
    void PutStyle (
        enum ERotateToolStyle Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Active (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Active (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_Button (
        /*[out,retval]*/ enum EMouseButton * Value ) = 0;
      virtual HRESULT __stdcall put_Button (
        /*[in]*/ enum EMouseButton Value ) = 0;
      virtual HRESULT __stdcall raw_Description (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall get_Outline (
        /*[out,retval]*/ struct IPen * * Value ) = 0;
      virtual HRESULT __stdcall get_Cursor (
        /*[out,retval]*/ short * Value ) = 0;
      virtual HRESULT __stdcall put_Cursor (
        /*[in]*/ short Value ) = 0;
      virtual HRESULT __stdcall get_Inertia (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Inertia (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_Inverted (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Inverted (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_Speed (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Speed (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ enum ERotateToolStyle * Value ) = 0;
      virtual HRESULT __stdcall put_Style (
        /*[in]*/ enum ERotateToolStyle Value ) = 0;
};

struct __declspec(uuid("dd6b8d73-6561-4207-9e05-f91b0897101b"))
ITeePicture : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetFilters))
    IFilterItemsPtr Filters;
    __declspec(property(get=GetHandle))
    long Handle;

    //
    // Wrapper methods for error-handling
    //

    IFilterItemsPtr GetFilters ( );
    HRESULT LoadImage (
        _bstr_t FileName );
    HRESULT AssignImage (
        long ImageHandle );
    HRESULT ClearImage ( );
    VARIANT_BOOL ShowFiltersEditor ( );
    long GetHandle ( );
    HRESULT SaveToFile (
        _bstr_t FileName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Filters (
        /*[out,retval]*/ struct IFilterItems * * Value ) = 0;
      virtual HRESULT __stdcall raw_LoadImage (
        /*[in]*/ BSTR FileName ) = 0;
      virtual HRESULT __stdcall raw_AssignImage (
        /*[in]*/ long ImageHandle ) = 0;
      virtual HRESULT __stdcall raw_ClearImage ( ) = 0;
      virtual HRESULT __stdcall raw_ShowFiltersEditor (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall get_Handle (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall raw_SaveToFile (
        /*[in]*/ BSTR FileName ) = 0;
};

struct __declspec(uuid("57f89bff-8267-4bc2-8e8a-f04ef8b60415"))
IVideoPlayerTool : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPaused))
    VARIANT_BOOL Paused;
    __declspec(property(get=GetImage))
    ITeePicturePtr Image;
    __declspec(property(get=GetPlaying))
    VARIANT_BOOL Playing;
    __declspec(property(get=GetPosition,put=PutPosition))
    long Position;
    __declspec(property(get=GetStartFrame))
    long StartFrame;
    __declspec(property(get=GetEndFrame))
    long EndFrame;
    __declspec(property(get=GetDelay,put=PutDelay))
    long Delay;
    __declspec(property(get=GetFileName,put=PutFileName))
    _bstr_t FileName;
    __declspec(property(get=GetLoop,put=PutLoop))
    VARIANT_BOOL Loop;
    __declspec(property(get=GetFilters))
    IFilterItemsPtr Filters;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetPaused ( );
    ITeePicturePtr GetImage ( );
    VARIANT_BOOL GetPlaying ( );
    long GetPosition ( );
    void PutPosition (
        long Value );
    long GetStartFrame ( );
    long GetEndFrame ( );
    long GetDelay ( );
    void PutDelay (
        long Value );
    _bstr_t GetFileName ( );
    void PutFileName (
        _bstr_t Value );
    VARIANT_BOOL GetLoop ( );
    void PutLoop (
        VARIANT_BOOL Value );
    IFilterItemsPtr GetFilters ( );
    HRESULT Pause ( );
    HRESULT Play ( );
    HRESULT Stop ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Paused (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall get_Image (
        /*[out,retval]*/ struct ITeePicture * * Value ) = 0;
      virtual HRESULT __stdcall get_Playing (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall get_Position (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Position (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_StartFrame (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_EndFrame (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_Delay (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Delay (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_FileName (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall put_FileName (
        /*[in]*/ BSTR Value ) = 0;
      virtual HRESULT __stdcall get_Loop (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Loop (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_Filters (
        /*[out,retval]*/ struct IFilterItems * * Value ) = 0;
      virtual HRESULT __stdcall raw_Pause ( ) = 0;
      virtual HRESULT __stdcall raw_Play ( ) = 0;
      virtual HRESULT __stdcall raw_Stop ( ) = 0;
};

struct __declspec(uuid("4cc1844c-a1c1-4d97-9eb2-4d29385fe9ba"))
IAntiAliasTool : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAntialias,put=PutAntialias))
    VARIANT_BOOL Antialias;
    __declspec(property(get=GetBitmap))
    ITeePicturePtr Bitmap;
    __declspec(property(get=GetFilters))
    IFilterItemsPtr Filters;

    //
    // Wrapper methods for error-handling
    //

    ITeePicturePtr GetBitmap ( );
    IFilterItemsPtr GetFilters ( );
    VARIANT_BOOL GetAntialias ( );
    void PutAntialias (
        VARIANT_BOOL Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Bitmap (
        /*[out,retval]*/ struct ITeePicture * * Value ) = 0;
      virtual HRESULT __stdcall get_Filters (
        /*[out,retval]*/ struct IFilterItems * * Value ) = 0;
      virtual HRESULT __stdcall get_Antialias (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Antialias (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
};

struct __declspec(uuid("f29662cb-eeed-4e0d-85e8-74bb6941acc5"))
IFrameTool : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetResizeChart,put=PutResizeChart))
    VARIANT_BOOL ResizeChart;
    __declspec(property(get=GetSize,put=PutSize))
    long Size;
    __declspec(property(get=GetStyle,put=PutStyle))
    long Style;
    __declspec(property(get=GetPen))
    IPenPtr Pen;
    __declspec(property(get=GetPaspartou,put=PutPaspartou))
    long Paspartou;
    __declspec(property(get=GetFrame))
    ITeePicturePtr Frame;
    __declspec(property(get=GetBrush))
    IBrushPtr Brush;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetResizeChart ( );
    void PutResizeChart (
        VARIANT_BOOL Value );
    long GetSize ( );
    void PutSize (
        long Value );
    long GetStyle ( );
    void PutStyle (
        long Value );
    IPenPtr GetPen ( );
    long GetPaspartou ( );
    void PutPaspartou (
        long Value );
    ITeePicturePtr GetFrame ( );
    IBrushPtr GetBrush ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ResizeChart (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_ResizeChart (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_Size (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Size (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Style (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_Pen (
        /*[out,retval]*/ struct IPen * * Value ) = 0;
      virtual HRESULT __stdcall get_Paspartou (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Paspartou (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_Frame (
        /*[out,retval]*/ struct ITeePicture * * Value ) = 0;
      virtual HRESULT __stdcall get_Brush (
        /*[out,retval]*/ struct IBrush * * Value ) = 0;
};

struct __declspec(uuid("39b6aba0-95b6-4a31-8d9f-e80459f4f26f"))
IBackImage : ITeePicture
{
    //
    // Property data
    //

    __declspec(property(get=GetInside,put=PutInside))
    VARIANT_BOOL Inside;
    __declspec(property(get=GetLeft,put=PutLeft))
    long Left;
    __declspec(property(get=GetTop,put=PutTop))
    long Top;
    __declspec(property(get=GetMode,put=PutMode))
    enum EBackImageMode Mode;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetInside ( );
    void PutInside (
        VARIANT_BOOL Value );
    long GetLeft ( );
    void PutLeft (
        long Value );
    long GetTop ( );
    void PutTop (
        long Value );
    enum EBackImageMode GetMode ( );
    void PutMode (
        enum EBackImageMode Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Inside (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Inside (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_Mode (
        /*[out,retval]*/ enum EBackImageMode * Value ) = 0;
      virtual HRESULT __stdcall put_Mode (
        /*[in]*/ enum EBackImageMode Value ) = 0;
};

struct __declspec(uuid("d187ba8a-2d47-472b-8128-b8f1f9d8c2fc"))
IPrinterSettings : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPelsWidth,put=PutPelsWidth))
    long PelsWidth;
    __declspec(property(get=GetPelsHeight,put=PutPelsHeight))
    long PelsHeight;
    __declspec(property(get=GetDisplayFlags,put=PutDisplayFlags))
    long DisplayFlags;
    __declspec(property(get=GetDisplayFrequency,put=PutDisplayFrequency))
    long DisplayFrequency;
    __declspec(property(get=GetICMMethod,put=PutICMMethod))
    long ICMMethod;
    __declspec(property(get=GetICMIntent,put=PutICMIntent))
    long ICMIntent;
    __declspec(property(get=GetYResolution,put=PutYResolution))
    short YResolution;
    __declspec(property(get=GetDeviceName,put=PutDeviceName))
    _bstr_t DeviceName;
    __declspec(property(get=GetFormName,put=PutFormName))
    _bstr_t FormName;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    short Orientation;
    __declspec(property(get=GetPaperSize,put=PutPaperSize))
    short PaperSize;
    __declspec(property(get=GetPaperLength,put=PutPaperLength))
    short PaperLength;
    __declspec(property(get=GetPaperWidth,put=PutPaperWidth))
    short PaperWidth;
    __declspec(property(get=GetCopies,put=PutCopies))
    short Copies;
    __declspec(property(get=GetPrintQuality,put=PutPrintQuality))
    short PrintQuality;
    __declspec(property(get=GetColor,put=PutColor))
    short Color;
    __declspec(property(get=GetDuplex,put=PutDuplex))
    short Duplex;
    __declspec(property(get=GetScale,put=PutScale))
    short Scale;
    __declspec(property(get=GetDefaultSource,put=PutDefaultSource))
    short DefaultSource;
    __declspec(property(get=GetTTOption,put=PutTTOption))
    short TTOption;
    __declspec(property(get=GetCollate,put=PutCollate))
    short Collate;
    __declspec(property(get=GetSpecVersion,put=PutSpecVersion))
    long SpecVersion;
    __declspec(property(get=GetDriverVersion,put=PutDriverVersion))
    long DriverVersion;
    __declspec(property(get=GetSize,put=PutSize))
    long Size;
    __declspec(property(get=GetDriverExtra,put=PutDriverExtra))
    long DriverExtra;
    __declspec(property(get=GetLogPixels,put=PutLogPixels))
    long LogPixels;
    __declspec(property(get=GetFields,put=PutFields))
    long Fields;
    __declspec(property(get=GetBitsPerPel,put=PutBitsPerPel))
    long BitsPerPel;

    //
    // Wrapper methods for error-handling
    //

    short GetOrientation ( );
    void PutOrientation (
        short Value );
    short GetPaperSize ( );
    void PutPaperSize (
        short Value );
    short GetPaperLength ( );
    void PutPaperLength (
        short Value );
    short GetPaperWidth ( );
    void PutPaperWidth (
        short Value );
    short GetCopies ( );
    void PutCopies (
        short Value );
    short GetPrintQuality ( );
    void PutPrintQuality (
        short Value );
    short GetColor ( );
    void PutColor (
        short Value );
    short GetDuplex ( );
    void PutDuplex (
        short Value );
    short GetScale ( );
    void PutScale (
        short Value );
    short GetDefaultSource ( );
    void PutDefaultSource (
        short Value );
    short GetTTOption ( );
    void PutTTOption (
        short Value );
    short GetCollate ( );
    void PutCollate (
        short Value );
    long GetSpecVersion ( );
    void PutSpecVersion (
        long Value );
    long GetDriverVersion ( );
    void PutDriverVersion (
        long Value );
    long GetSize ( );
    void PutSize (
        long Value );
    long GetDriverExtra ( );
    void PutDriverExtra (
        long Value );
    long GetLogPixels ( );
    void PutLogPixels (
        long Value );
    long GetFields ( );
    void PutFields (
        long Value );
    long GetBitsPerPel ( );
    void PutBitsPerPel (
        long Value );
    long GetPelsWidth ( );
    void PutPelsWidth (
        long Value );
    long GetPelsHeight ( );
    void PutPelsHeight (
        long Value );
    long GetDisplayFlags ( );
    void PutDisplayFlags (
        long Value );
    long GetDisplayFrequency ( );
    void PutDisplayFrequency (
        long Value );
    long GetICMMethod ( );
    void PutICMMethod (
        long Value );
    long GetICMIntent ( );
    void PutICMIntent (
        long Value );
    short GetYResolution ( );
    void PutYResolution (
        short Value );
    _bstr_t GetDeviceName ( );
    void PutDeviceName (
        _bstr_t Value );
    _bstr_t GetFormName ( );
    void PutFormName (
        _bstr_t Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Orientation (
        /*[out,retval]*/ short * Value ) = 0;
      virtual HRESULT __stdcall put_Orientation (
        /*[in]*/ short Value ) = 0;
      virtual HRESULT __stdcall get_PaperSize (
        /*[out,retval]*/ short * Value ) = 0;
      virtual HRESULT __stdcall put_PaperSize (
        /*[in]*/ short Value ) = 0;
      virtual HRESULT __stdcall get_PaperLength (
        /*[out,retval]*/ short * Value ) = 0;
      virtual HRESULT __stdcall put_PaperLength (
        /*[in]*/ short Value ) = 0;
      virtual HRESULT __stdcall get_PaperWidth (
        /*[out,retval]*/ short * Value ) = 0;
      virtual HRESULT __stdcall put_PaperWidth (
        /*[in]*/ short Value ) = 0;
      virtual HRESULT __stdcall get_Copies (
        /*[out,retval]*/ short * Value ) = 0;
      virtual HRESULT __stdcall put_Copies (
        /*[in]*/ short Value ) = 0;
      virtual HRESULT __stdcall get_PrintQuality (
        /*[out,retval]*/ short * Value ) = 0;
      virtual HRESULT __stdcall put_PrintQuality (
        /*[in]*/ short Value ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ short * Value ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ short Value ) = 0;
      virtual HRESULT __stdcall get_Duplex (
        /*[out,retval]*/ short * Value ) = 0;
      virtual HRESULT __stdcall put_Duplex (
        /*[in]*/ short Value ) = 0;
      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ short * Value ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ short Value ) = 0;
      virtual HRESULT __stdcall get_DefaultSource (
        /*[out,retval]*/ short * Value ) = 0;
      virtual HRESULT __stdcall put_DefaultSource (
        /*[in]*/ short Value ) = 0;
      virtual HRESULT __stdcall get_TTOption (
        /*[out,retval]*/ short * Value ) = 0;
      virtual HRESULT __stdcall put_TTOption (
        /*[in]*/ short Value ) = 0;
      virtual HRESULT __stdcall get_Collate (
        /*[out,retval]*/ short * Value ) = 0;
      virtual HRESULT __stdcall put_Collate (
        /*[in]*/ short Value ) = 0;
      virtual HRESULT __stdcall get_SpecVersion (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_SpecVersion (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_DriverVersion (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_DriverVersion (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_Size (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Size (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_DriverExtra (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_DriverExtra (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_LogPixels (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_LogPixels (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_Fields (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Fields (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_BitsPerPel (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_BitsPerPel (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_PelsWidth (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_PelsWidth (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_PelsHeight (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_PelsHeight (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_DisplayFlags (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_DisplayFlags (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_DisplayFrequency (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_DisplayFrequency (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_ICMMethod (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_ICMMethod (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_ICMIntent (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_ICMIntent (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_YResolution (
        /*[out,retval]*/ short * Value ) = 0;
      virtual HRESULT __stdcall put_YResolution (
        /*[in]*/ short Value ) = 0;
      virtual HRESULT __stdcall get_DeviceName (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall put_DeviceName (
        /*[in]*/ BSTR Value ) = 0;
      virtual HRESULT __stdcall get_FormName (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall put_FormName (
        /*[in]*/ BSTR Value ) = 0;
};

struct __declspec(uuid("75ced159-22dd-4bc1-90b3-2b71c03a3ae7"))
IPrinter : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetOrientation,put=PutOrientation))
    enum EPrinterOrientation Orientation;
    __declspec(property(get=GetMarginBottom,put=PutMarginBottom))
    long MarginBottom;
    __declspec(property(get=GetMarginLeft,put=PutMarginLeft))
    long MarginLeft;
    __declspec(property(get=GetMarginTop,put=PutMarginTop))
    long MarginTop;
    __declspec(property(get=GetMarginRight,put=PutMarginRight))
    long MarginRight;
    __declspec(property(get=GetPrinterIndex,put=PutPrinterIndex))
    long PrinterIndex;
    __declspec(property(get=GetPrinterCount))
    long PrinterCount;
    __declspec(property(get=GetPrinterDescription))
    _bstr_t PrinterDescription[];
    __declspec(property(get=GetPrinterSettings))
    IPrinterSettingsPtr PrinterSettings;
    __declspec(property(get=GetPageHeight))
    long PageHeight;
    __declspec(property(get=GetPageWidth))
    long PageWidth;
    __declspec(property(get=GetJobTitle,put=PutJobTitle))
    _bstr_t JobTitle;
    __declspec(property(get=GetPrintProportional,put=PutPrintProportional))
    VARIANT_BOOL PrintProportional;
    __declspec(property(get=GetDetail,put=PutDetail))
    long Detail;

    //
    // Wrapper methods for error-handling
    //

    long GetDetail ( );
    void PutDetail (
        long Value );
    long GetMarginBottom ( );
    void PutMarginBottom (
        long Value );
    long GetMarginLeft ( );
    void PutMarginLeft (
        long Value );
    long GetMarginTop ( );
    void PutMarginTop (
        long Value );
    long GetMarginRight ( );
    void PutMarginRight (
        long Value );
    enum EPrinterOrientation GetOrientation ( );
    void PutOrientation (
        enum EPrinterOrientation Value );
    HRESULT Print ( );
    HRESULT PrintLandscape ( );
    HRESULT PrintPortrait ( );
    HRESULT ShowPreview ( );
    HRESULT PrintPartial (
        long Left,
        long Top,
        long Right,
        long Bottom );
    HRESULT BeginDoc ( );
    HRESULT EndDoc ( );
    long GetPrinterIndex ( );
    void PutPrinterIndex (
        long Value );
    long GetPrinterCount ( );
    _bstr_t GetPrinterDescription (
        long Index );
    HRESULT PrintChart ( );
    long GetPageHeight ( );
    long GetPageWidth ( );
    _bstr_t GetJobTitle ( );
    void PutJobTitle (
        _bstr_t Value );
    VARIANT_BOOL GetPrintProportional ( );
    void PutPrintProportional (
        VARIANT_BOOL Value );
    HRESULT PrintPartialHandle (
        const _variant_t & DC,
        long Left,
        long Top,
        long Right,
        long Bottom );
    HRESULT PrintPages (
        long FromPage,
        long ToPage );
    HRESULT ShowSetupDlg ( );
    IPrinterSettingsPtr GetPrinterSettings ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Detail (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Detail (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_MarginBottom (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_MarginBottom (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_MarginLeft (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_MarginLeft (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_MarginTop (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_MarginTop (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_MarginRight (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_MarginRight (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_Orientation (
        /*[out,retval]*/ enum EPrinterOrientation * Value ) = 0;
      virtual HRESULT __stdcall put_Orientation (
        /*[in]*/ enum EPrinterOrientation Value ) = 0;
      virtual HRESULT __stdcall raw_Print ( ) = 0;
      virtual HRESULT __stdcall raw_PrintLandscape ( ) = 0;
      virtual HRESULT __stdcall raw_PrintPortrait ( ) = 0;
      virtual HRESULT __stdcall raw_ShowPreview ( ) = 0;
      virtual HRESULT __stdcall raw_PrintPartial (
        /*[in]*/ long Left,
        /*[in]*/ long Top,
        /*[in]*/ long Right,
        /*[in]*/ long Bottom ) = 0;
      virtual HRESULT __stdcall raw_BeginDoc ( ) = 0;
      virtual HRESULT __stdcall raw_EndDoc ( ) = 0;
      virtual HRESULT __stdcall get_PrinterIndex (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_PrinterIndex (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_PrinterCount (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_PrinterDescription (
        /*[in]*/ long Index,
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall raw_PrintChart ( ) = 0;
      virtual HRESULT __stdcall get_PageHeight (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_PageWidth (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_JobTitle (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall put_JobTitle (
        /*[in]*/ BSTR Value ) = 0;
      virtual HRESULT __stdcall get_PrintProportional (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_PrintProportional (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall raw_PrintPartialHandle (
        /*[in]*/ VARIANT DC,
        /*[in]*/ long Left,
        /*[in]*/ long Top,
        /*[in]*/ long Right,
        /*[in]*/ long Bottom ) = 0;
      virtual HRESULT __stdcall raw_PrintPages (
        /*[in]*/ long FromPage,
        /*[in]*/ long ToPage ) = 0;
      virtual HRESULT __stdcall raw_ShowSetupDlg ( ) = 0;
      virtual HRESULT __stdcall get_PrinterSettings (
        /*[out,retval]*/ struct IPrinterSettings * * Value ) = 0;
};

enum __declspec(uuid("3d42da07-3328-449c-8683-664b85803954"))
EScrollThumbStyle
{
    stsCustom = 0,
    stsThumb1 = 1,
    stsThumb2 = 2,
    stsThumb3 = 3
};

struct __declspec(uuid("8bc26020-385f-4cb4-bdd5-b8665b29532d"))
IHighLowSeries : IBaseHighLowSeries
{
    //
    // Property data
    //

    __declspec(property(get=GetHighBrush))
    IBrushPtr HighBrush;
    __declspec(property(get=GetHighPen))
    IPenPtr HighPen;
    __declspec(property(get=GetLowBrush))
    IBrushPtr LowBrush;
    __declspec(property(get=GetLowPen))
    IPenPtr LowPen;
    __declspec(property(get=GetPen))
    IPenPtr Pen;
    __declspec(property(get=GetTransparency,put=PutTransparency))
    long Transparency;

    //
    // Wrapper methods for error-handling
    //

    IBrushPtr GetHighBrush ( );
    IPenPtr GetHighPen ( );
    IBrushPtr GetLowBrush ( );
    IPenPtr GetLowPen ( );
    IPenPtr GetPen ( );
    long GetTransparency ( );
    void PutTransparency (
        long Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_HighBrush (
        /*[out,retval]*/ struct IBrush * * Value ) = 0;
      virtual HRESULT __stdcall get_HighPen (
        /*[out,retval]*/ struct IPen * * Value ) = 0;
      virtual HRESULT __stdcall get_LowBrush (
        /*[out,retval]*/ struct IBrush * * Value ) = 0;
      virtual HRESULT __stdcall get_LowPen (
        /*[out,retval]*/ struct IPen * * Value ) = 0;
      virtual HRESULT __stdcall get_Pen (
        /*[out,retval]*/ struct IPen * * Value ) = 0;
      virtual HRESULT __stdcall get_Transparency (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Transparency (
        /*[in]*/ long Value ) = 0;
};

enum __declspec(uuid("6e8ddbe6-6590-4550-982e-5dc1cdb4eaf2"))
EChartGridShow
{
    cgsAuto = 0,
    cgsNo = 1,
    cgsYes = 2
};

struct __declspec(uuid("03b9a1f0-2d6b-4841-ad3f-b638e8860f6d"))
ITeeRectArray : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetItem))
    ITeeRectPtr Item[];

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    ITeeRectPtr GetItem (
        long Index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct ITeeRect * * Value ) = 0;
};

enum __declspec(uuid("1844eb39-e556-4e53-bce2-180f317b28ad"))
ESeriesAnimationLoop
{
    salNo = 0,
    salOneWay = 1,
    salCircular = 2
};

struct __declspec(uuid("bf3ba486-178d-4629-8b7c-dfb39be2f891"))
ISeriesAnimationTool : ICustomToolSeries
{
    //
    // Property data
    //

    __declspec(property(get=GetDrawEvery,put=PutDrawEvery))
    long DrawEvery;
    __declspec(property(get=GetStartAtMin,put=PutStartAtMin))
    VARIANT_BOOL StartAtMin;
    __declspec(property(get=GetStartValue,put=PutStartValue))
    double StartValue;
    __declspec(property(get=GetSteps,put=PutSteps))
    long Steps;
    __declspec(property(get=GetRunning))
    VARIANT_BOOL Running;
    __declspec(property(get=GetDelay,put=PutDelay))
    long Delay;
    __declspec(property(get=GetLoop,put=PutLoop))
    enum ESeriesAnimationLoop Loop;

    //
    // Wrapper methods for error-handling
    //

    long GetDrawEvery ( );
    void PutDrawEvery (
        long Value );
    VARIANT_BOOL GetStartAtMin ( );
    void PutStartAtMin (
        VARIANT_BOOL Value );
    double GetStartValue ( );
    void PutStartValue (
        double Value );
    long GetSteps ( );
    void PutSteps (
        long Value );
    HRESULT Execute ( );
    VARIANT_BOOL GetRunning ( );
    HRESULT Stop ( );
    long GetDelay ( );
    void PutDelay (
        long Value );
    enum ESeriesAnimationLoop GetLoop ( );
    void PutLoop (
        enum ESeriesAnimationLoop Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_DrawEvery (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_DrawEvery (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_StartAtMin (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_StartAtMin (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_StartValue (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_StartValue (
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall get_Steps (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Steps (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_Execute ( ) = 0;
      virtual HRESULT __stdcall get_Running (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall raw_Stop ( ) = 0;
      virtual HRESULT __stdcall get_Delay (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Delay (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_Loop (
        /*[out,retval]*/ enum ESeriesAnimationLoop * Value ) = 0;
      virtual HRESULT __stdcall put_Loop (
        /*[in]*/ enum ESeriesAnimationLoop Value ) = 0;
};

enum __declspec(uuid("6b81bfff-0ca9-4cb0-b4b4-ae5beb6464a3"))
EDeltaImageStyle
{
    disSmiles = 0,
    disHands = 1
};

enum __declspec(uuid("a0ed44c5-eb75-4818-92ac-bc691683d5f5"))
EOrgLineStyle
{
    lsSquared = 0,
    lsDiagonal = 1
};

struct __declspec(uuid("91606cc5-d423-4446-8659-69c3e31494a9"))
ISpacing : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetHorizontal,put=PutHorizontal))
    long Horizontal;
    __declspec(property(get=GetVertical,put=PutVertical))
    long Vertical;

    //
    // Wrapper methods for error-handling
    //

    long GetHorizontal ( );
    void PutHorizontal (
        long Value );
    long GetVertical ( );
    void PutVertical (
        long Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Horizontal (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Horizontal (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_Vertical (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Vertical (
        /*[in]*/ long Value ) = 0;
};

struct __declspec(uuid("6d8c1b52-50bc-4ecf-abb6-1c06a3bc9520"))
IContourMarks : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAntiOverlap,put=PutAntiOverlap))
    VARIANT_BOOL AntiOverlap;
    __declspec(property(get=GetAtSegments,put=PutAtSegments))
    VARIANT_BOOL AtSegments;
    __declspec(property(get=GetColorLevel,put=PutColorLevel))
    VARIANT_BOOL ColorLevel;
    __declspec(property(get=GetMargin,put=PutMargin))
    long Margin;
    __declspec(property(get=GetDensity,put=PutDensity))
    long Density;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetAntiOverlap ( );
    void PutAntiOverlap (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetAtSegments ( );
    void PutAtSegments (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetColorLevel ( );
    void PutColorLevel (
        VARIANT_BOOL Value );
    long GetMargin ( );
    void PutMargin (
        long Value );
    long GetDensity ( );
    void PutDensity (
        long Value );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_AntiOverlap (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_AntiOverlap (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_AtSegments (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_AtSegments (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_ColorLevel (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_ColorLevel (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_Margin (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Margin (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_Density (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Density (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
};

enum __declspec(uuid("09f309fc-fc45-456d-9003-ca3a4c62d3b3"))
EWorldMap
{
    wmWorld = 0,
    wmAfrica = 1,
    wmAsia = 2,
    wmAustralia = 3,
    wmCentralAmerica = 4,
    wmEurope = 5,
    wmEurope15 = 6,
    wmEurope27 = 7,
    wmSpain = 8,
    wmMiddleEast = 9,
    wmNorthAmerica = 10,
    wmSouthAmerica = 11,
    wmUSA = 12,
    wmUSAHawaiiAlaska = 13
};

enum __declspec(uuid("39eda598-c402-414a-b48e-18213e97bffc"))
ETagCloudOrder
{
    toText = 0,
    toValue = 1,
    toNone = 2
};

struct __declspec(uuid("534dc73b-3b82-4549-92a4-9bf3c7896ea8"))
IRenkoSeries : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCloseValues))
    IValueListPtr CloseValues;
    __declspec(property(get=GetBoxSize,put=PutBoxSize))
    double BoxSize;
    __declspec(property(get=GetDownSwingColor,put=PutDownSwingColor))
    OLE_COLOR DownSwingColor;
    __declspec(property(get=GetDraw3D,put=PutDraw3D))
    VARIANT_BOOL Draw3D;
    __declspec(property(get=GetTransparency,put=PutTransparency))
    long Transparency;
    __declspec(property(get=GetUpSwingColor,put=PutUpSwingColor))
    OLE_COLOR UpSwingColor;

    //
    // Wrapper methods for error-handling
    //

    IValueListPtr GetCloseValues ( );
    double GetBoxSize ( );
    void PutBoxSize (
        double Value );
    OLE_COLOR GetDownSwingColor ( );
    void PutDownSwingColor (
        OLE_COLOR Value );
    VARIANT_BOOL GetDraw3D ( );
    void PutDraw3D (
        VARIANT_BOOL Value );
    long GetTransparency ( );
    void PutTransparency (
        long Value );
    OLE_COLOR GetUpSwingColor ( );
    void PutUpSwingColor (
        OLE_COLOR Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_CloseValues (
        /*[out,retval]*/ struct IValueList * * Value ) = 0;
      virtual HRESULT __stdcall get_BoxSize (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_BoxSize (
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall get_DownSwingColor (
        /*[out,retval]*/ OLE_COLOR * Value ) = 0;
      virtual HRESULT __stdcall put_DownSwingColor (
        /*[in]*/ OLE_COLOR Value ) = 0;
      virtual HRESULT __stdcall get_Draw3D (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Draw3D (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_Transparency (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Transparency (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_UpSwingColor (
        /*[out,retval]*/ OLE_COLOR * Value ) = 0;
      virtual HRESULT __stdcall put_UpSwingColor (
        /*[in]*/ OLE_COLOR Value ) = 0;
};

enum __declspec(uuid("5239c670-85ef-48dd-9a6a-9b87c79250dd"))
ETreatNullsStyle
{
    tnDontPaint = 0,
    tnSkip = 1,
    tnIgnore = 2
};

struct __declspec(uuid("8e052508-b9b9-4792-b3a3-8fd23440d281"))
IFastLineSeries : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLinePen))
    IPenPtr LinePen;
    __declspec(property(get=GetDrawAllPoints,put=PutDrawAllPoints))
    VARIANT_BOOL DrawAllPoints;
    __declspec(property(get=GetAutoSizeVertAxis,put=PutAutoSizeVertAxis))
    VARIANT_BOOL AutoSizeVertAxis;
    __declspec(property(get=GetStairs,put=PutStairs))
    VARIANT_BOOL Stairs;
    __declspec(property(get=GetInvertedStairs,put=PutInvertedStairs))
    VARIANT_BOOL InvertedStairs;
    __declspec(property(get=GetIgnoreNulls,put=PutIgnoreNulls))
    VARIANT_BOOL IgnoreNulls;
    __declspec(property(get=GetFastPen,put=PutFastPen))
    VARIANT_BOOL FastPen;
    __declspec(property(get=GetAutoRepaint,put=PutAutoRepaint))
    VARIANT_BOOL AutoRepaint;
    __declspec(property(get=GetTreatNulls,put=PutTreatNulls))
    enum ETreatNullsStyle TreatNulls;

    //
    // Wrapper methods for error-handling
    //

    IPenPtr GetLinePen ( );
    long AddRealTime (
        double X,
        double Y,
        _bstr_t SomeLabel,
        OLE_COLOR SomeColor );
    VARIANT_BOOL GetDrawAllPoints ( );
    void PutDrawAllPoints (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetAutoSizeVertAxis ( );
    void PutAutoSizeVertAxis (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetStairs ( );
    void PutStairs (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetInvertedStairs ( );
    void PutInvertedStairs (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetIgnoreNulls ( );
    void PutIgnoreNulls (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetFastPen ( );
    void PutFastPen (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetAutoRepaint ( );
    void PutAutoRepaint (
        VARIANT_BOOL Value );
    enum ETreatNullsStyle GetTreatNulls ( );
    void PutTreatNulls (
        enum ETreatNullsStyle Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_LinePen (
        /*[out,retval]*/ struct IPen * * LinePen ) = 0;
      virtual HRESULT __stdcall raw_AddRealTime (
        /*[in]*/ double X,
        /*[in]*/ double Y,
        BSTR SomeLabel,
        OLE_COLOR SomeColor,
        /*[out,retval]*/ long * AColor ) = 0;
      virtual HRESULT __stdcall get_DrawAllPoints (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_DrawAllPoints (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_AutoSizeVertAxis (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_AutoSizeVertAxis (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_Stairs (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Stairs (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_InvertedStairs (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_InvertedStairs (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_IgnoreNulls (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_IgnoreNulls (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_FastPen (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_FastPen (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_AutoRepaint (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_AutoRepaint (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_TreatNulls (
        /*[out,retval]*/ enum ETreatNullsStyle * Value ) = 0;
      virtual HRESULT __stdcall put_TreatNulls (
        /*[in]*/ enum ETreatNullsStyle Value ) = 0;
};

enum __declspec(uuid("a4ac5380-a766-4d22-8da0-9616d9679398"))
EMultiPie
{
    mpAutomatic = 0,
    mpDisabled = 1
};

struct __declspec(uuid("b108d6f9-1c82-4971-89b5-56dbe33ab334"))
IPieMarks : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetVertCenter,put=PutVertCenter))
    VARIANT_BOOL VertCenter;
    __declspec(property(get=GetLegSize,put=PutLegSize))
    long LegSize;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetVertCenter ( );
    void PutVertCenter (
        VARIANT_BOOL Value );
    long GetLegSize ( );
    void PutLegSize (
        long Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_VertCenter (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_VertCenter (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_LegSize (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_LegSize (
        /*[in]*/ long Value ) = 0;
};

struct __declspec(uuid("ecdff469-41d8-4f7b-9250-c84a307fa105"))
IXAMLExport : IExportFormat
{};

struct __declspec(uuid("a982bdd4-3218-4b4e-a9ca-bc62c6c56897"))
IExport : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetasPDF))
    IPDFExportPtr asPDF;
    __declspec(property(get=GetasEPS))
    IEPSExportPtr asEPS;
    __declspec(property(get=GetasJPEG))
    IJPEGExportPtr asJPEG;
    __declspec(property(get=GetasSVG))
    ISVGExportPtr asSVG;
    __declspec(property(get=GetasPNG))
    IPNGExportPtr asPNG;
    __declspec(property(get=GetasGIF))
    IGIFExportPtr asGIF;
    __declspec(property(get=GetasBMP))
    IBMPExportPtr asBMP;
    __declspec(property(get=GetasPCX))
    IPCXExportPtr asPCX;
    __declspec(property(get=GetasMetafile))
    IMetafileExportPtr asMetafile;
    __declspec(property(get=GetasNative))
    INativeExportPtr asNative;
    __declspec(property(get=GetasXML))
    IXMLExportPtr asXML;
    __declspec(property(get=GetasXLS))
    IXLSExportPtr asXLS;
    __declspec(property(get=GetasHTML))
    IHTMLExportPtr asHTML;
    __declspec(property(get=GetasText))
    ITextExportPtr asText;
    __declspec(property(get=GetLabelHeader,put=PutLabelHeader))
    _bstr_t LabelHeader;
    __declspec(property(get=GetasXAML))
    IXAMLExportPtr asXAML;

    //
    // Wrapper methods for error-handling
    //

    HRESULT CopyToClipboardBitmap ( );
    HRESULT CopyToClipboardMetafile (
        VARIANT_BOOL Enhanced );
    HRESULT SaveToBitmapFile (
        _bstr_t FileName );
    HRESULT SaveToFile (
        _bstr_t FileName );
    HRESULT SaveToJPEGFile (
        _bstr_t FileName,
        VARIANT_BOOL Gray,
        enum EJPEGPerformance Performance,
        long Quality,
        long Width,
        long Height );
    HRESULT SaveToMetafile (
        _bstr_t FileName );
    HRESULT SaveToMetafileEnh (
        _bstr_t FileName );
    HRESULT ShowExport ( );
    _bstr_t SaveChartDialog ( );
    HRESULT ConvertTeeFileToText (
        _bstr_t InputFile,
        _bstr_t OutputFile );
    _variant_t Stream (
        enum EStreamType StreamType );
    IJPEGExportPtr GetasJPEG ( );
    IPNGExportPtr GetasPNG ( );
    IGIFExportPtr GetasGIF ( );
    IBMPExportPtr GetasBMP ( );
    IPCXExportPtr GetasPCX ( );
    IMetafileExportPtr GetasMetafile ( );
    INativeExportPtr GetasNative ( );
    IXMLExportPtr GetasXML ( );
    IXLSExportPtr GetasXLS ( );
    IHTMLExportPtr GetasHTML ( );
    ITextExportPtr GetasText ( );
    HRESULT EmailFile (
        _bstr_t FileName,
        _bstr_t Subject );
    IPDFExportPtr GetasPDF ( );
    IEPSExportPtr GetasEPS ( );
    ISVGExportPtr GetasSVG ( );
    _bstr_t GetLabelHeader ( );
    void PutLabelHeader (
        _bstr_t Value );
    IXAMLExportPtr GetasXAML ( );
    HRESULT SaveToXMLFile (
        _bstr_t FileName,
        VARIANT_BOOL IncludeData,
        VARIANT_BOOL XMLHeader );
    _variant_t SaveToXMLStream (
        VARIANT_BOOL IncludeData,
        VARIANT_BOOL XMLHeader );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_CopyToClipboardBitmap ( ) = 0;
      virtual HRESULT __stdcall raw_CopyToClipboardMetafile (
        /*[in]*/ VARIANT_BOOL Enhanced ) = 0;
      virtual HRESULT __stdcall raw_SaveToBitmapFile (
        /*[in]*/ BSTR FileName ) = 0;
      virtual HRESULT __stdcall raw_SaveToFile (
        /*[in]*/ BSTR FileName ) = 0;
      virtual HRESULT __stdcall raw_SaveToJPEGFile (
        /*[in]*/ BSTR FileName,
        /*[in]*/ VARIANT_BOOL Gray,
        /*[in]*/ enum EJPEGPerformance Performance,
        /*[in]*/ long Quality,
        /*[in]*/ long Width,
        /*[in]*/ long Height ) = 0;
      virtual HRESULT __stdcall raw_SaveToMetafile (
        /*[in]*/ BSTR FileName ) = 0;
      virtual HRESULT __stdcall raw_SaveToMetafileEnh (
        /*[in]*/ BSTR FileName ) = 0;
      virtual HRESULT __stdcall raw_ShowExport ( ) = 0;
      virtual HRESULT __stdcall raw_SaveChartDialog (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall raw_ConvertTeeFileToText (
        /*[in]*/ BSTR InputFile,
        /*[in]*/ BSTR OutputFile ) = 0;
      virtual HRESULT __stdcall raw_Stream (
        /*[in]*/ enum EStreamType StreamType,
        /*[out,retval]*/ VARIANT * Value ) = 0;
      virtual HRESULT __stdcall get_asJPEG (
        /*[out,retval]*/ struct IJPEGExport * * Value ) = 0;
      virtual HRESULT __stdcall get_asPNG (
        /*[out,retval]*/ struct IPNGExport * * Value ) = 0;
      virtual HRESULT __stdcall get_asGIF (
        /*[out,retval]*/ struct IGIFExport * * Value ) = 0;
      virtual HRESULT __stdcall get_asBMP (
        /*[out,retval]*/ struct IBMPExport * * Value ) = 0;
      virtual HRESULT __stdcall get_asPCX (
        /*[out,retval]*/ struct IPCXExport * * Value ) = 0;
      virtual HRESULT __stdcall get_asMetafile (
        /*[out,retval]*/ struct IMetafileExport * * Value ) = 0;
      virtual HRESULT __stdcall get_asNative (
        /*[out,retval]*/ struct INativeExport * * Value ) = 0;
      virtual HRESULT __stdcall get_asXML (
        /*[out,retval]*/ struct IXMLExport * * Value ) = 0;
      virtual HRESULT __stdcall get_asXLS (
        /*[out,retval]*/ struct IXLSExport * * Value ) = 0;
      virtual HRESULT __stdcall get_asHTML (
        /*[out,retval]*/ struct IHTMLExport * * Value ) = 0;
      virtual HRESULT __stdcall get_asText (
        /*[out,retval]*/ struct ITextExport * * Value ) = 0;
      virtual HRESULT __stdcall raw_EmailFile (
        /*[in]*/ BSTR FileName,
        /*[in]*/ BSTR Subject ) = 0;
      virtual HRESULT __stdcall get_asPDF (
        /*[out,retval]*/ struct IPDFExport * * Value ) = 0;
      virtual HRESULT __stdcall get_asEPS (
        /*[out,retval]*/ struct IEPSExport * * Value ) = 0;
      virtual HRESULT __stdcall get_asSVG (
        /*[out,retval]*/ struct ISVGExport * * Value ) = 0;
      virtual HRESULT __stdcall get_LabelHeader (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall put_LabelHeader (
        /*[in]*/ BSTR Value ) = 0;
      virtual HRESULT __stdcall get_asXAML (
        /*[out,retval]*/ struct IXAMLExport * * Value ) = 0;
      virtual HRESULT __stdcall raw_SaveToXMLFile (
        /*[in]*/ BSTR FileName,
        /*[in]*/ VARIANT_BOOL IncludeData,
        /*[in]*/ VARIANT_BOOL XMLHeader ) = 0;
      virtual HRESULT __stdcall raw_SaveToXMLStream (
        /*[in]*/ VARIANT_BOOL IncludeData,
        /*[in]*/ VARIANT_BOOL XMLHeader,
        /*[out,retval]*/ VARIANT * Value ) = 0;
};

enum __declspec(uuid("70ed3c98-520e-428b-a69a-5588c6ca39ff"))
EDigitalFont
{
    dfBar = 0,
    dfDot = 1,
    dfCustom = 2
};

enum __declspec(uuid("0061518a-dad6-41b7-abc5-635281e9fda9"))
EGaugePointerStyles
{
    gpHand = 0,
    gpCenter = 1,
    gpTick = 2,
    gpMinorTick = 3,
    gpColorLine = 4
};

enum __declspec(uuid("ec0a506a-6624-472b-a6fb-08a8f61e1b16"))
EFibonacciStyle
{
    fsArc = 0,
    fsFan = 1
};

struct __declspec(uuid("56dd636a-7637-4ccc-bbff-d426fea5d186"))
IFibonacciItem : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPen))
    IPenPtr Pen;
    __declspec(property(get=GetValue,put=PutValue))
    double Value;

    //
    // Wrapper methods for error-handling
    //

    IPenPtr GetPen ( );
    double GetValue ( );
    void PutValue (
        double Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Pen (
        /*[out,retval]*/ struct IPen * * Value ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ double Value ) = 0;
};

struct __declspec(uuid("5b196b79-cae8-49e7-a321-cd96a3616d2f"))
IFibonacciLevels : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLevel))
    IFibonacciItemPtr Level[];

    //
    // Wrapper methods for error-handling
    //

    IFibonacciItemPtr GetLevel (
        long Index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Level (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IFibonacciItem * * Value ) = 0;
};

struct __declspec(uuid("573b399a-75e6-4079-82f9-9c4895ef9cb7"))
IMargins : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLeft,put=PutLeft))
    long Left;
    __declspec(property(get=GetTop,put=PutTop))
    long Top;
    __declspec(property(get=GetRight,put=PutRight))
    long Right;
    __declspec(property(get=GetBottom,put=PutBottom))
    long Bottom;
    __declspec(property(get=GetUnits,put=PutUnits))
    enum EMarginUnits Units;

    //
    // Wrapper methods for error-handling
    //

    long GetLeft ( );
    void PutLeft (
        long Value );
    long GetTop ( );
    void PutTop (
        long Value );
    long GetRight ( );
    void PutRight (
        long Value );
    long GetBottom ( );
    void PutBottom (
        long Value );
    enum EMarginUnits GetUnits ( );
    void PutUnits (
        enum EMarginUnits Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_Right (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Right (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_Bottom (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Bottom (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_Units (
        /*[out,retval]*/ enum EMarginUnits * Value ) = 0;
      virtual HRESULT __stdcall put_Units (
        /*[in]*/ enum EMarginUnits Value ) = 0;
};

enum __declspec(uuid("bd7d0f8c-90b1-4d2b-b8a6-e4a5a76a42a9"))
EMarginsUnits
{
    maPercentFont = 0,
    maPercentSize = 1,
    maPixels = 2
};

struct __declspec(uuid("bd6c0aee-3977-4cbb-81a0-50db0e100be8"))
IFullScreenTool : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetReleaseKey,put=PutReleaseKey))
    long ReleaseKey;

    //
    // Wrapper methods for error-handling
    //

    long GetReleaseKey ( );
    void PutReleaseKey (
        long Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ReleaseKey (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_ReleaseKey (
        /*[in]*/ long Value ) = 0;
};

struct __declspec(uuid("c398ad7d-b57f-4e47-b183-b29ae925ee77"))
ITChart : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAspect))
    IAspectPtr Aspect;
    __declspec(property(get=GetAxis))
    IAxesPtr Axis;
    __declspec(property(get=GetCanvas))
    ICanvasPtr Canvas;
    __declspec(property(get=GetClipPoints,put=PutClipPoints))
    VARIANT_BOOL ClipPoints;
    __declspec(property(get=GetCursor,put=PutCursor))
    short Cursor;
    __declspec(property(get=GetDragCursor,put=PutDragCursor))
    short DragCursor;
    __declspec(property(get=GetDragMode,put=PutDragMode))
    enum EDragMode DragMode;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetExport))
    IExportPtr Export;
    __declspec(property(get=GetFooter))
    ITitlesPtr Footer;
    __declspec(property(get=GetFrame))
    IPenPtr Frame;
    __declspec(property(get=GetHeight,put=PutHeight))
    long Height;
    __declspec(property(get=GetImport))
    IImportPtr Import;
    __declspec(property(get=GetLeft,put=PutLeft))
    long Left;
    __declspec(property(get=GetLegend))
    ILegendPtr Legend;
    __declspec(property(get=GetPage))
    IPagePtr Page;
    __declspec(property(get=GetPanel))
    IPanelPtr Panel;
    __declspec(property(get=GetPrinter))
    IPrinterPtr Printer;
    __declspec(property(get=GetScroll))
    IScrollPtr Scroll;
    __declspec(property(get=GetaSeries))
    ISeriesPtr aSeries[];
    __declspec(property(get=GetSeriesCount))
    long SeriesCount;
    __declspec(property(get=GetHeader))
    ITitlesPtr Header;
    __declspec(property(get=GetTop,put=PutTop))
    long Top;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetWalls))
    IWallsPtr Walls;
    __declspec(property(get=GetWidth,put=PutWidth))
    long Width;
    __declspec(property(get=GetZoom))
    IZoomPtr Zoom;
    __declspec(property(get=GetSeriesList))
    ISeriesListPtr SeriesList;
    __declspec(property(get=GetHint,put=PutHint))
    _bstr_t Hint;
    __declspec(property(get=GetShowHint,put=PutShowHint))
    VARIANT_BOOL ShowHint;
    __declspec(property(get=GetVersion))
    _bstr_t Version;
    __declspec(property(get=GetCustomChartRect,put=PutCustomChartRect))
    VARIANT_BOOL CustomChartRect;
    __declspec(property(get=GetTimerEnabled,put=PutTimerEnabled))
    VARIANT_BOOL TimerEnabled;
    __declspec(property(get=GetTimerInterval,put=PutTimerInterval))
    long TimerInterval;
    __declspec(property(get=GetAutoRepaint,put=PutAutoRepaint))
    VARIANT_BOOL AutoRepaint;
    __declspec(property(get=GetEnvironment))
    IEnvironmentPtr Environment;
    __declspec(property(get=GetChartLink))
    long ChartLink;
    __declspec(property(get=GetMousePosition))
    ITeePoint2DPtr MousePosition;
    __declspec(property(get=GetTools))
    IToolListPtr Tools;
    __declspec(property(get=GetSubHeader))
    ITitlesPtr SubHeader;
    __declspec(property(get=GetSubFooter))
    ITitlesPtr SubFooter;
    __declspec(property(get=GetMonochrome,put=PutMonochrome))
    VARIANT_BOOL Monochrome;
    __declspec(property(get=GetOriginalCursor,put=PutOriginalCursor))
    short OriginalCursor;
    __declspec(property(get=GetPrinting))
    VARIANT_BOOL Printing;
    __declspec(property(get=GetChartHeight))
    long ChartHeight;
    __declspec(property(get=GetChartWidth))
    long ChartWidth;
    __declspec(property(get=GetChartBounds))
    ITeeRectPtr ChartBounds;
    __declspec(property(get=GetBufferedDisplay,put=PutBufferedDisplay))
    VARIANT_BOOL BufferedDisplay;
    __declspec(property(get=GetCanClip))
    VARIANT_BOOL CanClip;
    __declspec(property(get=GetGetChartRect))
    ITeeRectPtr GetChartRect;

    //
    // Wrapper methods for error-handling
    //

    IAspectPtr GetAspect ( );
    IAxesPtr GetAxis ( );
    ICanvasPtr GetCanvas ( );
    VARIANT_BOOL GetClipPoints ( );
    void PutClipPoints (
        VARIANT_BOOL ClipPoints );
    short GetCursor ( );
    void PutCursor (
        short Cursor );
    short GetDragCursor ( );
    void PutDragCursor (
        short DragCursor );
    enum EDragMode GetDragMode ( );
    void PutDragMode (
        enum EDragMode DragMode );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL Enabled );
    IExportPtr GetExport ( );
    ITitlesPtr GetFooter ( );
    IPenPtr GetFrame ( );
    ITitlesPtr GetHeader ( );
    long GetHeight ( );
    void PutHeight (
        long Height );
    IImportPtr GetImport ( );
    long GetLeft ( );
    void PutLeft (
        long Left );
    ILegendPtr GetLegend ( );
    IPagePtr GetPage ( );
    IPanelPtr GetPanel ( );
    IPrinterPtr GetPrinter ( );
    IScrollPtr GetScroll ( );
    ISeriesPtr GetaSeries (
        long SeriesIndex );
    long GetSeriesCount ( );
    long GetTop ( );
    void PutTop (
        long Top );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL Visible );
    IWallsPtr GetWalls ( );
    long GetWidth ( );
    void PutWidth (
        long Width );
    IZoomPtr GetZoom ( );
    HRESULT AboutBox ( );
    long AddSeries (
        enum ESeriesClass SeriesClass );
    HRESULT ChangeSeriesType (
        long SeriesIndex,
        enum ESeriesClass NewSeriesType );
    long CloneSeries (
        long SourceSeriesIndex );
    HRESULT Draw (
        long DC,
        long Left,
        long Top,
        long Right,
        long Bottom );
    HRESULT ExchangeSeries (
        long Series1,
        long Series2 );
    double GetDateTimeStep (
        enum EDateTimeStep DateTimeStep );
    OLE_COLOR GetFreeSeriesColor (
        VARIANT_BOOL CheckBackgroundColor );
    ISeriesPtr GetLabelsSeries (
        enum EAxisType DestAxis );
    VARIANT_BOOL IsFreeSeriesColor (
        OLE_COLOR AColor,
        VARIANT_BOOL CheckBackgroundColor );
    HRESULT RemoveAllSeries ( );
    HRESULT RemoveSeries (
        long SeriesIndex );
    HRESULT Repaint ( );
    _bstr_t SeriesTitleLegend (
        long ASeriesIndex );
    HRESULT ShowEditor (
        long SeriesIndex );
    HRESULT StopMouse ( );
    VARIANT_BOOL GetTimerEnabled ( );
    void PutTimerEnabled (
        VARIANT_BOOL TimerEnabled );
    long GetTimerInterval ( );
    void PutTimerInterval (
        long TimerInterval );
    VARIANT_BOOL GetAutoRepaint ( );
    void PutAutoRepaint (
        VARIANT_BOOL Value );
    HRESULT EditOneSeries (
        long SeriesIndex );
    IEnvironmentPtr GetEnvironment ( );
    long GetChartLink ( );
    ITeePoint2DPtr GetMousePosition ( );
    HRESULT ChartRect (
        long Left,
        long Top,
        long Right,
        long Bottom );
    IToolListPtr GetTools ( );
    ITitlesPtr GetSubHeader ( );
    ITitlesPtr GetSubFooter ( );
    HRESULT ClearChart ( );
    HRESULT RefreshData ( );
    ISeriesPtr Series (
        long SeriesIndex );
    HRESULT ShowThemesEditor ( );
    HRESULT SetTheme (
        enum EChartTheme aTheme,
        enum EColorPalette aPalette );
    HRESULT ApplyPalette (
        enum EColorPalette paletteIndex );
    HRESULT ApplyCustomPalette (
        const _variant_t & colorArray );
    ISeriesListPtr GetSeriesList ( );
    _bstr_t GetHint ( );
    void PutHint (
        _bstr_t Value );
    VARIANT_BOOL GetShowHint ( );
    void PutShowHint (
        VARIANT_BOOL Value );
    _bstr_t GetVersion ( );
    VARIANT_BOOL GetCustomChartRect ( );
    void PutCustomChartRect (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetMonochrome ( );
    void PutMonochrome (
        VARIANT_BOOL Value );
    short GetOriginalCursor ( );
    void PutOriginalCursor (
        short Value );
    VARIANT_BOOL GetPrinting ( );
    long GetChartHeight ( );
    long GetChartWidth ( );
    ITeeRectPtr GetChartBounds ( );
    VARIANT_BOOL GetBufferedDisplay ( );
    void PutBufferedDisplay (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetCanClip ( );
    ITeeRectPtr GetGetChartRect ( );
    VARIANT_BOOL EditStrings (
        BSTR * Strings,
        VARIANT_BOOL ReadOnly );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Aspect (
        /*[out,retval]*/ struct IAspect * * Aspect ) = 0;
      virtual HRESULT __stdcall get_Axis (
        /*[out,retval]*/ struct IAxes * * Axis ) = 0;
      virtual HRESULT __stdcall get_Canvas (
        /*[out,retval]*/ struct ICanvas * * Canvas ) = 0;
      virtual HRESULT __stdcall get_ClipPoints (
        /*[out,retval]*/ VARIANT_BOOL * ClipPoints ) = 0;
      virtual HRESULT __stdcall put_ClipPoints (
        /*[in]*/ VARIANT_BOOL ClipPoints ) = 0;
      virtual HRESULT __stdcall get_Cursor (
        /*[out,retval]*/ short * Cursor ) = 0;
      virtual HRESULT __stdcall put_Cursor (
        /*[in]*/ short Cursor ) = 0;
      virtual HRESULT __stdcall get_DragCursor (
        /*[out,retval]*/ short * DragCursor ) = 0;
      virtual HRESULT __stdcall put_DragCursor (
        /*[in]*/ short DragCursor ) = 0;
      virtual HRESULT __stdcall get_DragMode (
        /*[out,retval]*/ enum EDragMode * DragMode ) = 0;
      virtual HRESULT __stdcall put_DragMode (
        /*[in]*/ enum EDragMode DragMode ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * Enabled ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL Enabled ) = 0;
      virtual HRESULT __stdcall get_Export (
        /*[out,retval]*/ struct IExport * * Export ) = 0;
      virtual HRESULT __stdcall get_Footer (
        /*[out,retval]*/ struct ITitles * * Footer ) = 0;
      virtual HRESULT __stdcall get_Frame (
        /*[out,retval]*/ struct IPen * * Frame ) = 0;
      virtual HRESULT __stdcall get_Header (
        /*[out,retval]*/ struct ITitles * * Header ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ long * Height ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ long Height ) = 0;
      virtual HRESULT __stdcall get_Import (
        /*[out,retval]*/ struct IImport * * Import ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ long * Left ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ long Left ) = 0;
      virtual HRESULT __stdcall get_Legend (
        /*[out,retval]*/ struct ILegend * * Legend ) = 0;
      virtual HRESULT __stdcall get_Page (
        /*[out,retval]*/ struct IPage * * Page ) = 0;
      virtual HRESULT __stdcall get_Panel (
        /*[out,retval]*/ struct IPanel * * Panel ) = 0;
      virtual HRESULT __stdcall get_Printer (
        /*[out,retval]*/ struct IPrinter * * Printer ) = 0;
      virtual HRESULT __stdcall get_Scroll (
        /*[out,retval]*/ struct IScroll * * Scroll ) = 0;
      virtual HRESULT __stdcall get_aSeries (
        /*[in]*/ long SeriesIndex,
        /*[out,retval]*/ struct ISeries * * Index ) = 0;
      virtual HRESULT __stdcall get_SeriesCount (
        /*[out,retval]*/ long * SeriesCount ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ long * Top ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ long Top ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * Visible ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL Visible ) = 0;
      virtual HRESULT __stdcall get_Walls (
        /*[out,retval]*/ struct IWalls * * Walls ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ long * Width ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ long Width ) = 0;
      virtual HRESULT __stdcall get_Zoom (
        /*[out,retval]*/ struct IZoom * * Zoom ) = 0;
      virtual HRESULT __stdcall raw_AboutBox ( ) = 0;
      virtual HRESULT __stdcall raw_AddSeries (
        /*[in]*/ enum ESeriesClass SeriesClass,
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall raw_ChangeSeriesType (
        /*[in]*/ long SeriesIndex,
        /*[in]*/ enum ESeriesClass NewSeriesType ) = 0;
      virtual HRESULT __stdcall raw_CloneSeries (
        /*[in]*/ long SourceSeriesIndex,
        /*[out,retval]*/ long * SeriesIndex ) = 0;
      virtual HRESULT __stdcall raw_Draw (
        /*[in]*/ long DC,
        /*[in]*/ long Left,
        /*[in]*/ long Top,
        /*[in]*/ long Right,
        /*[in]*/ long Bottom ) = 0;
      virtual HRESULT __stdcall raw_ExchangeSeries (
        /*[in]*/ long Series1,
        /*[in]*/ long Series2 ) = 0;
      virtual HRESULT __stdcall raw_GetDateTimeStep (
        /*[in]*/ enum EDateTimeStep DateTimeStep,
        /*[out,retval]*/ double * Step ) = 0;
      virtual HRESULT __stdcall raw_GetFreeSeriesColor (
        /*[in]*/ VARIANT_BOOL CheckBackgroundColor,
        /*[out,retval]*/ OLE_COLOR * CheckBackground ) = 0;
      virtual HRESULT __stdcall raw_GetLabelsSeries (
        /*[in]*/ enum EAxisType DestAxis,
        /*[out,retval]*/ struct ISeries * * Axis ) = 0;
      virtual HRESULT __stdcall raw_IsFreeSeriesColor (
        /*[in]*/ OLE_COLOR AColor,
        /*[in]*/ VARIANT_BOOL CheckBackgroundColor,
        /*[out,retval]*/ VARIANT_BOOL * CheckBackground ) = 0;
      virtual HRESULT __stdcall raw_RemoveAllSeries ( ) = 0;
      virtual HRESULT __stdcall raw_RemoveSeries (
        /*[in]*/ long SeriesIndex ) = 0;
      virtual HRESULT __stdcall raw_Repaint ( ) = 0;
      virtual HRESULT __stdcall raw_SeriesTitleLegend (
        /*[in]*/ long ASeriesIndex,
        /*[out,retval]*/ BSTR * SeriesIndex ) = 0;
      virtual HRESULT __stdcall raw_ShowEditor (
        long SeriesIndex ) = 0;
      virtual HRESULT __stdcall raw_StopMouse ( ) = 0;
      virtual HRESULT __stdcall get_TimerEnabled (
        /*[out,retval]*/ VARIANT_BOOL * TimerEnabled ) = 0;
      virtual HRESULT __stdcall put_TimerEnabled (
        /*[in]*/ VARIANT_BOOL TimerEnabled ) = 0;
      virtual HRESULT __stdcall get_TimerInterval (
        /*[out,retval]*/ long * TimerInterval ) = 0;
      virtual HRESULT __stdcall put_TimerInterval (
        /*[in]*/ long TimerInterval ) = 0;
      virtual HRESULT __stdcall get_AutoRepaint (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_AutoRepaint (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall raw_EditOneSeries (
        /*[in]*/ long SeriesIndex ) = 0;
      virtual HRESULT __stdcall get_Environment (
        /*[out,retval]*/ struct IEnvironment * * Value ) = 0;
      virtual HRESULT __stdcall get_ChartLink (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_MousePosition (
        /*[out,retval]*/ struct ITeePoint2D * * Value ) = 0;
      virtual HRESULT __stdcall raw_ChartRect (
        /*[in]*/ long Left,
        /*[in]*/ long Top,
        /*[in]*/ long Right,
        /*[in]*/ long Bottom ) = 0;
      virtual HRESULT __stdcall get_Tools (
        /*[out,retval]*/ struct IToolList * * Value ) = 0;
      virtual HRESULT __stdcall get_SubHeader (
        /*[out,retval]*/ struct ITitles * * Value ) = 0;
      virtual HRESULT __stdcall get_SubFooter (
        /*[out,retval]*/ struct ITitles * * Value ) = 0;
      virtual HRESULT __stdcall raw_ClearChart ( ) = 0;
      virtual HRESULT __stdcall raw_RefreshData ( ) = 0;
      virtual HRESULT __stdcall raw_Series (
        /*[in]*/ long SeriesIndex,
        /*[out,retval]*/ struct ISeries * * Index ) = 0;
      virtual HRESULT __stdcall raw_ShowThemesEditor ( ) = 0;
      virtual HRESULT __stdcall raw_SetTheme (
        /*[in]*/ enum EChartTheme aTheme,
        /*[in]*/ enum EColorPalette aPalette ) = 0;
      virtual HRESULT __stdcall raw_ApplyPalette (
        /*[in]*/ enum EColorPalette paletteIndex ) = 0;
      virtual HRESULT __stdcall raw_ApplyCustomPalette (
        /*[in]*/ VARIANT colorArray ) = 0;
      virtual HRESULT __stdcall get_SeriesList (
        /*[out,retval]*/ struct ISeriesList * * Value ) = 0;
      virtual HRESULT __stdcall get_Hint (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall put_Hint (
        /*[in]*/ BSTR Value ) = 0;
      virtual HRESULT __stdcall get_ShowHint (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_ShowHint (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_Version (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall get_CustomChartRect (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_CustomChartRect (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_Monochrome (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Monochrome (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_OriginalCursor (
        /*[out,retval]*/ short * Value ) = 0;
      virtual HRESULT __stdcall put_OriginalCursor (
        /*[in]*/ short Value ) = 0;
      virtual HRESULT __stdcall get_Printing (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall get_ChartHeight (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_ChartWidth (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_ChartBounds (
        /*[out,retval]*/ struct ITeeRect * * Value ) = 0;
      virtual HRESULT __stdcall get_BufferedDisplay (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_BufferedDisplay (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_CanClip (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall get_GetChartRect (
        /*[out,retval]*/ struct ITeeRect * * Value ) = 0;
      virtual HRESULT __stdcall raw_EditStrings (
        /*[in,out]*/ BSTR * Strings,
        /*[in]*/ VARIANT_BOOL ReadOnly,
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
};

struct __declspec(uuid("ab864f5b-9010-462b-b42b-1d68b155e8d2"))
ITeeLinked : IDispatch
{
    //
    // Property data
    //

    __declspec(property(put=PutChartLink))
    long ChartLink;
    __declspec(property(put=PutChart))
    ITChartPtr Chart;

    //
    // Wrapper methods for error-handling
    //

    void PutChart (
        struct ITChart * _arg1 );
    void PutChartLink (
        long _arg1 );
    HRESULT AboutBox ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Chart (
        /*[in]*/ struct ITChart * _arg1 ) = 0;
      virtual HRESULT __stdcall put_ChartLink (
        /*[in]*/ long _arg1 ) = 0;
      virtual HRESULT __stdcall raw_AboutBox ( ) = 0;
};

struct __declspec(uuid("e342e283-24ed-4bef-bc1e-89373a2e78ff"))
ITeeEditor : ITeeLinked
{
    //
    // Property data
    //

    __declspec(property(get=GetEditorTitle,put=PutEditorTitle))
    _bstr_t EditorTitle;
    __declspec(property(get=GetDefaultPage,put=PutDefaultPage))
    enum ETeeEditorPage DefaultPage;
    __declspec(property(get=GetAutoRepaint,put=PutAutoRepaint))
    VARIANT_BOOL AutoRepaint;
    __declspec(property(get=GetShowPages))
    ITeeEditorShowPagesPtr ShowPages;
    __declspec(property(get=GetOptions))
    ITeeEditorOptionsPtr Options;
    __declspec(property(get=GetEditorLink))
    long EditorLink;
    __declspec(property(get=GetTreeView,put=PutTreeView))
    VARIANT_BOOL TreeView;
    __declspec(property(get=GetHighLightTabs,put=PutHighLightTabs))
    VARIANT_BOOL HighLightTabs;
    __declspec(property(get=GetPixelsPerInch,put=PutPixelsPerInch))
    long PixelsPerInch;
    __declspec(property(get=GetRememberPosition,put=PutRememberPosition))
    VARIANT_BOOL RememberPosition;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetEditorTitle ( );
    void PutEditorTitle (
        _bstr_t Value );
    enum ETeeEditorPage GetDefaultPage ( );
    void PutDefaultPage (
        enum ETeeEditorPage Value );
    HRESULT ShowEditor ( );
    VARIANT_BOOL GetAutoRepaint ( );
    void PutAutoRepaint (
        VARIANT_BOOL Value );
    ITeeEditorShowPagesPtr GetShowPages ( );
    long GetEditorLink ( );
    ITeeEditorOptionsPtr GetOptions ( );
    VARIANT_BOOL GetTreeView ( );
    void PutTreeView (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetHighLightTabs ( );
    void PutHighLightTabs (
        VARIANT_BOOL Value );
    long GetPixelsPerInch ( );
    void PutPixelsPerInch (
        long Value );
    VARIANT_BOOL GetRememberPosition ( );
    void PutRememberPosition (
        VARIANT_BOOL Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_EditorTitle (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall put_EditorTitle (
        /*[in]*/ BSTR Value ) = 0;
      virtual HRESULT __stdcall get_DefaultPage (
        /*[out,retval]*/ enum ETeeEditorPage * Value ) = 0;
      virtual HRESULT __stdcall put_DefaultPage (
        /*[in]*/ enum ETeeEditorPage Value ) = 0;
      virtual HRESULT __stdcall raw_ShowEditor ( ) = 0;
      virtual HRESULT __stdcall get_AutoRepaint (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_AutoRepaint (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_ShowPages (
        /*[out,retval]*/ struct ITeeEditorShowPages * * Value ) = 0;
      virtual HRESULT __stdcall get_EditorLink (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_Options (
        /*[out,retval]*/ struct ITeeEditorOptions * * Value ) = 0;
      virtual HRESULT __stdcall get_TreeView (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_TreeView (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_HighLightTabs (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_HighLightTabs (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_PixelsPerInch (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_PixelsPerInch (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_RememberPosition (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_RememberPosition (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
};

struct __declspec(uuid("b7993725-ac8b-406f-9f0f-9ec465091165"))
ITeePreviewer : ITeeLinked
{
    //
    // Property data
    //

    __declspec(property(get=GetPreviewTitle,put=PutPreviewTitle))
    _bstr_t PreviewTitle;
    __declspec(property(get=GetPaperColor,put=PutPaperColor))
    OLE_COLOR PaperColor;
    __declspec(property(get=GetPreviewerLink))
    long PreviewerLink;
    __declspec(property(get=GetMaximized,put=PutMaximized))
    VARIANT_BOOL Maximized;
    __declspec(property(get=GetOptions))
    ITeePreviewerOptionsPtr Options;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetPreviewTitle ( );
    void PutPreviewTitle (
        _bstr_t Value );
    HRESULT ShowPreview ( );
    OLE_COLOR GetPaperColor ( );
    void PutPaperColor (
        OLE_COLOR Value );
    long GetPreviewerLink ( );
    VARIANT_BOOL GetMaximized ( );
    void PutMaximized (
        VARIANT_BOOL Value );
    ITeePreviewerOptionsPtr GetOptions ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_PreviewTitle (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall put_PreviewTitle (
        /*[in]*/ BSTR Value ) = 0;
      virtual HRESULT __stdcall raw_ShowPreview ( ) = 0;
      virtual HRESULT __stdcall get_PaperColor (
        /*[out,retval]*/ OLE_COLOR * Value ) = 0;
      virtual HRESULT __stdcall put_PaperColor (
        /*[in]*/ OLE_COLOR Value ) = 0;
      virtual HRESULT __stdcall get_PreviewerLink (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_Maximized (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Maximized (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_Options (
        /*[out,retval]*/ struct ITeePreviewerOptions * * Value ) = 0;
};

struct __declspec(uuid("f47693f2-77de-4da8-8377-e2d00a86f2a7"))
IChartGrid : ITeeLinked
{
    //
    // Property data
    //

    __declspec(property(get=GetFirstRowNum))
    long FirstRowNum;
    __declspec(property(get=GetLabelsColumn))
    long LabelsColumn;
    __declspec(property(get=GetCol,put=PutCol))
    long Col;
    __declspec(property(get=GetColCount))
    long ColCount;
    __declspec(property(get=GetColwidths,put=PutColwidths))
    long Colwidths[];
    __declspec(property(get=GetEditorMode,put=PutEditorMode))
    VARIANT_BOOL EditorMode;
    __declspec(property(get=GetGridHeight))
    long GridHeight;
    __declspec(property(get=GetGridWidth))
    long GridWidth;
    __declspec(property(get=GetLeftCol,put=PutLeftCol))
    long LeftCol;
    __declspec(property(get=GetGridLink))
    long GridLink;
    __declspec(property(get=GetSeriesSymbolClickable,put=PutSeriesSymbolClickable))
    VARIANT_BOOL SeriesSymbolClickable;
    __declspec(property(get=GetShowLabels,put=PutShowLabels))
    VARIANT_BOOL ShowLabels;
    __declspec(property(get=GetShowColors,put=PutShowColors))
    VARIANT_BOOL ShowColors;
    __declspec(property(get=GetShowFields,put=PutShowFields))
    VARIANT_BOOL ShowFields;
    __declspec(property(get=GetShowXValues,put=PutShowXValues))
    enum EChartGridShow ShowXValues;
    __declspec(property(get=GetDefaultColWidth,put=PutDefaultColWidth))
    long DefaultColWidth;
    __declspec(property(get=GetGrid3DMode,put=PutGrid3DMode))
    VARIANT_BOOL Grid3DMode;
    __declspec(property(get=GetLabelHeader,put=PutLabelHeader))
    _bstr_t LabelHeader;
    __declspec(property(get=GetAllowAppend,put=PutAllowAppend))
    VARIANT_BOOL AllowAppend;
    __declspec(property(get=GetReadOnly,put=PutReadOnly))
    VARIANT_BOOL ReadOnly;
    __declspec(property(get=GetAllowInsertSeries,put=PutAllowInsertSeries))
    VARIANT_BOOL AllowInsertSeries;
    __declspec(property(get=GetColorsColumn))
    long ColorsColumn;

    //
    // Wrapper methods for error-handling
    //

    long GetCol ( );
    void PutCol (
        long Value );
    long GetColCount ( );
    long GetColwidths (
        long Index );
    void PutColwidths (
        long Index,
        long Value );
    VARIANT_BOOL GetEditorMode ( );
    void PutEditorMode (
        VARIANT_BOOL Value );
    long GetGridHeight ( );
    long GetGridWidth ( );
    long GetLeftCol ( );
    void PutLeftCol (
        long Value );
    long GetGridLink ( );
    HRESULT RecalcDimensions ( );
    VARIANT_BOOL GetShowLabels ( );
    void PutShowLabels (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetShowColors ( );
    void PutShowColors (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetShowFields ( );
    void PutShowFields (
        VARIANT_BOOL Value );
    IChartGridColsPtr Cols ( );
    IChartGridRowsPtr Rows ( );
    long GetDefaultColWidth ( );
    void PutDefaultColWidth (
        long Value );
    VARIANT_BOOL GetGrid3DMode ( );
    void PutGrid3DMode (
        VARIANT_BOOL Value );
    _bstr_t GetLabelHeader ( );
    void PutLabelHeader (
        _bstr_t Value );
    VARIANT_BOOL GetAllowAppend ( );
    void PutAllowAppend (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetReadOnly ( );
    void PutReadOnly (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetAllowInsertSeries ( );
    void PutAllowInsertSeries (
        VARIANT_BOOL Value );
    long GetColorsColumn ( );
    long GetFirstRowNum ( );
    long GetLabelsColumn ( );
    VARIANT_BOOL GetSeriesSymbolClickable ( );
    void PutSeriesSymbolClickable (
        VARIANT_BOOL Value );
    enum EChartGridShow GetShowXValues ( );
    void PutShowXValues (
        enum EChartGridShow Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Col (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Col (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_ColCount (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_Colwidths (
        /*[in]*/ long Index,
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Colwidths (
        /*[in]*/ long Index,
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_EditorMode (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_EditorMode (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_GridHeight (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_GridWidth (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_LeftCol (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_LeftCol (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_GridLink (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall raw_RecalcDimensions ( ) = 0;
      virtual HRESULT __stdcall get_ShowLabels (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_ShowLabels (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_ShowColors (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_ShowColors (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_ShowFields (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_ShowFields (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall raw_Cols (
        /*[out,retval]*/ struct IChartGridCols * * Value ) = 0;
      virtual HRESULT __stdcall raw_Rows (
        /*[out,retval]*/ struct IChartGridRows * * Value ) = 0;
      virtual HRESULT __stdcall get_DefaultColWidth (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_DefaultColWidth (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_Grid3DMode (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Grid3DMode (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_LabelHeader (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall put_LabelHeader (
        /*[in]*/ BSTR Value ) = 0;
      virtual HRESULT __stdcall get_AllowAppend (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_AllowAppend (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_ReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_ReadOnly (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_AllowInsertSeries (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_AllowInsertSeries (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_ColorsColumn (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_FirstRowNum (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_LabelsColumn (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_SeriesSymbolClickable (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_SeriesSymbolClickable (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_ShowXValues (
        /*[out,retval]*/ enum EChartGridShow * Value ) = 0;
      virtual HRESULT __stdcall put_ShowXValues (
        /*[in]*/ enum EChartGridShow Value ) = 0;
};

struct __declspec(uuid("f9e796c3-0b2b-4c52-be19-5ccd1463b846"))
IChartGridNavigator : IDispatch
{
    //
    // Property data
    //

    __declspec(property(put=PutGridLink))
    long GridLink;
    __declspec(property(put=PutGrid))
    IChartGridPtr Grid;
    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;

    //
    // Wrapper methods for error-handling
    //

    void PutGrid (
        struct IChartGrid * _arg1 );
    void PutGridLink (
        long _arg1 );
    HRESULT EnableButtons ( );
    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Grid (
        /*[in]*/ struct IChartGrid * _arg1 ) = 0;
      virtual HRESULT __stdcall put_GridLink (
        /*[in]*/ long _arg1 ) = 0;
      virtual HRESULT __stdcall raw_EnableButtons ( ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * Value ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR Value ) = 0;
};

struct __declspec(uuid("187a1659-5e9d-4f99-a920-0701f0199c13"))
IChartPageNavigator : ITeeLinked
{
    //
    // Property data
    //

    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;

    //
    // Wrapper methods for error-handling
    //

    HRESULT EnableButtons ( );
    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_EnableButtons ( ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * Value ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR Value ) = 0;
};

struct __declspec(uuid("5a486910-c8b0-432b-b374-abd125471d91"))
IChartEditorPanel : ITeeLinked
{
    //
    // Property data
    //

    __declspec(property(get=GetBevelOuter,put=PutBevelOuter))
    enum EPanelBevel BevelOuter;
    __declspec(property(put=PutEditor))
    ITeeEditorPtr Editor;
    __declspec(property(put=PutEditorLink))
    long EditorLink;

    //
    // Wrapper methods for error-handling
    //

    HRESULT SelectUnderMouse ( );
    enum EPanelBevel GetBevelOuter ( );
    void PutBevelOuter (
        enum EPanelBevel Value );
    void PutEditor (
        struct ITeeEditor * _arg1 );
    void PutEditorLink (
        long _arg1 );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_SelectUnderMouse ( ) = 0;
      virtual HRESULT __stdcall get_BevelOuter (
        /*[out,retval]*/ enum EPanelBevel * Value ) = 0;
      virtual HRESULT __stdcall put_BevelOuter (
        /*[in]*/ enum EPanelBevel Value ) = 0;
      virtual HRESULT __stdcall put_Editor (
        /*[in]*/ struct ITeeEditor * _arg1 ) = 0;
      virtual HRESULT __stdcall put_EditorLink (
        /*[in]*/ long _arg1 ) = 0;
};

struct __declspec(uuid("81c0441c-ca5b-4999-a827-32c1ad451c87"))
ISeriesSource : ITeeLinked
{
    //
    // Property data
    //

    __declspec(property(get=GetActive,put=PutActive))
    VARIANT_BOOL Active;
    __declspec(property(get=GetSeries,put=PutSeries))
    _variant_t Series;

    //
    // Wrapper methods for error-handling
    //

    HRESULT Open ( );
    HRESULT Close ( );
    VARIANT_BOOL GetActive ( );
    void PutActive (
        VARIANT_BOOL Value );
    _variant_t GetSeries ( );
    void PutSeries (
        const _variant_t & Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Open ( ) = 0;
      virtual HRESULT __stdcall raw_Close ( ) = 0;
      virtual HRESULT __stdcall get_Active (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Active (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_Series (
        /*[out,retval]*/ VARIANT * Value ) = 0;
      virtual HRESULT __stdcall put_Series (
        /*[in]*/ VARIANT Value ) = 0;
};

struct __declspec(uuid("fa4fe59f-8cf1-45db-b5e9-9d229d58c438"))
ISeriesSourceFile : ISeriesSource
{
    //
    // Property data
    //

    __declspec(property(get=GetFileName,put=PutFileName))
    _bstr_t FileName;
    __declspec(property(get=GetLoadMode,put=PutLoadMode))
    enum ELoadMode LoadMode;

    //
    // Wrapper methods for error-handling
    //

    HRESULT Load ( );
    HRESULT LoadFromFile (
        _bstr_t FileName );
    HRESULT LoadFromURL (
        _bstr_t URL );
    _bstr_t GetFileName ( );
    void PutFileName (
        _bstr_t Value );
    enum ELoadMode GetLoadMode ( );
    void PutLoadMode (
        enum ELoadMode Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Load ( ) = 0;
      virtual HRESULT __stdcall raw_LoadFromFile (
        /*[in]*/ BSTR FileName ) = 0;
      virtual HRESULT __stdcall raw_LoadFromURL (
        /*[in]*/ BSTR URL ) = 0;
      virtual HRESULT __stdcall get_FileName (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall put_FileName (
        /*[in]*/ BSTR Value ) = 0;
      virtual HRESULT __stdcall get_LoadMode (
        /*[out,retval]*/ enum ELoadMode * Value ) = 0;
      virtual HRESULT __stdcall put_LoadMode (
        /*[in]*/ enum ELoadMode Value ) = 0;
};

struct __declspec(uuid("15a88a3d-5195-4a80-bc81-85472f1876f7"))
ISeriesXMLSource : ISeriesSourceFile
{
    //
    // Property data
    //

    __declspec(property(get=GetSeriesNode,put=PutSeriesNode))
    _bstr_t SeriesNode;
    __declspec(property(get=GetValueSource,put=PutValueSource))
    _bstr_t ValueSource;
    __declspec(property(get=GetXML))
    IStringsPtr XML;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetSeriesNode ( );
    void PutSeriesNode (
        _bstr_t Value );
    _bstr_t GetValueSource ( );
    void PutValueSource (
        _bstr_t Value );
    IStringsPtr GetXML ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_SeriesNode (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall put_SeriesNode (
        /*[in]*/ BSTR Value ) = 0;
      virtual HRESULT __stdcall get_ValueSource (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall put_ValueSource (
        /*[in]*/ BSTR Value ) = 0;
      virtual HRESULT __stdcall get_XML (
        /*[out,retval]*/ struct IStrings * * Value ) = 0;
};

struct __declspec(uuid("ad7ca61b-203e-42b4-9416-aaf4b6d3c6ea"))
ISeriesTextSource : ISeriesSourceFile
{
    //
    // Property data
    //

    __declspec(property(get=GetHeaderLines,put=PutHeaderLines))
    long HeaderLines;
    __declspec(property(get=GetFields))
    ISeriesTextFieldsPtr Fields;
    __declspec(property(get=GetFieldSeparator,put=PutFieldSeparator))
    _bstr_t FieldSeparator;

    //
    // Wrapper methods for error-handling
    //

    HRESULT LoadAsStream (
        const _variant_t & AStream );
    long GetHeaderLines ( );
    void PutHeaderLines (
        long Value );
    ISeriesTextFieldsPtr GetFields ( );
    _bstr_t GetFieldSeparator ( );
    void PutFieldSeparator (
        _bstr_t Value );
    ISeriesTextFieldPtr AddField (
        _bstr_t AName,
        long AIndex );
    HRESULT LoadFromStrings (
        _bstr_t AStrings );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_LoadAsStream (
        /*[in]*/ VARIANT AStream ) = 0;
      virtual HRESULT __stdcall get_HeaderLines (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_HeaderLines (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_Fields (
        /*[out,retval]*/ struct ISeriesTextFields * * Value ) = 0;
      virtual HRESULT __stdcall get_FieldSeparator (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall put_FieldSeparator (
        /*[in]*/ BSTR Value ) = 0;
      virtual HRESULT __stdcall raw_AddField (
        /*[in]*/ BSTR AName,
        /*[in]*/ long AIndex,
        /*[out,retval]*/ struct ISeriesTextField * * result ) = 0;
      virtual HRESULT __stdcall raw_LoadFromStrings (
        /*[in]*/ BSTR AStrings ) = 0;
};

struct __declspec(uuid("bbcbb4c6-96a3-452e-a960-57a6ebef8d95"))
ICrossTabSource : ISeriesSource
{
    //
    // Property data
    //

    __declspec(property(get=GetCaseSensitive,put=PutCaseSensitive))
    VARIANT_BOOL CaseSensitive;
    __declspec(property(get=GetDataSet,put=PutDataSet))
    _variant_t DataSet;
    __declspec(property(get=GetFormula,put=PutFormula))
    enum EGroupFormula Formula;
    __declspec(property(get=GetGroupField,put=PutGroupField))
    _bstr_t GroupField;
    __declspec(property(get=GetLabelField,put=PutLabelField))
    _bstr_t LabelField;
    __declspec(property(get=GetValueField,put=PutValueField))
    _bstr_t ValueField;
    __declspec(property(get=GetHideSeries,put=PutHideSeries))
    VARIANT_BOOL HideSeries;

    //
    // Wrapper methods for error-handling
    //

    HRESULT Load ( );
    VARIANT_BOOL GetCaseSensitive ( );
    void PutCaseSensitive (
        VARIANT_BOOL Value );
    _variant_t GetDataSet ( );
    void PutDataSet (
        const _variant_t & Value );
    enum EGroupFormula GetFormula ( );
    void PutFormula (
        enum EGroupFormula Value );
    _bstr_t GetGroupField ( );
    void PutGroupField (
        _bstr_t Value );
    _bstr_t GetLabelField ( );
    void PutLabelField (
        _bstr_t Value );
    _bstr_t GetValueField ( );
    void PutValueField (
        _bstr_t Value );
    VARIANT_BOOL GetHideSeries ( );
    void PutHideSeries (
        VARIANT_BOOL Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Load ( ) = 0;
      virtual HRESULT __stdcall get_CaseSensitive (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_CaseSensitive (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_DataSet (
        /*[out,retval]*/ VARIANT * Value ) = 0;
      virtual HRESULT __stdcall put_DataSet (
        /*[in]*/ VARIANT Value ) = 0;
      virtual HRESULT __stdcall get_Formula (
        /*[out,retval]*/ enum EGroupFormula * Value ) = 0;
      virtual HRESULT __stdcall put_Formula (
        /*[in]*/ enum EGroupFormula Value ) = 0;
      virtual HRESULT __stdcall get_GroupField (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall put_GroupField (
        /*[in]*/ BSTR Value ) = 0;
      virtual HRESULT __stdcall get_LabelField (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall put_LabelField (
        /*[in]*/ BSTR Value ) = 0;
      virtual HRESULT __stdcall get_ValueField (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall put_ValueField (
        /*[in]*/ BSTR Value ) = 0;
      virtual HRESULT __stdcall get_HideSeries (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_HideSeries (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
};

struct __declspec(uuid("7cd97e43-6830-46fc-b135-d1958ae4c0aa"))
IAxes : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLeft))
    IAxisPtr Left;
    __declspec(property(get=GetRight))
    IAxisPtr Right;
    __declspec(property(get=GetTop))
    IAxisPtr Top;
    __declspec(property(get=GetBottom))
    IAxisPtr Bottom;
    __declspec(property(get=GetDepth))
    IAxisPtr Depth;
    __declspec(property(get=GetDrawAxesBeforeSeries,put=PutDrawAxesBeforeSeries))
    VARIANT_BOOL DrawAxesBeforeSeries;
    __declspec(property(get=GetCustom))
    IAxisPtr Custom[];
    __declspec(property(get=GetCustomCount))
    long CustomCount;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetDepthTop))
    IAxisPtr DepthTop;
    __declspec(property(get=GetFastCalc,put=PutFastCalc))
    VARIANT_BOOL FastCalc;
    __declspec(property(get=GetBehind,put=PutBehind))
    VARIANT_BOOL Behind;

    //
    // Wrapper methods for error-handling
    //

    IAxisPtr GetLeft ( );
    IAxisPtr GetRight ( );
    IAxisPtr GetTop ( );
    IAxisPtr GetBottom ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL Visible );
    IAxisPtr GetDepth ( );
    VARIANT_BOOL GetDrawAxesBeforeSeries ( );
    void PutDrawAxesBeforeSeries (
        VARIANT_BOOL Value );
    long AddCustom (
        VARIANT_BOOL IsHorizontal );
    IAxisPtr GetCustom (
        long CustomAxisIndex );
    long GetCustomCount ( );
    HRESULT RemoveCustom (
        long CustomAxisIndex );
    HRESULT RemoveAllCustom ( );
    IAxisPtr GetDepthTop ( );
    VARIANT_BOOL GetFastCalc ( );
    void PutFastCalc (
        VARIANT_BOOL Value );
    HRESULT SetIsometric (
        long aVertical,
        long aHorizontal );
    HRESULT Hide ( );
    VARIANT_BOOL GetBehind ( );
    void PutBehind (
        VARIANT_BOOL Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ struct IAxis * * Left ) = 0;
      virtual HRESULT __stdcall get_Right (
        /*[out,retval]*/ struct IAxis * * Right ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ struct IAxis * * Top ) = 0;
      virtual HRESULT __stdcall get_Bottom (
        /*[out,retval]*/ struct IAxis * * Bottom ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * Visible ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL Visible ) = 0;
      virtual HRESULT __stdcall get_Depth (
        /*[out,retval]*/ struct IAxis * * Value ) = 0;
      virtual HRESULT __stdcall get_DrawAxesBeforeSeries (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_DrawAxesBeforeSeries (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall raw_AddCustom (
        /*[in]*/ VARIANT_BOOL IsHorizontal,
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_Custom (
        /*[in]*/ long CustomAxisIndex,
        /*[out,retval]*/ struct IAxis * * Value ) = 0;
      virtual HRESULT __stdcall get_CustomCount (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall raw_RemoveCustom (
        /*[in]*/ long CustomAxisIndex ) = 0;
      virtual HRESULT __stdcall raw_RemoveAllCustom ( ) = 0;
      virtual HRESULT __stdcall get_DepthTop (
        /*[out,retval]*/ struct IAxis * * Value ) = 0;
      virtual HRESULT __stdcall get_FastCalc (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_FastCalc (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall raw_SetIsometric (
        /*[in]*/ long aVertical,
        /*[in]*/ long aHorizontal ) = 0;
      virtual HRESULT __stdcall raw_Hide ( ) = 0;
      virtual HRESULT __stdcall get_Behind (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Behind (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
};

struct __declspec(uuid("6dcaf81b-d217-42cf-988d-9ff60bc17092"))
IAxis : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAutomatic,put=PutAutomatic))
    VARIANT_BOOL Automatic;
    __declspec(property(get=GetAutomaticMaximum,put=PutAutomaticMaximum))
    VARIANT_BOOL AutomaticMaximum;
    __declspec(property(get=GetAutomaticMinimum,put=PutAutomaticMinimum))
    VARIANT_BOOL AutomaticMinimum;
    __declspec(property(get=GetAxisPen))
    IChartAxisPenPtr AxisPen;
    __declspec(property(get=GetGridCentered,put=PutGridCentered))
    VARIANT_BOOL GridCentered;
    __declspec(property(get=GetPositionPercent,put=PutPositionPercent))
    double PositionPercent;
    __declspec(property(get=GetExactDateTime,put=PutExactDateTime))
    VARIANT_BOOL ExactDateTime;
    __declspec(property(get=GetGridPen))
    IPenPtr GridPen;
    __declspec(property(get=GetIncrement,put=PutIncrement))
    double Increment;
    __declspec(property(get=GetInverted,put=PutInverted))
    VARIANT_BOOL Inverted;
    __declspec(property(get=GetLabels))
    IAxisLabelsPtr Labels;
    __declspec(property(get=GetMinorTickLength,put=PutMinorTickLength))
    long MinorTickLength;
    __declspec(property(get=GetAxisType))
    enum EAxisType AxisType;
    __declspec(property(get=GetPosition))
    long Position;
    __declspec(property(get=GetStartPosition,put=PutStartPosition))
    double StartPosition;
    __declspec(property(get=GetEndPosition,put=PutEndPosition))
    double EndPosition;
    __declspec(property(get=GetLogarithmicBase,put=PutLogarithmicBase))
    double LogarithmicBase;
    __declspec(property(get=GetLogarithmic,put=PutLogarithmic))
    VARIANT_BOOL Logarithmic;
    __declspec(property(get=GetMaximum,put=PutMaximum))
    double Maximum;
    __declspec(property(get=GetMinimum,put=PutMinimum))
    double Minimum;
    __declspec(property(get=GetMinorTickCount,put=PutMinorTickCount))
    long MinorTickCount;
    __declspec(property(get=GetMinorTicks))
    IPenPtr MinorTicks;
    __declspec(property(get=GetMinorGrid))
    IPenPtr MinorGrid;
    __declspec(property(get=GetTickInnerLength,put=PutTickInnerLength))
    long TickInnerLength;
    __declspec(property(get=GetTickLength,put=PutTickLength))
    long TickLength;
    __declspec(property(get=GetTickOnLabelsOnly,put=PutTickOnLabelsOnly))
    VARIANT_BOOL TickOnLabelsOnly;
    __declspec(property(get=GetOtherside,put=PutOtherside))
    VARIANT_BOOL Otherside;
    __declspec(property(get=GetTicks))
    IPenPtr Ticks;
    __declspec(property(get=GetTicksInner))
    IPenPtr TicksInner;
    __declspec(property(get=GetTitle))
    IAxisTitlePtr Title;
    __declspec(property(get=GetTitleSize,put=PutTitleSize))
    long TitleSize;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetAxisLink))
    long AxisLink;
    __declspec(property(get=GetZPosition,put=PutZPosition))
    double ZPosition;
    __declspec(property(get=GetMaximumOffset,put=PutMaximumOffset))
    long MaximumOffset;
    __declspec(property(get=GetMinimumOffset,put=PutMinimumOffset))
    long MinimumOffset;
    __declspec(property(get=GetGridZPosition,put=PutGridZPosition))
    double GridZPosition;
    __declspec(property(get=GetPositionUnits,put=PutPositionUnits))
    enum EPositionUnits PositionUnits;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetIStartPos))
    long IStartPos;
    __declspec(property(get=GetIEndPos))
    long IEndPos;
    __declspec(property(get=GetIAxisSize))
    long IAxisSize;
    __declspec(property(get=GetGrid))
    IAxisGridPenPtr Grid;
    __declspec(property(get=GetMaximumRound,put=PutMaximumRound))
    VARIANT_BOOL MaximumRound;
    __declspec(property(get=GetMinimumRound,put=PutMinimumRound))
    VARIANT_BOOL MinimumRound;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetAutomatic ( );
    void PutAutomatic (
        VARIANT_BOOL Automatic );
    VARIANT_BOOL GetAutomaticMaximum ( );
    void PutAutomaticMaximum (
        VARIANT_BOOL AutomaticMaximum );
    VARIANT_BOOL GetAutomaticMinimum ( );
    void PutAutomaticMinimum (
        VARIANT_BOOL AutomaticMinimum );
    IChartAxisPenPtr GetAxisPen ( );
    enum EAxisType GetAxisType ( );
    VARIANT_BOOL GetExactDateTime ( );
    void PutExactDateTime (
        VARIANT_BOOL ExactDateTime );
    IPenPtr GetGridPen ( );
    double GetIncrement ( );
    void PutIncrement (
        double Increment );
    VARIANT_BOOL GetInverted ( );
    void PutInverted (
        VARIANT_BOOL Inverted );
    IAxisLabelsPtr GetLabels ( );
    VARIANT_BOOL GetLogarithmic ( );
    void PutLogarithmic (
        VARIANT_BOOL Logarithmic );
    double GetMaximum ( );
    void PutMaximum (
        double Maximum );
    double GetMinimum ( );
    void PutMinimum (
        double Minimum );
    long GetMinorTickCount ( );
    void PutMinorTickCount (
        long MinorTickCount );
    long GetMinorTickLength ( );
    void PutMinorTickLength (
        long MinorTickLength );
    IPenPtr GetMinorTicks ( );
    long GetPosition ( );
    long GetTickInnerLength ( );
    void PutTickInnerLength (
        long TickInnerLength );
    long GetTickLength ( );
    void PutTickLength (
        long TickLength );
    VARIANT_BOOL GetTickOnLabelsOnly ( );
    void PutTickOnLabelsOnly (
        VARIANT_BOOL TickOnLabelsOnly );
    IPenPtr GetTicks ( );
    IPenPtr GetTicksInner ( );
    IAxisTitlePtr GetTitle ( );
    long GetTitleSize ( );
    void PutTitleSize (
        long TitleSize );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL Visible );
    HRESULT AdjustMaxMin ( );
    long CalcXPosValue (
        double SomeValue );
    long CalcYPosValue (
        double SomeValue );
    long CalcXSizeValue (
        double SomeValue );
    long CalcYSizeValue (
        double SomeValue );
    double CalcPosPoint (
        long SomeValue );
    VARIANT_BOOL Clicked (
        long XCoord,
        long YCoord );
    HRESULT CustomDraw (
        long APosLabels,
        long APosTitle,
        long APosAxis,
        VARIANT_BOOL GridVisible );
    VARIANT_BOOL IsDateTime ( );
    double MaxXValue ( );
    double MaxYValue ( );
    double MinXValue ( );
    double MinYValue ( );
    HRESULT Scroll (
        double Offset,
        VARIANT_BOOL CheckLimits );
    HRESULT SetMinMax (
        double AMin,
        double AMax );
    VARIANT_BOOL GetGridCentered ( );
    void PutGridCentered (
        VARIANT_BOOL Value );
    double GetPositionPercent ( );
    void PutPositionPercent (
        double Value );
    double GetStartPosition ( );
    void PutStartPosition (
        double Value );
    double GetEndPosition ( );
    void PutEndPosition (
        double Value );
    double GetLogarithmicBase ( );
    void PutLogarithmicBase (
        double Value );
    HRESULT CustomDrawMinMax (
        long APosLabels,
        long APosTitle,
        long APosAxis,
        VARIANT_BOOL GridVisible,
        double AMinimum,
        double AMaximum,
        long AStartPosition,
        long AEndPosition );
    IPenPtr GetMinorGrid ( );
    VARIANT_BOOL GetOtherside ( );
    void PutOtherside (
        VARIANT_BOOL Value );
    long GetAxisLink ( );
    double MaxVisibleSeriesValue (
        VARIANT_BOOL AllSeries,
        long SeriesIndex );
    double MinVisibleSeriesValue (
        VARIANT_BOOL AllSeries,
        long SeriesIndex );
    double CalcIncrement ( );
    double GetZPosition ( );
    void PutZPosition (
        double Value );
    long GetMaximumOffset ( );
    void PutMaximumOffset (
        long Value );
    long GetMinimumOffset ( );
    void PutMinimumOffset (
        long Value );
    double GetGridZPosition ( );
    void PutGridZPosition (
        double Value );
    enum EPositionUnits GetPositionUnits ( );
    void PutPositionUnits (
        enum EPositionUnits Value );
    long GetIndex ( );
    long GetIStartPos ( );
    long GetIEndPos ( );
    long GetIAxisSize ( );
    IAxisGridPenPtr GetGrid ( );
    VARIANT_BOOL GetMaximumRound ( );
    void PutMaximumRound (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetMinimumRound ( );
    void PutMinimumRound (
        VARIANT_BOOL Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Automatic (
        /*[out,retval]*/ VARIANT_BOOL * Automatic ) = 0;
      virtual HRESULT __stdcall put_Automatic (
        /*[in]*/ VARIANT_BOOL Automatic ) = 0;
      virtual HRESULT __stdcall get_AutomaticMaximum (
        /*[out,retval]*/ VARIANT_BOOL * AutomaticMaximum ) = 0;
      virtual HRESULT __stdcall put_AutomaticMaximum (
        /*[in]*/ VARIANT_BOOL AutomaticMaximum ) = 0;
      virtual HRESULT __stdcall get_AutomaticMinimum (
        /*[out,retval]*/ VARIANT_BOOL * AutomaticMinimum ) = 0;
      virtual HRESULT __stdcall put_AutomaticMinimum (
        /*[in]*/ VARIANT_BOOL AutomaticMinimum ) = 0;
      virtual HRESULT __stdcall get_AxisPen (
        /*[out,retval]*/ struct IChartAxisPen * * AxisPen ) = 0;
      virtual HRESULT __stdcall get_AxisType (
        /*[out,retval]*/ enum EAxisType * AxisType ) = 0;
      virtual HRESULT __stdcall get_ExactDateTime (
        /*[out,retval]*/ VARIANT_BOOL * ExactDateTime ) = 0;
      virtual HRESULT __stdcall put_ExactDateTime (
        /*[in]*/ VARIANT_BOOL ExactDateTime ) = 0;
      virtual HRESULT __stdcall get_GridPen (
        /*[out,retval]*/ struct IPen * * GridPen ) = 0;
      virtual HRESULT __stdcall get_Increment (
        /*[out,retval]*/ double * Increment ) = 0;
      virtual HRESULT __stdcall put_Increment (
        /*[in]*/ double Increment ) = 0;
      virtual HRESULT __stdcall get_Inverted (
        /*[out,retval]*/ VARIANT_BOOL * Inverted ) = 0;
      virtual HRESULT __stdcall put_Inverted (
        /*[in]*/ VARIANT_BOOL Inverted ) = 0;
      virtual HRESULT __stdcall get_Labels (
        /*[out,retval]*/ struct IAxisLabels * * Labels ) = 0;
      virtual HRESULT __stdcall get_Logarithmic (
        /*[out,retval]*/ VARIANT_BOOL * Logarithmic ) = 0;
      virtual HRESULT __stdcall put_Logarithmic (
        /*[in]*/ VARIANT_BOOL Logarithmic ) = 0;
      virtual HRESULT __stdcall get_Maximum (
        /*[out,retval]*/ double * Maximum ) = 0;
      virtual HRESULT __stdcall put_Maximum (
        /*[in]*/ double Maximum ) = 0;
      virtual HRESULT __stdcall get_Minimum (
        /*[out,retval]*/ double * Minimum ) = 0;
      virtual HRESULT __stdcall put_Minimum (
        /*[in]*/ double Minimum ) = 0;
      virtual HRESULT __stdcall get_MinorTickCount (
        /*[out,retval]*/ long * MinorTickCount ) = 0;
      virtual HRESULT __stdcall put_MinorTickCount (
        /*[in]*/ long MinorTickCount ) = 0;
      virtual HRESULT __stdcall get_MinorTickLength (
        /*[out,retval]*/ long * MinorTickLength ) = 0;
      virtual HRESULT __stdcall put_MinorTickLength (
        /*[in]*/ long MinorTickLength ) = 0;
      virtual HRESULT __stdcall get_MinorTicks (
        /*[out,retval]*/ struct IPen * * MinorTicks ) = 0;
      virtual HRESULT __stdcall get_Position (
        /*[out,retval]*/ long * Position ) = 0;
      virtual HRESULT __stdcall get_TickInnerLength (
        /*[out,retval]*/ long * TickInnerLength ) = 0;
      virtual HRESULT __stdcall put_TickInnerLength (
        /*[in]*/ long TickInnerLength ) = 0;
      virtual HRESULT __stdcall get_TickLength (
        /*[out,retval]*/ long * TickLength ) = 0;
      virtual HRESULT __stdcall put_TickLength (
        /*[in]*/ long TickLength ) = 0;
      virtual HRESULT __stdcall get_TickOnLabelsOnly (
        /*[out,retval]*/ VARIANT_BOOL * TickOnLabelsOnly ) = 0;
      virtual HRESULT __stdcall put_TickOnLabelsOnly (
        /*[in]*/ VARIANT_BOOL TickOnLabelsOnly ) = 0;
      virtual HRESULT __stdcall get_Ticks (
        /*[out,retval]*/ struct IPen * * Ticks ) = 0;
      virtual HRESULT __stdcall get_TicksInner (
        /*[out,retval]*/ struct IPen * * TicksInner ) = 0;
      virtual HRESULT __stdcall get_Title (
        /*[out,retval]*/ struct IAxisTitle * * Title ) = 0;
      virtual HRESULT __stdcall get_TitleSize (
        /*[out,retval]*/ long * TitleSize ) = 0;
      virtual HRESULT __stdcall put_TitleSize (
        /*[in]*/ long TitleSize ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * Visible ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL Visible ) = 0;
      virtual HRESULT __stdcall raw_AdjustMaxMin ( ) = 0;
      virtual HRESULT __stdcall raw_CalcXPosValue (
        /*[in]*/ double SomeValue,
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall raw_CalcYPosValue (
        /*[in]*/ double SomeValue,
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall raw_CalcXSizeValue (
        /*[in]*/ double SomeValue,
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall raw_CalcYSizeValue (
        /*[in]*/ double SomeValue,
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall raw_CalcPosPoint (
        /*[in]*/ long SomeValue,
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall raw_Clicked (
        /*[in]*/ long XCoord,
        /*[in]*/ long YCoord,
        /*[out,retval]*/ VARIANT_BOOL * Y ) = 0;
      virtual HRESULT __stdcall raw_CustomDraw (
        /*[in]*/ long APosLabels,
        /*[in]*/ long APosTitle,
        /*[in]*/ long APosAxis,
        /*[in]*/ VARIANT_BOOL GridVisible ) = 0;
      virtual HRESULT __stdcall raw_IsDateTime (
        /*[out,retval]*/ VARIANT_BOOL * IsDateTime ) = 0;
      virtual HRESULT __stdcall raw_MaxXValue (
        /*[out,retval]*/ double * MaxXValue ) = 0;
      virtual HRESULT __stdcall raw_MaxYValue (
        /*[out,retval]*/ double * MaxYValue ) = 0;
      virtual HRESULT __stdcall raw_MinXValue (
        /*[out,retval]*/ double * MinXValue ) = 0;
      virtual HRESULT __stdcall raw_MinYValue (
        /*[out,retval]*/ double * MinYValue ) = 0;
      virtual HRESULT __stdcall raw_Scroll (
        /*[in]*/ double Offset,
        /*[in]*/ VARIANT_BOOL CheckLimits ) = 0;
      virtual HRESULT __stdcall raw_SetMinMax (
        /*[in]*/ double AMin,
        /*[in]*/ double AMax ) = 0;
      virtual HRESULT __stdcall get_GridCentered (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_GridCentered (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_PositionPercent (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_PositionPercent (
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall get_StartPosition (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_StartPosition (
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall get_EndPosition (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_EndPosition (
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall get_LogarithmicBase (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_LogarithmicBase (
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall raw_CustomDrawMinMax (
        /*[in]*/ long APosLabels,
        /*[in]*/ long APosTitle,
        /*[in]*/ long APosAxis,
        /*[in]*/ VARIANT_BOOL GridVisible,
        /*[in]*/ double AMinimum,
        /*[in]*/ double AMaximum,
        long AStartPosition,
        long AEndPosition ) = 0;
      virtual HRESULT __stdcall get_MinorGrid (
        /*[out,retval]*/ struct IPen * * Value ) = 0;
      virtual HRESULT __stdcall get_Otherside (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Otherside (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_AxisLink (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall raw_MaxVisibleSeriesValue (
        /*[in]*/ VARIANT_BOOL AllSeries,
        /*[in]*/ long SeriesIndex,
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall raw_MinVisibleSeriesValue (
        /*[in]*/ VARIANT_BOOL AllSeries,
        /*[in]*/ long SeriesIndex,
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall raw_CalcIncrement (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall get_ZPosition (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_ZPosition (
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall get_MaximumOffset (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_MaximumOffset (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_MinimumOffset (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_MinimumOffset (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_GridZPosition (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_GridZPosition (
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall get_PositionUnits (
        /*[out,retval]*/ enum EPositionUnits * Value ) = 0;
      virtual HRESULT __stdcall put_PositionUnits (
        /*[in]*/ enum EPositionUnits Value ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_IStartPos (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_IEndPos (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_IAxisSize (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_Grid (
        /*[out,retval]*/ struct IAxisGridPen * * Value ) = 0;
      virtual HRESULT __stdcall get_MaximumRound (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_MaximumRound (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_MinimumRound (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_MinimumRound (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
};

struct __declspec(uuid("49ab5e31-c5cc-462e-9850-07305b51a936"))
IAxisLabels : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetMultiline,put=PutMultiline))
    VARIANT_BOOL Multiline;
    __declspec(property(get=GetExponent,put=PutExponent))
    VARIANT_BOOL Exponent;
    __declspec(property(get=GetAlign,put=PutAlign))
    enum EAxisLabelAlign Align;
    __declspec(property(get=GetValueFormat,put=PutValueFormat))
    _bstr_t ValueFormat;
    __declspec(property(get=GetDateTimeFormat,put=PutDateTimeFormat))
    _bstr_t DateTimeFormat;
    __declspec(property(get=GetFormat))
    ITeeCustomShapePtr Format;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetAngle,put=PutAngle))
    long Angle;
    __declspec(property(get=GetFont))
    ITeeFontPtr Font;
    __declspec(property(get=GetOnAxis,put=PutOnAxis))
    VARIANT_BOOL OnAxis;
    __declspec(property(get=GetSeparation,put=PutSeparation))
    long Separation;
    __declspec(property(get=GetSize,put=PutSize))
    long Size;
    __declspec(property(get=GetStyle,put=PutStyle))
    enum EAxisLabelStyle Style;
    __declspec(property(get=GetItem))
    IAxisLabelsItemPtr Item[];
    __declspec(property(get=GetAlternate,put=PutAlternate))
    VARIANT_BOOL Alternate;
    __declspec(property(get=GetAutomatic,put=PutAutomatic))
    VARIANT_BOOL Automatic;
    __declspec(property(get=GetRoundFirstLabel,put=PutRoundFirstLabel))
    VARIANT_BOOL RoundFirstLabel;

    //
    // Wrapper methods for error-handling
    //

    long GetAngle ( );
    void PutAngle (
        long Angle );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL Visible );
    _bstr_t GetDateTimeFormat ( );
    void PutDateTimeFormat (
        _bstr_t DateTimeFormat );
    ITeeFontPtr GetFont ( );
    _bstr_t FormattedValue (
        double SomeValue );
    long GetPos ( );
    long Height (
        double SomeValue );
    long MaxWidth ( );
    VARIANT_BOOL GetOnAxis ( );
    void PutOnAxis (
        VARIANT_BOOL OnAxis );
    VARIANT_BOOL GetRoundFirstLabel ( );
    void PutRoundFirstLabel (
        VARIANT_BOOL RoundFirstLabel );
    long GetSeparation ( );
    void PutSeparation (
        long Separation );
    long GetSize ( );
    void PutSize (
        long Size );
    enum EAxisLabelStyle GetStyle ( );
    void PutStyle (
        enum EAxisLabelStyle Style );
    _bstr_t GetValueFormat ( );
    void PutValueFormat (
        _bstr_t ValueFormat );
    long Width (
        double SomeValue );
    VARIANT_BOOL GetMultiline ( );
    void PutMultiline (
        VARIANT_BOOL Value );
    HRESULT TeeSplitInLines (
        BSTR * St,
        _bstr_t Separator );
    VARIANT_BOOL GetExponent ( );
    void PutExponent (
        VARIANT_BOOL Value );
    enum EAxisLabelAlign GetAlign ( );
    void PutAlign (
        enum EAxisLabelAlign Value );
    ITeeCustomShapePtr GetFormat ( );
    long Add (
        double Value,
        _bstr_t Text );
    IAxisLabelsItemPtr GetItem (
        long Index );
    HRESULT Clear ( );
    long Count ( );
    VARIANT_BOOL GetAlternate ( );
    void PutAlternate (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetAutomatic ( );
    void PutAutomatic (
        VARIANT_BOOL Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Angle (
        /*[out,retval]*/ long * Angle ) = 0;
      virtual HRESULT __stdcall put_Angle (
        /*[in]*/ long Angle ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * Visible ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL Visible ) = 0;
      virtual HRESULT __stdcall get_DateTimeFormat (
        /*[out,retval]*/ BSTR * DateTimeFormat ) = 0;
      virtual HRESULT __stdcall put_DateTimeFormat (
        /*[in]*/ BSTR DateTimeFormat ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ struct ITeeFont * * Font ) = 0;
      virtual HRESULT __stdcall raw_FormattedValue (
        /*[in]*/ double SomeValue,
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall raw_GetPos (
        /*[out,retval]*/ long * GetPos ) = 0;
      virtual HRESULT __stdcall raw_Height (
        /*[in]*/ double SomeValue,
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall raw_MaxWidth (
        /*[out,retval]*/ long * MaxWidth ) = 0;
      virtual HRESULT __stdcall get_OnAxis (
        /*[out,retval]*/ VARIANT_BOOL * OnAxis ) = 0;
      virtual HRESULT __stdcall put_OnAxis (
        /*[in]*/ VARIANT_BOOL OnAxis ) = 0;
      virtual HRESULT __stdcall get_RoundFirstLabel (
        /*[out,retval]*/ VARIANT_BOOL * RoundFirstLabel ) = 0;
      virtual HRESULT __stdcall put_RoundFirstLabel (
        /*[in]*/ VARIANT_BOOL RoundFirstLabel ) = 0;
      virtual HRESULT __stdcall get_Separation (
        /*[out,retval]*/ long * Separation ) = 0;
      virtual HRESULT __stdcall put_Separation (
        /*[in]*/ long Separation ) = 0;
      virtual HRESULT __stdcall get_Size (
        /*[out,retval]*/ long * Size ) = 0;
      virtual HRESULT __stdcall put_Size (
        /*[in]*/ long Size ) = 0;
      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ enum EAxisLabelStyle * Style ) = 0;
      virtual HRESULT __stdcall put_Style (
        /*[in]*/ enum EAxisLabelStyle Style ) = 0;
      virtual HRESULT __stdcall get_ValueFormat (
        /*[out,retval]*/ BSTR * ValueFormat ) = 0;
      virtual HRESULT __stdcall put_ValueFormat (
        /*[in]*/ BSTR ValueFormat ) = 0;
      virtual HRESULT __stdcall raw_Width (
        /*[in]*/ double SomeValue,
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_Multiline (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Multiline (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall raw_TeeSplitInLines (
        /*[in,out]*/ BSTR * St,
        /*[in]*/ BSTR Separator ) = 0;
      virtual HRESULT __stdcall get_Exponent (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Exponent (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_Align (
        /*[out,retval]*/ enum EAxisLabelAlign * Value ) = 0;
      virtual HRESULT __stdcall put_Align (
        /*[in]*/ enum EAxisLabelAlign Value ) = 0;
      virtual HRESULT __stdcall get_Format (
        /*[out,retval]*/ struct ITeeCustomShape * * Value ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ double Value,
        /*[in]*/ BSTR Text,
        /*[out,retval]*/ long * retVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IAxisLabelsItem * * Value ) = 0;
      virtual HRESULT __stdcall raw_Clear ( ) = 0;
      virtual HRESULT __stdcall raw_Count (
        /*[out,retval]*/ long * retVal ) = 0;
      virtual HRESULT __stdcall get_Alternate (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Alternate (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_Automatic (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Automatic (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
};

struct __declspec(uuid("03d14814-70d1-4b2f-a854-4263d041aae8"))
IAxisTitle : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAngle,put=PutAngle))
    long Angle;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetFont))
    ITeeFontPtr Font;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;

    //
    // Wrapper methods for error-handling
    //

    long GetAngle ( );
    void PutAngle (
        long Angle );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t Caption );
    ITeeFontPtr GetFont ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL Value );
    VARIANT_BOOL Clicked (
        long X,
        long Y );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Angle (
        /*[out,retval]*/ long * Angle ) = 0;
      virtual HRESULT __stdcall put_Angle (
        /*[in]*/ long Angle ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * Caption ) = 0;
      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR Caption ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ struct ITeeFont * * Font ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall raw_Clicked (
        /*[in]*/ long X,
        /*[in]*/ long Y,
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
};

struct __declspec(uuid("f75284f3-50cd-441c-b56a-782cbe93c83e"))
ITeeCustomShape : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetGradient))
    IGradientPtr Gradient;
    __declspec(property(get=GetShadowColor,put=PutShadowColor))
    OLE_COLOR ShadowColor;
    __declspec(property(get=GetShapeStyle,put=PutShapeStyle))
    enum EChartObjectShapeStyle ShapeStyle;
    __declspec(property(get=GetFont))
    ITeeFontPtr Font;
    __declspec(property(get=GetShapeBounds))
    ITeeRectPtr ShapeBounds;
    __declspec(property(get=GetShadow))
    ITeeShadowPtr Shadow;
    __declspec(property(get=GetRoundSize,put=PutRoundSize))
    long RoundSize;
    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;
    __declspec(property(get=GetPen))
    IPenPtr Pen;
    __declspec(property(get=GetPicture))
    IBackImagePtr Picture;
    __declspec(property(get=GetShadowSize,put=PutShadowSize))
    long ShadowSize;
    __declspec(property(get=GetTransparent,put=PutTransparent))
    VARIANT_BOOL Transparent;
    __declspec(property(get=GetBevel,put=PutBevel))
    enum EPanelBevel Bevel;
    __declspec(property(get=GetBevelWidth,put=PutBevelWidth))
    long BevelWidth;
    __declspec(property(get=GetTransparency,put=PutTransparency))
    long Transparency;

    //
    // Wrapper methods for error-handling
    //

    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR Value );
    ITeeFontPtr GetFont ( );
    IGradientPtr GetGradient ( );
    long GetShadowSize ( );
    void PutShadowSize (
        long Value );
    OLE_COLOR GetShadowColor ( );
    void PutShadowColor (
        OLE_COLOR Value );
    VARIANT_BOOL GetTransparent ( );
    void PutTransparent (
        VARIANT_BOOL Value );
    enum EChartObjectShapeStyle GetShapeStyle ( );
    void PutShapeStyle (
        enum EChartObjectShapeStyle Value );
    long GetTransparency ( );
    void PutTransparency (
        long Value );
    ITeeRectPtr GetShapeBounds ( );
    enum EPanelBevel GetBevel ( );
    void PutBevel (
        enum EPanelBevel Value );
    long GetBevelWidth ( );
    void PutBevelWidth (
        long Value );
    HRESULT ShowEditorShape ( );
    ITeeShadowPtr GetShadow ( );
    long GetRoundSize ( );
    void PutRoundSize (
        long Value );
    IPenPtr GetPen ( );
    IBackImagePtr GetPicture ( );
    HRESULT Show ( );
    HRESULT Hide ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * Value ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR Value ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ struct ITeeFont * * Font ) = 0;
      virtual HRESULT __stdcall get_Gradient (
        /*[out,retval]*/ struct IGradient * * Value ) = 0;
      virtual HRESULT __stdcall get_ShadowSize (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_ShadowSize (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_ShadowColor (
        /*[out,retval]*/ OLE_COLOR * Value ) = 0;
      virtual HRESULT __stdcall put_ShadowColor (
        /*[in]*/ OLE_COLOR Value ) = 0;
      virtual HRESULT __stdcall get_Transparent (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Transparent (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_ShapeStyle (
        /*[out,retval]*/ enum EChartObjectShapeStyle * Value ) = 0;
      virtual HRESULT __stdcall put_ShapeStyle (
        /*[in]*/ enum EChartObjectShapeStyle Value ) = 0;
      virtual HRESULT __stdcall get_Transparency (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Transparency (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_ShapeBounds (
        /*[out,retval]*/ struct ITeeRect * * Value ) = 0;
      virtual HRESULT __stdcall get_Bevel (
        /*[out,retval]*/ enum EPanelBevel * Value ) = 0;
      virtual HRESULT __stdcall put_Bevel (
        /*[in]*/ enum EPanelBevel Value ) = 0;
      virtual HRESULT __stdcall get_BevelWidth (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_BevelWidth (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_ShowEditorShape ( ) = 0;
      virtual HRESULT __stdcall get_Shadow (
        /*[out,retval]*/ struct ITeeShadow * * Value ) = 0;
      virtual HRESULT __stdcall get_RoundSize (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_RoundSize (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_Pen (
        /*[out,retval]*/ struct IPen * * Value ) = 0;
      virtual HRESULT __stdcall get_Picture (
        /*[out,retval]*/ struct IBackImage * * Value ) = 0;
      virtual HRESULT __stdcall raw_Show ( ) = 0;
      virtual HRESULT __stdcall raw_Hide ( ) = 0;
};

struct __declspec(uuid("36fd3a7b-2815-4cb4-925b-b64caaa6beab"))
ITeeShapePosition : ITeeCustomShape
{
    //
    // Property data
    //

    __declspec(property(get=GetLeft,put=PutLeft))
    long Left;
    __declspec(property(get=GetTop,put=PutTop))
    long Top;
    __declspec(property(get=GetCustomPosition,put=PutCustomPosition))
    VARIANT_BOOL CustomPosition;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetCustomPosition ( );
    void PutCustomPosition (
        VARIANT_BOOL Value );
    long GetLeft ( );
    void PutLeft (
        long Value );
    long GetTop ( );
    void PutTop (
        long Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_CustomPosition (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_CustomPosition (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ long Value ) = 0;
};

struct __declspec(uuid("4488f2a6-57e7-4080-9f64-a30684c3bb02"))
ITitles : ITeeShapePosition
{
    //
    // Property data
    //

    __declspec(property(get=GetAdjustFrame,put=PutAdjustFrame))
    VARIANT_BOOL AdjustFrame;
    __declspec(property(get=GetAlignment,put=PutAlignment))
    enum ETitleAlignment Alignment;
    __declspec(property(get=GetBrush))
    IBrushPtr Brush;
    __declspec(property(get=GetFrame))
    IPenPtr Frame;
    __declspec(property(get=GetText))
    IStringsPtr Text;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetVertMargin,put=PutVertMargin))
    long VertMargin;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetAdjustFrame ( );
    void PutAdjustFrame (
        VARIANT_BOOL AdjustFrame );
    enum ETitleAlignment GetAlignment ( );
    void PutAlignment (
        enum ETitleAlignment Alignment );
    IBrushPtr GetBrush ( );
    IPenPtr GetFrame ( );
    IStringsPtr GetText ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL Visible );
    VARIANT_BOOL Clicked (
        long X,
        long Y );
    HRESULT Clear ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t Value );
    long GetVertMargin ( );
    void PutVertMargin (
        long Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_AdjustFrame (
        /*[out,retval]*/ VARIANT_BOOL * AdjustFrame ) = 0;
      virtual HRESULT __stdcall put_AdjustFrame (
        /*[in]*/ VARIANT_BOOL AdjustFrame ) = 0;
      virtual HRESULT __stdcall get_Alignment (
        /*[out,retval]*/ enum ETitleAlignment * Alignment ) = 0;
      virtual HRESULT __stdcall put_Alignment (
        /*[in]*/ enum ETitleAlignment Alignment ) = 0;
      virtual HRESULT __stdcall get_Brush (
        /*[out,retval]*/ struct IBrush * * Brush ) = 0;
      virtual HRESULT __stdcall get_Frame (
        /*[out,retval]*/ struct IPen * * Frame ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ struct IStrings * * Text ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * Visible ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL Visible ) = 0;
      virtual HRESULT __stdcall raw_Clicked (
        /*[in]*/ long X,
        /*[in]*/ long Y,
        /*[out,retval]*/ VARIANT_BOOL * retVal ) = 0;
      virtual HRESULT __stdcall raw_Clear ( ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR Value ) = 0;
      virtual HRESULT __stdcall get_VertMargin (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_VertMargin (
        /*[in]*/ long Value ) = 0;
};

struct __declspec(uuid("58ec1e68-c9d7-4d15-9f75-31b72bfd4949"))
ICalendarCell : ITeeCustomShape
{
    //
    // Property data
    //

    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
};

struct __declspec(uuid("74538277-5473-4ddb-94b3-442590cc03d9"))
ICalendarCellUpper : ICalendarCell
{
    //
    // Property data
    //

    __declspec(property(get=GetFormat,put=PutFormat))
    _bstr_t Format;
    __declspec(property(get=GetUpperCase,put=PutUpperCase))
    VARIANT_BOOL UpperCase;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetFormat ( );
    void PutFormat (
        _bstr_t Value );
    VARIANT_BOOL GetUpperCase ( );
    void PutUpperCase (
        VARIANT_BOOL Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Format (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall put_Format (
        /*[in]*/ BSTR Value ) = 0;
      virtual HRESULT __stdcall get_UpperCase (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_UpperCase (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
};

struct __declspec(uuid("10c77e47-24a3-4994-8f82-94ea32890ea7"))
ICalendarSeries : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetDate,put=PutDate))
    double Date;
    __declspec(property(get=GetDays))
    ICalendarCellPtr Days;
    __declspec(property(get=GetMonths))
    ICalendarCellUpperPtr Months;
    __declspec(property(get=GetTrailing))
    ICalendarCellPtr Trailing;
    __declspec(property(get=GetSunday))
    ICalendarCellPtr Sunday;
    __declspec(property(get=GetToday))
    ICalendarCellPtr Today;
    __declspec(property(get=GetWeekdays))
    ICalendarCellUpperPtr Weekdays;
    __declspec(property(get=GetNextButtonVisible,put=PutNextButtonVisible))
    VARIANT_BOOL NextButtonVisible;
    __declspec(property(get=GetPreviousButtonVisible,put=PutPreviousButtonVisible))
    VARIANT_BOOL PreviousButtonVisible;

    //
    // Wrapper methods for error-handling
    //

    double GetDate ( );
    void PutDate (
        double Value );
    ICalendarCellPtr GetDays ( );
    ICalendarCellUpperPtr GetMonths ( );
    ICalendarCellPtr GetTrailing ( );
    ICalendarCellPtr GetSunday ( );
    ICalendarCellPtr GetToday ( );
    ICalendarCellUpperPtr GetWeekdays ( );
    HRESULT NextMonth ( );
    HRESULT PreviousMonth ( );
    struct TeeRect RectCell (
        long Column,
        long Row );
    long Rows ( );
    struct TeeRect SeriesRect ( );
    VARIANT_BOOL GetNextButtonVisible ( );
    void PutNextButtonVisible (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetPreviousButtonVisible ( );
    void PutPreviousButtonVisible (
        VARIANT_BOOL Value );
    VARIANT_BOOL ClickedDate (
        long X,
        long Y,
        DATE * ADate );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Date (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_Date (
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall get_Days (
        /*[out,retval]*/ struct ICalendarCell * * Value ) = 0;
      virtual HRESULT __stdcall get_Months (
        /*[out,retval]*/ struct ICalendarCellUpper * * Value ) = 0;
      virtual HRESULT __stdcall get_Trailing (
        /*[out,retval]*/ struct ICalendarCell * * Value ) = 0;
      virtual HRESULT __stdcall get_Sunday (
        /*[out,retval]*/ struct ICalendarCell * * Value ) = 0;
      virtual HRESULT __stdcall get_Today (
        /*[out,retval]*/ struct ICalendarCell * * Value ) = 0;
      virtual HRESULT __stdcall get_Weekdays (
        /*[out,retval]*/ struct ICalendarCellUpper * * Value ) = 0;
      virtual HRESULT __stdcall raw_NextMonth ( ) = 0;
      virtual HRESULT __stdcall raw_PreviousMonth ( ) = 0;
      virtual HRESULT __stdcall raw_RectCell (
        /*[in]*/ long Column,
        /*[in]*/ long Row,
        /*[out,retval]*/ struct TeeRect * result ) = 0;
      virtual HRESULT __stdcall raw_Rows (
        /*[out,retval]*/ long * result ) = 0;
      virtual HRESULT __stdcall raw_SeriesRect (
        /*[out,retval]*/ struct TeeRect * result ) = 0;
      virtual HRESULT __stdcall get_NextButtonVisible (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_NextButtonVisible (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_PreviousButtonVisible (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_PreviousButtonVisible (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall raw_ClickedDate (
        /*[in]*/ long X,
        /*[in]*/ long Y,
        /*[out]*/ DATE * ADate,
        /*[out,retval]*/ VARIANT_BOOL * result ) = 0;
};

struct __declspec(uuid("eb29ab58-e3be-4805-847c-74bb83ed40d1"))
ITeeShapePanel : ITeeShapePosition
{
    //
    // Property data
    //

    __declspec(property(get=GetFrame))
    IPenPtr Frame;

    //
    // Wrapper methods for error-handling
    //

    IPenPtr GetFrame ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Frame (
        /*[out,retval]*/ struct IPen * * Value ) = 0;
};

struct __declspec(uuid("65602b2e-8f95-4a4a-9ce2-2331169a5909"))
IAxisLabelsItem : ITeeCustomShape
{
    //
    // Property data
    //

    __declspec(property(get=GetValue,put=PutValue))
    double Value;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;

    //
    // Wrapper methods for error-handling
    //

    double GetValue ( );
    void PutValue (
        double Value );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t Value );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR Value ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
};

struct __declspec(uuid("af553d41-9d55-47c5-8350-793033c2b78b"))
IMarksItem : ITeeCustomShape
{
    //
    // Property data
    //

    __declspec(property(get=GetText))
    IStringsPtr Text;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetBrush))
    IBrushPtr Brush;

    //
    // Wrapper methods for error-handling
    //

    IStringsPtr GetText ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL Value );
    IBrushPtr GetBrush ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ struct IStrings * * Value ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_Brush (
        /*[out,retval]*/ struct IBrush * * Value ) = 0;
};

struct __declspec(uuid("a6e6ca47-7656-4e3e-8190-e31264f5d233"))
IOrgShape : ITeeShapePanel
{};

struct __declspec(uuid("d0b1d417-532b-43b2-bd45-041b7ae7191c"))
IOrgItem : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetSeries))
    _variant_t Series;
    __declspec(property(get=GetSuperior,put=PutSuperior))
    long Superior;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetFormat))
    IOrgShapePtr Format;

    //
    // Wrapper methods for error-handling
    //

    long AddChild (
        _bstr_t Text );
    long AddBrother (
        _bstr_t Text );
    _variant_t GetSeries ( );
    long GetSuperior ( );
    void PutSuperior (
        long Value );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t Value );
    IOrgShapePtr GetFormat ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_AddChild (
        /*[in]*/ BSTR Text,
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall raw_AddBrother (
        /*[in]*/ BSTR Text,
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_Series (
        /*[out,retval]*/ VARIANT * Value ) = 0;
      virtual HRESULT __stdcall get_Superior (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Superior (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR Value ) = 0;
      virtual HRESULT __stdcall get_Format (
        /*[out,retval]*/ struct IOrgShape * * Value ) = 0;
};

struct __declspec(uuid("d8f55350-a1ec-4459-aa69-dffcdaf2992a"))
IOrgItemCollection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItems))
    IOrgItemPtr Items[];

    //
    // Wrapper methods for error-handling
    //

    IOrgItemPtr GetItems (
        long Index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Items (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IOrgItem * * Value ) = 0;
};

struct __declspec(uuid("11950626-7e9b-4473-b01e-caf6c4648c11"))
IOrgSeries : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBounds))
    struct TeeRect Bounds;
    __declspec(property(get=GetItem))
    IOrgItemPtr Item[];
    __declspec(property(get=GetFormat))
    IOrgShapePtr Format;
    __declspec(property(get=GetItems))
    IOrgItemCollectionPtr Items;
    __declspec(property(get=GetLineStyle,put=PutLineStyle))
    enum EOrgLineStyle LineStyle;
    __declspec(property(get=GetSpacing))
    ISpacingPtr Spacing;

    //
    // Wrapper methods for error-handling
    //

    long Add (
        _bstr_t Text,
        long Superior );
    long FirstChild (
        long ValueIndex );
    struct TeeRect GetBounds ( );
    IOrgItemPtr GetItem (
        long Index );
    IOrgShapePtr GetFormat ( );
    IOrgItemCollectionPtr GetItems ( );
    enum EOrgLineStyle GetLineStyle ( );
    void PutLineStyle (
        enum EOrgLineStyle Value );
    ISpacingPtr GetSpacing ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ BSTR Text,
        /*[in]*/ long Superior,
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall raw_FirstChild (
        /*[in]*/ long ValueIndex,
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_Bounds (
        /*[out,retval]*/ struct TeeRect * Value ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IOrgItem * * Value ) = 0;
      virtual HRESULT __stdcall get_Format (
        /*[out,retval]*/ struct IOrgShape * * Value ) = 0;
      virtual HRESULT __stdcall get_Items (
        /*[out,retval]*/ struct IOrgItemCollection * * Value ) = 0;
      virtual HRESULT __stdcall get_LineStyle (
        /*[out,retval]*/ enum EOrgLineStyle * Value ) = 0;
      virtual HRESULT __stdcall put_LineStyle (
        /*[in]*/ enum EOrgLineStyle Value ) = 0;
      virtual HRESULT __stdcall get_Spacing (
        /*[out,retval]*/ struct ISpacing * * Value ) = 0;
};

struct __declspec(uuid("21343ba4-8a97-4c6d-9a39-7c68be79baf7"))
ITextShape : ITeeShapePosition
{
    //
    // Property data
    //

    __declspec(property(get=GetAutoSize,put=PutAutoSize))
    VARIANT_BOOL AutoSize;
    __declspec(property(get=GetClipText,put=PutClipText))
    VARIANT_BOOL ClipText;
    __declspec(property(get=GetCursor,put=PutCursor))
    short Cursor;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetTextAlignment,put=PutTextAlignment))
    enum ETitleAlignment TextAlignment;
    __declspec(property(get=GetMargins))
    IMarginsPtr Margins;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetAutoSize ( );
    void PutAutoSize (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetClipText ( );
    void PutClipText (
        VARIANT_BOOL Value );
    short GetCursor ( );
    void PutCursor (
        short Value );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t Value );
    enum ETitleAlignment GetTextAlignment ( );
    void PutTextAlignment (
        enum ETitleAlignment Value );
    IMarginsPtr GetMargins ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_AutoSize (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_AutoSize (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_ClipText (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_ClipText (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_Cursor (
        /*[out,retval]*/ short * Value ) = 0;
      virtual HRESULT __stdcall put_Cursor (
        /*[in]*/ short Value ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR Value ) = 0;
      virtual HRESULT __stdcall get_TextAlignment (
        /*[out,retval]*/ enum ETitleAlignment * Value ) = 0;
      virtual HRESULT __stdcall put_TextAlignment (
        /*[in]*/ enum ETitleAlignment Value ) = 0;
      virtual HRESULT __stdcall get_Margins (
        /*[out,retval]*/ struct IMargins * * Value ) = 0;
};

struct __declspec(uuid("e11c0eda-65c9-4966-ba60-57ea7adf530f"))
IWall : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBrush))
    IBrushPtr Brush;
    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;
    __declspec(property(get=GetPen))
    IPenPtr Pen;
    __declspec(property(get=GetSize,put=PutSize))
    long Size;
    __declspec(property(get=GetTransparent,put=PutTransparent))
    VARIANT_BOOL Transparent;
    __declspec(property(get=GetGradient))
    IGradientPtr Gradient;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetTransparency,put=PutTransparency))
    long Transparency;
    __declspec(property(get=GetDark3D,put=PutDark3D))
    VARIANT_BOOL Dark3D;
    __declspec(property(get=GetAutoHide,put=PutAutoHide))
    VARIANT_BOOL AutoHide;
    __declspec(property(get=GetPicture))
    IBackImagePtr Picture;

    //
    // Wrapper methods for error-handling
    //

    IBrushPtr GetBrush ( );
    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR Color );
    IPenPtr GetPen ( );
    long GetSize ( );
    void PutSize (
        long Size );
    VARIANT_BOOL GetTransparent ( );
    void PutTransparent (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetDark3D ( );
    void PutDark3D (
        VARIANT_BOOL Value );
    IGradientPtr GetGradient ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL Value );
    long GetTransparency ( );
    void PutTransparency (
        long Value );
    VARIANT_BOOL GetAutoHide ( );
    void PutAutoHide (
        VARIANT_BOOL Value );
    IBackImagePtr GetPicture ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Brush (
        /*[out,retval]*/ struct IBrush * * Brush ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * Color ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR Color ) = 0;
      virtual HRESULT __stdcall get_Pen (
        /*[out,retval]*/ struct IPen * * Pen ) = 0;
      virtual HRESULT __stdcall get_Size (
        /*[out,retval]*/ long * Size ) = 0;
      virtual HRESULT __stdcall put_Size (
        /*[in]*/ long Size ) = 0;
      virtual HRESULT __stdcall get_Transparent (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Transparent (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_Dark3D (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Dark3D (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_Gradient (
        /*[out,retval]*/ struct IGradient * * Value ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_Transparency (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Transparency (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_AutoHide (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_AutoHide (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_Picture (
        /*[out,retval]*/ struct IBackImage * * Value ) = 0;
};

struct __declspec(uuid("6978d18c-ea1a-4302-a1ae-f76c12a60eaf"))
IWalls : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBottom))
    IWallPtr Bottom;
    __declspec(property(get=GetLeft))
    IWallPtr Left;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetBackColor,put=PutBackColor))
    OLE_COLOR BackColor;
    __declspec(property(get=GetBack))
    IWallPtr Back;
    __declspec(property(get=GetRight))
    IWallPtr Right;
    __declspec(property(put=PutSize))
    long Size;

    //
    // Wrapper methods for error-handling
    //

    IWallPtr GetBottom ( );
    IWallPtr GetLeft ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL Visible );
    OLE_COLOR GetBackColor ( );
    void PutBackColor (
        OLE_COLOR BackColor );
    IWallPtr GetBack ( );
    IWallPtr GetRight ( );
    void PutSize (
        long _arg1 );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Bottom (
        /*[out,retval]*/ struct IWall * * Bottom ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ struct IWall * * Left ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * Visible ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL Visible ) = 0;
      virtual HRESULT __stdcall get_BackColor (
        /*[out,retval]*/ OLE_COLOR * BackColor ) = 0;
      virtual HRESULT __stdcall put_BackColor (
        /*[in]*/ OLE_COLOR BackColor ) = 0;
      virtual HRESULT __stdcall get_Back (
        /*[out,retval]*/ struct IWall * * Value ) = 0;
      virtual HRESULT __stdcall get_Right (
        /*[out,retval]*/ struct IWall * * Value ) = 0;
      virtual HRESULT __stdcall put_Size (
        /*[in]*/ long _arg1 ) = 0;
};

struct __declspec(uuid("e0d983e0-ee24-445b-9e93-ee6b4d342786"))
IGradient : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetDirection,put=PutDirection))
    enum EGradientDirection Direction;
    __declspec(property(get=GetStartColor,put=PutStartColor))
    OLE_COLOR StartColor;
    __declspec(property(get=GetEndColor,put=PutEndColor))
    OLE_COLOR EndColor;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetMidColor,put=PutMidColor))
    OLE_COLOR MidColor;
    __declspec(property(get=GetRadialX,put=PutRadialX))
    long RadialX;
    __declspec(property(get=GetRadialY,put=PutRadialY))
    long RadialY;
    __declspec(property(get=GetAngle,put=PutAngle))
    long Angle;
    __declspec(property(get=GetBalance,put=PutBalance))
    long Balance;
    __declspec(property(get=GetSubGradient))
    ISubGradientPtr SubGradient;

    //
    // Wrapper methods for error-handling
    //

    enum EGradientDirection GetDirection ( );
    void PutDirection (
        enum EGradientDirection Direction );
    OLE_COLOR GetStartColor ( );
    void PutStartColor (
        OLE_COLOR StartColor );
    OLE_COLOR GetEndColor ( );
    void PutEndColor (
        OLE_COLOR EndColor );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL Visible );
    OLE_COLOR GetMidColor ( );
    void PutMidColor (
        OLE_COLOR Value );
    long GetRadialX ( );
    void PutRadialX (
        long Value );
    long GetRadialY ( );
    void PutRadialY (
        long Value );
    long GetBalance ( );
    void PutBalance (
        long Value );
    HRESULT ShowEditor (
        VARIANT_BOOL OnlyStartColor );
    long GetAngle ( );
    void PutAngle (
        long Value );
    ISubGradientPtr GetSubGradient ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Direction (
        /*[out,retval]*/ enum EGradientDirection * Direction ) = 0;
      virtual HRESULT __stdcall put_Direction (
        /*[in]*/ enum EGradientDirection Direction ) = 0;
      virtual HRESULT __stdcall get_StartColor (
        /*[out,retval]*/ OLE_COLOR * StartColor ) = 0;
      virtual HRESULT __stdcall put_StartColor (
        /*[in]*/ OLE_COLOR StartColor ) = 0;
      virtual HRESULT __stdcall get_EndColor (
        /*[out,retval]*/ OLE_COLOR * EndColor ) = 0;
      virtual HRESULT __stdcall put_EndColor (
        /*[in]*/ OLE_COLOR EndColor ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * Visible ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL Visible ) = 0;
      virtual HRESULT __stdcall get_MidColor (
        /*[out,retval]*/ OLE_COLOR * Value ) = 0;
      virtual HRESULT __stdcall put_MidColor (
        /*[in]*/ OLE_COLOR Value ) = 0;
      virtual HRESULT __stdcall get_RadialX (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_RadialX (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_RadialY (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_RadialY (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_Balance (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Balance (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_ShowEditor (
        /*[in]*/ VARIANT_BOOL OnlyStartColor ) = 0;
      virtual HRESULT __stdcall get_Angle (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Angle (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_SubGradient (
        /*[out,retval]*/ struct ISubGradient * * Value ) = 0;
};

struct __declspec(uuid("193fd985-9667-4cfc-b92b-bbf3d1a3e045"))
IPanel : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBackImageInside,put=PutBackImageInside))
    VARIANT_BOOL BackImageInside;
    __declspec(property(get=GetBackImageMode,put=PutBackImageMode))
    enum EBackImageMode BackImageMode;
    __declspec(property(get=GetBevelInner,put=PutBevelInner))
    enum EPanelBevel BevelInner;
    __declspec(property(get=GetBevelOuter,put=PutBevelOuter))
    enum EPanelBevel BevelOuter;
    __declspec(property(get=GetBevelWidth,put=PutBevelWidth))
    long BevelWidth;
    __declspec(property(get=GetBevelOffset,put=PutBevelOffset))
    long BevelOffset;
    __declspec(property(get=GetBorderStyle,put=PutBorderStyle))
    enum EBorderStyle BorderStyle;
    __declspec(property(get=GetGradient))
    IGradientPtr Gradient;
    __declspec(property(get=GetMarginLeft,put=PutMarginLeft))
    long MarginLeft;
    __declspec(property(get=GetMarginTop,put=PutMarginTop))
    long MarginTop;
    __declspec(property(get=GetMarginRight,put=PutMarginRight))
    long MarginRight;
    __declspec(property(get=GetMarginBottom,put=PutMarginBottom))
    long MarginBottom;
    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;
    __declspec(property(get=GetMarginUnits,put=PutMarginUnits))
    enum EMarginUnits MarginUnits;
    __declspec(property(get=GetShadow))
    ITeeShadowPtr Shadow;
    __declspec(property(get=GetBorderRound,put=PutBorderRound))
    long BorderRound;
    __declspec(property(get=GetBorder))
    IPenPtr Border;
    __declspec(property(get=GetBackImageTransparent,put=PutBackImageTransparent))
    VARIANT_BOOL BackImageTransparent;
    __declspec(property(get=GetBackImage))
    IBackImagePtr BackImage;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetBackImageInside ( );
    void PutBackImageInside (
        VARIANT_BOOL BackImageInside );
    enum EBackImageMode GetBackImageMode ( );
    void PutBackImageMode (
        enum EBackImageMode BackImageMode );
    enum EPanelBevel GetBevelInner ( );
    void PutBevelInner (
        enum EPanelBevel BevelInner );
    enum EPanelBevel GetBevelOuter ( );
    void PutBevelOuter (
        enum EPanelBevel BevelOuter );
    long GetBevelWidth ( );
    void PutBevelWidth (
        long BevelWidth );
    long GetBevelOffset ( );
    void PutBevelOffset (
        long BevelOffset );
    enum EBorderStyle GetBorderStyle ( );
    void PutBorderStyle (
        enum EBorderStyle BorderStyle );
    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR Color );
    IGradientPtr GetGradient ( );
    long GetMarginLeft ( );
    void PutMarginLeft (
        long MarginLeft );
    long GetMarginTop ( );
    void PutMarginTop (
        long MarginTop );
    long GetMarginRight ( );
    void PutMarginRight (
        long MarginRight );
    long GetMarginBottom ( );
    void PutMarginBottom (
        long MarginBottom );
    HRESULT BackImageClear ( );
    HRESULT BackImageLoad (
        _bstr_t FileName );
    enum EMarginUnits GetMarginUnits ( );
    void PutMarginUnits (
        enum EMarginUnits Value );
    ITeeShadowPtr GetShadow ( );
    long GetBorderRound ( );
    void PutBorderRound (
        long Value );
    IPenPtr GetBorder ( );
    VARIANT_BOOL GetBackImageTransparent ( );
    void PutBackImageTransparent (
        VARIANT_BOOL Value );
    IBackImagePtr GetBackImage ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_BackImageInside (
        /*[out,retval]*/ VARIANT_BOOL * BackImageInside ) = 0;
      virtual HRESULT __stdcall put_BackImageInside (
        /*[in]*/ VARIANT_BOOL BackImageInside ) = 0;
      virtual HRESULT __stdcall get_BackImageMode (
        /*[out,retval]*/ enum EBackImageMode * BackImageMode ) = 0;
      virtual HRESULT __stdcall put_BackImageMode (
        /*[in]*/ enum EBackImageMode BackImageMode ) = 0;
      virtual HRESULT __stdcall get_BevelInner (
        /*[out,retval]*/ enum EPanelBevel * BevelInner ) = 0;
      virtual HRESULT __stdcall put_BevelInner (
        /*[in]*/ enum EPanelBevel BevelInner ) = 0;
      virtual HRESULT __stdcall get_BevelOuter (
        /*[out,retval]*/ enum EPanelBevel * BevelOuter ) = 0;
      virtual HRESULT __stdcall put_BevelOuter (
        /*[in]*/ enum EPanelBevel BevelOuter ) = 0;
      virtual HRESULT __stdcall get_BevelWidth (
        /*[out,retval]*/ long * BevelWidth ) = 0;
      virtual HRESULT __stdcall put_BevelWidth (
        /*[in]*/ long BevelWidth ) = 0;
      virtual HRESULT __stdcall get_BevelOffset (
        /*[out,retval]*/ long * BevelOffset ) = 0;
      virtual HRESULT __stdcall put_BevelOffset (
        /*[in]*/ long BevelOffset ) = 0;
      virtual HRESULT __stdcall get_BorderStyle (
        /*[out,retval]*/ enum EBorderStyle * BorderStyle ) = 0;
      virtual HRESULT __stdcall put_BorderStyle (
        /*[in]*/ enum EBorderStyle BorderStyle ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * Color ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR Color ) = 0;
      virtual HRESULT __stdcall get_Gradient (
        /*[out,retval]*/ struct IGradient * * Gradient ) = 0;
      virtual HRESULT __stdcall get_MarginLeft (
        /*[out,retval]*/ long * MarginLeft ) = 0;
      virtual HRESULT __stdcall put_MarginLeft (
        /*[in]*/ long MarginLeft ) = 0;
      virtual HRESULT __stdcall get_MarginTop (
        /*[out,retval]*/ long * MarginTop ) = 0;
      virtual HRESULT __stdcall put_MarginTop (
        /*[in]*/ long MarginTop ) = 0;
      virtual HRESULT __stdcall get_MarginRight (
        /*[out,retval]*/ long * MarginRight ) = 0;
      virtual HRESULT __stdcall put_MarginRight (
        /*[in]*/ long MarginRight ) = 0;
      virtual HRESULT __stdcall get_MarginBottom (
        /*[out,retval]*/ long * MarginBottom ) = 0;
      virtual HRESULT __stdcall put_MarginBottom (
        /*[in]*/ long MarginBottom ) = 0;
      virtual HRESULT __stdcall raw_BackImageClear ( ) = 0;
      virtual HRESULT __stdcall raw_BackImageLoad (
        /*[in]*/ BSTR FileName ) = 0;
      virtual HRESULT __stdcall get_MarginUnits (
        /*[out,retval]*/ enum EMarginUnits * Value ) = 0;
      virtual HRESULT __stdcall put_MarginUnits (
        /*[in]*/ enum EMarginUnits Value ) = 0;
      virtual HRESULT __stdcall get_Shadow (
        /*[out,retval]*/ struct ITeeShadow * * Value ) = 0;
      virtual HRESULT __stdcall get_BorderRound (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_BorderRound (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct IPen * * Value ) = 0;
      virtual HRESULT __stdcall get_BackImageTransparent (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_BackImageTransparent (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_BackImage (
        /*[out,retval]*/ struct IBackImage * * Value ) = 0;
};

struct __declspec(uuid("461bbbc1-0138-4b40-81c9-e7885afbdd40"))
IPointer : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBrush))
    IBrushPtr Brush;
    __declspec(property(get=GetDraw3D,put=PutDraw3D))
    VARIANT_BOOL Draw3D;
    __declspec(property(get=GetHorizontalSize,put=PutHorizontalSize))
    long HorizontalSize;
    __declspec(property(get=GetVerticalSize,put=PutVerticalSize))
    long VerticalSize;
    __declspec(property(get=GetInflateMargins,put=PutInflateMargins))
    VARIANT_BOOL InflateMargins;
    __declspec(property(get=GetPen))
    IPenPtr Pen;
    __declspec(property(get=GetStyle,put=PutStyle))
    enum EPointerStyle Style;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetDark3D,put=PutDark3D))
    VARIANT_BOOL Dark3D;
    __declspec(property(get=GetShadow))
    ITeeShadowPtr Shadow;
    __declspec(property(get=GetGradient))
    IGradientPtr Gradient;
    __declspec(property(get=GetTransparency,put=PutTransparency))
    long Transparency;

    //
    // Wrapper methods for error-handling
    //

    IBrushPtr GetBrush ( );
    VARIANT_BOOL GetDraw3D ( );
    void PutDraw3D (
        VARIANT_BOOL Draw3D );
    long GetHorizontalSize ( );
    void PutHorizontalSize (
        long HorizontalSize );
    long GetVerticalSize ( );
    void PutVerticalSize (
        long VerticalSize );
    VARIANT_BOOL GetInflateMargins ( );
    void PutInflateMargins (
        VARIANT_BOOL InflateMargins );
    IPenPtr GetPen ( );
    enum EPointerStyle GetStyle ( );
    void PutStyle (
        enum EPointerStyle Style );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL Visible );
    VARIANT_BOOL GetDark3D ( );
    void PutDark3D (
        VARIANT_BOOL Value );
    HRESULT DrawPointer (
        long DC,
        VARIANT_BOOL Is3D,
        long px,
        long py,
        long tmpHoriz,
        long tmpVert,
        OLE_COLOR AColor,
        enum EPointerStyle AStyle );
    IGradientPtr GetGradient ( );
    long GetTransparency ( );
    void PutTransparency (
        long Value );
    ITeeShadowPtr GetShadow ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Brush (
        /*[out,retval]*/ struct IBrush * * Brush ) = 0;
      virtual HRESULT __stdcall get_Draw3D (
        /*[out,retval]*/ VARIANT_BOOL * Draw3D ) = 0;
      virtual HRESULT __stdcall put_Draw3D (
        /*[in]*/ VARIANT_BOOL Draw3D ) = 0;
      virtual HRESULT __stdcall get_HorizontalSize (
        /*[out,retval]*/ long * HorizontalSize ) = 0;
      virtual HRESULT __stdcall put_HorizontalSize (
        /*[in]*/ long HorizontalSize ) = 0;
      virtual HRESULT __stdcall get_VerticalSize (
        /*[out,retval]*/ long * VerticalSize ) = 0;
      virtual HRESULT __stdcall put_VerticalSize (
        /*[in]*/ long VerticalSize ) = 0;
      virtual HRESULT __stdcall get_InflateMargins (
        /*[out,retval]*/ VARIANT_BOOL * InflateMargins ) = 0;
      virtual HRESULT __stdcall put_InflateMargins (
        /*[in]*/ VARIANT_BOOL InflateMargins ) = 0;
      virtual HRESULT __stdcall get_Pen (
        /*[out,retval]*/ struct IPen * * Pen ) = 0;
      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ enum EPointerStyle * Style ) = 0;
      virtual HRESULT __stdcall put_Style (
        /*[in]*/ enum EPointerStyle Style ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * Visible ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL Visible ) = 0;
      virtual HRESULT __stdcall get_Dark3D (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Dark3D (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall raw_DrawPointer (
        /*[in]*/ long DC,
        /*[in]*/ VARIANT_BOOL Is3D,
        /*[in]*/ long px,
        /*[in]*/ long py,
        /*[in]*/ long tmpHoriz,
        /*[in]*/ long tmpVert,
        /*[in]*/ OLE_COLOR AColor,
        /*[in]*/ enum EPointerStyle AStyle ) = 0;
      virtual HRESULT __stdcall get_Gradient (
        /*[out,retval]*/ struct IGradient * * Value ) = 0;
      virtual HRESULT __stdcall get_Transparency (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Transparency (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_Shadow (
        /*[out,retval]*/ struct ITeeShadow * * Value ) = 0;
};

struct __declspec(uuid("fad417ae-d2f3-4886-8541-a4f001792c04"))
ICustomSeries : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPointer))
    IPointerPtr Pointer;
    __declspec(property(get=GetStairs,put=PutStairs))
    VARIANT_BOOL Stairs;
    __declspec(property(get=GetInvertedStairs,put=PutInvertedStairs))
    VARIANT_BOOL InvertedStairs;
    __declspec(property(get=GetLinePen))
    IPenPtr LinePen;
    __declspec(property(get=GetLineBrush,put=PutLineBrush))
    enum EBrushStyle LineBrush;
    __declspec(property(get=GetClickableLine,put=PutClickableLine))
    VARIANT_BOOL ClickableLine;
    __declspec(property(get=GetOutline))
    IPenPtr Outline;
    __declspec(property(get=GetDark3D,put=PutDark3D))
    VARIANT_BOOL Dark3D;
    __declspec(property(get=GetBrush))
    IBrushPtr Brush;
    __declspec(property(get=GetShadow))
    ITeeShadowPtr Shadow;
    __declspec(property(get=GetLineHeight,put=PutLineHeight))
    long LineHeight;
    __declspec(property(get=GetTreatNulls,put=PutTreatNulls))
    enum ETreatNullsStyle TreatNulls;
    __declspec(property(get=GetColorEachLine,put=PutColorEachLine))
    VARIANT_BOOL ColorEachLine;
    __declspec(property(get=GetTransparency,put=PutTransparency))
    long Transparency;

    //
    // Wrapper methods for error-handling
    //

    IPointerPtr GetPointer ( );
    VARIANT_BOOL GetStairs ( );
    void PutStairs (
        VARIANT_BOOL Stairs );
    VARIANT_BOOL GetInvertedStairs ( );
    void PutInvertedStairs (
        VARIANT_BOOL InvertedStairs );
    IPenPtr GetLinePen ( );
    enum EBrushStyle GetLineBrush ( );
    void PutLineBrush (
        enum EBrushStyle LineBrush );
    VARIANT_BOOL GetClickableLine ( );
    void PutClickableLine (
        VARIANT_BOOL ClickableLine );
    long GetLineHeight ( );
    void PutLineHeight (
        long Value );
    VARIANT_BOOL GetDark3D ( );
    void PutDark3D (
        VARIANT_BOOL Value );
    IBrushPtr GetBrush ( );
    VARIANT_BOOL GetColorEachLine ( );
    void PutColorEachLine (
        VARIANT_BOOL Value );
    IPenPtr GetOutline ( );
    long GetTransparency ( );
    void PutTransparency (
        long Value );
    ITeeShadowPtr GetShadow ( );
    enum ETreatNullsStyle GetTreatNulls ( );
    void PutTreatNulls (
        enum ETreatNullsStyle Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Pointer (
        /*[out,retval]*/ struct IPointer * * Pointer ) = 0;
      virtual HRESULT __stdcall get_Stairs (
        /*[out,retval]*/ VARIANT_BOOL * Stairs ) = 0;
      virtual HRESULT __stdcall put_Stairs (
        /*[in]*/ VARIANT_BOOL Stairs ) = 0;
      virtual HRESULT __stdcall get_InvertedStairs (
        /*[out,retval]*/ VARIANT_BOOL * InvertedStairs ) = 0;
      virtual HRESULT __stdcall put_InvertedStairs (
        /*[in]*/ VARIANT_BOOL InvertedStairs ) = 0;
      virtual HRESULT __stdcall get_LinePen (
        /*[out,retval]*/ struct IPen * * LinePen ) = 0;
      virtual HRESULT __stdcall get_LineBrush (
        /*[out,retval]*/ enum EBrushStyle * LineBrush ) = 0;
      virtual HRESULT __stdcall put_LineBrush (
        /*[in]*/ enum EBrushStyle LineBrush ) = 0;
      virtual HRESULT __stdcall get_ClickableLine (
        /*[out,retval]*/ VARIANT_BOOL * ClickableLine ) = 0;
      virtual HRESULT __stdcall put_ClickableLine (
        /*[in]*/ VARIANT_BOOL ClickableLine ) = 0;
      virtual HRESULT __stdcall get_LineHeight (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_LineHeight (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_Dark3D (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Dark3D (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_Brush (
        /*[out,retval]*/ struct IBrush * * Value ) = 0;
      virtual HRESULT __stdcall get_ColorEachLine (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_ColorEachLine (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_Outline (
        /*[out,retval]*/ struct IPen * * Value ) = 0;
      virtual HRESULT __stdcall get_Transparency (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Transparency (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_Shadow (
        /*[out,retval]*/ struct ITeeShadow * * Value ) = 0;
      virtual HRESULT __stdcall get_TreatNulls (
        /*[out,retval]*/ enum ETreatNullsStyle * Value ) = 0;
      virtual HRESULT __stdcall put_TreatNulls (
        /*[in]*/ enum ETreatNullsStyle Value ) = 0;
};

struct __declspec(uuid("c58036b1-dfc3-4d4f-9f57-f32a5bde6dc4"))
IAreaSeries : ICustomSeries
{
    //
    // Property data
    //

    __declspec(property(get=GetUseYOrigin,put=PutUseYOrigin))
    VARIANT_BOOL UseYOrigin;
    __declspec(property(get=GetYOrigin,put=PutYOrigin))
    double YOrigin;
    __declspec(property(get=GetGradient))
    IGradientPtr Gradient;
    __declspec(property(get=GetAreaColor,put=PutAreaColor))
    OLE_COLOR AreaColor;
    __declspec(property(get=GetAreaChartBrush))
    IBrushPtr AreaChartBrush;
    __declspec(property(get=GetStackGroup,put=PutStackGroup))
    long StackGroup;
    __declspec(property(get=GetAreaBrush,put=PutAreaBrush))
    enum EBrushStyle AreaBrush;
    __declspec(property(get=GetAreaPen))
    IPenPtr AreaPen;
    __declspec(property(get=GetMultiArea,put=PutMultiArea))
    enum EMultiArea MultiArea;

    //
    // Wrapper methods for error-handling
    //

    enum EBrushStyle GetAreaBrush ( );
    void PutAreaBrush (
        enum EBrushStyle AreaBrush );
    IPenPtr GetAreaPen ( );
    enum EMultiArea GetMultiArea ( );
    void PutMultiArea (
        enum EMultiArea MultiArea );
    long GetOriginPos (
        long AValueIndex );
    VARIANT_BOOL GetUseYOrigin ( );
    void PutUseYOrigin (
        VARIANT_BOOL Value );
    double GetYOrigin ( );
    void PutYOrigin (
        double Value );
    IGradientPtr GetGradient ( );
    OLE_COLOR GetAreaColor ( );
    void PutAreaColor (
        OLE_COLOR Value );
    IBrushPtr GetAreaChartBrush ( );
    long GetStackGroup ( );
    void PutStackGroup (
        long Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_AreaBrush (
        /*[out,retval]*/ enum EBrushStyle * AreaBrush ) = 0;
      virtual HRESULT __stdcall put_AreaBrush (
        /*[in]*/ enum EBrushStyle AreaBrush ) = 0;
      virtual HRESULT __stdcall get_AreaPen (
        /*[out,retval]*/ struct IPen * * AreaPen ) = 0;
      virtual HRESULT __stdcall get_MultiArea (
        /*[out,retval]*/ enum EMultiArea * MultiArea ) = 0;
      virtual HRESULT __stdcall put_MultiArea (
        /*[in]*/ enum EMultiArea MultiArea ) = 0;
      virtual HRESULT __stdcall raw_GetOriginPos (
        /*[in]*/ long AValueIndex,
        /*[out,retval]*/ long * ValueIndex ) = 0;
      virtual HRESULT __stdcall get_UseYOrigin (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_UseYOrigin (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_YOrigin (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_YOrigin (
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall get_Gradient (
        /*[out,retval]*/ struct IGradient * * Value ) = 0;
      virtual HRESULT __stdcall get_AreaColor (
        /*[out,retval]*/ OLE_COLOR * Value ) = 0;
      virtual HRESULT __stdcall put_AreaColor (
        /*[in]*/ OLE_COLOR Value ) = 0;
      virtual HRESULT __stdcall get_AreaChartBrush (
        /*[out,retval]*/ struct IBrush * * Value ) = 0;
      virtual HRESULT __stdcall get_StackGroup (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_StackGroup (
        /*[in]*/ long Value ) = 0;
};

struct __declspec(uuid("7d8be2e9-0d40-47da-a9e8-1e74386550ca"))
IPointSeries : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPointer))
    IPointerPtr Pointer;
    __declspec(property(get=GetDark3D,put=PutDark3D))
    VARIANT_BOOL Dark3D;
    __declspec(property(get=GetTransparency,put=PutTransparency))
    long Transparency;
    __declspec(property(get=GetFastPoint,put=PutFastPoint))
    VARIANT_BOOL FastPoint;
    __declspec(property(get=GetTreatNulls,put=PutTreatNulls))
    enum ETreatNullsStyle TreatNulls;

    //
    // Wrapper methods for error-handling
    //

    IPointerPtr GetPointer ( );
    VARIANT_BOOL GetDark3D ( );
    void PutDark3D (
        VARIANT_BOOL Value );
    long GetTransparency ( );
    void PutTransparency (
        long Value );
    VARIANT_BOOL GetFastPoint ( );
    void PutFastPoint (
        VARIANT_BOOL Value );
    enum ETreatNullsStyle GetTreatNulls ( );
    void PutTreatNulls (
        enum ETreatNullsStyle Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Pointer (
        /*[out,retval]*/ struct IPointer * * Pointer ) = 0;
      virtual HRESULT __stdcall get_Dark3D (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Dark3D (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_Transparency (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Transparency (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_FastPoint (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_FastPoint (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_TreatNulls (
        /*[out,retval]*/ enum ETreatNullsStyle * Value ) = 0;
      virtual HRESULT __stdcall put_TreatNulls (
        /*[in]*/ enum ETreatNullsStyle Value ) = 0;
};

struct __declspec(uuid("82c96e46-fb05-43b2-b12b-8ccb2e5acab1"))
ILineSeries : ICustomSeries
{
    //
    // Property data
    //

    __declspec(property(get=GetStacked,put=PutStacked))
    enum ECustomSeriesStack Stacked;
    __declspec(property(get=GetGradient))
    IGradientPtr Gradient;

    //
    // Wrapper methods for error-handling
    //

    enum ECustomSeriesStack GetStacked ( );
    void PutStacked (
        enum ECustomSeriesStack Value );
    IGradientPtr GetGradient ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Stacked (
        /*[out,retval]*/ enum ECustomSeriesStack * Value ) = 0;
      virtual HRESULT __stdcall put_Stacked (
        /*[in]*/ enum ECustomSeriesStack Value ) = 0;
      virtual HRESULT __stdcall get_Gradient (
        /*[out,retval]*/ struct IGradient * * Value ) = 0;
};

struct __declspec(uuid("7a1079c7-ecc1-4175-a701-be42d25c4ddd"))
IBubbleSeries : IPointSeries
{
    //
    // Property data
    //

    __declspec(property(get=GetRadiusValues))
    IValueListPtr RadiusValues;
    __declspec(property(get=GetSquared,put=PutSquared))
    VARIANT_BOOL Squared;

    //
    // Wrapper methods for error-handling
    //

    IValueListPtr GetRadiusValues ( );
    VARIANT_BOOL GetSquared ( );
    void PutSquared (
        VARIANT_BOOL Squared );
    long AddBubble (
        double AX,
        double AY,
        double ARadius,
        _bstr_t AXLabel,
        OLE_COLOR Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_RadiusValues (
        /*[out,retval]*/ struct IValueList * * RadiusValues ) = 0;
      virtual HRESULT __stdcall get_Squared (
        /*[out,retval]*/ VARIANT_BOOL * Squared ) = 0;
      virtual HRESULT __stdcall put_Squared (
        /*[in]*/ VARIANT_BOOL Squared ) = 0;
      virtual HRESULT __stdcall raw_AddBubble (
        /*[in]*/ double AX,
        /*[in]*/ double AY,
        /*[in]*/ double ARadius,
        /*[in]*/ BSTR AXLabel,
        /*[in]*/ OLE_COLOR Value,
        /*[out,retval]*/ long * AColor ) = 0;
};

struct __declspec(uuid("d5270c7e-5481-468a-91bb-87454e28ae7f"))
IGanttSeries : IPointSeries
{
    //
    // Property data
    //

    __declspec(property(get=GetStartValues))
    IValueListPtr StartValues;
    __declspec(property(get=GetNextTask))
    IValueListPtr NextTask;
    __declspec(property(get=GetConnectingPen))
    IPenPtr ConnectingPen;
    __declspec(property(get=GetEndValues))
    IValueListPtr EndValues;

    //
    // Wrapper methods for error-handling
    //

    IPenPtr GetConnectingPen ( );
    IValueListPtr GetEndValues ( );
    IValueListPtr GetStartValues ( );
    IValueListPtr GetNextTask ( );
    long AddGantt (
        double AStart,
        double AEnd,
        double AY,
        _bstr_t SomeLabel );
    long AddGanttColor (
        double AStart,
        double AEnd,
        double AY,
        _bstr_t AXLabel,
        OLE_COLOR Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ConnectingPen (
        /*[out,retval]*/ struct IPen * * ConnectingPen ) = 0;
      virtual HRESULT __stdcall get_EndValues (
        /*[out,retval]*/ struct IValueList * * EndValues ) = 0;
      virtual HRESULT __stdcall get_StartValues (
        /*[out,retval]*/ struct IValueList * * StartValues ) = 0;
      virtual HRESULT __stdcall get_NextTask (
        /*[out,retval]*/ struct IValueList * * NextTask ) = 0;
      virtual HRESULT __stdcall raw_AddGantt (
        /*[in]*/ double AStart,
        /*[in]*/ double AEnd,
        /*[in]*/ double AY,
        /*[in]*/ BSTR SomeLabel,
        /*[out,retval]*/ long * AXLabel ) = 0;
      virtual HRESULT __stdcall raw_AddGanttColor (
        /*[in]*/ double AStart,
        /*[in]*/ double AEnd,
        /*[in]*/ double AY,
        /*[in]*/ BSTR AXLabel,
        /*[in]*/ OLE_COLOR Value,
        /*[out,retval]*/ long * AColor ) = 0;
};

struct __declspec(uuid("536c4b74-6e4f-447c-91b0-0d622193ddac"))
IShapeSeries : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAlignment,put=PutAlignment))
    enum ETextAlignment Alignment;
    __declspec(property(get=GetBrush))
    IBrushPtr Brush;
    __declspec(property(get=GetFont))
    IChartFontPtr Font;
    __declspec(property(get=GetPen))
    IPenPtr Pen;
    __declspec(property(get=GetRoundRectangle,put=PutRoundRectangle))
    VARIANT_BOOL RoundRectangle;
    __declspec(property(get=GetStyle,put=PutStyle))
    enum EShapeStyle Style;
    __declspec(property(get=GetText))
    IStringsPtr Text;
    __declspec(property(get=GetTransparent,put=PutTransparent))
    VARIANT_BOOL Transparent;
    __declspec(property(get=GetX0,put=PutX0))
    double X0;
    __declspec(property(get=GetX1,put=PutX1))
    double X1;
    __declspec(property(get=GetXYStyle,put=PutXYStyle))
    enum EShapeXYStyle XYStyle;
    __declspec(property(get=GetY0,put=PutY0))
    double Y0;
    __declspec(property(get=GetY1,put=PutY1))
    double Y1;
    __declspec(property(get=GetTransparency,put=PutTransparency))
    long Transparency;
    __declspec(property(get=GetVertAlign,put=PutVertAlign))
    enum ETeeVertAlign VertAlign;
    __declspec(property(get=GetGradient))
    IGradientPtr Gradient;

    //
    // Wrapper methods for error-handling
    //

    enum ETextAlignment GetAlignment ( );
    void PutAlignment (
        enum ETextAlignment Alignment );
    IBrushPtr GetBrush ( );
    IChartFontPtr GetFont ( );
    IPenPtr GetPen ( );
    VARIANT_BOOL GetRoundRectangle ( );
    void PutRoundRectangle (
        VARIANT_BOOL RoundRectangle );
    enum EShapeStyle GetStyle ( );
    void PutStyle (
        enum EShapeStyle Style );
    IStringsPtr GetText ( );
    VARIANT_BOOL GetTransparent ( );
    void PutTransparent (
        VARIANT_BOOL Transparent );
    double GetX0 ( );
    void PutX0 (
        double X0 );
    double GetX1 ( );
    void PutX1 (
        double X1 );
    enum EShapeXYStyle GetXYStyle ( );
    void PutXYStyle (
        enum EShapeXYStyle XYStyle );
    double GetY0 ( );
    void PutY0 (
        double Y0 );
    double GetY1 ( );
    void PutY1 (
        double Y1 );
    HRESULT ShapeImageLoad (
        _bstr_t FileName );
    HRESULT ShapeImageClear ( );
    enum ETeeVertAlign GetVertAlign ( );
    void PutVertAlign (
        enum ETeeVertAlign Value );
    IGradientPtr GetGradient ( );
    long GetTransparency ( );
    void PutTransparency (
        long Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Alignment (
        /*[out,retval]*/ enum ETextAlignment * Alignment ) = 0;
      virtual HRESULT __stdcall put_Alignment (
        /*[in]*/ enum ETextAlignment Alignment ) = 0;
      virtual HRESULT __stdcall get_Brush (
        /*[out,retval]*/ struct IBrush * * Brush ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ struct IChartFont * * Font ) = 0;
      virtual HRESULT __stdcall get_Pen (
        /*[out,retval]*/ struct IPen * * Pen ) = 0;
      virtual HRESULT __stdcall get_RoundRectangle (
        /*[out,retval]*/ VARIANT_BOOL * RoundRectangle ) = 0;
      virtual HRESULT __stdcall put_RoundRectangle (
        /*[in]*/ VARIANT_BOOL RoundRectangle ) = 0;
      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ enum EShapeStyle * Style ) = 0;
      virtual HRESULT __stdcall put_Style (
        /*[in]*/ enum EShapeStyle Style ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ struct IStrings * * Text ) = 0;
      virtual HRESULT __stdcall get_Transparent (
        /*[out,retval]*/ VARIANT_BOOL * Transparent ) = 0;
      virtual HRESULT __stdcall put_Transparent (
        /*[in]*/ VARIANT_BOOL Transparent ) = 0;
      virtual HRESULT __stdcall get_X0 (
        /*[out,retval]*/ double * X0 ) = 0;
      virtual HRESULT __stdcall put_X0 (
        /*[in]*/ double X0 ) = 0;
      virtual HRESULT __stdcall get_X1 (
        /*[out,retval]*/ double * X1 ) = 0;
      virtual HRESULT __stdcall put_X1 (
        /*[in]*/ double X1 ) = 0;
      virtual HRESULT __stdcall get_XYStyle (
        /*[out,retval]*/ enum EShapeXYStyle * XYStyle ) = 0;
      virtual HRESULT __stdcall put_XYStyle (
        /*[in]*/ enum EShapeXYStyle XYStyle ) = 0;
      virtual HRESULT __stdcall get_Y0 (
        /*[out,retval]*/ double * Y0 ) = 0;
      virtual HRESULT __stdcall put_Y0 (
        /*[in]*/ double Y0 ) = 0;
      virtual HRESULT __stdcall get_Y1 (
        /*[out,retval]*/ double * Y1 ) = 0;
      virtual HRESULT __stdcall put_Y1 (
        /*[in]*/ double Y1 ) = 0;
      virtual HRESULT __stdcall raw_ShapeImageLoad (
        /*[in]*/ BSTR FileName ) = 0;
      virtual HRESULT __stdcall raw_ShapeImageClear ( ) = 0;
      virtual HRESULT __stdcall get_VertAlign (
        /*[out,retval]*/ enum ETeeVertAlign * Value ) = 0;
      virtual HRESULT __stdcall put_VertAlign (
        /*[in]*/ enum ETeeVertAlign Value ) = 0;
      virtual HRESULT __stdcall get_Gradient (
        /*[out,retval]*/ struct IGradient * * Value ) = 0;
      virtual HRESULT __stdcall get_Transparency (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Transparency (
        /*[in]*/ long Value ) = 0;
};

struct __declspec(uuid("2fe69573-c208-4dc1-b53e-48677964220f"))
IArrowSeries : IPointSeries
{
    //
    // Property data
    //

    __declspec(property(get=GetEndXValues))
    IValueListPtr EndXValues;
    __declspec(property(get=GetEndYValues))
    IValueListPtr EndYValues;
    __declspec(property(get=GetStartXValues))
    IValueListPtr StartXValues;
    __declspec(property(get=GetStartYValues))
    IValueListPtr StartYValues;
    __declspec(property(get=GetArrowPercent,put=PutArrowPercent))
    long ArrowPercent;
    __declspec(property(get=GetArrowHeight,put=PutArrowHeight))
    long ArrowHeight;
    __declspec(property(get=GetArrowWidth,put=PutArrowWidth))
    long ArrowWidth;

    //
    // Wrapper methods for error-handling
    //

    long GetArrowHeight ( );
    void PutArrowHeight (
        long ArrowHeight );
    long GetArrowWidth ( );
    void PutArrowWidth (
        long ArrowWidth );
    IValueListPtr GetEndXValues ( );
    IValueListPtr GetEndYValues ( );
    IValueListPtr GetStartXValues ( );
    IValueListPtr GetStartYValues ( );
    long AddArrow (
        double X0,
        double Y0,
        double X1,
        double Y1,
        _bstr_t ALabel,
        OLE_COLOR Value );
    long GetArrowPercent ( );
    void PutArrowPercent (
        long Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ArrowHeight (
        /*[out,retval]*/ long * ArrowHeight ) = 0;
      virtual HRESULT __stdcall put_ArrowHeight (
        /*[in]*/ long ArrowHeight ) = 0;
      virtual HRESULT __stdcall get_ArrowWidth (
        /*[out,retval]*/ long * ArrowWidth ) = 0;
      virtual HRESULT __stdcall put_ArrowWidth (
        /*[in]*/ long ArrowWidth ) = 0;
      virtual HRESULT __stdcall get_EndXValues (
        /*[out,retval]*/ struct IValueList * * EndXValues ) = 0;
      virtual HRESULT __stdcall get_EndYValues (
        /*[out,retval]*/ struct IValueList * * EndYValues ) = 0;
      virtual HRESULT __stdcall get_StartXValues (
        /*[out,retval]*/ struct IValueList * * StartXValues ) = 0;
      virtual HRESULT __stdcall get_StartYValues (
        /*[out,retval]*/ struct IValueList * * StartYValues ) = 0;
      virtual HRESULT __stdcall raw_AddArrow (
        /*[in]*/ double X0,
        /*[in]*/ double Y0,
        /*[in]*/ double X1,
        /*[in]*/ double Y1,
        /*[in]*/ BSTR ALabel,
        /*[in]*/ OLE_COLOR Value,
        /*[out,retval]*/ long * AColor ) = 0;
      virtual HRESULT __stdcall get_ArrowPercent (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_ArrowPercent (
        /*[in]*/ long Value ) = 0;
};

struct __declspec(uuid("ae426285-482f-4798-be4b-0ff7cca75e94"))
ICustomBarSeries : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAutoBarSize,put=PutAutoBarSize))
    VARIANT_BOOL AutoBarSize;
    __declspec(property(get=GetStackGroup,put=PutStackGroup))
    long StackGroup;
    __declspec(property(get=GetTickLines))
    IPenPtr TickLines;
    __declspec(property(get=GetDepthPercent,put=PutDepthPercent))
    long DepthPercent;
    __declspec(property(get=GetShadow))
    ITeeShadowPtr Shadow;
    __declspec(property(get=GetTransparency,put=PutTransparency))
    long Transparency;
    __declspec(property(get=GetGradient))
    IGradientPtr Gradient;
    __declspec(property(get=GetBevelSize,put=PutBevelSize))
    long BevelSize;
    __declspec(property(get=GetConePercent,put=PutConePercent))
    long ConePercent;
    __declspec(property(get=GetDarkPen,put=PutDarkPen))
    long DarkPen;
    __declspec(property(get=GetMultiBar,put=PutMultiBar))
    enum EMultiBar MultiBar;
    __declspec(property(get=GetAutoMarkPosition,put=PutAutoMarkPosition))
    VARIANT_BOOL AutoMarkPosition;
    __declspec(property(get=GetBarBrush))
    IBrushPtr BarBrush;
    __declspec(property(get=GetBarPen))
    IPenPtr BarPen;
    __declspec(property(get=GetBarStyle,put=PutBarStyle))
    enum EBarStyle BarStyle;
    __declspec(property(get=GetBarWidthPercent,put=PutBarWidthPercent))
    long BarWidthPercent;
    __declspec(property(get=GetDark3D,put=PutDark3D))
    VARIANT_BOOL Dark3D;
    __declspec(property(get=GetOffsetPercent,put=PutOffsetPercent))
    long OffsetPercent;
    __declspec(property(get=GetSideMargins,put=PutSideMargins))
    VARIANT_BOOL SideMargins;
    __declspec(property(get=GetUseOrigin,put=PutUseOrigin))
    VARIANT_BOOL UseOrigin;
    __declspec(property(get=GetOrigin,put=PutOrigin))
    double Origin;

    //
    // Wrapper methods for error-handling
    //

    enum EMultiBar GetMultiBar ( );
    void PutMultiBar (
        enum EMultiBar MultiBar );
    VARIANT_BOOL GetAutoMarkPosition ( );
    void PutAutoMarkPosition (
        VARIANT_BOOL AutoMarkPosition );
    IBrushPtr GetBarBrush ( );
    IPenPtr GetBarPen ( );
    enum EBarStyle GetBarStyle ( );
    void PutBarStyle (
        enum EBarStyle BarStyle );
    long GetBarWidthPercent ( );
    void PutBarWidthPercent (
        long BarWidthPercent );
    VARIANT_BOOL GetDark3D ( );
    void PutDark3D (
        VARIANT_BOOL Dark3D );
    long GetOffsetPercent ( );
    void PutOffsetPercent (
        long OffsetPercent );
    VARIANT_BOOL GetSideMargins ( );
    void PutSideMargins (
        VARIANT_BOOL SideMargins );
    VARIANT_BOOL GetUseOrigin ( );
    void PutUseOrigin (
        VARIANT_BOOL UseOrigin );
    double GetOrigin ( );
    void PutOrigin (
        double Origin );
    long GetOriginPos (
        long SomeValueIndex );
    VARIANT_BOOL GetAutoBarSize ( );
    void PutAutoBarSize (
        VARIANT_BOOL Value );
    HRESULT BarImageLoad (
        _bstr_t FileName );
    HRESULT BarImageClear ( );
    IGradientPtr GetGradient ( );
    long GetStackGroup ( );
    void PutStackGroup (
        long Value );
    long GetConePercent ( );
    void PutConePercent (
        long Value );
    IPenPtr GetTickLines ( );
    long GetDepthPercent ( );
    void PutDepthPercent (
        long Value );
    ITeeShadowPtr GetShadow ( );
    long GetTransparency ( );
    void PutTransparency (
        long Value );
    long GetBevelSize ( );
    void PutBevelSize (
        long Value );
    long GetDarkPen ( );
    void PutDarkPen (
        long Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_MultiBar (
        /*[out,retval]*/ enum EMultiBar * MultiBar ) = 0;
      virtual HRESULT __stdcall put_MultiBar (
        /*[in]*/ enum EMultiBar MultiBar ) = 0;
      virtual HRESULT __stdcall get_AutoMarkPosition (
        /*[out,retval]*/ VARIANT_BOOL * AutoMarkPosition ) = 0;
      virtual HRESULT __stdcall put_AutoMarkPosition (
        /*[in]*/ VARIANT_BOOL AutoMarkPosition ) = 0;
      virtual HRESULT __stdcall get_BarBrush (
        /*[out,retval]*/ struct IBrush * * BarBrush ) = 0;
      virtual HRESULT __stdcall get_BarPen (
        /*[out,retval]*/ struct IPen * * BarPen ) = 0;
      virtual HRESULT __stdcall get_BarStyle (
        /*[out,retval]*/ enum EBarStyle * BarStyle ) = 0;
      virtual HRESULT __stdcall put_BarStyle (
        /*[in]*/ enum EBarStyle BarStyle ) = 0;
      virtual HRESULT __stdcall get_BarWidthPercent (
        /*[out,retval]*/ long * BarWidthPercent ) = 0;
      virtual HRESULT __stdcall put_BarWidthPercent (
        /*[in]*/ long BarWidthPercent ) = 0;
      virtual HRESULT __stdcall get_Dark3D (
        /*[out,retval]*/ VARIANT_BOOL * Dark3D ) = 0;
      virtual HRESULT __stdcall put_Dark3D (
        /*[in]*/ VARIANT_BOOL Dark3D ) = 0;
      virtual HRESULT __stdcall get_OffsetPercent (
        /*[out,retval]*/ long * OffsetPercent ) = 0;
      virtual HRESULT __stdcall put_OffsetPercent (
        /*[in]*/ long OffsetPercent ) = 0;
      virtual HRESULT __stdcall get_SideMargins (
        /*[out,retval]*/ VARIANT_BOOL * SideMargins ) = 0;
      virtual HRESULT __stdcall put_SideMargins (
        /*[in]*/ VARIANT_BOOL SideMargins ) = 0;
      virtual HRESULT __stdcall get_UseOrigin (
        /*[out,retval]*/ VARIANT_BOOL * UseOrigin ) = 0;
      virtual HRESULT __stdcall put_UseOrigin (
        /*[in]*/ VARIANT_BOOL UseOrigin ) = 0;
      virtual HRESULT __stdcall get_Origin (
        /*[out,retval]*/ double * Origin ) = 0;
      virtual HRESULT __stdcall put_Origin (
        /*[in]*/ double Origin ) = 0;
      virtual HRESULT __stdcall raw_GetOriginPos (
        /*[in]*/ long SomeValueIndex,
        /*[out,retval]*/ long * ValueIndex ) = 0;
      virtual HRESULT __stdcall get_AutoBarSize (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_AutoBarSize (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall raw_BarImageLoad (
        /*[in]*/ BSTR FileName ) = 0;
      virtual HRESULT __stdcall raw_BarImageClear ( ) = 0;
      virtual HRESULT __stdcall get_Gradient (
        /*[out,retval]*/ struct IGradient * * Value ) = 0;
      virtual HRESULT __stdcall get_StackGroup (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_StackGroup (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_ConePercent (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_ConePercent (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_TickLines (
        /*[out,retval]*/ struct IPen * * Value ) = 0;
      virtual HRESULT __stdcall get_DepthPercent (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_DepthPercent (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_Shadow (
        /*[out,retval]*/ struct ITeeShadow * * Value ) = 0;
      virtual HRESULT __stdcall get_Transparency (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Transparency (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_BevelSize (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_BevelSize (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_DarkPen (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_DarkPen (
        /*[in]*/ long Value ) = 0;
};

struct __declspec(uuid("425d090a-1024-4fad-bd2d-16444a7ed15c"))
IBarSeries : ICustomBarSeries
{
    //
    // Property data
    //

    __declspec(property(get=GetBarWidth,put=PutBarWidth))
    long BarWidth;

    //
    // Wrapper methods for error-handling
    //

    long GetBarWidth ( );
    void PutBarWidth (
        long BarWidth );
    HRESULT CalcBarBounds (
        long ValueIndex );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_BarWidth (
        /*[out,retval]*/ long * BarWidth ) = 0;
      virtual HRESULT __stdcall put_BarWidth (
        /*[in]*/ long BarWidth ) = 0;
      virtual HRESULT __stdcall raw_CalcBarBounds (
        /*[in]*/ long ValueIndex ) = 0;
};

struct __declspec(uuid("7c802aa5-86db-4451-9380-ead5b122f37a"))
IHorizBarSeries : ICustomBarSeries
{
    //
    // Property data
    //

    __declspec(property(get=GetBarHeight,put=PutBarHeight))
    long BarHeight;

    //
    // Wrapper methods for error-handling
    //

    long GetBarHeight ( );
    void PutBarHeight (
        long BarHeight );
    HRESULT CalcBarBounds (
        long ValueIndex );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_BarHeight (
        /*[out,retval]*/ long * BarHeight ) = 0;
      virtual HRESULT __stdcall put_BarHeight (
        /*[in]*/ long BarHeight ) = 0;
      virtual HRESULT __stdcall raw_CalcBarBounds (
        /*[in]*/ long ValueIndex ) = 0;
};

struct __declspec(uuid("24b7fe4c-6430-4ea3-8849-c433877309bc"))
ICandleSeries : IPointSeries
{
    //
    // Property data
    //

    __declspec(property(get=GetHighValues))
    IValueListPtr HighValues;
    __declspec(property(get=GetLowValues))
    IValueListPtr LowValues;
    __declspec(property(get=GetOpenValues))
    IValueListPtr OpenValues;
    __declspec(property(get=GetCandleStyle,put=PutCandleStyle))
    enum ECandleStyle CandleStyle;
    __declspec(property(get=GetCandleWidth,put=PutCandleWidth))
    long CandleWidth;
    __declspec(property(get=GetDownCloseColor,put=PutDownCloseColor))
    OLE_COLOR DownCloseColor;
    __declspec(property(get=GetShowCloseTick,put=PutShowCloseTick))
    VARIANT_BOOL ShowCloseTick;
    __declspec(property(get=GetShowOpenTick,put=PutShowOpenTick))
    VARIANT_BOOL ShowOpenTick;
    __declspec(property(get=GetUpCloseColor,put=PutUpCloseColor))
    OLE_COLOR UpCloseColor;
    __declspec(property(get=GetHighLowPen))
    IPenPtr HighLowPen;
    __declspec(property(get=GetColorStyle,put=PutColorStyle))
    enum ECandleColorStyle ColorStyle;
    __declspec(property(get=GetUpCloseGradient))
    IGradientPtr UpCloseGradient;
    __declspec(property(get=GetDownCloseGradient))
    IGradientPtr DownCloseGradient;
    __declspec(property(get=GetCloseValues))
    IValueListPtr CloseValues;
    __declspec(property(get=GetDateValues))
    IValueListPtr DateValues;

    //
    // Wrapper methods for error-handling
    //

    enum ECandleStyle GetCandleStyle ( );
    void PutCandleStyle (
        enum ECandleStyle CandleStyle );
    long GetCandleWidth ( );
    void PutCandleWidth (
        long CandleWidth );
    IValueListPtr GetCloseValues ( );
    IValueListPtr GetDateValues ( );
    OLE_COLOR GetDownCloseColor ( );
    void PutDownCloseColor (
        OLE_COLOR Value );
    IValueListPtr GetHighValues ( );
    IValueListPtr GetLowValues ( );
    IValueListPtr GetOpenValues ( );
    VARIANT_BOOL GetShowCloseTick ( );
    void PutShowCloseTick (
        VARIANT_BOOL ShowCloseTick );
    VARIANT_BOOL GetShowOpenTick ( );
    void PutShowOpenTick (
        VARIANT_BOOL ShowOpenTick );
    OLE_COLOR GetUpCloseColor ( );
    void PutUpCloseColor (
        OLE_COLOR Value );
    long AddCandle (
        double DateValue,
        double OpenValue,
        double HighValue,
        double LowValue,
        double CloseValue );
    IPenPtr GetHighLowPen ( );
    enum ECandleColorStyle GetColorStyle ( );
    void PutColorStyle (
        enum ECandleColorStyle Value );
    IGradientPtr GetUpCloseGradient ( );
    IGradientPtr GetDownCloseGradient ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_CandleStyle (
        /*[out,retval]*/ enum ECandleStyle * CandleStyle ) = 0;
      virtual HRESULT __stdcall put_CandleStyle (
        /*[in]*/ enum ECandleStyle CandleStyle ) = 0;
      virtual HRESULT __stdcall get_CandleWidth (
        /*[out,retval]*/ long * CandleWidth ) = 0;
      virtual HRESULT __stdcall put_CandleWidth (
        /*[in]*/ long CandleWidth ) = 0;
      virtual HRESULT __stdcall get_CloseValues (
        /*[out,retval]*/ struct IValueList * * CloseValues ) = 0;
      virtual HRESULT __stdcall get_DateValues (
        /*[out,retval]*/ struct IValueList * * DateValues ) = 0;
      virtual HRESULT __stdcall get_DownCloseColor (
        /*[out,retval]*/ OLE_COLOR * Value ) = 0;
      virtual HRESULT __stdcall put_DownCloseColor (
        /*[in]*/ OLE_COLOR Value ) = 0;
      virtual HRESULT __stdcall get_HighValues (
        /*[out,retval]*/ struct IValueList * * HighValues ) = 0;
      virtual HRESULT __stdcall get_LowValues (
        /*[out,retval]*/ struct IValueList * * LowValues ) = 0;
      virtual HRESULT __stdcall get_OpenValues (
        /*[out,retval]*/ struct IValueList * * OpenValues ) = 0;
      virtual HRESULT __stdcall get_ShowCloseTick (
        /*[out,retval]*/ VARIANT_BOOL * ShowCloseTick ) = 0;
      virtual HRESULT __stdcall put_ShowCloseTick (
        /*[in]*/ VARIANT_BOOL ShowCloseTick ) = 0;
      virtual HRESULT __stdcall get_ShowOpenTick (
        /*[out,retval]*/ VARIANT_BOOL * ShowOpenTick ) = 0;
      virtual HRESULT __stdcall put_ShowOpenTick (
        /*[in]*/ VARIANT_BOOL ShowOpenTick ) = 0;
      virtual HRESULT __stdcall get_UpCloseColor (
        /*[out,retval]*/ OLE_COLOR * Value ) = 0;
      virtual HRESULT __stdcall put_UpCloseColor (
        /*[in]*/ OLE_COLOR Value ) = 0;
      virtual HRESULT __stdcall raw_AddCandle (
        /*[in]*/ double DateValue,
        /*[in]*/ double OpenValue,
        /*[in]*/ double HighValue,
        /*[in]*/ double LowValue,
        /*[in]*/ double CloseValue,
        /*[out,retval]*/ long * AClose ) = 0;
      virtual HRESULT __stdcall get_HighLowPen (
        /*[out,retval]*/ struct IPen * * Value ) = 0;
      virtual HRESULT __stdcall get_ColorStyle (
        /*[out,retval]*/ enum ECandleColorStyle * Value ) = 0;
      virtual HRESULT __stdcall put_ColorStyle (
        /*[in]*/ enum ECandleColorStyle Value ) = 0;
      virtual HRESULT __stdcall get_UpCloseGradient (
        /*[out,retval]*/ struct IGradient * * Value ) = 0;
      virtual HRESULT __stdcall get_DownCloseGradient (
        /*[out,retval]*/ struct IGradient * * Value ) = 0;
};

struct __declspec(uuid("452b59fd-7c07-444c-8a74-690d9666bcd6"))
ICustomPolarSeries : ICircledSeries
{
    //
    // Property data
    //

    __declspec(property(get=GetPen))
    IPenPtr Pen;
    __declspec(property(get=GetPointer))
    IPointerPtr Pointer;
    __declspec(property(get=GetRadiusIncrement,put=PutRadiusIncrement))
    double RadiusIncrement;
    __declspec(property(get=GetAngleValues))
    IValueListPtr AngleValues;
    __declspec(property(get=GetRadiusValues))
    IValueListPtr RadiusValues;
    __declspec(property(get=GetBrush))
    IBrushPtr Brush;
    __declspec(property(get=GetCirclePen))
    IPenPtr CirclePen;
    __declspec(property(get=GetCircleLabels))
    ICircleLabelsPtr CircleLabels;
    __declspec(property(get=GetCircleGradient))
    IGradientPtr CircleGradient;
    __declspec(property(get=GetLabelsMargin,put=PutLabelsMargin))
    long LabelsMargin;
    __declspec(property(get=GetTreatNulls,put=PutTreatNulls))
    enum ETreatNullsStyle TreatNulls;
    __declspec(property(get=GetTransparency,put=PutTransparency))
    long Transparency;
    __declspec(property(get=GetClockWiseLabels,put=PutClockWiseLabels))
    VARIANT_BOOL ClockWiseLabels;
    __declspec(property(get=GetCircleLabelsInside,put=PutCircleLabelsInside))
    VARIANT_BOOL CircleLabelsInside;
    __declspec(property(get=GetAngleIncrement,put=PutAngleIncrement))
    double AngleIncrement;
    __declspec(property(get=GetCloseCircle,put=PutCloseCircle))
    VARIANT_BOOL CloseCircle;

    //
    // Wrapper methods for error-handling
    //

    double GetAngleIncrement ( );
    void PutAngleIncrement (
        double AngleIncrement );
    VARIANT_BOOL GetCloseCircle ( );
    void PutCloseCircle (
        VARIANT_BOOL CloseCircle );
    IPenPtr GetPen ( );
    IPointerPtr GetPointer ( );
    double GetRadiusIncrement ( );
    void PutRadiusIncrement (
        double RadiusIncrement );
    IValueListPtr GetAngleValues ( );
    IValueListPtr GetRadiusValues ( );
    HRESULT DrawRing (
        double Value,
        long Z );
    IPenPtr GetCirclePen ( );
    ICircleLabelsPtr GetCircleLabels ( );
    IBrushPtr GetBrush ( );
    HRESULT LoadBackImage (
        _bstr_t FileName );
    HRESULT ClearBackImage ( );
    VARIANT_BOOL GetClockWiseLabels ( );
    void PutClockWiseLabels (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetCircleLabelsInside ( );
    void PutCircleLabelsInside (
        VARIANT_BOOL Value );
    long GetTransparency ( );
    void PutTransparency (
        long Value );
    IGradientPtr GetCircleGradient ( );
    HRESULT DrawZone (
        double Min,
        double Max,
        long Z );
    long GetLabelsMargin ( );
    void PutLabelsMargin (
        long Value );
    enum ETreatNullsStyle GetTreatNulls ( );
    void PutTreatNulls (
        enum ETreatNullsStyle Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_AngleIncrement (
        /*[out,retval]*/ double * AngleIncrement ) = 0;
      virtual HRESULT __stdcall put_AngleIncrement (
        /*[in]*/ double AngleIncrement ) = 0;
      virtual HRESULT __stdcall get_CloseCircle (
        /*[out,retval]*/ VARIANT_BOOL * CloseCircle ) = 0;
      virtual HRESULT __stdcall put_CloseCircle (
        /*[in]*/ VARIANT_BOOL CloseCircle ) = 0;
      virtual HRESULT __stdcall get_Pen (
        /*[out,retval]*/ struct IPen * * Pen ) = 0;
      virtual HRESULT __stdcall get_Pointer (
        /*[out,retval]*/ struct IPointer * * Pointer ) = 0;
      virtual HRESULT __stdcall get_RadiusIncrement (
        /*[out,retval]*/ double * RadiusIncrement ) = 0;
      virtual HRESULT __stdcall put_RadiusIncrement (
        /*[in]*/ double RadiusIncrement ) = 0;
      virtual HRESULT __stdcall get_AngleValues (
        /*[out,retval]*/ struct IValueList * * AngleValues ) = 0;
      virtual HRESULT __stdcall get_RadiusValues (
        /*[out,retval]*/ struct IValueList * * RadiusValues ) = 0;
      virtual HRESULT __stdcall raw_DrawRing (
        /*[in]*/ double Value,
        /*[in]*/ long Z ) = 0;
      virtual HRESULT __stdcall get_CirclePen (
        /*[out,retval]*/ struct IPen * * CirclePen ) = 0;
      virtual HRESULT __stdcall get_CircleLabels (
        /*[out,retval]*/ struct ICircleLabels * * Value ) = 0;
      virtual HRESULT __stdcall get_Brush (
        /*[out,retval]*/ struct IBrush * * Value ) = 0;
      virtual HRESULT __stdcall raw_LoadBackImage (
        /*[in]*/ BSTR FileName ) = 0;
      virtual HRESULT __stdcall raw_ClearBackImage ( ) = 0;
      virtual HRESULT __stdcall get_ClockWiseLabels (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_ClockWiseLabels (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_CircleLabelsInside (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_CircleLabelsInside (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_Transparency (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Transparency (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_CircleGradient (
        /*[out,retval]*/ struct IGradient * * Value ) = 0;
      virtual HRESULT __stdcall raw_DrawZone (
        /*[in]*/ double Min,
        /*[in]*/ double Max,
        /*[in]*/ long Z ) = 0;
      virtual HRESULT __stdcall get_LabelsMargin (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_LabelsMargin (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_TreatNulls (
        /*[out,retval]*/ enum ETreatNullsStyle * Value ) = 0;
      virtual HRESULT __stdcall put_TreatNulls (
        /*[in]*/ enum ETreatNullsStyle Value ) = 0;
};

struct __declspec(uuid("edf445c6-f88a-42ce-8d9c-a389295d58f4"))
IErrorBarSeries : IBarSeries
{
    //
    // Property data
    //

    __declspec(property(get=GetErrorPen))
    IPenPtr ErrorPen;
    __declspec(property(get=GetErrorValues))
    IValueListPtr ErrorValues;
    __declspec(property(get=GetErrorWidth,put=PutErrorWidth))
    long ErrorWidth;
    __declspec(property(get=GetErrorWidthUnits,put=PutErrorWidthUnits))
    enum EErrorWidthUnits ErrorWidthUnits;

    //
    // Wrapper methods for error-handling
    //

    IPenPtr GetErrorPen ( );
    IValueListPtr GetErrorValues ( );
    long GetErrorWidth ( );
    void PutErrorWidth (
        long ErrorWidth );
    enum EErrorWidthUnits GetErrorWidthUnits ( );
    void PutErrorWidthUnits (
        enum EErrorWidthUnits ErrorWidthUnits );
    long AddErrorBar (
        double AX,
        double AY,
        double AError,
        _bstr_t AXLabel,
        OLE_COLOR Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ErrorPen (
        /*[out,retval]*/ struct IPen * * ErrorPen ) = 0;
      virtual HRESULT __stdcall get_ErrorValues (
        /*[out,retval]*/ struct IValueList * * ErrorValues ) = 0;
      virtual HRESULT __stdcall get_ErrorWidth (
        /*[out,retval]*/ long * ErrorWidth ) = 0;
      virtual HRESULT __stdcall put_ErrorWidth (
        /*[in]*/ long ErrorWidth ) = 0;
      virtual HRESULT __stdcall get_ErrorWidthUnits (
        /*[out,retval]*/ enum EErrorWidthUnits * ErrorWidthUnits ) = 0;
      virtual HRESULT __stdcall put_ErrorWidthUnits (
        /*[in]*/ enum EErrorWidthUnits ErrorWidthUnits ) = 0;
      virtual HRESULT __stdcall raw_AddErrorBar (
        /*[in]*/ double AX,
        /*[in]*/ double AY,
        /*[in]*/ double AError,
        /*[in]*/ BSTR AXLabel,
        /*[in]*/ OLE_COLOR Value,
        /*[out,retval]*/ long * AColor ) = 0;
};

struct __declspec(uuid("a19b072c-1482-4301-b5e7-6ad55c8a1667"))
IBezierSeries : ICustomSeries
{
    //
    // Property data
    //

    __declspec(property(get=GetBezierStyle,put=PutBezierStyle))
    enum EBezierStyle BezierStyle;
    __declspec(property(get=GetNumBezierPoints,put=PutNumBezierPoints))
    long NumBezierPoints;

    //
    // Wrapper methods for error-handling
    //

    long GetNumBezierPoints ( );
    void PutNumBezierPoints (
        long Value );
    enum EBezierStyle GetBezierStyle ( );
    void PutBezierStyle (
        enum EBezierStyle Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_NumBezierPoints (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_NumBezierPoints (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_BezierStyle (
        /*[out,retval]*/ enum EBezierStyle * Value ) = 0;
      virtual HRESULT __stdcall put_BezierStyle (
        /*[in]*/ enum EBezierStyle Value ) = 0;
};

struct __declspec(uuid("9a1a0505-7bba-4a53-8b7f-60979d8de765"))
IRadarSeries : ICustomPolarSeries
{};

struct __declspec(uuid("c33203c1-74be-42ff-9432-0a2952de3481"))
IErrorSeries : IErrorBarSeries
{
    //
    // Property data
    //

    __declspec(property(get=GetErrorStyle,put=PutErrorStyle))
    enum EErrorSeriesStyle ErrorStyle;

    //
    // Wrapper methods for error-handling
    //

    enum EErrorSeriesStyle GetErrorStyle ( );
    void PutErrorStyle (
        enum EErrorSeriesStyle Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ErrorStyle (
        /*[out,retval]*/ enum EErrorSeriesStyle * Value ) = 0;
      virtual HRESULT __stdcall put_ErrorStyle (
        /*[in]*/ enum EErrorSeriesStyle Value ) = 0;
};

struct __declspec(uuid("91464dd7-1ef0-4e2b-88ad-489b171a00d9"))
IPoint3DSeries : ICustom3DSeries
{
    //
    // Property data
    //

    __declspec(property(get=GetLinePen))
    IPenPtr LinePen;
    __declspec(property(get=GetDepthSize,put=PutDepthSize))
    double DepthSize;
    __declspec(property(get=GetPointer))
    IPointerPtr Pointer;
    __declspec(property(get=GetBaseLine))
    IPenPtr BaseLine;

    //
    // Wrapper methods for error-handling
    //

    double GetDepthSize ( );
    void PutDepthSize (
        double Value );
    IPointerPtr GetPointer ( );
    IPenPtr GetLinePen ( );
    IPenPtr GetBaseLine ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_DepthSize (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_DepthSize (
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall get_Pointer (
        /*[out,retval]*/ struct IPointer * * Value ) = 0;
      virtual HRESULT __stdcall get_LinePen (
        /*[out,retval]*/ struct IPen * * Value ) = 0;
      virtual HRESULT __stdcall get_BaseLine (
        /*[out,retval]*/ struct IPen * * Value ) = 0;
};

struct __declspec(uuid("1421844b-d663-485b-bdd7-98923ea3a022"))
IPolarSeries : ICustomPolarSeries
{
    //
    // Wrapper methods for error-handling
    //

    long AddPolar (
        double Angle,
        double Value,
        _bstr_t ALabel,
        OLE_COLOR Valu );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_AddPolar (
        /*[in]*/ double Angle,
        /*[in]*/ double Value,
        /*[in]*/ BSTR ALabel,
        /*[in]*/ OLE_COLOR Valu,
        /*[out,retval]*/ long * AColor ) = 0;
};

struct __declspec(uuid("bab825e4-8f9a-4134-bb2a-78e63734a657"))
ITeeCommander : ITeeLinked
{
    //
    // Property data
    //

    __declspec(property(get=GetButtonCopy))
    ITeeCommanderButtonPtr ButtonCopy;
    __declspec(property(get=GetButtonDepth))
    ITeeCommanderButtonPtr ButtonDepth;
    __declspec(property(get=GetLabelValues,put=PutLabelValues))
    VARIANT_BOOL LabelValues;
    __declspec(property(put=PutEditor))
    ITeeEditorPtr Editor;
    __declspec(property(put=PutPreviewer))
    ITeePreviewerPtr Previewer;
    __declspec(property(put=PutEditorLink))
    long EditorLink;
    __declspec(property(put=PutPreviewerLink))
    long PreviewerLink;
    __declspec(property(get=GetVertical,put=PutVertical))
    VARIANT_BOOL Vertical;
    __declspec(property(get=GetButtons,put=PutButtons))
    _variant_t Buttons;
    __declspec(property(get=GetControls,put=PutControls))
    _variant_t Controls;
    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;
    __declspec(property(get=GetButtonEdit))
    ITeeCommanderButtonPtr ButtonEdit;
    __declspec(property(get=GetButtonMove))
    ITeeCommanderButtonPtr ButtonMove;
    __declspec(property(get=GetButtonNormal))
    ITeeCommanderButtonPtr ButtonNormal;
    __declspec(property(get=GetButtonPrint))
    ITeeCommanderButtonPtr ButtonPrint;
    __declspec(property(get=GetButtonRotate))
    ITeeCommanderButtonPtr ButtonRotate;
    __declspec(property(get=GetButtonSave))
    ITeeCommanderButtonPtr ButtonSave;
    __declspec(property(get=GetButtonZoom))
    ITeeCommanderButtonPtr ButtonZoom;
    __declspec(property(get=GetGradient))
    IGradientPtr Gradient;
    __declspec(property(get=GetFullRotation,put=PutFullRotation))
    VARIANT_BOOL FullRotation;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetBevelInner,put=PutBevelInner))
    enum EPanelBevel BevelInner;
    __declspec(property(get=GetBevelOuter,put=PutBevelOuter))
    enum EPanelBevel BevelOuter;
    __declspec(property(get=GetBevelWidth,put=PutBevelWidth))
    long BevelWidth;
    __declspec(property(get=GetBevelOffset,put=PutBevelOffset))
    long BevelOffset;
    __declspec(property(get=GetBorderStyle,put=PutBorderStyle))
    enum EBorderStyle BorderStyle;
    __declspec(property(get=GetDefaultButton,put=PutDefaultButton))
    enum ETeeCommanderControls DefaultButton;
    __declspec(property(get=GetButton3D))
    ITeeCommanderButtonPtr Button3D;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetLabelValues ( );
    void PutLabelValues (
        VARIANT_BOOL Value );
    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR Value );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL Value );
    void PutEditor (
        struct ITeeEditor * _arg1 );
    void PutPreviewer (
        struct ITeePreviewer * _arg1 );
    void PutEditorLink (
        long _arg1 );
    void PutPreviewerLink (
        long _arg1 );
    VARIANT_BOOL GetVertical ( );
    void PutVertical (
        VARIANT_BOOL Value );
    _variant_t GetControls ( );
    void PutControls (
        const _variant_t & Value );
    _variant_t GetButtons ( );
    void PutButtons (
        const _variant_t & Value );
    enum EPanelBevel GetBevelInner ( );
    void PutBevelInner (
        enum EPanelBevel Value );
    enum EPanelBevel GetBevelOuter ( );
    void PutBevelOuter (
        enum EPanelBevel Value );
    long GetBevelWidth ( );
    void PutBevelWidth (
        long Value );
    long GetBevelOffset ( );
    void PutBevelOffset (
        long Value );
    enum EBorderStyle GetBorderStyle ( );
    void PutBorderStyle (
        enum EBorderStyle Value );
    enum ETeeCommanderControls GetDefaultButton ( );
    void PutDefaultButton (
        enum ETeeCommanderControls Value );
    ITeeCommanderButtonPtr GetButton3D ( );
    ITeeCommanderButtonPtr GetButtonCopy ( );
    ITeeCommanderButtonPtr GetButtonDepth ( );
    ITeeCommanderButtonPtr GetButtonEdit ( );
    ITeeCommanderButtonPtr GetButtonMove ( );
    ITeeCommanderButtonPtr GetButtonNormal ( );
    ITeeCommanderButtonPtr GetButtonPrint ( );
    ITeeCommanderButtonPtr GetButtonRotate ( );
    ITeeCommanderButtonPtr GetButtonSave ( );
    ITeeCommanderButtonPtr GetButtonZoom ( );
    HRESULT RepositionControls ( );
    IGradientPtr GetGradient ( );
    VARIANT_BOOL GetFullRotation ( );
    void PutFullRotation (
        VARIANT_BOOL Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_LabelValues (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_LabelValues (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * Value ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR Value ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall put_Editor (
        /*[in]*/ struct ITeeEditor * _arg1 ) = 0;
      virtual HRESULT __stdcall put_Previewer (
        /*[in]*/ struct ITeePreviewer * _arg1 ) = 0;
      virtual HRESULT __stdcall put_EditorLink (
        /*[in]*/ long _arg1 ) = 0;
      virtual HRESULT __stdcall put_PreviewerLink (
        /*[in]*/ long _arg1 ) = 0;
      virtual HRESULT __stdcall get_Vertical (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Vertical (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_Controls (
        /*[out,retval]*/ VARIANT * Value ) = 0;
      virtual HRESULT __stdcall put_Controls (
        /*[in]*/ VARIANT Value ) = 0;
      virtual HRESULT __stdcall get_Buttons (
        /*[out,retval]*/ VARIANT * Value ) = 0;
      virtual HRESULT __stdcall put_Buttons (
        /*[in]*/ VARIANT Value ) = 0;
      virtual HRESULT __stdcall get_BevelInner (
        /*[out,retval]*/ enum EPanelBevel * Value ) = 0;
      virtual HRESULT __stdcall put_BevelInner (
        /*[in]*/ enum EPanelBevel Value ) = 0;
      virtual HRESULT __stdcall get_BevelOuter (
        /*[out,retval]*/ enum EPanelBevel * Value ) = 0;
      virtual HRESULT __stdcall put_BevelOuter (
        /*[in]*/ enum EPanelBevel Value ) = 0;
      virtual HRESULT __stdcall get_BevelWidth (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_BevelWidth (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_BevelOffset (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_BevelOffset (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_BorderStyle (
        /*[out,retval]*/ enum EBorderStyle * Value ) = 0;
      virtual HRESULT __stdcall put_BorderStyle (
        /*[in]*/ enum EBorderStyle Value ) = 0;
      virtual HRESULT __stdcall get_DefaultButton (
        /*[out,retval]*/ enum ETeeCommanderControls * Value ) = 0;
      virtual HRESULT __stdcall put_DefaultButton (
        /*[in]*/ enum ETeeCommanderControls Value ) = 0;
      virtual HRESULT __stdcall get_Button3D (
        /*[out,retval]*/ struct ITeeCommanderButton * * Button3D ) = 0;
      virtual HRESULT __stdcall get_ButtonCopy (
        /*[out,retval]*/ struct ITeeCommanderButton * * Value ) = 0;
      virtual HRESULT __stdcall get_ButtonDepth (
        /*[out,retval]*/ struct ITeeCommanderButton * * Value ) = 0;
      virtual HRESULT __stdcall get_ButtonEdit (
        /*[out,retval]*/ struct ITeeCommanderButton * * Value ) = 0;
      virtual HRESULT __stdcall get_ButtonMove (
        /*[out,retval]*/ struct ITeeCommanderButton * * Value ) = 0;
      virtual HRESULT __stdcall get_ButtonNormal (
        /*[out,retval]*/ struct ITeeCommanderButton * * Value ) = 0;
      virtual HRESULT __stdcall get_ButtonPrint (
        /*[out,retval]*/ struct ITeeCommanderButton * * Value ) = 0;
      virtual HRESULT __stdcall get_ButtonRotate (
        /*[out,retval]*/ struct ITeeCommanderButton * * Value ) = 0;
      virtual HRESULT __stdcall get_ButtonSave (
        /*[out,retval]*/ struct ITeeCommanderButton * * Value ) = 0;
      virtual HRESULT __stdcall get_ButtonZoom (
        /*[out,retval]*/ struct ITeeCommanderButton * * Value ) = 0;
      virtual HRESULT __stdcall raw_RepositionControls ( ) = 0;
      virtual HRESULT __stdcall get_Gradient (
        /*[out,retval]*/ struct IGradient * * Value ) = 0;
      virtual HRESULT __stdcall get_FullRotation (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_FullRotation (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
};

struct __declspec(uuid("009e4459-2a9e-4b2a-ab6b-98b2078f41f6"))
IClockSeries : ICustomPolarSeries
{
    //
    // Property data
    //

    __declspec(property(get=GetRomanNumbers,put=PutRomanNumbers))
    VARIANT_BOOL RomanNumbers;
    __declspec(property(get=GetPenHours))
    IPenPtr PenHours;
    __declspec(property(get=GetPenMinutes))
    IPenPtr PenMinutes;
    __declspec(property(get=GetPenSeconds))
    IPenPtr PenSeconds;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetRomanNumbers ( );
    void PutRomanNumbers (
        VARIANT_BOOL Value );
    IPenPtr GetPenHours ( );
    IPenPtr GetPenMinutes ( );
    IPenPtr GetPenSeconds ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_RomanNumbers (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_RomanNumbers (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_PenHours (
        /*[out,retval]*/ struct IPen * * Value ) = 0;
      virtual HRESULT __stdcall get_PenMinutes (
        /*[out,retval]*/ struct IPen * * Value ) = 0;
      virtual HRESULT __stdcall get_PenSeconds (
        /*[out,retval]*/ struct IPen * * Value ) = 0;
};

struct __declspec(uuid("9c60f5a9-35ff-4b0d-97b9-5f9ab6c8272f"))
IWindRoseSeries : ICustomPolarSeries
{
    //
    // Property data
    //

    __declspec(property(get=GetMirrorAngles,put=PutMirrorAngles))
    VARIANT_BOOL MirrorAngles;
    __declspec(property(get=GetMirrorLabels,put=PutMirrorLabels))
    VARIANT_BOOL MirrorLabels;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetMirrorAngles ( );
    void PutMirrorAngles (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetMirrorLabels ( );
    void PutMirrorLabels (
        VARIANT_BOOL Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_MirrorAngles (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_MirrorAngles (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_MirrorLabels (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_MirrorLabels (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
};

struct __declspec(uuid("64552cb0-9205-49e1-bfd6-67914859f260"))
IBar3DSeries : IBarSeries
{
    //
    // Property data
    //

    __declspec(property(get=GetOffsetValues))
    IValueListPtr OffsetValues;

    //
    // Wrapper methods for error-handling
    //

    long AddBar (
        double AX,
        double AY,
        double AOffset,
        _bstr_t ALabel,
        OLE_COLOR AColor );
    IValueListPtr GetOffsetValues ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_AddBar (
        /*[in]*/ double AX,
        /*[in]*/ double AY,
        /*[in]*/ double AOffset,
        /*[in]*/ BSTR ALabel,
        /*[in]*/ OLE_COLOR AColor,
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_OffsetValues (
        /*[out,retval]*/ struct IValueList * * Value ) = 0;
};

struct __declspec(uuid("43fbf4ef-22b2-4799-9e23-3db63f586ddf"))
IImageBarSeries : IBarSeries
{
    //
    // Property data
    //

    __declspec(property(get=GetImageTiled,put=PutImageTiled))
    VARIANT_BOOL ImageTiled;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL LoadImage (
        _bstr_t FileName );
    HRESULT ClearImage ( );
    VARIANT_BOOL GetImageTiled ( );
    void PutImageTiled (
        VARIANT_BOOL Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_LoadImage (
        /*[in]*/ BSTR FileName,
        /*[out,retval]*/ VARIANT_BOOL * retVal ) = 0;
      virtual HRESULT __stdcall raw_ClearImage ( ) = 0;
      virtual HRESULT __stdcall get_ImageTiled (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_ImageTiled (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
};

struct __declspec(uuid("23876356-6d35-4418-8003-0af198e4ac6b"))
IColorBandTool : ICustomToolAxis
{
    //
    // Property data
    //

    __declspec(property(get=GetDrawBehind,put=PutDrawBehind))
    VARIANT_BOOL DrawBehind;
    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;
    __declspec(property(get=GetBrush))
    IBrushPtr Brush;
    __declspec(property(get=GetGradient))
    IGradientPtr Gradient;
    __declspec(property(get=GetPen))
    IPenPtr Pen;
    __declspec(property(get=GetEndValue,put=PutEndValue))
    double EndValue;
    __declspec(property(get=GetStartValue,put=PutStartValue))
    double StartValue;
    __declspec(property(get=GetTransparency,put=PutTransparency))
    long Transparency;
    __declspec(property(get=GetResizeStart,put=PutResizeStart))
    VARIANT_BOOL ResizeStart;
    __declspec(property(get=GetResizeEnd,put=PutResizeEnd))
    VARIANT_BOOL ResizeEnd;
    __declspec(property(get=GetStartLinePen))
    IPenPtr StartLinePen;
    __declspec(property(get=GetEndLinePen))
    IPenPtr EndLinePen;
    __declspec(property(get=GetDrawBehindAxes,put=PutDrawBehindAxes))
    VARIANT_BOOL DrawBehindAxes;
    __declspec(property(get=GetCursor,put=PutCursor))
    short Cursor;
    __declspec(property(get=GetPicture))
    ITeePicturePtr Picture;

    //
    // Wrapper methods for error-handling
    //

    IBrushPtr GetBrush ( );
    IPenPtr GetPen ( );
    double GetEndValue ( );
    void PutEndValue (
        double Value );
    double GetStartValue ( );
    void PutStartValue (
        double Value );
    VARIANT_BOOL GetDrawBehind ( );
    void PutDrawBehind (
        VARIANT_BOOL Value );
    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR Value );
    IGradientPtr GetGradient ( );
    long GetTransparency ( );
    void PutTransparency (
        long Value );
    VARIANT_BOOL Clicked (
        long X,
        long Y );
    VARIANT_BOOL GetResizeStart ( );
    void PutResizeStart (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetResizeEnd ( );
    void PutResizeEnd (
        VARIANT_BOOL Value );
    IPenPtr GetStartLinePen ( );
    IPenPtr GetEndLinePen ( );
    VARIANT_BOOL GetDrawBehindAxes ( );
    void PutDrawBehindAxes (
        VARIANT_BOOL Value );
    short GetCursor ( );
    void PutCursor (
        short Value );
    ITeePicturePtr GetPicture ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Brush (
        /*[out,retval]*/ struct IBrush * * Value ) = 0;
      virtual HRESULT __stdcall get_Pen (
        /*[out,retval]*/ struct IPen * * Value ) = 0;
      virtual HRESULT __stdcall get_EndValue (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_EndValue (
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall get_StartValue (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_StartValue (
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall get_DrawBehind (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_DrawBehind (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * Value ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR Value ) = 0;
      virtual HRESULT __stdcall get_Gradient (
        /*[out,retval]*/ struct IGradient * * Value ) = 0;
      virtual HRESULT __stdcall get_Transparency (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Transparency (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_Clicked (
        /*[in]*/ long X,
        /*[in]*/ long Y,
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall get_ResizeStart (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_ResizeStart (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_ResizeEnd (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_ResizeEnd (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_StartLinePen (
        /*[out,retval]*/ struct IPen * * Value ) = 0;
      virtual HRESULT __stdcall get_EndLinePen (
        /*[out,retval]*/ struct IPen * * Value ) = 0;
      virtual HRESULT __stdcall get_DrawBehindAxes (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_DrawBehindAxes (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_Cursor (
        /*[out,retval]*/ short * Value ) = 0;
      virtual HRESULT __stdcall put_Cursor (
        /*[in]*/ short Value ) = 0;
      virtual HRESULT __stdcall get_Picture (
        /*[out,retval]*/ struct ITeePicture * * Value ) = 0;
};

struct __declspec(uuid("7e60af48-f4e1-4c2c-88c3-6af354de9b1a"))
IHorizLineSeries : ILineSeries
{};

struct __declspec(uuid("dd6c1000-3809-4f21-bc98-bc74976ec22c"))
ILegendSymbol : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetContinuous,put=PutContinuous))
    VARIANT_BOOL Continuous;
    __declspec(property(get=GetPosition,put=PutPosition))
    enum ELegendSymbolPosition Position;
    __declspec(property(get=GetWidth,put=PutWidth))
    long Width;
    __declspec(property(get=GetWidthUnits,put=PutWidthUnits))
    enum ELegendSymbolSize WidthUnits;
    __declspec(property(get=GetDefaultPen,put=PutDefaultPen))
    VARIANT_BOOL DefaultPen;
    __declspec(property(get=GetPen))
    IPenPtr Pen;
    __declspec(property(get=GetSquared,put=PutSquared))
    VARIANT_BOOL Squared;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetGradient))
    IGradientPtr Gradient;
    __declspec(property(get=GetShadow))
    ITeeShadowPtr Shadow;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetContinuous ( );
    void PutContinuous (
        VARIANT_BOOL Value );
    enum ELegendSymbolPosition GetPosition ( );
    void PutPosition (
        enum ELegendSymbolPosition Value );
    long GetWidth ( );
    void PutWidth (
        long Value );
    enum ELegendSymbolSize GetWidthUnits ( );
    void PutWidthUnits (
        enum ELegendSymbolSize Value );
    VARIANT_BOOL GetDefaultPen ( );
    void PutDefaultPen (
        VARIANT_BOOL Value );
    IPenPtr GetPen ( );
    VARIANT_BOOL GetSquared ( );
    void PutSquared (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL Value );
    IGradientPtr GetGradient ( );
    ITeeShadowPtr GetShadow ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Continuous (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Continuous (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_Position (
        /*[out,retval]*/ enum ELegendSymbolPosition * Value ) = 0;
      virtual HRESULT __stdcall put_Position (
        /*[in]*/ enum ELegendSymbolPosition Value ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_WidthUnits (
        /*[out,retval]*/ enum ELegendSymbolSize * Value ) = 0;
      virtual HRESULT __stdcall put_WidthUnits (
        /*[in]*/ enum ELegendSymbolSize Value ) = 0;
      virtual HRESULT __stdcall get_DefaultPen (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_DefaultPen (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_Pen (
        /*[out,retval]*/ struct IPen * * Value ) = 0;
      virtual HRESULT __stdcall get_Squared (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Squared (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_Gradient (
        /*[out,retval]*/ struct IGradient * * Value ) = 0;
      virtual HRESULT __stdcall get_Shadow (
        /*[out,retval]*/ struct ITeeShadow * * Value ) = 0;
};

struct __declspec(uuid("caa881dc-ad98-4d36-9c1d-e2d722af26e1"))
ITeeFont : IChartFont
{
    //
    // Property data
    //

    __declspec(property(get=GetInterCharSize,put=PutInterCharSize))
    long InterCharSize;
    __declspec(property(get=GetShadow))
    ITeeShadowPtr Shadow;
    __declspec(property(get=GetOutline))
    IPenPtr Outline;
    __declspec(property(get=GetGradient))
    IGradientPtr Gradient;
    __declspec(property(get=GetPicture))
    ITeePicturePtr Picture;

    //
    // Wrapper methods for error-handling
    //

    long GetInterCharSize ( );
    void PutInterCharSize (
        long Value );
    ITeeShadowPtr GetShadow ( );
    IPenPtr GetOutline ( );
    IGradientPtr GetGradient ( );
    HRESULT ShowEditor ( );
    ITeePicturePtr GetPicture ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_InterCharSize (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_InterCharSize (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_Shadow (
        /*[out,retval]*/ struct ITeeShadow * * Value ) = 0;
      virtual HRESULT __stdcall get_Outline (
        /*[out,retval]*/ struct IPen * * Value ) = 0;
      virtual HRESULT __stdcall get_Gradient (
        /*[out,retval]*/ struct IGradient * * Value ) = 0;
      virtual HRESULT __stdcall raw_ShowEditor ( ) = 0;
      virtual HRESULT __stdcall get_Picture (
        /*[out,retval]*/ struct ITeePicture * * Value ) = 0;
};

struct __declspec(uuid("9ad08718-5ecd-46d8-8eaf-7fd5ac035c06"))
ITeePreviewPanel : ITeeLinked
{
    //
    // Property data
    //

    __declspec(property(get=GetAllowResize,put=PutAllowResize))
    VARIANT_BOOL AllowResize;
    __declspec(property(get=GetAllowMove,put=PutAllowMove))
    VARIANT_BOOL AllowMove;
    __declspec(property(get=GetAsBitmap,put=PutAsBitmap))
    VARIANT_BOOL AsBitmap;
    __declspec(property(get=GetDragImage,put=PutDragImage))
    VARIANT_BOOL DragImage;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    enum ETeePreviewPanelOrientation Orientation;
    __declspec(property(get=GetPaperColor,put=PutPaperColor))
    OLE_COLOR PaperColor;
    __declspec(property(get=GetShadowColor,put=PutShadowColor))
    OLE_COLOR ShadowColor;
    __declspec(property(get=GetShadowSize,put=PutShadowSize))
    long ShadowSize;
    __declspec(property(get=GetShowImage,put=PutShowImage))
    VARIANT_BOOL ShowImage;
    __declspec(property(get=GetTitle,put=PutTitle))
    _bstr_t Title;
    __declspec(property(get=GetPanels))
    ITeePanelsListPtr Panels;
    __declspec(property(get=GetCanvas))
    ICanvasPtr Canvas;
    __declspec(property(get=GetGradient))
    IGradientPtr Gradient;
    __declspec(property(get=GetPaperRect))
    ITeeRectPtr PaperRect;
    __declspec(property(get=GetMargins))
    IPenPtr Margins;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetAllowResize ( );
    void PutAllowResize (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetAllowMove ( );
    void PutAllowMove (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetAsBitmap ( );
    void PutAsBitmap (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetDragImage ( );
    void PutDragImage (
        VARIANT_BOOL Value );
    enum ETeePreviewPanelOrientation GetOrientation ( );
    void PutOrientation (
        enum ETeePreviewPanelOrientation Value );
    OLE_COLOR GetPaperColor ( );
    void PutPaperColor (
        OLE_COLOR Value );
    OLE_COLOR GetShadowColor ( );
    void PutShadowColor (
        OLE_COLOR Value );
    long GetShadowSize ( );
    void PutShadowSize (
        long Value );
    VARIANT_BOOL GetShowImage ( );
    void PutShowImage (
        VARIANT_BOOL Value );
    _bstr_t GetTitle ( );
    void PutTitle (
        _bstr_t Value );
    HRESULT Repaint ( );
    ITeePanelsListPtr GetPanels ( );
    HRESULT AddChart (
        struct ITChart * Value );
    IGradientPtr GetGradient ( );
    IPenPtr GetMargins ( );
    HRESULT PrintPage ( );
    HRESULT AddChartLink (
        long Value );
    ICanvasPtr GetCanvas ( );
    ITeeRectPtr GetPaperRect ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_AllowResize (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_AllowResize (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_AllowMove (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_AllowMove (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_AsBitmap (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_AsBitmap (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_DragImage (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_DragImage (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_Orientation (
        /*[out,retval]*/ enum ETeePreviewPanelOrientation * Value ) = 0;
      virtual HRESULT __stdcall put_Orientation (
        /*[in]*/ enum ETeePreviewPanelOrientation Value ) = 0;
      virtual HRESULT __stdcall get_PaperColor (
        /*[out,retval]*/ OLE_COLOR * Value ) = 0;
      virtual HRESULT __stdcall put_PaperColor (
        /*[in]*/ OLE_COLOR Value ) = 0;
      virtual HRESULT __stdcall get_ShadowColor (
        /*[out,retval]*/ OLE_COLOR * Value ) = 0;
      virtual HRESULT __stdcall put_ShadowColor (
        /*[in]*/ OLE_COLOR Value ) = 0;
      virtual HRESULT __stdcall get_ShadowSize (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_ShadowSize (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_ShowImage (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_ShowImage (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_Title (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall put_Title (
        /*[in]*/ BSTR Value ) = 0;
      virtual HRESULT __stdcall raw_Repaint ( ) = 0;
      virtual HRESULT __stdcall get_Panels (
        /*[out,retval]*/ struct ITeePanelsList * * Value ) = 0;
      virtual HRESULT __stdcall raw_AddChart (
        /*[in]*/ struct ITChart * Value ) = 0;
      virtual HRESULT __stdcall get_Gradient (
        /*[out,retval]*/ struct IGradient * * Value ) = 0;
      virtual HRESULT __stdcall get_Margins (
        /*[out,retval]*/ struct IPen * * Value ) = 0;
      virtual HRESULT __stdcall raw_PrintPage ( ) = 0;
      virtual HRESULT __stdcall raw_AddChartLink (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_Canvas (
        /*[out,retval]*/ struct ICanvas * * Value ) = 0;
      virtual HRESULT __stdcall get_PaperRect (
        /*[out,retval]*/ struct ITeeRect * * Value ) = 0;
};

struct __declspec(uuid("48b0335c-92e1-43b5-a39a-f67f928788d3"))
ICustomBoxSeries : IPointSeries
{
    //
    // Property data
    //

    __declspec(property(get=GetExtrOut))
    IPointerPtr ExtrOut;
    __declspec(property(get=GetMedianPen))
    IPenPtr MedianPen;
    __declspec(property(get=GetMildOut))
    IPointerPtr MildOut;
    __declspec(property(get=GetPosition,put=PutPosition))
    double Position;
    __declspec(property(get=GetWhiskerLength,put=PutWhiskerLength))
    double WhiskerLength;
    __declspec(property(get=GetWhiskerPen))
    IPenPtr WhiskerPen;
    __declspec(property(get=GetBox))
    IPointerPtr Box;
    __declspec(property(get=GetMedian,put=PutMedian))
    double Median;
    __declspec(property(get=GetQuartile1,put=PutQuartile1))
    double Quartile1;
    __declspec(property(get=GetQuartile3,put=PutQuartile3))
    double Quartile3;
    __declspec(property(get=GetInnerFence1,put=PutInnerFence1))
    double InnerFence1;
    __declspec(property(get=GetInnerFence3,put=PutInnerFence3))
    double InnerFence3;
    __declspec(property(get=GetOuterFence1,put=PutOuterFence1))
    double OuterFence1;
    __declspec(property(get=GetOuterFence3,put=PutOuterFence3))
    double OuterFence3;
    __declspec(property(get=GetAdjacentPoint1,put=PutAdjacentPoint1))
    double AdjacentPoint1;
    __declspec(property(get=GetAdjacentPoint3,put=PutAdjacentPoint3))
    double AdjacentPoint3;
    __declspec(property(get=GetUseCustomValues,put=PutUseCustomValues))
    VARIANT_BOOL UseCustomValues;

    //
    // Wrapper methods for error-handling
    //

    IPointerPtr GetExtrOut ( );
    IPenPtr GetMedianPen ( );
    IPointerPtr GetMildOut ( );
    double GetPosition ( );
    void PutPosition (
        double Value );
    double GetWhiskerLength ( );
    void PutWhiskerLength (
        double Value );
    IPenPtr GetWhiskerPen ( );
    IPointerPtr GetBox ( );
    double GetMedian ( );
    void PutMedian (
        double Value );
    double GetQuartile1 ( );
    void PutQuartile1 (
        double Value );
    double GetQuartile3 ( );
    void PutQuartile3 (
        double Value );
    double GetInnerFence1 ( );
    void PutInnerFence1 (
        double Value );
    double GetInnerFence3 ( );
    void PutInnerFence3 (
        double Value );
    double GetOuterFence1 ( );
    void PutOuterFence1 (
        double Value );
    double GetOuterFence3 ( );
    void PutOuterFence3 (
        double Value );
    double GetAdjacentPoint1 ( );
    void PutAdjacentPoint1 (
        double Value );
    double GetAdjacentPoint3 ( );
    void PutAdjacentPoint3 (
        double Value );
    VARIANT_BOOL GetUseCustomValues ( );
    void PutUseCustomValues (
        VARIANT_BOOL Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ExtrOut (
        /*[out,retval]*/ struct IPointer * * Value ) = 0;
      virtual HRESULT __stdcall get_MedianPen (
        /*[out,retval]*/ struct IPen * * Value ) = 0;
      virtual HRESULT __stdcall get_MildOut (
        /*[out,retval]*/ struct IPointer * * Value ) = 0;
      virtual HRESULT __stdcall get_Position (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_Position (
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall get_WhiskerLength (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_WhiskerLength (
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall get_WhiskerPen (
        /*[out,retval]*/ struct IPen * * Value ) = 0;
      virtual HRESULT __stdcall get_Box (
        /*[out,retval]*/ struct IPointer * * Value ) = 0;
      virtual HRESULT __stdcall get_Median (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_Median (
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall get_Quartile1 (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_Quartile1 (
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall get_Quartile3 (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_Quartile3 (
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall get_InnerFence1 (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_InnerFence1 (
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall get_InnerFence3 (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_InnerFence3 (
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall get_OuterFence1 (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_OuterFence1 (
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall get_OuterFence3 (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_OuterFence3 (
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall get_AdjacentPoint1 (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_AdjacentPoint1 (
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall get_AdjacentPoint3 (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_AdjacentPoint3 (
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall get_UseCustomValues (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_UseCustomValues (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
};

struct __declspec(uuid("63c98e03-2c0c-4e6a-8de8-3d0fc1e75a9c"))
IHorizBoxPlotSeries : ICustomBoxSeries
{
    //
    // Wrapper methods for error-handling
    //

    double MaxYValue ( );
    double MinYValue ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_MaxYValue (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall raw_MinYValue (
        /*[out,retval]*/ double * Value ) = 0;
};

struct __declspec(uuid("ba6d1c6d-36cf-42d5-9098-137252458eec"))
IBarJoinSeries : IBarSeries
{
    //
    // Property data
    //

    __declspec(property(get=GetJoinPen))
    IPenPtr JoinPen;

    //
    // Wrapper methods for error-handling
    //

    IPenPtr GetJoinPen ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_JoinPen (
        /*[out,retval]*/ struct IPen * * Value ) = 0;
};

struct __declspec(uuid("0e0f46cc-adef-4d24-9925-3e0d224e8a7d"))
ISmithSeries : ICircledSeries
{
    //
    // Property data
    //

    __declspec(property(get=GetCLabels,put=PutCLabels))
    VARIANT_BOOL CLabels;
    __declspec(property(get=GetCLabelsFont))
    ITeeFontPtr CLabelsFont;
    __declspec(property(get=GetResistenceValues))
    IValueListPtr ResistenceValues;
    __declspec(property(get=GetReactanceValues))
    IValueListPtr ReactanceValues;
    __declspec(property(get=GetPointer))
    IPointerPtr Pointer;
    __declspec(property(get=GetRCirclePen))
    IPenPtr RCirclePen;
    __declspec(property(get=GetRLabels,put=PutRLabels))
    VARIANT_BOOL RLabels;
    __declspec(property(get=GetRLabelsFont))
    ITeeFontPtr RLabelsFont;
    __declspec(property(get=GetCCirclePen))
    IPenPtr CCirclePen;
    __declspec(property(get=GetCirclePen))
    IPenPtr CirclePen;
    __declspec(property(get=GetImagSymbol,put=PutImagSymbol))
    _bstr_t ImagSymbol;

    //
    // Wrapper methods for error-handling
    //

    IPenPtr GetCCirclePen ( );
    IPenPtr GetCirclePen ( );
    VARIANT_BOOL GetCLabels ( );
    void PutCLabels (
        VARIANT_BOOL Value );
    ITeeFontPtr GetCLabelsFont ( );
    IValueListPtr GetResistenceValues ( );
    IValueListPtr GetReactanceValues ( );
    IPointerPtr GetPointer ( );
    IPenPtr GetRCirclePen ( );
    VARIANT_BOOL GetRLabels ( );
    void PutRLabels (
        VARIANT_BOOL Value );
    ITeeFontPtr GetRLabelsFont ( );
    _bstr_t GetImagSymbol ( );
    void PutImagSymbol (
        _bstr_t Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_CCirclePen (
        /*[out,retval]*/ struct IPen * * Value ) = 0;
      virtual HRESULT __stdcall get_CirclePen (
        /*[out,retval]*/ struct IPen * * Value ) = 0;
      virtual HRESULT __stdcall get_CLabels (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_CLabels (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_CLabelsFont (
        /*[out,retval]*/ struct ITeeFont * * Value ) = 0;
      virtual HRESULT __stdcall get_ResistenceValues (
        /*[out,retval]*/ struct IValueList * * Value ) = 0;
      virtual HRESULT __stdcall get_ReactanceValues (
        /*[out,retval]*/ struct IValueList * * Value ) = 0;
      virtual HRESULT __stdcall get_Pointer (
        /*[out,retval]*/ struct IPointer * * Value ) = 0;
      virtual HRESULT __stdcall get_RCirclePen (
        /*[out,retval]*/ struct IPen * * Value ) = 0;
      virtual HRESULT __stdcall get_RLabels (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_RLabels (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_RLabelsFont (
        /*[out,retval]*/ struct ITeeFont * * Value ) = 0;
      virtual HRESULT __stdcall get_ImagSymbol (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall put_ImagSymbol (
        /*[in]*/ BSTR Value ) = 0;
};

struct __declspec(uuid("880e79b6-b0e0-4a14-a68f-c75912e6eb9d"))
IContourSeries : ICustom3DGridSeries
{
    //
    // Property data
    //

    __declspec(property(get=GetLevels))
    IContourLevelsPtr Levels;
    __declspec(property(get=GetNumLevels,put=PutNumLevels))
    long NumLevels;
    __declspec(property(get=GetYPositionLevel,put=PutYPositionLevel))
    VARIANT_BOOL YPositionLevel;
    __declspec(property(get=GetYPosition,put=PutYPosition))
    double YPosition;
    __declspec(property(get=GetAutomaticLevels,put=PutAutomaticLevels))
    VARIANT_BOOL AutomaticLevels;
    __declspec(property(get=GetSmoothing))
    ISmoothPointsPtr Smoothing;
    __declspec(property(get=GetContourMarks))
    IContourMarksPtr ContourMarks;
    __declspec(property(get=GetFrame))
    IChartHiddenPenPtr Frame;
    __declspec(property(get=GetPointer))
    IPointerPtr Pointer;
    __declspec(property(get=GetTransparency,put=PutTransparency))
    long Transparency;
    __declspec(property(get=GetLegendLines,put=PutLegendLines))
    VARIANT_BOOL LegendLines;
    __declspec(property(get=GetLinesColor,put=PutLinesColor))
    OLE_COLOR LinesColor;

    //
    // Wrapper methods for error-handling
    //

    long GetNumLevels ( );
    void PutNumLevels (
        long Value );
    VARIANT_BOOL GetYPositionLevel ( );
    void PutYPositionLevel (
        VARIANT_BOOL Value );
    double GetYPosition ( );
    void PutYPosition (
        double Value );
    IContourLevelsPtr GetLevels ( );
    VARIANT_BOOL GetAutomaticLevels ( );
    void PutAutomaticLevels (
        VARIANT_BOOL Value );
    HRESULT CreateAutoLevels ( );
    ISmoothPointsPtr GetSmoothing ( );
    IContourMarksPtr GetContourMarks ( );
    IChartHiddenPenPtr GetFrame ( );
    IPointerPtr GetPointer ( );
    long GetTransparency ( );
    void PutTransparency (
        long Value );
    VARIANT_BOOL GetLegendLines ( );
    void PutLegendLines (
        VARIANT_BOOL Value );
    OLE_COLOR GetLinesColor ( );
    void PutLinesColor (
        OLE_COLOR Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_NumLevels (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_NumLevels (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_YPositionLevel (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_YPositionLevel (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_YPosition (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_YPosition (
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall get_Levels (
        /*[out,retval]*/ struct IContourLevels * * Value ) = 0;
      virtual HRESULT __stdcall get_AutomaticLevels (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_AutomaticLevels (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall raw_CreateAutoLevels ( ) = 0;
      virtual HRESULT __stdcall get_Smoothing (
        /*[out,retval]*/ struct ISmoothPoints * * Value ) = 0;
      virtual HRESULT __stdcall get_ContourMarks (
        /*[out,retval]*/ struct IContourMarks * * Value ) = 0;
      virtual HRESULT __stdcall get_Frame (
        /*[out,retval]*/ struct IChartHiddenPen * * Value ) = 0;
      virtual HRESULT __stdcall get_Pointer (
        /*[out,retval]*/ struct IPointer * * Value ) = 0;
      virtual HRESULT __stdcall get_Transparency (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Transparency (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_LegendLines (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_LegendLines (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_LinesColor (
        /*[out,retval]*/ OLE_COLOR * Value ) = 0;
      virtual HRESULT __stdcall put_LinesColor (
        /*[in]*/ OLE_COLOR Value ) = 0;
};

struct __declspec(uuid("66906253-4755-480d-82b1-9492f09c7b9b"))
IBoxPlotSeries : ICustomBoxSeries
{
    //
    // Wrapper methods for error-handling
    //

    double MaxXValue ( );
    double MinXValue ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_MaxXValue (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall raw_MinXValue (
        /*[out,retval]*/ double * Value ) = 0;
};

struct __declspec(uuid("c593e77c-0054-4ec6-8bdf-e5bf5bde37a1"))
IMapPolygon : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBrush))
    IBrushPtr Brush;
    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;
    __declspec(property(get=GetGradient))
    IGradientPtr Gradient;
    __declspec(property(get=GetParentBrush,put=PutParentBrush))
    VARIANT_BOOL ParentBrush;
    __declspec(property(get=GetParentPen,put=PutParentPen))
    VARIANT_BOOL ParentPen;
    __declspec(property(get=GetPen))
    IPenPtr Pen;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetZ,put=PutZ))
    double Z;
    __declspec(property(get=GetTransparency,put=PutTransparency))
    long Transparency;
    __declspec(property(get=GetGetPoints))
    IPointArrayPtr GetPoints;
    __declspec(property(get=GetClosed,put=PutClosed))
    VARIANT_BOOL Closed;
    __declspec(property(get=GetIndex,put=PutIndex))
    long Index;
    __declspec(property(get=GetActive,put=PutActive))
    VARIANT_BOOL Active;

    //
    // Wrapper methods for error-handling
    //

    IBrushPtr GetBrush ( );
    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR Value );
    IGradientPtr GetGradient ( );
    VARIANT_BOOL GetParentBrush ( );
    void PutParentBrush (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetParentPen ( );
    void PutParentPen (
        VARIANT_BOOL Value );
    IPenPtr GetPen ( );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t Value );
    double GetZ ( );
    void PutZ (
        double Value );
    long AddXY (
        double X,
        double Y );
    long GetTransparency ( );
    void PutTransparency (
        long Value );
    VARIANT_BOOL Visible ( );
    VARIANT_BOOL GetClosed ( );
    void PutClosed (
        VARIANT_BOOL Value );
    IPointArrayPtr GetGetPoints ( );
    long GetIndex ( );
    void PutIndex (
        long Value );
    VARIANT_BOOL GetActive ( );
    void PutActive (
        VARIANT_BOOL Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Brush (
        /*[out,retval]*/ struct IBrush * * Value ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * Value ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR Value ) = 0;
      virtual HRESULT __stdcall get_Gradient (
        /*[out,retval]*/ struct IGradient * * Value ) = 0;
      virtual HRESULT __stdcall get_ParentBrush (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_ParentBrush (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_ParentPen (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_ParentPen (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_Pen (
        /*[out,retval]*/ struct IPen * * Value ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR Value ) = 0;
      virtual HRESULT __stdcall get_Z (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_Z (
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall raw_AddXY (
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_Transparency (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Transparency (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_Visible (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall get_Closed (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Closed (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_GetPoints (
        /*[out,retval]*/ struct IPointArray * * Value ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Index (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_Active (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Active (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
};

struct __declspec(uuid("004303f2-ee70-4342-b85a-01d964725ddf"))
IMapPolygonList : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPolygon))
    IMapPolygonPtr Polygon[];
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    long Add ( );
    IMapPolygonPtr GetPolygon (
        long Index );
    long GetCount ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ long * Index ) = 0;
      virtual HRESULT __stdcall get_Polygon (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IMapPolygon * * Value1 ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Value ) = 0;
};

struct __declspec(uuid("04a6ac54-0b24-46b6-8606-28895fed9551"))
IMapSeries : ICustom3DPaletteSeries
{
    //
    // Property data
    //

    __declspec(property(get=GetShapes))
    IMapPolygonListPtr Shapes;
    __declspec(property(get=GetPointSize,put=PutPointSize))
    long PointSize;
    __declspec(property(get=GetShadow))
    ITeeShadowPtr Shadow;
    __declspec(property(get=GetTransparent,put=PutTransparent))
    VARIANT_BOOL Transparent;
    __declspec(property(get=GetTransparency,put=PutTransparency))
    long Transparency;

    //
    // Wrapper methods for error-handling
    //

    IMapPolygonListPtr GetShapes ( );
    long GetPointSize ( );
    void PutPointSize (
        long Value );
    ITeeShadowPtr GetShadow ( );
    VARIANT_BOOL GetTransparent ( );
    void PutTransparent (
        VARIANT_BOOL Value );
    long GetTransparency ( );
    void PutTransparency (
        long Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Shapes (
        /*[out,retval]*/ struct IMapPolygonList * * Value ) = 0;
      virtual HRESULT __stdcall get_PointSize (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_PointSize (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_Shadow (
        /*[out,retval]*/ struct ITeeShadow * * Value ) = 0;
      virtual HRESULT __stdcall get_Transparent (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Transparent (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_Transparency (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Transparency (
        /*[in]*/ long Value ) = 0;
};

struct __declspec(uuid("ce3e920a-62dc-4fa5-a091-f9af6a3f816e"))
ICallout : IPointer
{
    //
    // Property data
    //

    __declspec(property(get=GetArrow))
    IPenPtr Arrow;
    __declspec(property(get=GetArrowHead,put=PutArrowHead))
    enum EArrowHeadStyle ArrowHead;
    __declspec(property(get=GetArrowHeadSize,put=PutArrowHeadSize))
    long ArrowHeadSize;
    __declspec(property(get=GetDistance,put=PutDistance))
    long Distance;

    //
    // Wrapper methods for error-handling
    //

    IPenPtr GetArrow ( );
    enum EArrowHeadStyle GetArrowHead ( );
    void PutArrowHead (
        enum EArrowHeadStyle Value );
    long GetArrowHeadSize ( );
    void PutArrowHeadSize (
        long Value );
    long GetDistance ( );
    void PutDistance (
        long Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Arrow (
        /*[out,retval]*/ struct IPen * * Value ) = 0;
      virtual HRESULT __stdcall get_ArrowHead (
        /*[out,retval]*/ enum EArrowHeadStyle * Value ) = 0;
      virtual HRESULT __stdcall put_ArrowHead (
        /*[in]*/ enum EArrowHeadStyle Value ) = 0;
      virtual HRESULT __stdcall get_ArrowHeadSize (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_ArrowHeadSize (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_Distance (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Distance (
        /*[in]*/ long Value ) = 0;
};

struct __declspec(uuid("85ad8716-345b-43bb-8283-fb0a529f90f1"))
IAnnotationCallout : ICallout
{
    //
    // Property data
    //

    __declspec(property(get=GetXPosition,put=PutXPosition))
    long XPosition;
    __declspec(property(get=GetYPosition,put=PutYPosition))
    long YPosition;
    __declspec(property(get=GetZPosition,put=PutZPosition))
    long ZPosition;

    //
    // Wrapper methods for error-handling
    //

    long GetXPosition ( );
    void PutXPosition (
        long Value );
    long GetYPosition ( );
    void PutYPosition (
        long Value );
    long GetZPosition ( );
    void PutZPosition (
        long Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_XPosition (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_XPosition (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_YPosition (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_YPosition (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_ZPosition (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_ZPosition (
        /*[in]*/ long Value ) = 0;
};

struct __declspec(uuid("a542ef07-2cda-4617-8eac-6795425814fa"))
IAnnotationTool : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPosition,put=PutPosition))
    enum EAnnotationPosition Position;
    __declspec(property(get=GetShape))
    ITeeShapePanelPtr Shape;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetCallout))
    IAnnotationCalloutPtr Callout;
    __declspec(property(get=GetTextAlignment,put=PutTextAlignment))
    enum ETextAlignment TextAlignment;
    __declspec(property(get=GetWidth,put=PutWidth))
    long Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    long Height;
    __declspec(property(get=GetCursor,put=PutCursor))
    short Cursor;
    __declspec(property(get=GetLeft,put=PutLeft))
    long Left;
    __declspec(property(get=GetTop,put=PutTop))
    long Top;
    __declspec(property(get=GetAutoSize,put=PutAutoSize))
    VARIANT_BOOL AutoSize;
    __declspec(property(get=GetBounds))
    struct TeeRect Bounds;
    __declspec(property(get=GetBrush))
    IBrushPtr Brush;
    __declspec(property(get=GetPositionUnits,put=PutPositionUnits))
    enum EPositionUnits PositionUnits;

    //
    // Wrapper methods for error-handling
    //

    enum EAnnotationPosition GetPosition ( );
    void PutPosition (
        enum EAnnotationPosition Value );
    ITeeShapePanelPtr GetShape ( );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t Value );
    IAnnotationCalloutPtr GetCallout ( );
    enum ETextAlignment GetTextAlignment ( );
    void PutTextAlignment (
        enum ETextAlignment Value );
    VARIANT_BOOL Clicked (
        long X,
        long Y );
    long GetWidth ( );
    void PutWidth (
        long Value );
    long GetHeight ( );
    void PutHeight (
        long Value );
    short GetCursor ( );
    void PutCursor (
        short Value );
    long GetLeft ( );
    void PutLeft (
        long Value );
    long GetTop ( );
    void PutTop (
        long Value );
    VARIANT_BOOL GetAutoSize ( );
    void PutAutoSize (
        VARIANT_BOOL Value );
    IBrushPtr GetBrush ( );
    struct TeeRect GetBounds ( );
    HRESULT SetBounds (
        long Left,
        long Top,
        long Right,
        long Bottom );
    enum EPositionUnits GetPositionUnits ( );
    void PutPositionUnits (
        enum EPositionUnits Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Position (
        /*[out,retval]*/ enum EAnnotationPosition * Value ) = 0;
      virtual HRESULT __stdcall put_Position (
        /*[in]*/ enum EAnnotationPosition Value ) = 0;
      virtual HRESULT __stdcall get_Shape (
        /*[out,retval]*/ struct ITeeShapePanel * * Value ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR Value ) = 0;
      virtual HRESULT __stdcall get_Callout (
        /*[out,retval]*/ struct IAnnotationCallout * * Value ) = 0;
      virtual HRESULT __stdcall get_TextAlignment (
        /*[out,retval]*/ enum ETextAlignment * Value ) = 0;
      virtual HRESULT __stdcall put_TextAlignment (
        /*[in]*/ enum ETextAlignment Value ) = 0;
      virtual HRESULT __stdcall raw_Clicked (
        /*[in]*/ long X,
        /*[in]*/ long Y,
        /*[out,retval]*/ VARIANT_BOOL * result ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_Cursor (
        /*[out,retval]*/ short * Value ) = 0;
      virtual HRESULT __stdcall put_Cursor (
        /*[in]*/ short Value ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_AutoSize (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_AutoSize (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_Brush (
        /*[out,retval]*/ struct IBrush * * Value ) = 0;
      virtual HRESULT __stdcall get_Bounds (
        /*[out,retval]*/ struct TeeRect * Value ) = 0;
      virtual HRESULT __stdcall raw_SetBounds (
        /*[in]*/ long Left,
        /*[in]*/ long Top,
        /*[in]*/ long Right,
        /*[in]*/ long Bottom ) = 0;
      virtual HRESULT __stdcall get_PositionUnits (
        /*[out,retval]*/ enum EPositionUnits * Value ) = 0;
      virtual HRESULT __stdcall put_PositionUnits (
        /*[in]*/ enum EPositionUnits Value ) = 0;
};

struct __declspec(uuid("a9996639-1fde-4a8c-8865-0ddf66c784ad"))
IPageNumTool : IAnnotationTool
{
    //
    // Property data
    //

    __declspec(property(get=GetFormat,put=PutFormat))
    _bstr_t Format;
    __declspec(property(get=GetShowButtons,put=PutShowButtons))
    VARIANT_BOOL ShowButtons;
    __declspec(property(get=GetButtonPen))
    IPenPtr ButtonPen;
    __declspec(property(get=GetButtonWidth,put=PutButtonWidth))
    long ButtonWidth;
    __declspec(property(get=GetDisabledButton))
    IGradientPtr DisabledButton;
    __declspec(property(get=GetEnabledButton))
    IGradientPtr EnabledButton;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetFormat ( );
    void PutFormat (
        _bstr_t Value );
    VARIANT_BOOL GetShowButtons ( );
    void PutShowButtons (
        VARIANT_BOOL Value );
    IPenPtr GetButtonPen ( );
    long GetButtonWidth ( );
    void PutButtonWidth (
        long Value );
    IGradientPtr GetDisabledButton ( );
    IGradientPtr GetEnabledButton ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Format (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall put_Format (
        /*[in]*/ BSTR Value ) = 0;
      virtual HRESULT __stdcall get_ShowButtons (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_ShowButtons (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_ButtonPen (
        /*[out,retval]*/ struct IPen * * Value ) = 0;
      virtual HRESULT __stdcall get_ButtonWidth (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_ButtonWidth (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_DisabledButton (
        /*[out,retval]*/ struct IGradient * * Value ) = 0;
      virtual HRESULT __stdcall get_EnabledButton (
        /*[out,retval]*/ struct IGradient * * Value ) = 0;
};

struct __declspec(uuid("389a80d6-77cd-4dfd-af14-4ff640cbc7d9"))
IMarksCallout : ICallout
{
    //
    // Property data
    //

    __declspec(property(get=GetLength,put=PutLength))
    long Length;

    //
    // Wrapper methods for error-handling
    //

    long GetLength ( );
    void PutLength (
        long Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Length (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Length (
        /*[in]*/ long Value ) = 0;
};

struct __declspec(uuid("2c0d1571-c240-4c42-a090-73a927c3e332"))
IGanttTool : ICustomToolSeries
{
    //
    // Property data
    //

    __declspec(property(get=GetAllowDrag,put=PutAllowDrag))
    VARIANT_BOOL AllowDrag;
    __declspec(property(get=GetAllowResize,put=PutAllowResize))
    VARIANT_BOOL AllowResize;
    __declspec(property(get=GetCursorDrag,put=PutCursorDrag))
    short CursorDrag;
    __declspec(property(get=GetCursorResize,put=PutCursorResize))
    short CursorResize;
    __declspec(property(get=GetMinPixels,put=PutMinPixels))
    long MinPixels;
    __declspec(property(get=GetGantt))
    IGanttSeriesPtr Gantt;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetAllowDrag ( );
    void PutAllowDrag (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetAllowResize ( );
    void PutAllowResize (
        VARIANT_BOOL Value );
    short GetCursorDrag ( );
    void PutCursorDrag (
        short Value );
    short GetCursorResize ( );
    void PutCursorResize (
        short Value );
    long GetMinPixels ( );
    void PutMinPixels (
        long Value );
    IGanttSeriesPtr GetGantt ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_AllowDrag (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_AllowDrag (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_AllowResize (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_AllowResize (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_CursorDrag (
        /*[out,retval]*/ short * Value ) = 0;
      virtual HRESULT __stdcall put_CursorDrag (
        /*[in]*/ short Value ) = 0;
      virtual HRESULT __stdcall get_CursorResize (
        /*[out,retval]*/ short * Value ) = 0;
      virtual HRESULT __stdcall put_CursorResize (
        /*[in]*/ short Value ) = 0;
      virtual HRESULT __stdcall get_MinPixels (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_MinPixels (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_Gantt (
        /*[out,retval]*/ struct IGanttSeries * * Value ) = 0;
};

struct __declspec(uuid("21a5a8c7-526f-4931-9c61-0a7b66f1fc36"))
IHorizAreaSeries : IAreaSeries
{};

struct __declspec(uuid("766eccd5-e868-4a5a-9cbd-cbcc657ecf9b"))
IPointFigureSeries : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCloseValues))
    IValueListPtr CloseValues;
    __declspec(property(get=GetDateValues))
    IValueListPtr DateValues;
    __declspec(property(get=GetHighValues))
    IValueListPtr HighValues;
    __declspec(property(get=GetLowValues))
    IValueListPtr LowValues;
    __declspec(property(get=GetOpenValues))
    IValueListPtr OpenValues;
    __declspec(property(get=GetBoxSize,put=PutBoxSize))
    double BoxSize;
    __declspec(property(get=GetReversalAmount,put=PutReversalAmount))
    double ReversalAmount;
    __declspec(property(get=GetDownSymbol))
    IPointerPtr DownSymbol;
    __declspec(property(get=GetUpSymbol))
    IPointerPtr UpSymbol;

    //
    // Wrapper methods for error-handling
    //

    IValueListPtr GetCloseValues ( );
    IValueListPtr GetDateValues ( );
    IValueListPtr GetHighValues ( );
    IValueListPtr GetLowValues ( );
    IValueListPtr GetOpenValues ( );
    long AddOHLC (
        double DateValue,
        double OpenValue,
        double HighValue,
        double LowValue,
        double CloseValue );
    double GetBoxSize ( );
    void PutBoxSize (
        double Value );
    double GetReversalAmount ( );
    void PutReversalAmount (
        double Value );
    IPointerPtr GetDownSymbol ( );
    IPointerPtr GetUpSymbol ( );
    long GetInversionColumn (
        long Index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_CloseValues (
        /*[out,retval]*/ struct IValueList * * Value ) = 0;
      virtual HRESULT __stdcall get_DateValues (
        /*[out,retval]*/ struct IValueList * * Value ) = 0;
      virtual HRESULT __stdcall get_HighValues (
        /*[out,retval]*/ struct IValueList * * Value ) = 0;
      virtual HRESULT __stdcall get_LowValues (
        /*[out,retval]*/ struct IValueList * * Value ) = 0;
      virtual HRESULT __stdcall get_OpenValues (
        /*[out,retval]*/ struct IValueList * * Value ) = 0;
      virtual HRESULT __stdcall raw_AddOHLC (
        /*[in]*/ double DateValue,
        /*[in]*/ double OpenValue,
        /*[in]*/ double HighValue,
        /*[in]*/ double LowValue,
        /*[in]*/ double CloseValue,
        /*[out,retval]*/ long * AClose ) = 0;
      virtual HRESULT __stdcall get_BoxSize (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_BoxSize (
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall get_ReversalAmount (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_ReversalAmount (
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall get_DownSymbol (
        /*[out,retval]*/ struct IPointer * * Value ) = 0;
      virtual HRESULT __stdcall get_UpSymbol (
        /*[out,retval]*/ struct IPointer * * Value ) = 0;
      virtual HRESULT __stdcall raw_GetInversionColumn (
        /*[in]*/ long Index,
        /*[out,retval]*/ long * Value ) = 0;
};

struct __declspec(uuid("0d1e861a-4eb6-4b7c-a081-60bd11e470f2"))
IGaugeSeries : ICircledSeries
{
    //
    // Property data
    //

    __declspec(property(get=GetCenter))
    IPointerPtr Center;
    __declspec(property(get=GetCircleGradient))
    IGradientPtr CircleGradient;
    __declspec(property(get=GetEndPoint))
    IPointerPtr EndPoint;
    __declspec(property(get=GetFullRepaint,put=PutFullRepaint))
    VARIANT_BOOL FullRepaint;
    __declspec(property(get=GetMaximum,put=PutMaximum))
    double Maximum;
    __declspec(property(get=GetMinimum,put=PutMinimum))
    double Minimum;
    __declspec(property(get=GetMinorTickDistance,put=PutMinorTickDistance))
    long MinorTickDistance;
    __declspec(property(get=GetHandDistance,put=PutHandDistance))
    long HandDistance;
    __declspec(property(get=GetHandStyle,put=PutHandStyle))
    enum EHandStyle HandStyle;
    __declspec(property(get=GetLabelsInside,put=PutLabelsInside))
    VARIANT_BOOL LabelsInside;
    __declspec(property(get=GetTotalAngle,put=PutTotalAngle))
    double TotalAngle;
    __declspec(property(get=GetValue,put=PutValue))
    double Value;

    //
    // Wrapper methods for error-handling
    //

    IPointerPtr GetCenter ( );
    IGradientPtr GetCircleGradient ( );
    IPointerPtr GetEndPoint ( );
    VARIANT_BOOL GetFullRepaint ( );
    void PutFullRepaint (
        VARIANT_BOOL Value );
    double GetMaximum ( );
    void PutMaximum (
        double Value );
    double GetMinimum ( );
    void PutMinimum (
        double Value );
    long GetMinorTickDistance ( );
    void PutMinorTickDistance (
        long Value );
    long GetHandDistance ( );
    void PutHandDistance (
        long Value );
    enum EHandStyle GetHandStyle ( );
    void PutHandStyle (
        enum EHandStyle Value );
    VARIANT_BOOL GetLabelsInside ( );
    void PutLabelsInside (
        VARIANT_BOOL Value );
    double GetTotalAngle ( );
    void PutTotalAngle (
        double Value );
    double GetValue ( );
    void PutValue (
        double Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Center (
        /*[out,retval]*/ struct IPointer * * Value ) = 0;
      virtual HRESULT __stdcall get_CircleGradient (
        /*[out,retval]*/ struct IGradient * * Value ) = 0;
      virtual HRESULT __stdcall get_EndPoint (
        /*[out,retval]*/ struct IPointer * * Value ) = 0;
      virtual HRESULT __stdcall get_FullRepaint (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_FullRepaint (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_Maximum (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_Maximum (
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall get_Minimum (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_Minimum (
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall get_MinorTickDistance (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_MinorTickDistance (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_HandDistance (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_HandDistance (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_HandStyle (
        /*[out,retval]*/ enum EHandStyle * Value ) = 0;
      virtual HRESULT __stdcall put_HandStyle (
        /*[in]*/ enum EHandStyle Value ) = 0;
      virtual HRESULT __stdcall get_LabelsInside (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_LabelsInside (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_TotalAngle (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_TotalAngle (
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ double Value ) = 0;
};

struct __declspec(uuid("59ce6014-fcd7-4854-ab61-7e66ef83f1e6"))
IGridBandBrush : IBrush
{
    //
    // Property data
    //

    __declspec(property(get=GetTransparency,put=PutTransparency))
    long Transparency;
    __declspec(property(get=GetGradient))
    IGradientPtr Gradient;

    //
    // Wrapper methods for error-handling
    //

    long GetTransparency ( );
    void PutTransparency (
        long Value );
    IGradientPtr GetGradient ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Transparency (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Transparency (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_Gradient (
        /*[out,retval]*/ struct IGradient * * Value ) = 0;
};

struct __declspec(uuid("d5ad136f-29a9-4bf2-96f9-d79414d3b369"))
IGridBandTool : ICustomToolAxis
{
    //
    // Property data
    //

    __declspec(property(get=GetBand1))
    IGridBandBrushPtr Band1;
    __declspec(property(get=GetBand2))
    IGridBandBrushPtr Band2;
    __declspec(property(get=GetBandBackColor))
    OLE_COLOR BandBackColor[];

    //
    // Wrapper methods for error-handling
    //

    IGridBandBrushPtr GetBand1 ( );
    IGridBandBrushPtr GetBand2 ( );
    OLE_COLOR GetBandBackColor (
        long ABand );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Band1 (
        /*[out,retval]*/ struct IGridBandBrush * * Value ) = 0;
      virtual HRESULT __stdcall get_Band2 (
        /*[out,retval]*/ struct IGridBandBrush * * Value ) = 0;
      virtual HRESULT __stdcall get_BandBackColor (
        /*[in]*/ long ABand,
        /*[out,retval]*/ OLE_COLOR * Value ) = 0;
};

struct __declspec(uuid("3ca138e7-5ded-423c-857f-609f39afb3f0"))
ITeeShape : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetTransparency,put=PutTransparency))
    long Transparency;
    __declspec(property(get=GetBevel,put=PutBevel))
    enum EPanelBevel Bevel;
    __declspec(property(get=GetBevelWidth,put=PutBevelWidth))
    long BevelWidth;
    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;
    __declspec(property(get=GetGradient))
    IGradientPtr Gradient;
    __declspec(property(get=GetFont))
    IChartFontPtr Font;
    __declspec(property(get=GetShadow))
    ITeeShadowPtr Shadow;
    __declspec(property(get=GetShapeStyle,put=PutShapeStyle))
    enum EChartObjectShapeStyle ShapeStyle;

    //
    // Wrapper methods for error-handling
    //

    long GetTransparency ( );
    void PutTransparency (
        long Value );
    enum EPanelBevel GetBevel ( );
    void PutBevel (
        enum EPanelBevel Value );
    long GetBevelWidth ( );
    void PutBevelWidth (
        long Value );
    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR Value );
    IGradientPtr GetGradient ( );
    IChartFontPtr GetFont ( );
    ITeeShadowPtr GetShadow ( );
    enum EChartObjectShapeStyle GetShapeStyle ( );
    void PutShapeStyle (
        enum EChartObjectShapeStyle Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Transparency (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Transparency (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_Bevel (
        /*[out,retval]*/ enum EPanelBevel * Value ) = 0;
      virtual HRESULT __stdcall put_Bevel (
        /*[in]*/ enum EPanelBevel Value ) = 0;
      virtual HRESULT __stdcall get_BevelWidth (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_BevelWidth (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * Value ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR Value ) = 0;
      virtual HRESULT __stdcall get_Gradient (
        /*[out,retval]*/ struct IGradient * * Value ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ struct IChartFont * * Value ) = 0;
      virtual HRESULT __stdcall get_Shadow (
        /*[out,retval]*/ struct ITeeShadow * * Value ) = 0;
      virtual HRESULT __stdcall get_ShapeStyle (
        /*[out,retval]*/ enum EChartObjectShapeStyle * Value ) = 0;
      virtual HRESULT __stdcall put_ShapeStyle (
        /*[in]*/ enum EChartObjectShapeStyle Value ) = 0;
};

struct __declspec(uuid("2986db67-da5e-40a6-be81-e9ecc3f02c90"))
ILegendTitle : ITeeShape
{
    //
    // Property data
    //

    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetTransparent,put=PutTransparent))
    VARIANT_BOOL Transparent;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetText))
    IStringsPtr Text;
    __declspec(property(get=GetTextAlignment,put=PutTextAlignment))
    enum ETitleAlignment TextAlignment;

    //
    // Wrapper methods for error-handling
    //

    IStringsPtr GetText ( );
    enum ETitleAlignment GetTextAlignment ( );
    void PutTextAlignment (
        enum ETitleAlignment Value );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetTransparent ( );
    void PutTransparent (
        VARIANT_BOOL Value );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ struct IStrings * * Value ) = 0;
      virtual HRESULT __stdcall get_TextAlignment (
        /*[out,retval]*/ enum ETitleAlignment * Value ) = 0;
      virtual HRESULT __stdcall put_TextAlignment (
        /*[in]*/ enum ETitleAlignment Value ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_Transparent (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Transparent (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR Value ) = 0;
};

struct __declspec(uuid("8e8b339e-a766-4a07-9f1b-69771f5d04b6"))
ILegend : ITeeShapePosition
{
    //
    // Property data
    //

    __declspec(property(get=GetAlignment,put=PutAlignment))
    enum ELegendAlignment Alignment;
    __declspec(property(get=GetVertspacing,put=PutVertspacing))
    long Vertspacing;
    __declspec(property(get=GetColorWidth,put=PutColorWidth))
    long ColorWidth;
    __declspec(property(get=GetDividingLines))
    IPenPtr DividingLines;
    __declspec(property(get=GetFirstValue,put=PutFirstValue))
    long FirstValue;
    __declspec(property(get=GetVertical))
    VARIANT_BOOL Vertical;
    __declspec(property(get=GetFrame))
    IPenPtr Frame;
    __declspec(property(get=GetHorizMargin,put=PutHorizMargin))
    long HorizMargin;
    __declspec(property(get=GetInverted,put=PutInverted))
    VARIANT_BOOL Inverted;
    __declspec(property(get=GetLegendStyle,put=PutLegendStyle))
    enum ELegendStyle LegendStyle;
    __declspec(property(get=GetResizeChart,put=PutResizeChart))
    VARIANT_BOOL ResizeChart;
    __declspec(property(get=GetTextStyle,put=PutTextStyle))
    enum ELegendTextStyle TextStyle;
    __declspec(property(get=GetTopPos,put=PutTopPos))
    long TopPos;
    __declspec(property(get=GetVertMargin,put=PutVertMargin))
    long VertMargin;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetMaxNumRows,put=PutMaxNumRows))
    long MaxNumRows;
    __declspec(property(get=GetBrush))
    IBrushPtr Brush;
    __declspec(property(get=GetSeries,put=PutSeries))
    _variant_t Series;
    __declspec(property(get=GetFontSeriesColor,put=PutFontSeriesColor))
    VARIANT_BOOL FontSeriesColor;
    __declspec(property(get=GetCurrentPage,put=PutCurrentPage))
    VARIANT_BOOL CurrentPage;
    __declspec(property(get=GetSymbol))
    ILegendSymbolPtr Symbol;
    __declspec(property(get=GetCheckBoxes,put=PutCheckBoxes))
    VARIANT_BOOL CheckBoxes;
    __declspec(property(get=GetColumnWidthAuto,put=PutColumnWidthAuto))
    VARIANT_BOOL ColumnWidthAuto;
    __declspec(property(get=GetColumnWidths,put=PutColumnWidths))
    long ColumnWidths[];
    __declspec(property(get=GetTitle))
    ILegendTitlePtr Title;
    __declspec(property(get=GetCheckBoxesStyle,put=PutCheckBoxesStyle))
    enum ECheckBoxesStyle CheckBoxesStyle;
    __declspec(property(get=GetLastValue))
    long LastValue;
    __declspec(property(get=GetPositionUnits,put=PutPositionUnits))
    enum EPositionUnits PositionUnits;
    __declspec(property(get=GetLeftPercent,put=PutLeftPercent))
    long LeftPercent;
    __declspec(property(get=GetTopPercent,put=PutTopPercent))
    long TopPercent;
    __declspec(property(get=GetItem))
    ILegendItemPtr Item[];
    __declspec(property(get=GetItems))
    ILegendItemsPtr Items;

    //
    // Wrapper methods for error-handling
    //

    enum ELegendAlignment GetAlignment ( );
    void PutAlignment (
        enum ELegendAlignment Alignment );
    long GetColorWidth ( );
    void PutColorWidth (
        long ColorWidth );
    IPenPtr GetDividingLines ( );
    long GetFirstValue ( );
    void PutFirstValue (
        long FirstValue );
    IPenPtr GetFrame ( );
    long GetHorizMargin ( );
    void PutHorizMargin (
        long HorizMargin );
    VARIANT_BOOL GetInverted ( );
    void PutInverted (
        VARIANT_BOOL Inverted );
    enum ELegendStyle GetLegendStyle ( );
    void PutLegendStyle (
        enum ELegendStyle LegendStyle );
    VARIANT_BOOL GetResizeChart ( );
    void PutResizeChart (
        VARIANT_BOOL ResizeChart );
    enum ELegendTextStyle GetTextStyle ( );
    void PutTextStyle (
        enum ELegendTextStyle TextStyle );
    long GetTopPos ( );
    void PutTopPos (
        long TopPos );
    long GetVertMargin ( );
    void PutVertMargin (
        long VertMargin );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL Visible );
    _bstr_t Formatted (
        long SomeSeriesOrValueIndex );
    _bstr_t FormattedValue (
        long aSeries,
        long SomeValueIndex );
    long Clicked (
        long X,
        long Y );
    long GetMaxNumRows ( );
    void PutMaxNumRows (
        long Value );
    HRESULT BackImageLoad (
        _bstr_t FileName );
    HRESULT BackImageClear ( );
    IBrushPtr GetBrush ( );
    _variant_t GetSeries ( );
    void PutSeries (
        const _variant_t & Value );
    HRESULT DrawLegend ( );
    VARIANT_BOOL GetFontSeriesColor ( );
    void PutFontSeriesColor (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetCurrentPage ( );
    void PutCurrentPage (
        VARIANT_BOOL Value );
    ILegendSymbolPtr GetSymbol ( );
    VARIANT_BOOL GetCheckBoxes ( );
    void PutCheckBoxes (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetColumnWidthAuto ( );
    void PutColumnWidthAuto (
        VARIANT_BOOL Value );
    long GetColumnWidths (
        long Index );
    void PutColumnWidths (
        long Index,
        long Value );
    long GetVertspacing ( );
    void PutVertspacing (
        long Value );
    VARIANT_BOOL GetVertical ( );
    HRESULT ShowEditorLegend ( );
    ILegendTitlePtr GetTitle ( );
    enum ECheckBoxesStyle GetCheckBoxesStyle ( );
    void PutCheckBoxesStyle (
        enum ECheckBoxesStyle Value );
    long GetLastValue ( );
    enum EPositionUnits GetPositionUnits ( );
    void PutPositionUnits (
        enum EPositionUnits Value );
    long GetLeftPercent ( );
    void PutLeftPercent (
        long Value );
    long GetTopPercent ( );
    void PutTopPercent (
        long Value );
    ILegendItemPtr GetItem (
        long Index );
    ILegendItemsPtr GetItems ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Alignment (
        /*[out,retval]*/ enum ELegendAlignment * Alignment ) = 0;
      virtual HRESULT __stdcall put_Alignment (
        /*[in]*/ enum ELegendAlignment Alignment ) = 0;
      virtual HRESULT __stdcall get_ColorWidth (
        /*[out,retval]*/ long * ColorWidth ) = 0;
      virtual HRESULT __stdcall put_ColorWidth (
        /*[in]*/ long ColorWidth ) = 0;
      virtual HRESULT __stdcall get_DividingLines (
        /*[out,retval]*/ struct IPen * * DividingLines ) = 0;
      virtual HRESULT __stdcall get_FirstValue (
        /*[out,retval]*/ long * FirstValue ) = 0;
      virtual HRESULT __stdcall put_FirstValue (
        /*[in]*/ long FirstValue ) = 0;
      virtual HRESULT __stdcall get_Frame (
        /*[out,retval]*/ struct IPen * * Frame ) = 0;
      virtual HRESULT __stdcall get_HorizMargin (
        /*[out,retval]*/ long * HorizMargin ) = 0;
      virtual HRESULT __stdcall put_HorizMargin (
        /*[in]*/ long HorizMargin ) = 0;
      virtual HRESULT __stdcall get_Inverted (
        /*[out,retval]*/ VARIANT_BOOL * Inverted ) = 0;
      virtual HRESULT __stdcall put_Inverted (
        /*[in]*/ VARIANT_BOOL Inverted ) = 0;
      virtual HRESULT __stdcall get_LegendStyle (
        /*[out,retval]*/ enum ELegendStyle * LegendStyle ) = 0;
      virtual HRESULT __stdcall put_LegendStyle (
        /*[in]*/ enum ELegendStyle LegendStyle ) = 0;
      virtual HRESULT __stdcall get_ResizeChart (
        /*[out,retval]*/ VARIANT_BOOL * ResizeChart ) = 0;
      virtual HRESULT __stdcall put_ResizeChart (
        /*[in]*/ VARIANT_BOOL ResizeChart ) = 0;
      virtual HRESULT __stdcall get_TextStyle (
        /*[out,retval]*/ enum ELegendTextStyle * TextStyle ) = 0;
      virtual HRESULT __stdcall put_TextStyle (
        /*[in]*/ enum ELegendTextStyle TextStyle ) = 0;
      virtual HRESULT __stdcall get_TopPos (
        /*[out,retval]*/ long * TopPos ) = 0;
      virtual HRESULT __stdcall put_TopPos (
        /*[in]*/ long TopPos ) = 0;
      virtual HRESULT __stdcall get_VertMargin (
        /*[out,retval]*/ long * VertMargin ) = 0;
      virtual HRESULT __stdcall put_VertMargin (
        /*[in]*/ long VertMargin ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * Visible ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL Visible ) = 0;
      virtual HRESULT __stdcall raw_Formatted (
        /*[in]*/ long SomeSeriesOrValueIndex,
        /*[out,retval]*/ BSTR * SeriesOrValueIndex ) = 0;
      virtual HRESULT __stdcall raw_FormattedValue (
        /*[in]*/ long aSeries,
        /*[in]*/ long SomeValueIndex,
        /*[out,retval]*/ BSTR * ValueIndex ) = 0;
      virtual HRESULT __stdcall raw_Clicked (
        /*[in]*/ long X,
        /*[in]*/ long Y,
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_MaxNumRows (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_MaxNumRows (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_BackImageLoad (
        /*[in]*/ BSTR FileName ) = 0;
      virtual HRESULT __stdcall raw_BackImageClear ( ) = 0;
      virtual HRESULT __stdcall get_Brush (
        /*[out,retval]*/ struct IBrush * * Value ) = 0;
      virtual HRESULT __stdcall get_Series (
        /*[out,retval]*/ VARIANT * Value ) = 0;
      virtual HRESULT __stdcall put_Series (
        /*[in]*/ VARIANT Value ) = 0;
      virtual HRESULT __stdcall raw_DrawLegend ( ) = 0;
      virtual HRESULT __stdcall get_FontSeriesColor (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_FontSeriesColor (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_CurrentPage (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_CurrentPage (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_Symbol (
        /*[out,retval]*/ struct ILegendSymbol * * Value ) = 0;
      virtual HRESULT __stdcall get_CheckBoxes (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_CheckBoxes (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_ColumnWidthAuto (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_ColumnWidthAuto (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_ColumnWidths (
        /*[in]*/ long Index,
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_ColumnWidths (
        /*[in]*/ long Index,
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_Vertspacing (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Vertspacing (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_Vertical (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall raw_ShowEditorLegend ( ) = 0;
      virtual HRESULT __stdcall get_Title (
        /*[out,retval]*/ struct ILegendTitle * * Value ) = 0;
      virtual HRESULT __stdcall get_CheckBoxesStyle (
        /*[out,retval]*/ enum ECheckBoxesStyle * Value ) = 0;
      virtual HRESULT __stdcall put_CheckBoxesStyle (
        /*[in]*/ enum ECheckBoxesStyle Value ) = 0;
      virtual HRESULT __stdcall get_LastValue (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_PositionUnits (
        /*[out,retval]*/ enum EPositionUnits * Value ) = 0;
      virtual HRESULT __stdcall put_PositionUnits (
        /*[in]*/ enum EPositionUnits Value ) = 0;
      virtual HRESULT __stdcall get_LeftPercent (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_LeftPercent (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_TopPercent (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_TopPercent (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct ILegendItem * * Value ) = 0;
      virtual HRESULT __stdcall get_Items (
        /*[out,retval]*/ struct ILegendItems * * Value ) = 0;
};

struct __declspec(uuid("6a70cdbb-8f5f-44c5-9568-b70f940f6c05"))
IPieOtherSlice : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetStyle,put=PutStyle))
    enum EPieOtherStyle Style;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetValue,put=PutValue))
    double Value;
    __declspec(property(get=GetLegend))
    ILegendPtr Legend;

    //
    // Wrapper methods for error-handling
    //

    enum EPieOtherStyle GetStyle ( );
    void PutStyle (
        enum EPieOtherStyle Value );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t Value );
    double GetValue ( );
    void PutValue (
        double Value );
    ILegendPtr GetLegend ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ enum EPieOtherStyle * Value ) = 0;
      virtual HRESULT __stdcall put_Style (
        /*[in]*/ enum EPieOtherStyle Value ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR Value ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall get_Legend (
        /*[out,retval]*/ struct ILegend * * Value ) = 0;
};

struct __declspec(uuid("d2798192-f2dc-4034-a25f-8f6f31f7c695"))
IPieSeries : ICircledSeries
{
    //
    // Property data
    //

    __declspec(property(get=GetShadow))
    ITeeShadowPtr Shadow;
    __declspec(property(get=GetAngleSize,put=PutAngleSize))
    long AngleSize;
    __declspec(property(get=GetAutoMarkPosition,put=PutAutoMarkPosition))
    VARIANT_BOOL AutoMarkPosition;
    __declspec(property(get=GetGradient))
    IGradientPtr Gradient;
    __declspec(property(get=GetSliceHeight,put=PutSliceHeight))
    long SliceHeight[];
    __declspec(property(get=GetDarkPen,put=PutDarkPen))
    long DarkPen;
    __declspec(property(get=GetMultiPie,put=PutMultiPie))
    enum EMultiPie MultiPie;
    __declspec(property(get=GetPieMarks))
    IPieMarksPtr PieMarks;
    __declspec(property(get=GetGradientBright,put=PutGradientBright))
    long GradientBright;
    __declspec(property(get=GetUsePatterns,put=PutUsePatterns))
    VARIANT_BOOL UsePatterns;
    __declspec(property(get=GetPieValues))
    IValueListPtr PieValues;
    __declspec(property(get=GetDark3D,put=PutDark3D))
    VARIANT_BOOL Dark3D;
    __declspec(property(get=GetExplodeBiggest,put=PutExplodeBiggest))
    long ExplodeBiggest;
    __declspec(property(get=GetOtherSlice))
    IPieOtherSlicePtr OtherSlice;
    __declspec(property(get=GetExplodedSlice))
    IExplodedSlicesPtr ExplodedSlice;
    __declspec(property(get=GetPiePen))
    IPenPtr PiePen;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetUsePatterns ( );
    void PutUsePatterns (
        VARIANT_BOOL UsePatterns );
    IValueListPtr GetPieValues ( );
    VARIANT_BOOL GetDark3D ( );
    void PutDark3D (
        VARIANT_BOOL Dark3D );
    long GetExplodeBiggest ( );
    void PutExplodeBiggest (
        long Value );
    IPieOtherSlicePtr GetOtherSlice ( );
    IExplodedSlicesPtr GetExplodedSlice ( );
    IPenPtr GetPiePen ( );
    ITeeShadowPtr GetShadow ( );
    long GetAngleSize ( );
    void PutAngleSize (
        long Value );
    VARIANT_BOOL GetAutoMarkPosition ( );
    void PutAutoMarkPosition (
        VARIANT_BOOL Value );
    IGradientPtr GetGradient ( );
    long GetSliceHeight (
        long Index );
    void PutSliceHeight (
        long Index,
        long Value );
    long GetDarkPen ( );
    void PutDarkPen (
        long Value );
    enum EMultiPie GetMultiPie ( );
    void PutMultiPie (
        enum EMultiPie Value );
    IPieMarksPtr GetPieMarks ( );
    long GetGradientBright ( );
    void PutGradientBright (
        long Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_UsePatterns (
        /*[out,retval]*/ VARIANT_BOOL * UsePatterns ) = 0;
      virtual HRESULT __stdcall put_UsePatterns (
        /*[in]*/ VARIANT_BOOL UsePatterns ) = 0;
      virtual HRESULT __stdcall get_PieValues (
        /*[out,retval]*/ struct IValueList * * PieValues ) = 0;
      virtual HRESULT __stdcall get_Dark3D (
        /*[out,retval]*/ VARIANT_BOOL * Dark3D ) = 0;
      virtual HRESULT __stdcall put_Dark3D (
        /*[in]*/ VARIANT_BOOL Dark3D ) = 0;
      virtual HRESULT __stdcall get_ExplodeBiggest (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_ExplodeBiggest (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_OtherSlice (
        /*[out,retval]*/ struct IPieOtherSlice * * Value ) = 0;
      virtual HRESULT __stdcall get_ExplodedSlice (
        /*[out,retval]*/ struct IExplodedSlices * * Value ) = 0;
      virtual HRESULT __stdcall get_PiePen (
        /*[out,retval]*/ struct IPen * * Value ) = 0;
      virtual HRESULT __stdcall get_Shadow (
        /*[out,retval]*/ struct ITeeShadow * * Value ) = 0;
      virtual HRESULT __stdcall get_AngleSize (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_AngleSize (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_AutoMarkPosition (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_AutoMarkPosition (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_Gradient (
        /*[out,retval]*/ struct IGradient * * Value ) = 0;
      virtual HRESULT __stdcall get_SliceHeight (
        /*[in]*/ long Index,
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_SliceHeight (
        /*[in]*/ long Index,
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_DarkPen (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_DarkPen (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_MultiPie (
        /*[out,retval]*/ enum EMultiPie * Value ) = 0;
      virtual HRESULT __stdcall put_MultiPie (
        /*[in]*/ enum EMultiPie Value ) = 0;
      virtual HRESULT __stdcall get_PieMarks (
        /*[out,retval]*/ struct IPieMarks * * Value ) = 0;
      virtual HRESULT __stdcall get_GradientBright (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_GradientBright (
        /*[in]*/ long Value ) = 0;
};

struct __declspec(uuid("e0216daa-f2fd-497b-8c5a-8b12ccdc5d74"))
IDonutSeries : IPieSeries
{
    //
    // Property data
    //

    __declspec(property(get=GetDonutPercent,put=PutDonutPercent))
    long DonutPercent;

    //
    // Wrapper methods for error-handling
    //

    long GetDonutPercent ( );
    void PutDonutPercent (
        long Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_DonutPercent (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_DonutPercent (
        /*[in]*/ long Value ) = 0;
};

struct __declspec(uuid("72ef6a88-f0cc-43fa-a27e-3433f5fdd70d"))
IExtraLegendTool : ICustomToolSeries
{
    //
    // Property data
    //

    __declspec(property(get=GetLegend))
    ILegendPtr Legend;

    //
    // Wrapper methods for error-handling
    //

    ILegendPtr GetLegend ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Legend (
        /*[out,retval]*/ struct ILegend * * Value ) = 0;
};

struct __declspec(uuid("e7c3e2ac-2e19-446f-88ac-237661961992"))
IMarksSymbol : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBevel,put=PutBevel))
    enum EPanelBevel Bevel;
    __declspec(property(get=GetBevelWidth,put=PutBevelWidth))
    long BevelWidth;
    __declspec(property(get=GetPen))
    IPenPtr Pen;
    __declspec(property(get=GetFrame))
    IPenPtr Frame;
    __declspec(property(get=GetGradient))
    IGradientPtr Gradient;
    __declspec(property(get=GetBrush))
    IBrushPtr Brush;
    __declspec(property(get=GetShadow))
    ITeeShadowPtr Shadow;
    __declspec(property(get=GetShapeStyle,put=PutShapeStyle))
    enum EChartObjectShapeStyle ShapeStyle;
    __declspec(property(get=GetTransparency,put=PutTransparency))
    long Transparency;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;

    //
    // Wrapper methods for error-handling
    //

    enum EPanelBevel GetBevel ( );
    void PutBevel (
        enum EPanelBevel Value );
    long GetBevelWidth ( );
    void PutBevelWidth (
        long Value );
    IPenPtr GetFrame ( );
    IGradientPtr GetGradient ( );
    ITeeShadowPtr GetShadow ( );
    enum EChartObjectShapeStyle GetShapeStyle ( );
    void PutShapeStyle (
        enum EChartObjectShapeStyle Value );
    long GetTransparency ( );
    void PutTransparency (
        long Value );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL Value );
    IPenPtr GetPen ( );
    IBrushPtr GetBrush ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Bevel (
        /*[out,retval]*/ enum EPanelBevel * Value ) = 0;
      virtual HRESULT __stdcall put_Bevel (
        /*[in]*/ enum EPanelBevel Value ) = 0;
      virtual HRESULT __stdcall get_BevelWidth (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_BevelWidth (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_Frame (
        /*[out,retval]*/ struct IPen * * Value ) = 0;
      virtual HRESULT __stdcall get_Gradient (
        /*[out,retval]*/ struct IGradient * * Value ) = 0;
      virtual HRESULT __stdcall get_Shadow (
        /*[out,retval]*/ struct ITeeShadow * * Value ) = 0;
      virtual HRESULT __stdcall get_ShapeStyle (
        /*[out,retval]*/ enum EChartObjectShapeStyle * Value ) = 0;
      virtual HRESULT __stdcall put_ShapeStyle (
        /*[in]*/ enum EChartObjectShapeStyle Value ) = 0;
      virtual HRESULT __stdcall get_Transparency (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Transparency (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_Pen (
        /*[out,retval]*/ struct IPen * * Value ) = 0;
      virtual HRESULT __stdcall get_Brush (
        /*[out,retval]*/ struct IBrush * * Value ) = 0;
};

struct __declspec(uuid("bc0cd837-1a8f-4c35-9c93-ccb2fe216f88"))
IMarks : ITeeCustomShape
{
    //
    // Property data
    //

    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetStyle,put=PutStyle))
    enum EMarkStyle Style;
    __declspec(property(get=GetArrow))
    IPenPtr Arrow;
    __declspec(property(get=GetArrowLength,put=PutArrowLength))
    long ArrowLength;
    __declspec(property(get=GetBackColor,put=PutBackColor))
    OLE_COLOR BackColor;
    __declspec(property(get=GetClip,put=PutClip))
    VARIANT_BOOL Clip;
    __declspec(property(get=GetAngle,put=PutAngle))
    long Angle;
    __declspec(property(get=GetFrame))
    IPenPtr Frame;
    __declspec(property(get=GetDrawEvery,put=PutDrawEvery))
    long DrawEvery;
    __declspec(property(get=GetPositions))
    ISeriesMarksPositionsPtr Positions;
    __declspec(property(get=GetMultiline,put=PutMultiline))
    VARIANT_BOOL Multiline;
    __declspec(property(get=GetCallout))
    IMarksCalloutPtr Callout;
    __declspec(property(get=GetItem))
    IMarksItemPtr Item[];
    __declspec(property(get=GetZPosition,put=PutZPosition))
    long ZPosition;
    __declspec(property(get=GetSymbol))
    IMarksSymbolPtr Symbol;
    __declspec(property(get=GetTextAlign,put=PutTextAlign))
    enum ETextAlignment TextAlign;
    __declspec(property(get=GetMargins))
    IMarginsPtr Margins;

    //
    // Wrapper methods for error-handling
    //

    IPenPtr GetArrow ( );
    long GetArrowLength ( );
    void PutArrowLength (
        long ArrowLength );
    OLE_COLOR GetBackColor ( );
    void PutBackColor (
        OLE_COLOR BackColor );
    VARIANT_BOOL GetClip ( );
    void PutClip (
        VARIANT_BOOL Clip );
    IPenPtr GetFrame ( );
    enum EMarkStyle GetStyle ( );
    void PutStyle (
        enum EMarkStyle Style );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL Visible );
    ISeriesMarksPositionsPtr GetPositions ( );
    long Clicked (
        long X,
        long Y );
    long GetZPosition ( );
    void PutZPosition (
        long Value );
    long GetAngle ( );
    void PutAngle (
        long Value );
    long GetDrawEvery ( );
    void PutDrawEvery (
        long Value );
    VARIANT_BOOL GetMultiline ( );
    void PutMultiline (
        VARIANT_BOOL Value );
    HRESULT ResetPositions ( );
    IMarksCalloutPtr GetCallout ( );
    HRESULT ShowEditorMarks ( );
    IMarksItemPtr GetItem (
        long Index );
    HRESULT Clear ( );
    IMarksSymbolPtr GetSymbol ( );
    enum ETextAlignment GetTextAlign ( );
    void PutTextAlign (
        enum ETextAlignment Value );
    IMarginsPtr GetMargins ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Arrow (
        /*[out,retval]*/ struct IPen * * Arrow ) = 0;
      virtual HRESULT __stdcall get_ArrowLength (
        /*[out,retval]*/ long * ArrowLength ) = 0;
      virtual HRESULT __stdcall put_ArrowLength (
        /*[in]*/ long ArrowLength ) = 0;
      virtual HRESULT __stdcall get_BackColor (
        /*[out,retval]*/ OLE_COLOR * BackColor ) = 0;
      virtual HRESULT __stdcall put_BackColor (
        /*[in]*/ OLE_COLOR BackColor ) = 0;
      virtual HRESULT __stdcall get_Clip (
        /*[out,retval]*/ VARIANT_BOOL * Clip ) = 0;
      virtual HRESULT __stdcall put_Clip (
        /*[in]*/ VARIANT_BOOL Clip ) = 0;
      virtual HRESULT __stdcall get_Frame (
        /*[out,retval]*/ struct IPen * * Frame ) = 0;
      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ enum EMarkStyle * Style ) = 0;
      virtual HRESULT __stdcall put_Style (
        /*[in]*/ enum EMarkStyle Style ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * Visible ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL Visible ) = 0;
      virtual HRESULT __stdcall get_Positions (
        /*[out,retval]*/ struct ISeriesMarksPositions * * Value ) = 0;
      virtual HRESULT __stdcall raw_Clicked (
        /*[in]*/ long X,
        /*[in]*/ long Y,
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_ZPosition (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_ZPosition (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_Angle (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Angle (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_DrawEvery (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_DrawEvery (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_Multiline (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Multiline (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall raw_ResetPositions ( ) = 0;
      virtual HRESULT __stdcall get_Callout (
        /*[out,retval]*/ struct IMarksCallout * * Value ) = 0;
      virtual HRESULT __stdcall raw_ShowEditorMarks ( ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IMarksItem * * Value ) = 0;
      virtual HRESULT __stdcall raw_Clear ( ) = 0;
      virtual HRESULT __stdcall get_Symbol (
        /*[out,retval]*/ struct IMarksSymbol * * Value ) = 0;
      virtual HRESULT __stdcall get_TextAlign (
        /*[out,retval]*/ enum ETextAlignment * Value ) = 0;
      virtual HRESULT __stdcall put_TextAlign (
        /*[in]*/ enum ETextAlignment Value ) = 0;
      virtual HRESULT __stdcall get_Margins (
        /*[out,retval]*/ struct IMargins * * Value ) = 0;
};

struct __declspec(uuid("216a7c86-0d29-46bb-89fb-e553813d2d12"))
IPolarBarSeries : ICustomPolarSeries
{};

struct __declspec(uuid("1267e579-8c87-47cb-b752-3a3ed3dff34c"))
IBubble3DSeries : IPoint3DSeries
{
    //
    // Property data
    //

    __declspec(property(get=GetRadiusValues))
    IValueListPtr RadiusValues;

    //
    // Wrapper methods for error-handling
    //

    long AddBubble (
        double AX,
        double AY,
        double AZ,
        double ARadius,
        _bstr_t AXLabel,
        OLE_COLOR Value );
    IValueListPtr GetRadiusValues ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_AddBubble (
        /*[in]*/ double AX,
        /*[in]*/ double AY,
        /*[in]*/ double AZ,
        /*[in]*/ double ARadius,
        /*[in]*/ BSTR AXLabel,
        /*[in]*/ OLE_COLOR Value,
        /*[out,retval]*/ long * AColor ) = 0;
      virtual HRESULT __stdcall get_RadiusValues (
        /*[out,retval]*/ struct IValueList * * Value ) = 0;
};

struct __declspec(uuid("509c90b9-e777-449c-b42a-c746538e7f08"))
ISeriesBandTool : ICustomToolSeries
{
    //
    // Property data
    //

    __declspec(property(get=GetBrush))
    IBrushPtr Brush;
    __declspec(property(get=GetDrawBehindSeries,put=PutDrawBehindSeries))
    VARIANT_BOOL DrawBehindSeries;
    __declspec(property(get=GetGradient))
    IGradientPtr Gradient;
    __declspec(property(get=GetPen))
    IPenPtr Pen;
    __declspec(property(get=GetSeries2,put=PutSeries2))
    _variant_t Series2;
    __declspec(property(get=GetTransparency,put=PutTransparency))
    long Transparency;

    //
    // Wrapper methods for error-handling
    //

    IBrushPtr GetBrush ( );
    VARIANT_BOOL GetDrawBehindSeries ( );
    void PutDrawBehindSeries (
        VARIANT_BOOL Value );
    IGradientPtr GetGradient ( );
    IPenPtr GetPen ( );
    _variant_t GetSeries2 ( );
    void PutSeries2 (
        const _variant_t & Value );
    long GetTransparency ( );
    void PutTransparency (
        long Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Brush (
        /*[out,retval]*/ struct IBrush * * Value ) = 0;
      virtual HRESULT __stdcall get_DrawBehindSeries (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_DrawBehindSeries (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_Gradient (
        /*[out,retval]*/ struct IGradient * * Value ) = 0;
      virtual HRESULT __stdcall get_Pen (
        /*[out,retval]*/ struct IPen * * Value ) = 0;
      virtual HRESULT __stdcall get_Series2 (
        /*[out,retval]*/ VARIANT * Value ) = 0;
      virtual HRESULT __stdcall put_Series2 (
        /*[in]*/ VARIANT Value ) = 0;
      virtual HRESULT __stdcall get_Transparency (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Transparency (
        /*[in]*/ long Value ) = 0;
};

struct __declspec(uuid("335e0902-9251-4f18-8037-0b242f42b16c"))
IRectangleTool : IAnnotationTool
{
    //
    // Property data
    //

    __declspec(property(get=GetDragging))
    VARIANT_BOOL Dragging;
    __declspec(property(get=GetResizing))
    VARIANT_BOOL Resizing;
    __declspec(property(get=GetAllowDrag,put=PutAllowDrag))
    VARIANT_BOOL AllowDrag;
    __declspec(property(get=GetAllowResize,put=PutAllowResize))
    VARIANT_BOOL AllowResize;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetDragging ( );
    VARIANT_BOOL GetResizing ( );
    long ClickedEdge (
        long X,
        long Y );
    VARIANT_BOOL GetAllowDrag ( );
    void PutAllowDrag (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetAllowResize ( );
    void PutAllowResize (
        VARIANT_BOOL Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Dragging (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall get_Resizing (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall raw_ClickedEdge (
        /*[in]*/ long X,
        /*[in]*/ long Y,
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_AllowDrag (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_AllowDrag (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_AllowResize (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_AllowResize (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
};

struct __declspec(uuid("661d8268-cbcc-4574-9fb5-1628c5093cae"))
ITableLegend : ITeeCustomShape
{
    //
    // Property data
    //

    __declspec(property(get=GetFontSeriesColor,put=PutFontSeriesColor))
    VARIANT_BOOL FontSeriesColor;
    __declspec(property(get=GetOtherside,put=PutOtherside))
    VARIANT_BOOL Otherside;
    __declspec(property(get=GetSymbol))
    ILegendSymbolPtr Symbol;

    //
    // Wrapper methods for error-handling
    //

    ILegendSymbolPtr GetSymbol ( );
    VARIANT_BOOL GetFontSeriesColor ( );
    void PutFontSeriesColor (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetOtherside ( );
    void PutOtherside (
        VARIANT_BOOL Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Symbol (
        /*[out,retval]*/ struct ILegendSymbol * * Value ) = 0;
      virtual HRESULT __stdcall get_FontSeriesColor (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_FontSeriesColor (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_Otherside (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Otherside (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
};

struct __declspec(uuid("f1156040-7b16-48aa-85a7-da3332e46d5f"))
IDataTableTool : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAutoPosition,put=PutAutoPosition))
    VARIANT_BOOL AutoPosition;
    __declspec(property(get=GetBrush))
    IBrushPtr Brush;
    __declspec(property(get=GetClipText,put=PutClipText))
    VARIANT_BOOL ClipText;
    __declspec(property(get=GetColumnPen))
    IPenPtr ColumnPen;
    __declspec(property(get=GetFont))
    IChartFontPtr Font;
    __declspec(property(get=GetInverted,put=PutInverted))
    VARIANT_BOOL Inverted;
    __declspec(property(get=GetLeft,put=PutLeft))
    long Left;
    __declspec(property(get=GetLegend))
    ITableLegendPtr Legend;
    __declspec(property(get=GetRowPen))
    IPenPtr RowPen;
    __declspec(property(get=GetTop,put=PutTop))
    long Top;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetAutoPosition ( );
    void PutAutoPosition (
        VARIANT_BOOL Value );
    IBrushPtr GetBrush ( );
    VARIANT_BOOL GetClipText ( );
    void PutClipText (
        VARIANT_BOOL Value );
    IPenPtr GetColumnPen ( );
    IChartFontPtr GetFont ( );
    VARIANT_BOOL GetInverted ( );
    void PutInverted (
        VARIANT_BOOL Value );
    long GetLeft ( );
    void PutLeft (
        long Value );
    ITableLegendPtr GetLegend ( );
    IPenPtr GetRowPen ( );
    long GetTop ( );
    void PutTop (
        long Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_AutoPosition (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_AutoPosition (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_Brush (
        /*[out,retval]*/ struct IBrush * * Value ) = 0;
      virtual HRESULT __stdcall get_ClipText (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_ClipText (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_ColumnPen (
        /*[out,retval]*/ struct IPen * * Value ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ struct IChartFont * * Value ) = 0;
      virtual HRESULT __stdcall get_Inverted (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Inverted (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_Legend (
        /*[out,retval]*/ struct ITableLegend * * Value ) = 0;
      virtual HRESULT __stdcall get_RowPen (
        /*[out,retval]*/ struct IPen * * Value ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ long Value ) = 0;
};

struct __declspec(uuid("79b82f2c-e7af-4b88-bb71-059544cc7213"))
IVolumePipeSeries : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetConePercent,put=PutConePercent))
    long ConePercent;
    __declspec(property(get=GetGradient))
    IGradientPtr Gradient;
    __declspec(property(get=GetLinesPen))
    IPenPtr LinesPen;

    //
    // Wrapper methods for error-handling
    //

    long GetConePercent ( );
    void PutConePercent (
        long Value );
    IGradientPtr GetGradient ( );
    IPenPtr GetLinesPen ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ConePercent (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_ConePercent (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_Gradient (
        /*[out,retval]*/ struct IGradient * * Value ) = 0;
      virtual HRESULT __stdcall get_LinesPen (
        /*[out,retval]*/ struct IPen * * Value ) = 0;
};

struct __declspec(uuid("7d7c186a-38a2-42aa-9dec-a6ac928b598c"))
IDarvasSeries : ICandleSeries
{
    //
    // Property data
    //

    __declspec(property(get=GetBoxBrush))
    IBrushPtr BoxBrush;
    __declspec(property(get=GetBoxPen))
    IPenPtr BoxPen;
    __declspec(property(get=GetNumBoxes))
    long NumBoxes;
    __declspec(property(get=GetBoxesRect))
    ITeeRectPtr BoxesRect[];

    //
    // Wrapper methods for error-handling
    //

    IBrushPtr GetBoxBrush ( );
    IPenPtr GetBoxPen ( );
    long GetNumBoxes ( );
    long ClickedBox (
        long X,
        long Y );
    ITeeRectPtr GetBoxesRect (
        long Index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_BoxBrush (
        /*[out,retval]*/ struct IBrush * * Value ) = 0;
      virtual HRESULT __stdcall get_BoxPen (
        /*[out,retval]*/ struct IPen * * Value ) = 0;
      virtual HRESULT __stdcall get_NumBoxes (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall raw_ClickedBox (
        /*[in]*/ long X,
        /*[in]*/ long Y,
        /*[out,retval]*/ long * AValue ) = 0;
      virtual HRESULT __stdcall get_BoxesRect (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct ITeeRect * * Value ) = 0;
};

struct __declspec(uuid("c131277d-a85e-4289-b61c-55226a239994"))
ISeriesRegionTool : ICustomToolSeries
{
    //
    // Property data
    //

    __declspec(property(get=GetDrawBehind,put=PutDrawBehind))
    VARIANT_BOOL DrawBehind;
    __declspec(property(get=GetGradient))
    IGradientPtr Gradient;
    __declspec(property(get=GetLowerBound,put=PutLowerBound))
    double LowerBound;
    __declspec(property(get=GetOrigin,put=PutOrigin))
    double Origin;
    __declspec(property(get=GetTransparency,put=PutTransparency))
    long Transparency;
    __declspec(property(get=GetUpperBound,put=PutUpperBound))
    double UpperBound;
    __declspec(property(get=GetAutoBounds,put=PutAutoBounds))
    VARIANT_BOOL AutoBounds;
    __declspec(property(get=GetUseOrigin,put=PutUseOrigin))
    VARIANT_BOOL UseOrigin;
    __declspec(property(get=GetBrush))
    IBrushPtr Brush;
    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;
    __declspec(property(get=GetPen))
    IPenPtr Pen;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetDrawBehind ( );
    void PutDrawBehind (
        VARIANT_BOOL Value );
    IGradientPtr GetGradient ( );
    double GetLowerBound ( );
    void PutLowerBound (
        double Value );
    double GetOrigin ( );
    void PutOrigin (
        double Value );
    long GetTransparency ( );
    void PutTransparency (
        long Value );
    double GetUpperBound ( );
    void PutUpperBound (
        double Value );
    VARIANT_BOOL GetAutoBounds ( );
    void PutAutoBounds (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetUseOrigin ( );
    void PutUseOrigin (
        VARIANT_BOOL Value );
    IBrushPtr GetBrush ( );
    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR Value );
    IPenPtr GetPen ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_DrawBehind (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_DrawBehind (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_Gradient (
        /*[out,retval]*/ struct IGradient * * Value ) = 0;
      virtual HRESULT __stdcall get_LowerBound (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_LowerBound (
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall get_Origin (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_Origin (
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall get_Transparency (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Transparency (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_UpperBound (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_UpperBound (
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall get_AutoBounds (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_AutoBounds (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_UseOrigin (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_UseOrigin (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_Brush (
        /*[out,retval]*/ struct IBrush * * Value ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * Value ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR Value ) = 0;
      virtual HRESULT __stdcall get_Pen (
        /*[out,retval]*/ struct IPen * * Value ) = 0;
};

struct __declspec(uuid("f09906cb-3e06-47b9-a16e-20e6d73cce73"))
ISubGradient : IGradient
{
    //
    // Property data
    //

    __declspec(property(get=GetTransparency,put=PutTransparency))
    long Transparency;

    //
    // Wrapper methods for error-handling
    //

    long GetTransparency ( );
    void PutTransparency (
        long Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Transparency (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Transparency (
        /*[in]*/ long Value ) = 0;
};

struct __declspec(uuid("5d33bf3e-7a0a-40b0-bbbd-dea7e521f30b"))
IMagnifyTool : IRectangleTool
{
    //
    // Property data
    //

    __declspec(property(get=GetCircled,put=PutCircled))
    VARIANT_BOOL Circled;
    __declspec(property(get=GetFollowMouse,put=PutFollowMouse))
    VARIANT_BOOL FollowMouse;
    __declspec(property(get=GetPercent,put=PutPercent))
    double Percent;
    __declspec(property(get=GetSmooth,put=PutSmooth))
    VARIANT_BOOL Smooth;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetCircled ( );
    void PutCircled (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetFollowMouse ( );
    void PutFollowMouse (
        VARIANT_BOOL Value );
    double GetPercent ( );
    void PutPercent (
        double Value );
    VARIANT_BOOL GetSmooth ( );
    void PutSmooth (
        VARIANT_BOOL Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Circled (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Circled (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_FollowMouse (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_FollowMouse (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_Percent (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_Percent (
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall get_Smooth (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Smooth (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
};

struct __declspec(uuid("22f4542f-cf97-43a4-999d-928c0e1084ef"))
ILegendPaletteTool : ICustomToolSeries
{
    //
    // Property data
    //

    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;
    __declspec(property(get=GetAxis,put=PutAxis))
    enum ELegendPaletteAxis Axis;
    __declspec(property(get=GetBorder))
    IChartHiddenPenPtr Border;
    __declspec(property(get=GetHeight,put=PutHeight))
    long Height;
    __declspec(property(get=GetInverted,put=PutInverted))
    VARIANT_BOOL Inverted;
    __declspec(property(get=GetLeft,put=PutLeft))
    long Left;
    __declspec(property(get=GetPositionUnits,put=PutPositionUnits))
    enum EPositionUnits PositionUnits;
    __declspec(property(get=GetSmooth,put=PutSmooth))
    VARIANT_BOOL Smooth;
    __declspec(property(get=GetTop,put=PutTop))
    long Top;
    __declspec(property(get=GetTransparent,put=PutTransparent))
    VARIANT_BOOL Transparent;
    __declspec(property(get=GetVertical,put=PutVertical))
    VARIANT_BOOL Vertical;
    __declspec(property(get=GetWidth,put=PutWidth))
    long Width;
    __declspec(property(get=GetPen))
    IPenPtr Pen;
    __declspec(property(get=GetGradient))
    IGradientPtr Gradient;
    __declspec(property(get=GetShadow))
    ITeeShadowPtr Shadow;

    //
    // Wrapper methods for error-handling
    //

    IChartHiddenPenPtr GetBorder ( );
    long GetHeight ( );
    void PutHeight (
        long Value );
    VARIANT_BOOL GetInverted ( );
    void PutInverted (
        VARIANT_BOOL Value );
    long GetLeft ( );
    void PutLeft (
        long Value );
    VARIANT_BOOL GetSmooth ( );
    void PutSmooth (
        VARIANT_BOOL Value );
    long GetTop ( );
    void PutTop (
        long Value );
    VARIANT_BOOL GetTransparent ( );
    void PutTransparent (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetVertical ( );
    void PutVertical (
        VARIANT_BOOL Value );
    long GetWidth ( );
    void PutWidth (
        long Value );
    enum ELegendPaletteAxis GetAxis ( );
    void PutAxis (
        enum ELegendPaletteAxis Value );
    enum EPositionUnits GetPositionUnits ( );
    void PutPositionUnits (
        enum EPositionUnits Value );
    IPenPtr GetPen ( );
    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR Value );
    IGradientPtr GetGradient ( );
    ITeeShadowPtr GetShadow ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct IChartHiddenPen * * Value ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_Inverted (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Inverted (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_Smooth (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Smooth (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_Transparent (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Transparent (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_Vertical (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Vertical (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_Axis (
        /*[out,retval]*/ enum ELegendPaletteAxis * Value ) = 0;
      virtual HRESULT __stdcall put_Axis (
        /*[in]*/ enum ELegendPaletteAxis Value ) = 0;
      virtual HRESULT __stdcall get_PositionUnits (
        /*[out,retval]*/ enum EPositionUnits * Value ) = 0;
      virtual HRESULT __stdcall put_PositionUnits (
        /*[in]*/ enum EPositionUnits Value ) = 0;
      virtual HRESULT __stdcall get_Pen (
        /*[out,retval]*/ struct IPen * * Value ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * Value ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR Value ) = 0;
      virtual HRESULT __stdcall get_Gradient (
        /*[out,retval]*/ struct IGradient * * Value ) = 0;
      virtual HRESULT __stdcall get_Shadow (
        /*[out,retval]*/ struct ITeeShadow * * Value ) = 0;
};

struct __declspec(uuid("f6773452-1717-4136-b268-a722fdc6bd71"))
IBannerTool : IAnnotationTool
{
    //
    // Property data
    //

    __declspec(property(get=GetBlink,put=PutBlink))
    VARIANT_BOOL Blink;
    __declspec(property(get=GetBlinkDelayOff,put=PutBlinkDelayOff))
    long BlinkDelayOff;
    __declspec(property(get=GetBlinkDelayOn,put=PutBlinkDelayOn))
    long BlinkDelayOn;
    __declspec(property(get=GetScrollDelay,put=PutScrollDelay))
    long ScrollDelay;
    __declspec(property(get=GetScrollDirection,put=PutScrollDirection))
    enum EScrollDirection ScrollDirection;
    __declspec(property(get=GetScroll,put=PutScroll))
    VARIANT_BOOL Scroll;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetBlink ( );
    void PutBlink (
        VARIANT_BOOL Value );
    long GetBlinkDelayOff ( );
    void PutBlinkDelayOff (
        long Value );
    long GetBlinkDelayOn ( );
    void PutBlinkDelayOn (
        long Value );
    long GetScrollDelay ( );
    void PutScrollDelay (
        long Value );
    enum EScrollDirection GetScrollDirection ( );
    void PutScrollDirection (
        enum EScrollDirection Value );
    VARIANT_BOOL GetScroll ( );
    void PutScroll (
        VARIANT_BOOL Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Blink (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Blink (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_BlinkDelayOff (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_BlinkDelayOff (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_BlinkDelayOn (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_BlinkDelayOn (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_ScrollDelay (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_ScrollDelay (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_ScrollDirection (
        /*[out,retval]*/ enum EScrollDirection * Value ) = 0;
      virtual HRESULT __stdcall put_ScrollDirection (
        /*[in]*/ enum EScrollDirection Value ) = 0;
      virtual HRESULT __stdcall get_Scroll (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Scroll (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
};

struct __declspec(uuid("6a38a032-af85-4ce1-9d5d-d9c773feb8a3"))
IText3DTool : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAngle,put=PutAngle))
    double Angle;
    __declspec(property(get=GetFont))
    ITeeFontPtr Font;
    __declspec(property(get=GetPosition))
    IFloatXYZPtr Position;
    __declspec(property(get=GetRotation))
    IFloatXYZPtr Rotation;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;

    //
    // Wrapper methods for error-handling
    //

    double GetAngle ( );
    void PutAngle (
        double Value );
    ITeeFontPtr GetFont ( );
    IFloatXYZPtr GetPosition ( );
    IFloatXYZPtr GetRotation ( );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Angle (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_Angle (
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ struct ITeeFont * * Value ) = 0;
      virtual HRESULT __stdcall get_Position (
        /*[out,retval]*/ struct IFloatXYZ * * Value ) = 0;
      virtual HRESULT __stdcall get_Rotation (
        /*[out,retval]*/ struct IFloatXYZ * * Value ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR Value ) = 0;
};

struct __declspec(uuid("bbb0ac77-86e9-4a8b-9416-6c4d8662ede5"))
IScrollBarThumb : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBrush))
    IBrushPtr Brush;
    __declspec(property(get=GetGradient))
    IGradientPtr Gradient;
    __declspec(property(get=GetImage))
    ITeePicturePtr Image;
    __declspec(property(get=GetSize,put=PutSize))
    long Size;
    __declspec(property(get=GetStyle,put=PutStyle))
    enum EScrollThumbStyle Style;

    //
    // Wrapper methods for error-handling
    //

    IBrushPtr GetBrush ( );
    IGradientPtr GetGradient ( );
    ITeePicturePtr GetImage ( );
    long GetSize ( );
    void PutSize (
        long Value );
    enum EScrollThumbStyle GetStyle ( );
    void PutStyle (
        enum EScrollThumbStyle Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Brush (
        /*[out,retval]*/ struct IBrush * * Value ) = 0;
      virtual HRESULT __stdcall get_Gradient (
        /*[out,retval]*/ struct IGradient * * Value ) = 0;
      virtual HRESULT __stdcall get_Image (
        /*[out,retval]*/ struct ITeePicture * * Value ) = 0;
      virtual HRESULT __stdcall get_Size (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Size (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ enum EScrollThumbStyle * Value ) = 0;
      virtual HRESULT __stdcall put_Style (
        /*[in]*/ enum EScrollThumbStyle Value ) = 0;
};

struct __declspec(uuid("54eb0bad-76a8-4db2-8632-89eefb9c5cf1"))
ILegendScrollBarTool : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetHorizontal,put=PutHorizontal))
    VARIANT_BOOL Horizontal;
    __declspec(property(get=GetPosition,put=PutPosition))
    long Position;
    __declspec(property(get=GetArrowBrush))
    IBrushPtr ArrowBrush;
    __declspec(property(get=GetAutoRepeat,put=PutAutoRepeat))
    VARIANT_BOOL AutoRepeat;
    __declspec(property(get=GetBackColor,put=PutBackColor))
    OLE_COLOR BackColor;
    __declspec(property(get=GetBevel,put=PutBevel))
    enum EPanelBevel Bevel;
    __declspec(property(get=GetBrush))
    IBrushPtr Brush;
    __declspec(property(get=GetDrawStyle,put=PutDrawStyle))
    enum EScrollBarDrawStyle DrawStyle;
    __declspec(property(get=GetInitialDelay,put=PutInitialDelay))
    long InitialDelay;
    __declspec(property(get=GetPen))
    IPenPtr Pen;
    __declspec(property(get=GetSize,put=PutSize))
    long Size;
    __declspec(property(get=GetThumbBrush))
    IBrushPtr ThumbBrush;
    __declspec(property(get=GetGradient))
    IGradientPtr Gradient;
    __declspec(property(get=GetMinThumbSize,put=PutMinThumbSize))
    long MinThumbSize;
    __declspec(property(get=GetThumbSize,put=PutThumbSize))
    long ThumbSize;
    __declspec(property(get=GetThumb))
    IScrollBarThumbPtr Thumb;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetHorizontal ( );
    void PutHorizontal (
        VARIANT_BOOL Value );
    long GetPosition ( );
    void PutPosition (
        long Value );
    IBrushPtr GetArrowBrush ( );
    VARIANT_BOOL GetAutoRepeat ( );
    void PutAutoRepeat (
        VARIANT_BOOL Value );
    OLE_COLOR GetBackColor ( );
    void PutBackColor (
        OLE_COLOR Value );
    enum EPanelBevel GetBevel ( );
    void PutBevel (
        enum EPanelBevel Value );
    IBrushPtr GetBrush ( );
    long GetInitialDelay ( );
    void PutInitialDelay (
        long Value );
    IPenPtr GetPen ( );
    long GetSize ( );
    void PutSize (
        long Value );
    IBrushPtr GetThumbBrush ( );
    enum EScrollBarDrawStyle GetDrawStyle ( );
    void PutDrawStyle (
        enum EScrollBarDrawStyle Value );
    IGradientPtr GetGradient ( );
    long GetMinThumbSize ( );
    void PutMinThumbSize (
        long Value );
    long GetThumbSize ( );
    void PutThumbSize (
        long Value );
    IScrollBarThumbPtr GetThumb ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Horizontal (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Horizontal (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_Position (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Position (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_ArrowBrush (
        /*[out,retval]*/ struct IBrush * * Value ) = 0;
      virtual HRESULT __stdcall get_AutoRepeat (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_AutoRepeat (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_BackColor (
        /*[out,retval]*/ OLE_COLOR * Value ) = 0;
      virtual HRESULT __stdcall put_BackColor (
        /*[in]*/ OLE_COLOR Value ) = 0;
      virtual HRESULT __stdcall get_Bevel (
        /*[out,retval]*/ enum EPanelBevel * Value ) = 0;
      virtual HRESULT __stdcall put_Bevel (
        /*[in]*/ enum EPanelBevel Value ) = 0;
      virtual HRESULT __stdcall get_Brush (
        /*[out,retval]*/ struct IBrush * * Value ) = 0;
      virtual HRESULT __stdcall get_InitialDelay (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_InitialDelay (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_Pen (
        /*[out,retval]*/ struct IPen * * Value ) = 0;
      virtual HRESULT __stdcall get_Size (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Size (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_ThumbBrush (
        /*[out,retval]*/ struct IBrush * * Value ) = 0;
      virtual HRESULT __stdcall get_DrawStyle (
        /*[out,retval]*/ enum EScrollBarDrawStyle * Value ) = 0;
      virtual HRESULT __stdcall put_DrawStyle (
        /*[in]*/ enum EScrollBarDrawStyle Value ) = 0;
      virtual HRESULT __stdcall get_Gradient (
        /*[out,retval]*/ struct IGradient * * Value ) = 0;
      virtual HRESULT __stdcall get_MinThumbSize (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_MinThumbSize (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_ThumbSize (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_ThumbSize (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_Thumb (
        /*[out,retval]*/ struct IScrollBarThumb * * Value ) = 0;
};

struct __declspec(uuid("615c007a-5ca3-4580-a495-1ec755e33c26"))
IHighLowLineSeries : IBaseHighLowSeries
{
    //
    // Property data
    //

    __declspec(property(get=GetHighPointer))
    IPointerPtr HighPointer;
    __declspec(property(get=GetLowPointer))
    IPointerPtr LowPointer;

    //
    // Wrapper methods for error-handling
    //

    IPointerPtr GetHighPointer ( );
    IPointerPtr GetLowPointer ( );
    long Clicked (
        long X,
        long Y );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_HighPointer (
        /*[out,retval]*/ struct IPointer * * Value ) = 0;
      virtual HRESULT __stdcall get_LowPointer (
        /*[out,retval]*/ struct IPointer * * Value ) = 0;
      virtual HRESULT __stdcall raw_Clicked (
        /*[in]*/ long X,
        /*[in]*/ long Y,
        /*[out,retval]*/ long * AValue ) = 0;
};

struct __declspec(uuid("4bdb69f7-bfad-4f02-999f-feae6531350f"))
IPolarGridSeries : ICustomPolarSeries
{
    //
    // Property data
    //

    __declspec(property(get=GetCellValues))
    IValueListPtr CellValues;
    __declspec(property(get=GetCentered,put=PutCentered))
    VARIANT_BOOL Centered;
    __declspec(property(get=GetNumSectors,put=PutNumSectors))
    long NumSectors;
    __declspec(property(get=GetNumTracks,put=PutNumTracks))
    long NumTracks;
    __declspec(property(get=GetPalette))
    ICustom3DPaletteSeriesPtr Palette;

    //
    // Wrapper methods for error-handling
    //

    IValueListPtr GetCellValues ( );
    VARIANT_BOOL GetCentered ( );
    void PutCentered (
        VARIANT_BOOL Value );
    long GetNumSectors ( );
    void PutNumSectors (
        long Value );
    long GetNumTracks ( );
    void PutNumTracks (
        long Value );
    long AddCell (
        long Sector,
        long Track,
        double Value );
    long CalcXPos (
        long ValueIndex );
    long CalcYPos (
        long ValueIndex );
    long Clicked (
        long X,
        long Y );
    long CountLegendItems ( );
    OLE_COLOR GetCellColor (
        double Value );
    OLE_COLOR LegendItemColor (
        long LegendIndex );
    _bstr_t LegendString (
        long LegendIndex,
        enum ELegendTextStyle LegendTextStyle );
    ICustom3DPaletteSeriesPtr GetPalette ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_CellValues (
        /*[out,retval]*/ struct IValueList * * Value ) = 0;
      virtual HRESULT __stdcall get_Centered (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Centered (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_NumSectors (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_NumSectors (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_NumTracks (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_NumTracks (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_AddCell (
        /*[in]*/ long Sector,
        /*[in]*/ long Track,
        /*[in]*/ double Value,
        /*[out,retval]*/ long * AValue ) = 0;
      virtual HRESULT __stdcall raw_CalcXPos (
        /*[in]*/ long ValueIndex,
        /*[out,retval]*/ long * AValue ) = 0;
      virtual HRESULT __stdcall raw_CalcYPos (
        /*[in]*/ long ValueIndex,
        /*[out,retval]*/ long * AValue ) = 0;
      virtual HRESULT __stdcall raw_Clicked (
        /*[in]*/ long X,
        /*[in]*/ long Y,
        /*[out,retval]*/ long * AValue ) = 0;
      virtual HRESULT __stdcall raw_CountLegendItems (
        /*[out,retval]*/ long * AValue ) = 0;
      virtual HRESULT __stdcall raw_GetCellColor (
        /*[in]*/ double Value,
        /*[out,retval]*/ OLE_COLOR * AColor ) = 0;
      virtual HRESULT __stdcall raw_LegendItemColor (
        /*[in]*/ long LegendIndex,
        /*[out,retval]*/ OLE_COLOR * AColor ) = 0;
      virtual HRESULT __stdcall raw_LegendString (
        /*[in]*/ long LegendIndex,
        /*[in]*/ enum ELegendTextStyle LegendTextStyle,
        /*[out,retval]*/ BSTR * AValue ) = 0;
      virtual HRESULT __stdcall get_Palette (
        /*[out,retval]*/ struct ICustom3DPaletteSeries * * Value ) = 0;
};

struct __declspec(uuid("4649cf17-b8da-49a3-a8e4-52bbe5d354c0"))
ICustomImagePointSeries : IPointSeries
{
    //
    // Property data
    //

    __declspec(property(get=GetImagePoint))
    ITeePicturePtr ImagePoint;
    __declspec(property(get=GetImageTransparent,put=PutImageTransparent))
    VARIANT_BOOL ImageTransparent;

    //
    // Wrapper methods for error-handling
    //

    ITeePicturePtr GetImagePoint ( );
    VARIANT_BOOL GetImageTransparent ( );
    void PutImageTransparent (
        VARIANT_BOOL Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ImagePoint (
        /*[out,retval]*/ struct ITeePicture * * Value ) = 0;
      virtual HRESULT __stdcall get_ImageTransparent (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_ImageTransparent (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
};

struct __declspec(uuid("c9e81247-a636-4015-b5fc-19143907753d"))
IDeltaPointSeries : ICustomImagePointSeries
{
    //
    // Property data
    //

    __declspec(property(get=GetEqualImage))
    ITeePicturePtr EqualImage;
    __declspec(property(get=GetGreaterImage))
    ITeePicturePtr GreaterImage;
    __declspec(property(get=GetImageStyle,put=PutImageStyle))
    enum EDeltaImageStyle ImageStyle;
    __declspec(property(get=GetLowerImage))
    ITeePicturePtr LowerImage;

    //
    // Wrapper methods for error-handling
    //

    ITeePicturePtr GetEqualImage ( );
    ITeePicturePtr GetGreaterImage ( );
    enum EDeltaImageStyle GetImageStyle ( );
    void PutImageStyle (
        enum EDeltaImageStyle Value );
    ITeePicturePtr GetLowerImage ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_EqualImage (
        /*[out,retval]*/ struct ITeePicture * * Value ) = 0;
      virtual HRESULT __stdcall get_GreaterImage (
        /*[out,retval]*/ struct ITeePicture * * Value ) = 0;
      virtual HRESULT __stdcall get_ImageStyle (
        /*[out,retval]*/ enum EDeltaImageStyle * Value ) = 0;
      virtual HRESULT __stdcall put_ImageStyle (
        /*[in]*/ enum EDeltaImageStyle Value ) = 0;
      virtual HRESULT __stdcall get_LowerImage (
        /*[out,retval]*/ struct ITeePicture * * Value ) = 0;
};

struct __declspec(uuid("0cf2cd0f-b6b0-4ceb-a143-25d37c8ee788"))
IImagePointSeries : ICustomImagePointSeries
{};

struct __declspec(uuid("aaa6ae5b-b976-459f-9380-e85b3f779880"))
IWorldSeries : IMapSeries
{
    //
    // Property data
    //

    __declspec(property(get=GetMap,put=PutMap))
    enum EWorldMap Map;

    //
    // Wrapper methods for error-handling
    //

    enum EWorldMap GetMap ( );
    void PutMap (
        enum EWorldMap Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Map (
        /*[out,retval]*/ enum EWorldMap * Value ) = 0;
      virtual HRESULT __stdcall put_Map (
        /*[in]*/ enum EWorldMap Value ) = 0;
};

struct __declspec(uuid("c486e24f-95bc-44c0-99b5-e24957990017"))
ITagCloudSeries : ICustom3DPaletteSeries
{
    //
    // Property data
    //

    __declspec(property(get=GetFilter,put=PutFilter))
    _bstr_t Filter;
    __declspec(property(get=GetFont))
    ITeeFontPtr Font;
    __declspec(property(get=GetGradient))
    IGradientPtr Gradient;
    __declspec(property(get=GetTagSeparation,put=PutTagSeparation))
    long TagSeparation;

    //
    // Wrapper methods for error-handling
    //

    long AddTag (
        _bstr_t Text,
        double Value );
    long GetTagFontSize (
        long ValueIndex );
    HRESULT Sort (
        enum ETagCloudOrder SortBy,
        enum EValueListOrder Order );
    _bstr_t GetFilter ( );
    void PutFilter (
        _bstr_t Value );
    ITeeFontPtr GetFont ( );
    IGradientPtr GetGradient ( );
    long GetTagSeparation ( );
    void PutTagSeparation (
        long Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_AddTag (
        /*[in]*/ BSTR Text,
        /*[in]*/ double Value,
        /*[out,retval]*/ long * AValue ) = 0;
      virtual HRESULT __stdcall raw_GetTagFontSize (
        /*[in]*/ long ValueIndex,
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall raw_Sort (
        /*[in]*/ enum ETagCloudOrder SortBy,
        /*[in]*/ enum EValueListOrder Order ) = 0;
      virtual HRESULT __stdcall get_Filter (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall put_Filter (
        /*[in]*/ BSTR Value ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ struct ITeeFont * * Value ) = 0;
      virtual HRESULT __stdcall get_Gradient (
        /*[out,retval]*/ struct IGradient * * Value ) = 0;
      virtual HRESULT __stdcall get_TagSeparation (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_TagSeparation (
        /*[in]*/ long Value ) = 0;
};

struct __declspec(uuid("19143e66-8a53-4e32-ba49-06be1a7f03bd"))
IKagiSeries : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCloseValues))
    IValueListPtr CloseValues;
    __declspec(property(get=GetAbsoluteReversal,put=PutAbsoluteReversal))
    VARIANT_BOOL AbsoluteReversal;
    __declspec(property(get=GetBuySymbol))
    IPointerPtr BuySymbol;
    __declspec(property(get=GetDownSwing))
    IPenPtr DownSwing;
    __declspec(property(get=GetReversalAmount,put=PutReversalAmount))
    double ReversalAmount;
    __declspec(property(get=GetSellSymbol))
    IPointerPtr SellSymbol;
    __declspec(property(get=GetUpSwing))
    IPenPtr UpSwing;

    //
    // Wrapper methods for error-handling
    //

    IValueListPtr GetCloseValues ( );
    VARIANT_BOOL GetAbsoluteReversal ( );
    void PutAbsoluteReversal (
        VARIANT_BOOL Value );
    IPointerPtr GetBuySymbol ( );
    IPenPtr GetDownSwing ( );
    double GetReversalAmount ( );
    void PutReversalAmount (
        double Value );
    IPointerPtr GetSellSymbol ( );
    IPenPtr GetUpSwing ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_CloseValues (
        /*[out,retval]*/ struct IValueList * * Value ) = 0;
      virtual HRESULT __stdcall get_AbsoluteReversal (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_AbsoluteReversal (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_BuySymbol (
        /*[out,retval]*/ struct IPointer * * Value ) = 0;
      virtual HRESULT __stdcall get_DownSwing (
        /*[out,retval]*/ struct IPen * * Value ) = 0;
      virtual HRESULT __stdcall get_ReversalAmount (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_ReversalAmount (
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall get_SellSymbol (
        /*[out,retval]*/ struct IPointer * * Value ) = 0;
      virtual HRESULT __stdcall get_UpSwing (
        /*[out,retval]*/ struct IPen * * Value ) = 0;
};

struct __declspec(uuid("936a835c-57e9-4b90-9e6f-6dc6c0866c65"))
ILinkTool : IAnnotationTool
{
    //
    // Property data
    //

    __declspec(property(get=GetHint,put=PutHint))
    _bstr_t Hint;
    __declspec(property(get=GetURL,put=PutURL))
    _bstr_t URL;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetHint ( );
    void PutHint (
        _bstr_t Value );
    _bstr_t GetURL ( );
    void PutURL (
        _bstr_t Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Hint (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall put_Hint (
        /*[in]*/ BSTR Value ) = 0;
      virtual HRESULT __stdcall get_URL (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall put_URL (
        /*[in]*/ BSTR Value ) = 0;
};

struct __declspec(uuid("518a4d6f-69c9-4ee5-8e7a-984d45ec2992"))
IFrameBrush : IBrush
{
    //
    // Property data
    //

    __declspec(property(get=GetGradient))
    IGradientPtr Gradient;

    //
    // Wrapper methods for error-handling
    //

    IGradientPtr GetGradient ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Gradient (
        /*[out,retval]*/ struct IGradient * * Value ) = 0;
};

struct __declspec(uuid("f9305261-4001-43fe-a40c-8bd11947c491"))
IFramedBorder : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBrush))
    IBrushPtr Brush;
    __declspec(property(get=GetCircled,put=PutCircled))
    VARIANT_BOOL Circled;
    __declspec(property(get=GetInnerBrush))
    IFrameBrushPtr InnerBrush;
    __declspec(property(get=GetMiddleBrush))
    IFrameBrushPtr MiddleBrush;
    __declspec(property(get=GetOuterBrush))
    IFrameBrushPtr OuterBrush;
    __declspec(property(get=GetShadow))
    ITeeShadowPtr Shadow;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetWidth,put=PutWidth))
    long Width;

    //
    // Wrapper methods for error-handling
    //

    IBrushPtr GetBrush ( );
    VARIANT_BOOL GetCircled ( );
    void PutCircled (
        VARIANT_BOOL Value );
    IFrameBrushPtr GetInnerBrush ( );
    IFrameBrushPtr GetMiddleBrush ( );
    IFrameBrushPtr GetOuterBrush ( );
    ITeeShadowPtr GetShadow ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL Value );
    long GetWidth ( );
    void PutWidth (
        long Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Brush (
        /*[out,retval]*/ struct IBrush * * Value ) = 0;
      virtual HRESULT __stdcall get_Circled (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Circled (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_InnerBrush (
        /*[out,retval]*/ struct IFrameBrush * * Value ) = 0;
      virtual HRESULT __stdcall get_MiddleBrush (
        /*[out,retval]*/ struct IFrameBrush * * Value ) = 0;
      virtual HRESULT __stdcall get_OuterBrush (
        /*[out,retval]*/ struct IFrameBrush * * Value ) = 0;
      virtual HRESULT __stdcall get_Shadow (
        /*[out,retval]*/ struct ITeeShadow * * Value ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ long Value ) = 0;
};

struct __declspec(uuid("75035ccb-6463-49b8-9a53-bc2327b6b341"))
ICustomGauge : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetFace))
    ITeeShapePtr Face;
    __declspec(property(get=GetFrame))
    IFramedBorderPtr Frame;
    __declspec(property(get=GetValue,put=PutValue))
    double Value;

    //
    // Wrapper methods for error-handling
    //

    ITeeShapePtr GetFace ( );
    IFramedBorderPtr GetFrame ( );
    double GetValue ( );
    void PutValue (
        double Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Face (
        /*[out,retval]*/ struct ITeeShape * * Value ) = 0;
      virtual HRESULT __stdcall get_Frame (
        /*[out,retval]*/ struct IFramedBorder * * Value ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ double Value ) = 0;
};

struct __declspec(uuid("5b4b3f07-2ee7-48be-8f04-cc603959c88f"))
IGaugeSeriesPointer : IPointer
{
    //
    // Property data
    //

    __declspec(property(get=GetGaugeStyle,put=PutGaugeStyle))
    enum EGaugePointerStyles GaugeStyle;

    //
    // Wrapper methods for error-handling
    //

    enum EGaugePointerStyles GetGaugeStyle ( );
    void PutGaugeStyle (
        enum EGaugePointerStyles Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_GaugeStyle (
        /*[out,retval]*/ enum EGaugePointerStyles * Value ) = 0;
      virtual HRESULT __stdcall put_GaugeStyle (
        /*[in]*/ enum EGaugePointerStyles Value ) = 0;
};

struct __declspec(uuid("73de645d-73e4-4921-bcbd-e839d2067215"))
IGaugePointerRange : IGaugeSeriesPointer
{
    //
    // Property data
    //

    __declspec(property(get=GetEndValue,put=PutEndValue))
    double EndValue;
    __declspec(property(get=GetStartValue,put=PutStartValue))
    double StartValue;

    //
    // Wrapper methods for error-handling
    //

    double GetEndValue ( );
    void PutEndValue (
        double Value );
    double GetStartValue ( );
    void PutStartValue (
        double Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_EndValue (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_EndValue (
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall get_StartValue (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_StartValue (
        /*[in]*/ double Value ) = 0;
};

struct __declspec(uuid("ddb370db-0cc3-46b7-9b82-7595f3ffdf5f"))
ICustomGaugeMinMax : ICustomGauge
{
    //
    // Property data
    //

    __declspec(property(get=GetGreenLine))
    IGaugePointerRangePtr GreenLine;
    __declspec(property(get=GetHorizontal,put=PutHorizontal))
    VARIANT_BOOL Horizontal;
    __declspec(property(get=GetMaximum,put=PutMaximum))
    double Maximum;
    __declspec(property(get=GetMinimum,put=PutMinimum))
    double Minimum;
    __declspec(property(get=GetMinorTickDistance,put=PutMinorTickDistance))
    long MinorTickDistance;
    __declspec(property(get=GetMinorTicks))
    IGaugeSeriesPointerPtr MinorTicks;
    __declspec(property(get=GetRedLine))
    IGaugePointerRangePtr RedLine;
    __declspec(property(get=GetTicks))
    IGaugeSeriesPointerPtr Ticks;

    //
    // Wrapper methods for error-handling
    //

    IGaugePointerRangePtr GetGreenLine ( );
    VARIANT_BOOL GetHorizontal ( );
    void PutHorizontal (
        VARIANT_BOOL Value );
    double GetMaximum ( );
    void PutMaximum (
        double Value );
    double GetMinimum ( );
    void PutMinimum (
        double Value );
    long GetMinorTickDistance ( );
    void PutMinorTickDistance (
        long Value );
    IGaugeSeriesPointerPtr GetMinorTicks ( );
    IGaugePointerRangePtr GetRedLine ( );
    IGaugeSeriesPointerPtr GetTicks ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_GreenLine (
        /*[out,retval]*/ struct IGaugePointerRange * * Value ) = 0;
      virtual HRESULT __stdcall get_Horizontal (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Horizontal (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_Maximum (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_Maximum (
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall get_Minimum (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_Minimum (
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall get_MinorTickDistance (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_MinorTickDistance (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_MinorTicks (
        /*[out,retval]*/ struct IGaugeSeriesPointer * * Value ) = 0;
      virtual HRESULT __stdcall get_RedLine (
        /*[out,retval]*/ struct IGaugePointerRange * * Value ) = 0;
      virtual HRESULT __stdcall get_Ticks (
        /*[out,retval]*/ struct IGaugeSeriesPointer * * Value ) = 0;
};

struct __declspec(uuid("32c8b5f5-ad20-4f33-ada7-1d028d1ce5d9"))
ILinearGauge : ICustomGaugeMinMax
{
    //
    // Property data
    //

    __declspec(property(get=GetMaxValueIndicator))
    IGaugeSeriesPointerPtr MaxValueIndicator;
    __declspec(property(get=GetUseValueColorPalette,put=PutUseValueColorPalette))
    VARIANT_BOOL UseValueColorPalette;
    __declspec(property(get=GetValueArea))
    ITeeShapePtr ValueArea;

    //
    // Wrapper methods for error-handling
    //

    IGaugeSeriesPointerPtr GetMaxValueIndicator ( );
    VARIANT_BOOL GetUseValueColorPalette ( );
    void PutUseValueColorPalette (
        VARIANT_BOOL Value );
    ITeeShapePtr GetValueArea ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_MaxValueIndicator (
        /*[out,retval]*/ struct IGaugeSeriesPointer * * Value ) = 0;
      virtual HRESULT __stdcall get_UseValueColorPalette (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_UseValueColorPalette (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_ValueArea (
        /*[out,retval]*/ struct ITeeShape * * Value ) = 0;
};

struct __declspec(uuid("1c46cc17-ba97-4341-82e7-073600af4c49"))
ICircularGauge : ICustomGaugeMinMax
{
    //
    // Property data
    //

    __declspec(property(get=GetCenter))
    IGaugeSeriesPointerPtr Center;
    __declspec(property(get=GetCircled,put=PutCircled))
    VARIANT_BOOL Circled;
    __declspec(property(get=GetEndPoint))
    IPointerPtr EndPoint;
    __declspec(property(get=GetHand))
    IGaugeSeriesPointerPtr Hand;
    __declspec(property(get=GetLabelsInside,put=PutLabelsInside))
    VARIANT_BOOL LabelsInside;
    __declspec(property(get=GetRotateLabels,put=PutRotateLabels))
    VARIANT_BOOL RotateLabels;
    __declspec(property(get=GetRotationAngle,put=PutRotationAngle))
    double RotationAngle;
    __declspec(property(get=GetTotalAngle,put=PutTotalAngle))
    double TotalAngle;

    //
    // Wrapper methods for error-handling
    //

    IGaugeSeriesPointerPtr GetCenter ( );
    VARIANT_BOOL GetCircled ( );
    void PutCircled (
        VARIANT_BOOL Value );
    IPointerPtr GetEndPoint ( );
    VARIANT_BOOL GetLabelsInside ( );
    void PutLabelsInside (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetRotateLabels ( );
    void PutRotateLabels (
        VARIANT_BOOL Value );
    double GetRotationAngle ( );
    void PutRotationAngle (
        double Value );
    double GetTotalAngle ( );
    void PutTotalAngle (
        double Value );
    IGaugeSeriesPointerPtr GetHand ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Center (
        /*[out,retval]*/ struct IGaugeSeriesPointer * * Value ) = 0;
      virtual HRESULT __stdcall get_Circled (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Circled (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_EndPoint (
        /*[out,retval]*/ struct IPointer * * Value ) = 0;
      virtual HRESULT __stdcall get_LabelsInside (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_LabelsInside (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_RotateLabels (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_RotateLabels (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_RotationAngle (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_RotationAngle (
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall get_TotalAngle (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_TotalAngle (
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall get_Hand (
        /*[out,retval]*/ struct IGaugeSeriesPointer * * Value ) = 0;
};

struct __declspec(uuid("87b5794c-a8f0-4837-93b5-be1af64574ff"))
IGaugeHand : IGaugeSeriesPointer
{
    //
    // Property data
    //

    __declspec(property(get=GetDistance,put=PutDistance))
    long Distance;
    __declspec(property(get=GetOffset,put=PutOffset))
    long Offset;

    //
    // Wrapper methods for error-handling
    //

    long GetDistance ( );
    void PutDistance (
        long Value );
    long GetOffset ( );
    void PutOffset (
        long Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Distance (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Distance (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_Offset (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Offset (
        /*[in]*/ long Value ) = 0;
};

struct __declspec(uuid("22fdb456-9896-4d6f-b48c-82f84e26ef53"))
IFibonacciTool : ICustomToolSeries
{
    //
    // Property data
    //

    __declspec(property(get=GetDrawStyle,put=PutDrawStyle))
    enum EFibonacciStyle DrawStyle;
    __declspec(property(get=GetEndX,put=PutEndX))
    double EndX;
    __declspec(property(get=GetEndY,put=PutEndY))
    double EndY;
    __declspec(property(get=GetLabelsAngle,put=PutLabelsAngle))
    long LabelsAngle;
    __declspec(property(get=GetLabelsFont))
    ITeeFontPtr LabelsFont;
    __declspec(property(get=GetLevels))
    IFibonacciLevelsPtr Levels;
    __declspec(property(get=GetShowLabels,put=PutShowLabels))
    VARIANT_BOOL ShowLabels;
    __declspec(property(get=GetStartX,put=PutStartX))
    double StartX;
    __declspec(property(get=GetStartY,put=PutStartY))
    double StartY;
    __declspec(property(get=GetTrendPen))
    IPenPtr TrendPen;

    //
    // Wrapper methods for error-handling
    //

    enum EFibonacciStyle GetDrawStyle ( );
    void PutDrawStyle (
        enum EFibonacciStyle Value );
    double GetEndX ( );
    void PutEndX (
        double Value );
    double GetEndY ( );
    void PutEndY (
        double Value );
    long GetLabelsAngle ( );
    void PutLabelsAngle (
        long Value );
    ITeeFontPtr GetLabelsFont ( );
    IFibonacciLevelsPtr GetLevels ( );
    VARIANT_BOOL GetShowLabels ( );
    void PutShowLabels (
        VARIANT_BOOL Value );
    double GetStartX ( );
    void PutStartX (
        double Value );
    double GetStartY ( );
    void PutStartY (
        double Value );
    IPenPtr GetTrendPen ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_DrawStyle (
        /*[out,retval]*/ enum EFibonacciStyle * Value ) = 0;
      virtual HRESULT __stdcall put_DrawStyle (
        /*[in]*/ enum EFibonacciStyle Value ) = 0;
      virtual HRESULT __stdcall get_EndX (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_EndX (
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall get_EndY (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_EndY (
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall get_LabelsAngle (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_LabelsAngle (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_LabelsFont (
        /*[out,retval]*/ struct ITeeFont * * Value ) = 0;
      virtual HRESULT __stdcall get_Levels (
        /*[out,retval]*/ struct IFibonacciLevels * * Value ) = 0;
      virtual HRESULT __stdcall get_ShowLabels (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_ShowLabels (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_StartX (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_StartX (
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall get_StartY (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_StartY (
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall get_TrendPen (
        /*[out,retval]*/ struct IPen * * Value ) = 0;
};

struct __declspec(uuid("ae0bef36-d1ec-4b81-bf59-38a8c8ce4dcf"))
ITools : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetasTeeCursor))
    ICursorToolPtr asTeeCursor;
    __declspec(property(get=GetasDragMarks))
    IDragMarksToolPtr asDragMarks;
    __declspec(property(get=GetasAxisArrow))
    IAxisArrowToolPtr asAxisArrow;
    __declspec(property(get=GetasDrawLine))
    IDrawLineToolPtr asDrawLine;
    __declspec(property(get=GetasNearest))
    INearestToolPtr asNearest;
    __declspec(property(get=GetasColorband))
    IColorBandToolPtr asColorband;
    __declspec(property(get=GetasColorLine))
    IColorLineToolPtr asColorLine;
    __declspec(property(get=GetasRotate))
    IRotateToolPtr asRotate;
    __declspec(property(get=GetasMarksTip))
    IMarksTipToolPtr asMarksTip;
    __declspec(property(get=GetasChartImage))
    IChartImageToolPtr asChartImage;
    __declspec(property(get=GetasAnnotation))
    IAnnotationToolPtr asAnnotation;
    __declspec(property(get=GetasPageNum))
    IPageNumToolPtr asPageNum;
    __declspec(property(get=GetActive,put=PutActive))
    VARIANT_BOOL Active;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetToolType))
    enum EToolClass ToolType;
    __declspec(property(get=GetasGridTranspose))
    IGridTransposeToolPtr asGridTranspose;
    __declspec(property(get=GetasExtraLegend))
    IExtraLegendToolPtr asExtraLegend;
    __declspec(property(get=GetasSeriesAnimation))
    ISeriesAnimationToolPtr asSeriesAnimation;
    __declspec(property(get=GetasGantt))
    IGanttToolPtr asGantt;
    __declspec(property(get=GetasGridBand))
    IGridBandToolPtr asGridBand;
    __declspec(property(get=GetasPie))
    IPieToolPtr asPie;
    __declspec(property(get=GetasDragPoint))
    IDragPointToolPtr asDragPoint;
    __declspec(property(get=GetasLegendScrollBar))
    ILegendScrollBarToolPtr asLegendScrollBar;
    __declspec(property(get=GetasLight))
    ILightToolPtr asLight;
    __declspec(property(get=GetasSurfaceNearest))
    ISurfaceNearestToolPtr asSurfaceNearest;
    __declspec(property(get=GetasAxisScroll))
    IAxisScrollToolPtr asAxisScroll;
    __declspec(property(get=GetasSeriesBand))
    ISeriesBandToolPtr asSeriesBand;
    __declspec(property(get=GetasSelector))
    ISelectorToolPtr asSelector;
    __declspec(property(get=GetasRectangle))
    IRectangleToolPtr asRectangle;
    __declspec(property(get=GetShowInEditor,put=PutShowInEditor))
    VARIANT_BOOL ShowInEditor;
    __declspec(property(get=GetasDataTable))
    IDataTableToolPtr asDataTable;
    __declspec(property(get=GetasVideo))
    IVideoToolPtr asVideo;
    __declspec(property(get=GetasVideoPlayer))
    IVideoPlayerToolPtr asVideoPlayer;
    __declspec(property(get=GetasTransposeSeries))
    ITransposeSeriesToolPtr asTransposeSeries;
    __declspec(property(get=GetasSeriesRegion))
    ISeriesRegionToolPtr asSeriesRegion;
    __declspec(property(get=GetasAntiAlias))
    IAntiAliasToolPtr asAntiAlias;
    __declspec(property(get=GetasClipSeries))
    IClipSeriesToolPtr asClipSeries;
    __declspec(property(get=GetasFader))
    IFaderToolPtr asFader;
    __declspec(property(get=GetasFrame))
    IFrameToolPtr asFrame;
    __declspec(property(get=GetasMagnify))
    IMagnifyToolPtr asMagnify;
    __declspec(property(get=GetasLegendPalette))
    ILegendPaletteToolPtr asLegendPalette;
    __declspec(property(get=GetasBanner))
    IBannerToolPtr asBanner;
    __declspec(property(get=GetasText3D))
    IText3DToolPtr asText3D;
    __declspec(property(get=GetasSeriesStats))
    ISeriesStatsToolPtr asSeriesStats;
    __declspec(property(get=GetasLink))
    ILinkToolPtr asLink;
    __declspec(property(get=GetasFibonacci))
    IFibonacciToolPtr asFibonacci;
    __declspec(property(get=GetasFullScreen))
    IFullScreenToolPtr asFullScreen;

    //
    // Wrapper methods for error-handling
    //

    ICursorToolPtr GetasTeeCursor ( );
    IDragMarksToolPtr GetasDragMarks ( );
    IAxisArrowToolPtr GetasAxisArrow ( );
    IDrawLineToolPtr GetasDrawLine ( );
    INearestToolPtr GetasNearest ( );
    IColorBandToolPtr GetasColorband ( );
    IColorLineToolPtr GetasColorLine ( );
    IRotateToolPtr GetasRotate ( );
    IMarksTipToolPtr GetasMarksTip ( );
    IChartImageToolPtr GetasChartImage ( );
    IAnnotationToolPtr GetasAnnotation ( );
    IPageNumToolPtr GetasPageNum ( );
    VARIANT_BOOL GetActive ( );
    void PutActive (
        VARIANT_BOOL Value );
    _bstr_t GetDescription ( );
    enum EToolClass GetToolType ( );
    HRESULT ShowEditor ( );
    IGridTransposeToolPtr GetasGridTranspose ( );
    IExtraLegendToolPtr GetasExtraLegend ( );
    ISeriesAnimationToolPtr GetasSeriesAnimation ( );
    IGanttToolPtr GetasGantt ( );
    IGridBandToolPtr GetasGridBand ( );
    IPieToolPtr GetasPie ( );
    IDragPointToolPtr GetasDragPoint ( );
    ILegendScrollBarToolPtr GetasLegendScrollBar ( );
    ILightToolPtr GetasLight ( );
    ISurfaceNearestToolPtr GetasSurfaceNearest ( );
    IAxisScrollToolPtr GetasAxisScroll ( );
    ISeriesBandToolPtr GetasSeriesBand ( );
    ISelectorToolPtr GetasSelector ( );
    IRectangleToolPtr GetasRectangle ( );
    VARIANT_BOOL GetShowInEditor ( );
    void PutShowInEditor (
        VARIANT_BOOL Value );
    IDataTableToolPtr GetasDataTable ( );
    IVideoToolPtr GetasVideo ( );
    IVideoPlayerToolPtr GetasVideoPlayer ( );
    ITransposeSeriesToolPtr GetasTransposeSeries ( );
    ISeriesRegionToolPtr GetasSeriesRegion ( );
    IAntiAliasToolPtr GetasAntiAlias ( );
    IClipSeriesToolPtr GetasClipSeries ( );
    IFaderToolPtr GetasFader ( );
    IFrameToolPtr GetasFrame ( );
    IMagnifyToolPtr GetasMagnify ( );
    ILegendPaletteToolPtr GetasLegendPalette ( );
    IBannerToolPtr GetasBanner ( );
    IText3DToolPtr GetasText3D ( );
    ISeriesStatsToolPtr GetasSeriesStats ( );
    ILinkToolPtr GetasLink ( );
    IFibonacciToolPtr GetasFibonacci ( );
    IFullScreenToolPtr GetasFullScreen ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_asTeeCursor (
        /*[out,retval]*/ struct ICursorTool * * Value ) = 0;
      virtual HRESULT __stdcall get_asDragMarks (
        /*[out,retval]*/ struct IDragMarksTool * * Value ) = 0;
      virtual HRESULT __stdcall get_asAxisArrow (
        /*[out,retval]*/ struct IAxisArrowTool * * Value ) = 0;
      virtual HRESULT __stdcall get_asDrawLine (
        /*[out,retval]*/ struct IDrawLineTool * * Value ) = 0;
      virtual HRESULT __stdcall get_asNearest (
        /*[out,retval]*/ struct INearestTool * * Value ) = 0;
      virtual HRESULT __stdcall get_asColorband (
        /*[out,retval]*/ struct IColorBandTool * * Value ) = 0;
      virtual HRESULT __stdcall get_asColorLine (
        /*[out,retval]*/ struct IColorLineTool * * Value ) = 0;
      virtual HRESULT __stdcall get_asRotate (
        /*[out,retval]*/ struct IRotateTool * * Value ) = 0;
      virtual HRESULT __stdcall get_asMarksTip (
        /*[out,retval]*/ struct IMarksTipTool * * Value ) = 0;
      virtual HRESULT __stdcall get_asChartImage (
        /*[out,retval]*/ struct IChartImageTool * * Value ) = 0;
      virtual HRESULT __stdcall get_asAnnotation (
        /*[out,retval]*/ struct IAnnotationTool * * Value ) = 0;
      virtual HRESULT __stdcall get_asPageNum (
        /*[out,retval]*/ struct IPageNumTool * * Value ) = 0;
      virtual HRESULT __stdcall get_Active (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Active (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall get_ToolType (
        /*[out,retval]*/ enum EToolClass * Value ) = 0;
      virtual HRESULT __stdcall raw_ShowEditor ( ) = 0;
      virtual HRESULT __stdcall get_asGridTranspose (
        /*[out,retval]*/ struct IGridTransposeTool * * Value ) = 0;
      virtual HRESULT __stdcall get_asExtraLegend (
        /*[out,retval]*/ struct IExtraLegendTool * * Value ) = 0;
      virtual HRESULT __stdcall get_asSeriesAnimation (
        /*[out,retval]*/ struct ISeriesAnimationTool * * Value ) = 0;
      virtual HRESULT __stdcall get_asGantt (
        /*[out,retval]*/ struct IGanttTool * * Value ) = 0;
      virtual HRESULT __stdcall get_asGridBand (
        /*[out,retval]*/ struct IGridBandTool * * Value ) = 0;
      virtual HRESULT __stdcall get_asPie (
        /*[out,retval]*/ struct IPieTool * * Value ) = 0;
      virtual HRESULT __stdcall get_asDragPoint (
        /*[out,retval]*/ struct IDragPointTool * * Value ) = 0;
      virtual HRESULT __stdcall get_asLegendScrollBar (
        /*[out,retval]*/ struct ILegendScrollBarTool * * Value ) = 0;
      virtual HRESULT __stdcall get_asLight (
        /*[out,retval]*/ struct ILightTool * * Value ) = 0;
      virtual HRESULT __stdcall get_asSurfaceNearest (
        /*[out,retval]*/ struct ISurfaceNearestTool * * Value ) = 0;
      virtual HRESULT __stdcall get_asAxisScroll (
        /*[out,retval]*/ struct IAxisScrollTool * * Value ) = 0;
      virtual HRESULT __stdcall get_asSeriesBand (
        /*[out,retval]*/ struct ISeriesBandTool * * Value ) = 0;
      virtual HRESULT __stdcall get_asSelector (
        /*[out,retval]*/ struct ISelectorTool * * Value ) = 0;
      virtual HRESULT __stdcall get_asRectangle (
        /*[out,retval]*/ struct IRectangleTool * * Value ) = 0;
      virtual HRESULT __stdcall get_ShowInEditor (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_ShowInEditor (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_asDataTable (
        /*[out,retval]*/ struct IDataTableTool * * Value ) = 0;
      virtual HRESULT __stdcall get_asVideo (
        /*[out,retval]*/ struct IVideoTool * * Value ) = 0;
      virtual HRESULT __stdcall get_asVideoPlayer (
        /*[out,retval]*/ struct IVideoPlayerTool * * Value ) = 0;
      virtual HRESULT __stdcall get_asTransposeSeries (
        /*[out,retval]*/ struct ITransposeSeriesTool * * Value ) = 0;
      virtual HRESULT __stdcall get_asSeriesRegion (
        /*[out,retval]*/ struct ISeriesRegionTool * * Value ) = 0;
      virtual HRESULT __stdcall get_asAntiAlias (
        /*[out,retval]*/ struct IAntiAliasTool * * Value ) = 0;
      virtual HRESULT __stdcall get_asClipSeries (
        /*[out,retval]*/ struct IClipSeriesTool * * Value ) = 0;
      virtual HRESULT __stdcall get_asFader (
        /*[out,retval]*/ struct IFaderTool * * Value ) = 0;
      virtual HRESULT __stdcall get_asFrame (
        /*[out,retval]*/ struct IFrameTool * * Value ) = 0;
      virtual HRESULT __stdcall get_asMagnify (
        /*[out,retval]*/ struct IMagnifyTool * * Value ) = 0;
      virtual HRESULT __stdcall get_asLegendPalette (
        /*[out,retval]*/ struct ILegendPaletteTool * * Value ) = 0;
      virtual HRESULT __stdcall get_asBanner (
        /*[out,retval]*/ struct IBannerTool * * Value ) = 0;
      virtual HRESULT __stdcall get_asText3D (
        /*[out,retval]*/ struct IText3DTool * * Value ) = 0;
      virtual HRESULT __stdcall get_asSeriesStats (
        /*[out,retval]*/ struct ISeriesStatsTool * * Value ) = 0;
      virtual HRESULT __stdcall get_asLink (
        /*[out,retval]*/ struct ILinkTool * * Value ) = 0;
      virtual HRESULT __stdcall get_asFibonacci (
        /*[out,retval]*/ struct IFibonacciTool * * Value ) = 0;
      virtual HRESULT __stdcall get_asFullScreen (
        /*[out,retval]*/ struct IFullScreenTool * * Value ) = 0;
};

struct __declspec(uuid("41cdccd7-8878-49d8-8581-0edcdce5e88d"))
IToolList : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetControlDefault))
    _variant_t ControlDefault[];
    __declspec(property(get=GetItems))
    IToolsPtr Items[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(put=PutActive))
    VARIANT_BOOL Active;

    //
    // Wrapper methods for error-handling
    //

    long Add (
        enum EToolClass ToolClass );
    IToolsPtr GetItems (
        long Index );
    _variant_t GetControlDefault (
        long Index );
    HRESULT Clear ( );
    HRESULT Delete (
        long Index );
    long GetCount ( );
    void PutActive (
        VARIANT_BOOL _arg1 );
    HRESULT Exchange (
        long Index1,
        long Index2 );
    HRESULT ShowGallery ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ enum EToolClass ToolClass,
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_Items (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct ITools * * Value ) = 0;
      virtual HRESULT __stdcall get_ControlDefault (
        /*[in]*/ long Index,
        /*[out,retval]*/ VARIANT * Value ) = 0;
      virtual HRESULT __stdcall raw_Clear ( ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[in]*/ long Index ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Active (
        /*[in]*/ VARIANT_BOOL _arg1 ) = 0;
      virtual HRESULT __stdcall raw_Exchange (
        /*[in]*/ long Index1,
        /*[in]*/ long Index2 ) = 0;
      virtual HRESULT __stdcall raw_ShowGallery ( ) = 0;
};

struct __declspec(uuid("852ed3b2-ca4c-473a-8533-20dfad3b84d9"))
INumericMarker : IAnnotationTool
{};

struct __declspec(uuid("6f8bdc44-2820-4bc9-934c-4933514e7db0"))
INumericGauge : ICustomGauge
{
    //
    // Property data
    //

    __declspec(property(get=GetDigitalFont,put=PutDigitalFont))
    enum EDigitalFont DigitalFont;
    __declspec(property(get=GetTextMarker))
    INumericMarkerPtr TextMarker;
    __declspec(property(get=GetUnitsMarker))
    INumericMarkerPtr UnitsMarker;
    __declspec(property(get=GetValueMarker))
    INumericMarkerPtr ValueMarker;

    //
    // Wrapper methods for error-handling
    //

    enum EDigitalFont GetDigitalFont ( );
    void PutDigitalFont (
        enum EDigitalFont Value );
    INumericMarkerPtr GetTextMarker ( );
    INumericMarkerPtr GetUnitsMarker ( );
    INumericMarkerPtr GetValueMarker ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_DigitalFont (
        /*[out,retval]*/ enum EDigitalFont * Value ) = 0;
      virtual HRESULT __stdcall put_DigitalFont (
        /*[in]*/ enum EDigitalFont Value ) = 0;
      virtual HRESULT __stdcall get_TextMarker (
        /*[out,retval]*/ struct INumericMarker * * Value ) = 0;
      virtual HRESULT __stdcall get_UnitsMarker (
        /*[out,retval]*/ struct INumericMarker * * Value ) = 0;
      virtual HRESULT __stdcall get_ValueMarker (
        /*[out,retval]*/ struct INumericMarker * * Value ) = 0;
};

struct __declspec(uuid("1af8ec64-fdf2-4116-8c7f-116a6ebdb87f"))
ISeries : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetActive,put=PutActive))
    VARIANT_BOOL Active;
    __declspec(property(get=GetasArea))
    IAreaSeriesPtr asArea;
    __declspec(property(get=GetasArrow))
    IArrowSeriesPtr asArrow;
    __declspec(property(get=GetasBar))
    IBarSeriesPtr asBar;
    __declspec(property(get=GetasBubble))
    IBubbleSeriesPtr asBubble;
    __declspec(property(get=GetasCandle))
    ICandleSeriesPtr asCandle;
    __declspec(property(get=GetasBezier))
    IBezierSeriesPtr asBezier;
    __declspec(property(get=GetasContour))
    IContourSeriesPtr asContour;
    __declspec(property(get=GetasErrorBar))
    IErrorBarSeriesPtr asErrorBar;
    __declspec(property(get=GetasFastLine))
    IFastLineSeriesPtr asFastLine;
    __declspec(property(get=GetasGantt))
    IGanttSeriesPtr asGantt;
    __declspec(property(get=GetasHorizBar))
    IHorizBarSeriesPtr asHorizBar;
    __declspec(property(get=GetasLine))
    ILineSeriesPtr asLine;
    __declspec(property(get=GetasPie))
    IPieSeriesPtr asPie;
    __declspec(property(get=GetasPoint))
    IPointSeriesPtr asPoint;
    __declspec(property(get=GetasPolar))
    IPolarSeriesPtr asPolar;
    __declspec(property(get=GetasShape))
    IShapeSeriesPtr asShape;
    __declspec(property(get=GetasSurface))
    ISurfaceSeriesPtr asSurface;
    __declspec(property(get=GetasVolume))
    IVolumeSeriesPtr asVolume;
    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;
    __declspec(property(get=GetColorEachPoint,put=PutColorEachPoint))
    VARIANT_BOOL ColorEachPoint;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetCursor,put=PutCursor))
    short Cursor;
    __declspec(property(get=GetDataSource,put=PutDataSource))
    _variant_t DataSource;
    __declspec(property(get=GetFirstValueIndex))
    long FirstValueIndex;
    __declspec(property(get=GetFunctionType))
    ITeeFunctionPtr FunctionType;
    __declspec(property(get=GetHorizontalAxis,put=PutHorizontalAxis))
    enum EHorizontalAxis HorizontalAxis;
    __declspec(property(get=GetLabelsSource,put=PutLabelsSource))
    _bstr_t LabelsSource;
    __declspec(property(get=GetLastValueIndex))
    long LastValueIndex;
    __declspec(property(get=GetMarks))
    IMarksPtr Marks;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetHorizontalAxisCustom,put=PutHorizontalAxisCustom))
    long HorizontalAxisCustom;
    __declspec(property(get=GetPercentFormat,put=PutPercentFormat))
    _bstr_t PercentFormat;
    __declspec(property(get=GetPointColor,put=PutPointColor))
    OLE_COLOR PointColor[];
    __declspec(property(get=GetPointLabel,put=PutPointLabel))
    _bstr_t PointLabel[];
    __declspec(property(get=GetPointValue,put=PutPointValue))
    double PointValue[];
    __declspec(property(get=GetSeriesType))
    enum ESeriesClass SeriesType;
    __declspec(property(get=GetShowInLegend,put=PutShowInLegend))
    VARIANT_BOOL ShowInLegend;
    __declspec(property(get=GetTitle,put=PutTitle))
    _bstr_t Title;
    __declspec(property(get=GetValueFormat,put=PutValueFormat))
    _bstr_t ValueFormat;
    __declspec(property(get=GetValueMarkText))
    _bstr_t ValueMarkText[];
    __declspec(property(get=GetVerticalAxis,put=PutVerticalAxis))
    enum EVerticalAxis VerticalAxis;
    __declspec(property(get=GetXValues))
    IValueListPtr XValues;
    __declspec(property(get=GetYValues))
    IValueListPtr YValues;
    __declspec(property(get=GetasHorizArea))
    IHorizAreaSeriesPtr asHorizArea;
    __declspec(property(get=GetasPointFigure))
    IPointFigureSeriesPtr asPointFigure;
    __declspec(property(get=GetasGauge))
    IGaugeSeriesPtr asGauge;
    __declspec(property(get=GetPen))
    IPenPtr Pen;
    __declspec(property(get=GetasVector3D))
    IVector3DSeriesPtr asVector3D;
    __declspec(property(get=GetasTower))
    ITowerSeriesPtr asTower;
    __declspec(property(get=GetasPolarBar))
    IPolarBarSeriesPtr asPolarBar;
    __declspec(property(get=GetasBubble3D))
    IBubble3DSeriesPtr asBubble3D;
    __declspec(property(get=GetasHorizHistogram))
    IHorizHistogramSeriesPtr asHorizHistogram;
    __declspec(property(get=GetShowInEditor,put=PutShowInEditor))
    VARIANT_BOOL ShowInEditor;
    __declspec(property(get=GetasVolumePipe))
    IVolumePipeSeriesPtr asVolumePipe;
    __declspec(property(get=GetasIsoSurface))
    IIsoSurfaceSeriesPtr asIsoSurface;
    __declspec(property(get=GetasDarvas))
    IDarvasSeriesPtr asDarvas;
    __declspec(property(get=GetasHighLowLine))
    IHighLowLineSeriesPtr asHighLowLine;
    __declspec(property(get=GetasPolarGrid))
    IPolarGridSeriesPtr asPolarGrid;
    __declspec(property(get=GetYMandatory))
    VARIANT_BOOL YMandatory;
    __declspec(property(get=GetBrush))
    IBrushPtr Brush;
    __declspec(property(get=GetMandatoryValueList))
    IValueListPtr MandatoryValueList;
    __declspec(property(get=GetNotMandatoryValueList))
    IValueListPtr NotMandatoryValueList;
    __declspec(property(get=GetasDeltaPoint))
    IDeltaPointSeriesPtr asDeltaPoint;
    __declspec(property(get=GetasImagePoint))
    IImagePointSeriesPtr asImagePoint;
    __declspec(property(get=GetasOrganizational))
    IOrgSeriesPtr asOrganizational;
    __declspec(property(get=GetasWorld))
    IWorldSeriesPtr asWorld;
    __declspec(property(get=GetasTagCloud))
    ITagCloudSeriesPtr asTagCloud;
    __declspec(property(get=GetasError))
    IErrorSeriesPtr asError;
    __declspec(property(get=GetasPoint3D))
    IPoint3DSeriesPtr asPoint3D;
    __declspec(property(get=GetasRadar))
    IRadarSeriesPtr asRadar;
    __declspec(property(get=GetasKagi))
    IKagiSeriesPtr asKagi;
    __declspec(property(get=GetasRenko))
    IRenkoSeriesPtr asRenko;
    __declspec(property(get=GetColorSource,put=PutColorSource))
    _bstr_t ColorSource;
    __declspec(property(get=GetasNumericGauge))
    INumericGaugePtr asNumericGauge;
    __declspec(property(get=GetasLinearGauge))
    ILinearGaugePtr asLinearGauge;
    __declspec(property(get=GetasCircularGauge))
    ICircularGaugePtr asCircularGauge;
    __declspec(property(get=GetVerticalAxisCustom,put=PutVerticalAxisCustom))
    long VerticalAxisCustom;
    __declspec(property(get=GetZOrder,put=PutZOrder))
    long ZOrder;
    __declspec(property(get=GetasClock))
    IClockSeriesPtr asClock;
    __declspec(property(get=GetasWindRose))
    IWindRoseSeriesPtr asWindRose;
    __declspec(property(get=GetasBar3D))
    IBar3DSeriesPtr asBar3D;
    __declspec(property(get=GetasImageBar))
    IImageBarSeriesPtr asImageBar;
    __declspec(property(get=GetMouseValues))
    ITeePoint2DPtr MouseValues;
    __declspec(property(get=GetDepth,put=PutDepth))
    long Depth;
    __declspec(property(get=GetasFunnel))
    IFunnelSeriesPtr asFunnel;
    __declspec(property(get=GetasDonut))
    IDonutSeriesPtr asDonut;
    __declspec(property(get=GetasTriSurface))
    ITriSurfaceSeriesPtr asTriSurface;
    __declspec(property(get=GetasBoxPlot))
    IBoxPlotSeriesPtr asBoxPlot;
    __declspec(property(get=GetasHorizBoxPlot))
    IHorizBoxPlotSeriesPtr asHorizBoxPlot;
    __declspec(property(get=GetasHistogram))
    IHistogramSeriesPtr asHistogram;
    __declspec(property(get=GetasColorGrid))
    IColorGridSeriesPtr asColorGrid;
    __declspec(property(get=GetasHorizLine))
    IHorizLineSeriesPtr asHorizLine;
    __declspec(property(get=GetasBarJoin))
    IBarJoinSeriesPtr asBarJoin;
    __declspec(property(get=GetasHighLow))
    IHighLowSeriesPtr asHighLow;
    __declspec(property(get=GetasWaterfall))
    IWaterfallSeriesPtr asWaterfall;
    __declspec(property(get=GetasSmith))
    ISmithSeriesPtr asSmith;
    __declspec(property(get=GetasPyramid))
    IPyramidSeriesPtr asPyramid;
    __declspec(property(get=GetasMap))
    IMapSeriesPtr asMap;
    __declspec(property(get=GetasCalendar))
    ICalendarSeriesPtr asCalendar;
    __declspec(property(get=GetSeriesLink))
    long SeriesLink;
    __declspec(property(get=GetDatasourceType,put=PutDatasourceType))
    enum EDatasourceType DatasourceType;
    __declspec(property(get=GetValueLists))
    IValueListsPtr ValueLists;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetActive ( );
    void PutActive (
        VARIANT_BOOL Active );
    IAreaSeriesPtr GetasArea ( );
    IArrowSeriesPtr GetasArrow ( );
    IBarSeriesPtr GetasBar ( );
    IBubbleSeriesPtr GetasBubble ( );
    ICandleSeriesPtr GetasCandle ( );
    IErrorBarSeriesPtr GetasErrorBar ( );
    IFastLineSeriesPtr GetasFastLine ( );
    IGanttSeriesPtr GetasGantt ( );
    IHorizBarSeriesPtr GetasHorizBar ( );
    ILineSeriesPtr GetasLine ( );
    IPieSeriesPtr GetasPie ( );
    IPointSeriesPtr GetasPoint ( );
    IPolarSeriesPtr GetasPolar ( );
    IShapeSeriesPtr GetasShape ( );
    ISurfaceSeriesPtr GetasSurface ( );
    IVolumeSeriesPtr GetasVolume ( );
    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR Color );
    VARIANT_BOOL GetColorEachPoint ( );
    void PutColorEachPoint (
        VARIANT_BOOL ColorEachPoint );
    long GetCount ( );
    short GetCursor ( );
    void PutCursor (
        short Cursor );
    _variant_t GetDataSource ( );
    void PutDataSource (
        const _variant_t & DataSource );
    long GetFirstValueIndex ( );
    ITeeFunctionPtr GetFunctionType ( );
    enum EHorizontalAxis GetHorizontalAxis ( );
    void PutHorizontalAxis (
        enum EHorizontalAxis HorizontalAxis );
    _bstr_t GetLabelsSource ( );
    void PutLabelsSource (
        _bstr_t LabelsSource );
    long GetLastValueIndex ( );
    IMarksPtr GetMarks ( );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t Name );
    _bstr_t GetPercentFormat ( );
    void PutPercentFormat (
        _bstr_t PercentFormat );
    OLE_COLOR GetPointColor (
        long Index );
    void PutPointColor (
        long Index,
        OLE_COLOR Value );
    _bstr_t GetPointLabel (
        long Index );
    void PutPointLabel (
        long Index,
        _bstr_t Value );
    double GetPointValue (
        long Index );
    void PutPointValue (
        long Index,
        double Value );
    enum ESeriesClass GetSeriesType ( );
    VARIANT_BOOL GetShowInLegend ( );
    void PutShowInLegend (
        VARIANT_BOOL ShowInLegend );
    _bstr_t GetTitle ( );
    void PutTitle (
        _bstr_t Title );
    _bstr_t GetValueFormat ( );
    void PutValueFormat (
        _bstr_t ValueFormat );
    _bstr_t GetValueMarkText (
        long ValueIndex );
    enum EVerticalAxis GetVerticalAxis ( );
    void PutVerticalAxis (
        enum EVerticalAxis VerticalAxis );
    IValueListPtr GetXValues ( );
    IValueListPtr GetYValues ( );
    long Add (
        double AValue,
        _bstr_t ALabel,
        OLE_COLOR Value );
    long AddNull (
        _bstr_t SomeLabel );
    long AddXY (
        double AX,
        double AY,
        _bstr_t ALabel,
        OLE_COLOR Value );
    long CalcXPos (
        long SomeValueIndex );
    long CalcXPosValue (
        double SomeValue );
    long CalcXSizeValue (
        double SomeValue );
    long CalcYPos (
        long SomeValueIndex );
    long CalcYPosValue (
        double SomeValue );
    long CalcYSizeValue (
        double SomeValue );
    HRESULT CheckDataSource ( );
    HRESULT Clear ( );
    long Clicked (
        long XCoord,
        long YCoord );
    HRESULT Delete (
        long Index );
    HRESULT FillSampleValues (
        long NumValues );
    long GetMousePoint ( );
    VARIANT_BOOL IsNull (
        long ValueIndex );
    HRESULT RefreshSeries ( );
    HRESULT SetFunction (
        enum EFunctionType AFunction );
    HRESULT SwapValues (
        long a,
        long b );
    double XScreenToValue (
        long ScreenCoord );
    _bstr_t XValueToText (
        double SomeValue );
    double YScreenToValue (
        long ScreenCoord );
    _bstr_t YValueToText (
        double SomeValue );
    IBezierSeriesPtr GetasBezier ( );
    IContourSeriesPtr GetasContour ( );
    IErrorSeriesPtr GetasError ( );
    IPoint3DSeriesPtr GetasPoint3D ( );
    IRadarSeriesPtr GetasRadar ( );
    long AddNullXY (
        double X,
        double Y,
        _bstr_t ALabel );
    _bstr_t LegendString (
        long LegendIndex,
        enum ELegendTextStyle LegendTextStyle );
    OLE_COLOR LegendItemColor (
        long LegendIndex );
    long CountLegendItems ( );
    long LegendToValueIndex (
        long LegendIndex );
    long VisibleCount ( );
    HRESULT AssignValues (
        long SeriesIndex );
    long GetHorizontalAxisCustom ( );
    void PutHorizontalAxisCustom (
        long Value );
    long GetVerticalAxisCustom ( );
    void PutVerticalAxisCustom (
        long Value );
    IClockSeriesPtr GetasClock ( );
    IWindRoseSeriesPtr GetasWindRose ( );
    IBar3DSeriesPtr GetasBar3D ( );
    IImageBarSeriesPtr GetasImageBar ( );
    HRESULT DisconnectAxisCustom (
        VARIANT_BOOL IsHorizontal );
    ITeePoint2DPtr GetMouseValues ( );
    HRESULT AddArray (
        long ArraySize,
        const _variant_t & YArray,
        const _variant_t & XArray );
    long GetDepth ( );
    void PutDepth (
        long Value );
    IDonutSeriesPtr GetasDonut ( );
    ITriSurfaceSeriesPtr GetasTriSurface ( );
    IBoxPlotSeriesPtr GetasBoxPlot ( );
    IHorizBoxPlotSeriesPtr GetasHorizBoxPlot ( );
    IHistogramSeriesPtr GetasHistogram ( );
    IColorGridSeriesPtr GetasColorGrid ( );
    IHorizLineSeriesPtr GetasHorizLine ( );
    IBarJoinSeriesPtr GetasBarJoin ( );
    IHighLowSeriesPtr GetasHighLow ( );
    IWaterfallSeriesPtr GetasWaterfall ( );
    ISmithSeriesPtr GetasSmith ( );
    IPyramidSeriesPtr GetasPyramid ( );
    IMapSeriesPtr GetasMap ( );
    IFunnelSeriesPtr GetasFunnel ( );
    ICalendarSeriesPtr GetasCalendar ( );
    HRESULT FreeDatasource (
        VARIANT_BOOL SurePrompt );
    long GetSeriesLink ( );
    enum EDatasourceType GetDatasourceType ( );
    void PutDatasourceType (
        enum EDatasourceType Value );
    IValueListsPtr GetValueLists ( );
    VARIANT_BOOL IsNan (
        double Value );
    HRESULT DeleteRange (
        long Start,
        long Quantity );
    HRESULT SortByLabels (
        enum EValueListOrder Order );
    HRESULT SetNull (
        long ValueIndex );
    IHorizAreaSeriesPtr GetasHorizArea ( );
    IPointFigureSeriesPtr GetasPointFigure ( );
    IGaugeSeriesPtr GetasGauge ( );
    IPenPtr GetPen ( );
    IVector3DSeriesPtr GetasVector3D ( );
    ITowerSeriesPtr GetasTower ( );
    double MaxVisibleValue (
        long valueList );
    double MinVisibleValue (
        long valueList );
    IPolarBarSeriesPtr GetasPolarBar ( );
    IBubble3DSeriesPtr GetasBubble3D ( );
    IHorizHistogramSeriesPtr GetasHorizHistogram ( );
    VARIANT_BOOL GetShowInEditor ( );
    void PutShowInEditor (
        VARIANT_BOOL Value );
    IVolumePipeSeriesPtr GetasVolumePipe ( );
    IIsoSurfaceSeriesPtr GetasIsoSurface ( );
    IDarvasSeriesPtr GetasDarvas ( );
    IHighLowLineSeriesPtr GetasHighLowLine ( );
    IPolarGridSeriesPtr GetasPolarGrid ( );
    VARIANT_BOOL GetYMandatory ( );
    HRESULT BeginUpdate ( );
    HRESULT EndUpdate ( );
    IBrushPtr GetBrush ( );
    IValueListPtr GetMandatoryValueList ( );
    IValueListPtr GetNotMandatoryValueList ( );
    IDeltaPointSeriesPtr GetasDeltaPoint ( );
    IImagePointSeriesPtr GetasImagePoint ( );
    IOrgSeriesPtr GetasOrganizational ( );
    IWorldSeriesPtr GetasWorld ( );
    ITagCloudSeriesPtr GetasTagCloud ( );
    IKagiSeriesPtr GetasKagi ( );
    IRenkoSeriesPtr GetasRenko ( );
    VARIANT_BOOL IsValidSourceOf (
        long SeriesIndex );
    VARIANT_BOOL IsValidSeriesSource (
        long SeriesIndex );
    VARIANT_BOOL UseAxis ( );
    _bstr_t GetColorSource ( );
    void PutColorSource (
        _bstr_t Value );
    INumericGaugePtr GetasNumericGauge ( );
    ILinearGaugePtr GetasLinearGauge ( );
    ICircularGaugePtr GetasCircularGauge ( );
    long GetZOrder ( );
    void PutZOrder (
        long Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Active (
        /*[out,retval]*/ VARIANT_BOOL * Active ) = 0;
      virtual HRESULT __stdcall put_Active (
        /*[in]*/ VARIANT_BOOL Active ) = 0;
      virtual HRESULT __stdcall get_asArea (
        /*[out,retval]*/ struct IAreaSeries * * asArea ) = 0;
      virtual HRESULT __stdcall get_asArrow (
        /*[out,retval]*/ struct IArrowSeries * * asArrow ) = 0;
      virtual HRESULT __stdcall get_asBar (
        /*[out,retval]*/ struct IBarSeries * * asBar ) = 0;
      virtual HRESULT __stdcall get_asBubble (
        /*[out,retval]*/ struct IBubbleSeries * * asBubble ) = 0;
      virtual HRESULT __stdcall get_asCandle (
        /*[out,retval]*/ struct ICandleSeries * * asCandle ) = 0;
      virtual HRESULT __stdcall get_asErrorBar (
        /*[out,retval]*/ struct IErrorBarSeries * * asErrorBar ) = 0;
      virtual HRESULT __stdcall get_asFastLine (
        /*[out,retval]*/ struct IFastLineSeries * * asFastLine ) = 0;
      virtual HRESULT __stdcall get_asGantt (
        /*[out,retval]*/ struct IGanttSeries * * asGantt ) = 0;
      virtual HRESULT __stdcall get_asHorizBar (
        /*[out,retval]*/ struct IHorizBarSeries * * asHorizBar ) = 0;
      virtual HRESULT __stdcall get_asLine (
        /*[out,retval]*/ struct ILineSeries * * asLine ) = 0;
      virtual HRESULT __stdcall get_asPie (
        /*[out,retval]*/ struct IPieSeries * * asPie ) = 0;
      virtual HRESULT __stdcall get_asPoint (
        /*[out,retval]*/ struct IPointSeries * * asPoint ) = 0;
      virtual HRESULT __stdcall get_asPolar (
        /*[out,retval]*/ struct IPolarSeries * * asPolar ) = 0;
      virtual HRESULT __stdcall get_asShape (
        /*[out,retval]*/ struct IShapeSeries * * asShape ) = 0;
      virtual HRESULT __stdcall get_asSurface (
        /*[out,retval]*/ struct ISurfaceSeries * * asSurface ) = 0;
      virtual HRESULT __stdcall get_asVolume (
        /*[out,retval]*/ struct IVolumeSeries * * asVolume ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * Color ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR Color ) = 0;
      virtual HRESULT __stdcall get_ColorEachPoint (
        /*[out,retval]*/ VARIANT_BOOL * ColorEachPoint ) = 0;
      virtual HRESULT __stdcall put_ColorEachPoint (
        /*[in]*/ VARIANT_BOOL ColorEachPoint ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall get_Cursor (
        /*[out,retval]*/ short * Cursor ) = 0;
      virtual HRESULT __stdcall put_Cursor (
        /*[in]*/ short Cursor ) = 0;
      virtual HRESULT __stdcall get_DataSource (
        /*[out,retval]*/ VARIANT * DataSource ) = 0;
      virtual HRESULT __stdcall put_DataSource (
        /*[in]*/ VARIANT DataSource ) = 0;
      virtual HRESULT __stdcall get_FirstValueIndex (
        /*[out,retval]*/ long * FirstValueIndex ) = 0;
      virtual HRESULT __stdcall get_FunctionType (
        /*[out,retval]*/ struct ITeeFunction * * FunctionType ) = 0;
      virtual HRESULT __stdcall get_HorizontalAxis (
        /*[out,retval]*/ enum EHorizontalAxis * HorizontalAxis ) = 0;
      virtual HRESULT __stdcall put_HorizontalAxis (
        /*[in]*/ enum EHorizontalAxis HorizontalAxis ) = 0;
      virtual HRESULT __stdcall get_LabelsSource (
        /*[out,retval]*/ BSTR * LabelsSource ) = 0;
      virtual HRESULT __stdcall put_LabelsSource (
        /*[in]*/ BSTR LabelsSource ) = 0;
      virtual HRESULT __stdcall get_LastValueIndex (
        /*[out,retval]*/ long * LastValueIndex ) = 0;
      virtual HRESULT __stdcall get_Marks (
        /*[out,retval]*/ struct IMarks * * Marks ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR Name ) = 0;
      virtual HRESULT __stdcall get_PercentFormat (
        /*[out,retval]*/ BSTR * PercentFormat ) = 0;
      virtual HRESULT __stdcall put_PercentFormat (
        /*[in]*/ BSTR PercentFormat ) = 0;
      virtual HRESULT __stdcall get_PointColor (
        /*[in]*/ long Index,
        /*[out,retval]*/ OLE_COLOR * Value ) = 0;
      virtual HRESULT __stdcall put_PointColor (
        /*[in]*/ long Index,
        /*[in]*/ OLE_COLOR Value ) = 0;
      virtual HRESULT __stdcall get_PointLabel (
        /*[in]*/ long Index,
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall put_PointLabel (
        /*[in]*/ long Index,
        /*[in]*/ BSTR Value ) = 0;
      virtual HRESULT __stdcall get_PointValue (
        /*[in]*/ long Index,
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_PointValue (
        /*[in]*/ long Index,
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall get_SeriesType (
        /*[out,retval]*/ enum ESeriesClass * SeriesType ) = 0;
      virtual HRESULT __stdcall get_ShowInLegend (
        /*[out,retval]*/ VARIANT_BOOL * ShowInLegend ) = 0;
      virtual HRESULT __stdcall put_ShowInLegend (
        /*[in]*/ VARIANT_BOOL ShowInLegend ) = 0;
      virtual HRESULT __stdcall get_Title (
        /*[out,retval]*/ BSTR * Title ) = 0;
      virtual HRESULT __stdcall put_Title (
        /*[in]*/ BSTR Title ) = 0;
      virtual HRESULT __stdcall get_ValueFormat (
        /*[out,retval]*/ BSTR * ValueFormat ) = 0;
      virtual HRESULT __stdcall put_ValueFormat (
        /*[in]*/ BSTR ValueFormat ) = 0;
      virtual HRESULT __stdcall get_ValueMarkText (
        /*[in]*/ long ValueIndex,
        /*[out,retval]*/ BSTR * Index ) = 0;
      virtual HRESULT __stdcall get_VerticalAxis (
        /*[out,retval]*/ enum EVerticalAxis * VerticalAxis ) = 0;
      virtual HRESULT __stdcall put_VerticalAxis (
        /*[in]*/ enum EVerticalAxis VerticalAxis ) = 0;
      virtual HRESULT __stdcall get_XValues (
        /*[out,retval]*/ struct IValueList * * XValues ) = 0;
      virtual HRESULT __stdcall get_YValues (
        /*[out,retval]*/ struct IValueList * * YValues ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ double AValue,
        /*[in]*/ BSTR ALabel,
        /*[in]*/ OLE_COLOR Value,
        /*[out,retval]*/ long * AColor ) = 0;
      virtual HRESULT __stdcall raw_AddNull (
        /*[in]*/ BSTR SomeLabel,
        /*[out,retval]*/ long * ALabel ) = 0;
      virtual HRESULT __stdcall raw_AddXY (
        /*[in]*/ double AX,
        /*[in]*/ double AY,
        /*[in]*/ BSTR ALabel,
        /*[in]*/ OLE_COLOR Value,
        /*[out,retval]*/ long * AColor ) = 0;
      virtual HRESULT __stdcall raw_CalcXPos (
        /*[in]*/ long SomeValueIndex,
        /*[out,retval]*/ long * ValueIndex ) = 0;
      virtual HRESULT __stdcall raw_CalcXPosValue (
        /*[in]*/ double SomeValue,
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall raw_CalcXSizeValue (
        /*[in]*/ double SomeValue,
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall raw_CalcYPos (
        /*[in]*/ long SomeValueIndex,
        /*[out,retval]*/ long * ValueIndex ) = 0;
      virtual HRESULT __stdcall raw_CalcYPosValue (
        /*[in]*/ double SomeValue,
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall raw_CalcYSizeValue (
        /*[in]*/ double SomeValue,
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall raw_CheckDataSource ( ) = 0;
      virtual HRESULT __stdcall raw_Clear ( ) = 0;
      virtual HRESULT __stdcall raw_Clicked (
        /*[in]*/ long XCoord,
        /*[in]*/ long YCoord,
        /*[out,retval]*/ long * Y ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[in]*/ long Index ) = 0;
      virtual HRESULT __stdcall raw_FillSampleValues (
        /*[in]*/ long NumValues ) = 0;
      virtual HRESULT __stdcall raw_GetMousePoint (
        /*[out,retval]*/ long * GetMousePoint ) = 0;
      virtual HRESULT __stdcall raw_IsNull (
        /*[in]*/ long ValueIndex,
        /*[out,retval]*/ VARIANT_BOOL * Index ) = 0;
      virtual HRESULT __stdcall raw_RefreshSeries ( ) = 0;
      virtual HRESULT __stdcall raw_SetFunction (
        /*[in]*/ enum EFunctionType AFunction ) = 0;
      virtual HRESULT __stdcall raw_SwapValues (
        /*[in]*/ long a,
        /*[in]*/ long b ) = 0;
      virtual HRESULT __stdcall raw_XScreenToValue (
        /*[in]*/ long ScreenCoord,
        /*[out,retval]*/ double * ScreenPos ) = 0;
      virtual HRESULT __stdcall raw_XValueToText (
        /*[in]*/ double SomeValue,
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall raw_YScreenToValue (
        /*[in]*/ long ScreenCoord,
        /*[out,retval]*/ double * ScreenPos ) = 0;
      virtual HRESULT __stdcall raw_YValueToText (
        /*[in]*/ double SomeValue,
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall get_asBezier (
        /*[out,retval]*/ struct IBezierSeries * * Value ) = 0;
      virtual HRESULT __stdcall get_asContour (
        /*[out,retval]*/ struct IContourSeries * * Value ) = 0;
      virtual HRESULT __stdcall get_asError (
        /*[out,retval]*/ struct IErrorSeries * * Value ) = 0;
      virtual HRESULT __stdcall get_asPoint3D (
        /*[out,retval]*/ struct IPoint3DSeries * * Value ) = 0;
      virtual HRESULT __stdcall get_asRadar (
        /*[out,retval]*/ struct IRadarSeries * * Value ) = 0;
      virtual HRESULT __stdcall raw_AddNullXY (
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[in]*/ BSTR ALabel,
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall raw_LegendString (
        /*[in]*/ long LegendIndex,
        /*[in]*/ enum ELegendTextStyle LegendTextStyle,
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall raw_LegendItemColor (
        /*[in]*/ long LegendIndex,
        /*[out,retval]*/ OLE_COLOR * Value ) = 0;
      virtual HRESULT __stdcall raw_CountLegendItems (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall raw_LegendToValueIndex (
        /*[in]*/ long LegendIndex,
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall raw_VisibleCount (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall raw_AssignValues (
        /*[in]*/ long SeriesIndex ) = 0;
      virtual HRESULT __stdcall get_HorizontalAxisCustom (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_HorizontalAxisCustom (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_VerticalAxisCustom (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_VerticalAxisCustom (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_asClock (
        /*[out,retval]*/ struct IClockSeries * * Value ) = 0;
      virtual HRESULT __stdcall get_asWindRose (
        /*[out,retval]*/ struct IWindRoseSeries * * Value ) = 0;
      virtual HRESULT __stdcall get_asBar3D (
        /*[out,retval]*/ struct IBar3DSeries * * Value ) = 0;
      virtual HRESULT __stdcall get_asImageBar (
        /*[out,retval]*/ struct IImageBarSeries * * Value ) = 0;
      virtual HRESULT __stdcall raw_DisconnectAxisCustom (
        /*[in]*/ VARIANT_BOOL IsHorizontal ) = 0;
      virtual HRESULT __stdcall get_MouseValues (
        /*[out,retval]*/ struct ITeePoint2D * * Value ) = 0;
      virtual HRESULT __stdcall raw_AddArray (
        /*[in]*/ long ArraySize,
        /*[in]*/ VARIANT YArray,
        /*[in]*/ VARIANT XArray ) = 0;
      virtual HRESULT __stdcall get_Depth (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Depth (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_asDonut (
        /*[out,retval]*/ struct IDonutSeries * * Value ) = 0;
      virtual HRESULT __stdcall get_asTriSurface (
        /*[out,retval]*/ struct ITriSurfaceSeries * * Value ) = 0;
      virtual HRESULT __stdcall get_asBoxPlot (
        /*[out,retval]*/ struct IBoxPlotSeries * * Value ) = 0;
      virtual HRESULT __stdcall get_asHorizBoxPlot (
        /*[out,retval]*/ struct IHorizBoxPlotSeries * * Value ) = 0;
      virtual HRESULT __stdcall get_asHistogram (
        /*[out,retval]*/ struct IHistogramSeries * * Value ) = 0;
      virtual HRESULT __stdcall get_asColorGrid (
        /*[out,retval]*/ struct IColorGridSeries * * Value ) = 0;
      virtual HRESULT __stdcall get_asHorizLine (
        /*[out,retval]*/ struct IHorizLineSeries * * Value ) = 0;
      virtual HRESULT __stdcall get_asBarJoin (
        /*[out,retval]*/ struct IBarJoinSeries * * Value ) = 0;
      virtual HRESULT __stdcall get_asHighLow (
        /*[out,retval]*/ struct IHighLowSeries * * Value ) = 0;
      virtual HRESULT __stdcall get_asWaterfall (
        /*[out,retval]*/ struct IWaterfallSeries * * Value ) = 0;
      virtual HRESULT __stdcall get_asSmith (
        /*[out,retval]*/ struct ISmithSeries * * Value ) = 0;
      virtual HRESULT __stdcall get_asPyramid (
        /*[out,retval]*/ struct IPyramidSeries * * Value ) = 0;
      virtual HRESULT __stdcall get_asMap (
        /*[out,retval]*/ struct IMapSeries * * Value ) = 0;
      virtual HRESULT __stdcall get_asFunnel (
        /*[out,retval]*/ struct IFunnelSeries * * Value ) = 0;
      virtual HRESULT __stdcall get_asCalendar (
        /*[out,retval]*/ struct ICalendarSeries * * Value ) = 0;
      virtual HRESULT __stdcall raw_FreeDatasource (
        /*[in]*/ VARIANT_BOOL SurePrompt ) = 0;
      virtual HRESULT __stdcall get_SeriesLink (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_DatasourceType (
        /*[out,retval]*/ enum EDatasourceType * Value ) = 0;
      virtual HRESULT __stdcall put_DatasourceType (
        /*[in]*/ enum EDatasourceType Value ) = 0;
      virtual HRESULT __stdcall get_ValueLists (
        /*[out,retval]*/ struct IValueLists * * Value ) = 0;
      virtual HRESULT __stdcall raw_IsNan (
        /*[in]*/ double Value,
        /*[out,retval]*/ VARIANT_BOOL * retVal ) = 0;
      virtual HRESULT __stdcall raw_DeleteRange (
        /*[in]*/ long Start,
        /*[in]*/ long Quantity ) = 0;
      virtual HRESULT __stdcall raw_SortByLabels (
        /*[in]*/ enum EValueListOrder Order ) = 0;
      virtual HRESULT __stdcall raw_SetNull (
        /*[in]*/ long ValueIndex ) = 0;
      virtual HRESULT __stdcall get_asHorizArea (
        /*[out,retval]*/ struct IHorizAreaSeries * * Value ) = 0;
      virtual HRESULT __stdcall get_asPointFigure (
        /*[out,retval]*/ struct IPointFigureSeries * * Value ) = 0;
      virtual HRESULT __stdcall get_asGauge (
        /*[out,retval]*/ struct IGaugeSeries * * Value ) = 0;
      virtual HRESULT __stdcall get_Pen (
        /*[out,retval]*/ struct IPen * * Value ) = 0;
      virtual HRESULT __stdcall get_asVector3D (
        /*[out,retval]*/ struct IVector3DSeries * * Value ) = 0;
      virtual HRESULT __stdcall get_asTower (
        /*[out,retval]*/ struct ITowerSeries * * Value ) = 0;
      virtual HRESULT __stdcall raw_MaxVisibleValue (
        /*[in]*/ long valueList,
        /*[out,retval]*/ double * retVal ) = 0;
      virtual HRESULT __stdcall raw_MinVisibleValue (
        /*[in]*/ long valueList,
        /*[out,retval]*/ double * retVal ) = 0;
      virtual HRESULT __stdcall get_asPolarBar (
        /*[out,retval]*/ struct IPolarBarSeries * * Value ) = 0;
      virtual HRESULT __stdcall get_asBubble3D (
        /*[out,retval]*/ struct IBubble3DSeries * * Value ) = 0;
      virtual HRESULT __stdcall get_asHorizHistogram (
        /*[out,retval]*/ struct IHorizHistogramSeries * * Value ) = 0;
      virtual HRESULT __stdcall get_ShowInEditor (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_ShowInEditor (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_asVolumePipe (
        /*[out,retval]*/ struct IVolumePipeSeries * * Value ) = 0;
      virtual HRESULT __stdcall get_asIsoSurface (
        /*[out,retval]*/ struct IIsoSurfaceSeries * * Value ) = 0;
      virtual HRESULT __stdcall get_asDarvas (
        /*[out,retval]*/ struct IDarvasSeries * * Value ) = 0;
      virtual HRESULT __stdcall get_asHighLowLine (
        /*[out,retval]*/ struct IHighLowLineSeries * * Value ) = 0;
      virtual HRESULT __stdcall get_asPolarGrid (
        /*[out,retval]*/ struct IPolarGridSeries * * Value ) = 0;
      virtual HRESULT __stdcall get_YMandatory (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall raw_BeginUpdate ( ) = 0;
      virtual HRESULT __stdcall raw_EndUpdate ( ) = 0;
      virtual HRESULT __stdcall get_Brush (
        /*[out,retval]*/ struct IBrush * * Value ) = 0;
      virtual HRESULT __stdcall get_MandatoryValueList (
        /*[out,retval]*/ struct IValueList * * Value ) = 0;
      virtual HRESULT __stdcall get_NotMandatoryValueList (
        /*[out,retval]*/ struct IValueList * * Value ) = 0;
      virtual HRESULT __stdcall get_asDeltaPoint (
        /*[out,retval]*/ struct IDeltaPointSeries * * Value ) = 0;
      virtual HRESULT __stdcall get_asImagePoint (
        /*[out,retval]*/ struct IImagePointSeries * * Value ) = 0;
      virtual HRESULT __stdcall get_asOrganizational (
        /*[out,retval]*/ struct IOrgSeries * * Value ) = 0;
      virtual HRESULT __stdcall get_asWorld (
        /*[out,retval]*/ struct IWorldSeries * * Value ) = 0;
      virtual HRESULT __stdcall get_asTagCloud (
        /*[out,retval]*/ struct ITagCloudSeries * * Value ) = 0;
      virtual HRESULT __stdcall get_asKagi (
        /*[out,retval]*/ struct IKagiSeries * * Value ) = 0;
      virtual HRESULT __stdcall get_asRenko (
        /*[out,retval]*/ struct IRenkoSeries * * Value ) = 0;
      virtual HRESULT __stdcall raw_IsValidSourceOf (
        /*[in]*/ long SeriesIndex,
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall raw_IsValidSeriesSource (
        /*[in]*/ long SeriesIndex,
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall raw_UseAxis (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall get_ColorSource (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall put_ColorSource (
        /*[in]*/ BSTR Value ) = 0;
      virtual HRESULT __stdcall get_asNumericGauge (
        /*[out,retval]*/ struct INumericGauge * * Value ) = 0;
      virtual HRESULT __stdcall get_asLinearGauge (
        /*[out,retval]*/ struct ILinearGauge * * Value ) = 0;
      virtual HRESULT __stdcall get_asCircularGauge (
        /*[out,retval]*/ struct ICircularGauge * * Value ) = 0;
      virtual HRESULT __stdcall get_ZOrder (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_ZOrder (
        /*[in]*/ long Value ) = 0;
};

struct __declspec(uuid("21cc63ae-bf53-41f9-8871-4029ec3b388f"))
IMACDFunction : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPeriod2,put=PutPeriod2))
    double Period2;
    __declspec(property(get=GetMACDExp))
    ISeriesPtr MACDExp;
    __declspec(property(get=GetHistogram))
    ISeriesPtr Histogram;
    __declspec(property(get=GetPeriod3,put=PutPeriod3))
    long Period3;

    //
    // Wrapper methods for error-handling
    //

    double GetPeriod2 ( );
    void PutPeriod2 (
        double Value );
    ISeriesPtr GetMACDExp ( );
    ISeriesPtr GetHistogram ( );
    long GetPeriod3 ( );
    void PutPeriod3 (
        long Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Period2 (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_Period2 (
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall get_MACDExp (
        /*[out,retval]*/ struct ISeries * * Value ) = 0;
      virtual HRESULT __stdcall get_Histogram (
        /*[out,retval]*/ struct ISeries * * Value ) = 0;
      virtual HRESULT __stdcall get_Period3 (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Period3 (
        /*[in]*/ long Value ) = 0;
};

struct __declspec(uuid("54f59aca-6a98-4839-a5d8-fcbe40b458bc"))
IBollingerFunction : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetDeviation,put=PutDeviation))
    double Deviation;
    __declspec(property(get=GetExponential,put=PutExponential))
    VARIANT_BOOL Exponential;
    __declspec(property(get=GetLowBand))
    ISeriesPtr LowBand;

    //
    // Wrapper methods for error-handling
    //

    double GetDeviation ( );
    void PutDeviation (
        double Value );
    VARIANT_BOOL GetExponential ( );
    void PutExponential (
        VARIANT_BOOL Value );
    ISeriesPtr GetLowBand ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Deviation (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_Deviation (
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall get_Exponential (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Exponential (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_LowBand (
        /*[out,retval]*/ struct ISeries * * Value ) = 0;
};

struct __declspec(uuid("f2e58750-515c-496f-b96a-693c36d0c3de"))
IADXFunction : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetDMDown))
    ISeriesPtr DMDown;
    __declspec(property(get=GetDMUp))
    ISeriesPtr DMUp;

    //
    // Wrapper methods for error-handling
    //

    ISeriesPtr GetDMDown ( );
    ISeriesPtr GetDMUp ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_DMDown (
        /*[out,retval]*/ struct ISeries * * Value ) = 0;
      virtual HRESULT __stdcall get_DMUp (
        /*[out,retval]*/ struct ISeries * * Value ) = 0;
};

struct __declspec(uuid("b6904850-ecb0-4cc8-8438-f707f1847c66"))
ITeeFunction : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPeriod,put=PutPeriod))
    double Period;
    __declspec(property(get=GetasCurveFit))
    ICurveFittingFunctionPtr asCurveFit;
    __declspec(property(get=GetasExpAvg))
    IExpAvgFunctionPtr asExpAvg;
    __declspec(property(get=GetasMovAvg))
    IMovingAvgFunctionPtr asMovAvg;
    __declspec(property(get=GetPeriodStyle,put=PutPeriodStyle))
    enum EFunctionPeriodStyle PeriodStyle;
    __declspec(property(get=GetPeriodAlign,put=PutPeriodAlign))
    enum EFunctionPeriodAlign PeriodAlign;
    __declspec(property(get=GetasStdDeviation))
    IStdDeviationFunctionPtr asStdDeviation;
    __declspec(property(get=GetasRSI))
    IRSIFunctionPtr asRSI;
    __declspec(property(get=GetasBollinger))
    IBollingerFunctionPtr asBollinger;
    __declspec(property(get=GetasADX))
    IADXFunctionPtr asADX;
    __declspec(property(get=GetasMACD))
    IMACDFunctionPtr asMACD;
    __declspec(property(get=GetasRMS))
    IRMSFunctionPtr asRMS;
    __declspec(property(get=GetasAverage))
    IAverageFunctionPtr asAverage;
    __declspec(property(get=GetasSmoothing))
    ISmoothingFunctionPtr asSmoothing;
    __declspec(property(get=GetasCustom))
    ICustomFunctionPtr asCustom;
    __declspec(property(get=GetasCompress))
    ICompressFunctionPtr asCompress;
    __declspec(property(get=GetasCLV))
    ICLVFunctionPtr asCLV;
    __declspec(property(get=GetasOBV))
    IOBVFunctionPtr asOBV;
    __declspec(property(get=GetasCCI))
    ICCIFunctionPtr asCCI;
    __declspec(property(get=GetasPVO))
    IPVOFunctionPtr asPVO;
    __declspec(property(get=GetasPerformance))
    IPerformanceFunctionPtr asPerformance;
    __declspec(property(get=GetasMode))
    IModeFunctionPtr asMode;
    __declspec(property(get=GetasMedian))
    IMedianFunctionPtr asMedian;
    __declspec(property(get=GetasDownSampling))
    IDownSamplingFunctionPtr asDownSampling;
    __declspec(property(get=GetasTrend))
    ITrendFunctionPtr asTrend;
    __declspec(property(get=GetasSubset))
    ISubsetTeeFunctionPtr asSubset;
    __declspec(property(get=GetasExpMovAvg))
    IExpMovAvgFunctionPtr asExpMovAvg;
    __declspec(property(get=GetasSAR))
    ISARFunctionPtr asSAR;
    __declspec(property(get=GetasHistogram))
    IHistogramFunctionPtr asHistogram;

    //
    // Wrapper methods for error-handling
    //

    double GetPeriod ( );
    void PutPeriod (
        double Period );
    ICurveFittingFunctionPtr GetasCurveFit ( );
    IExpAvgFunctionPtr GetasExpAvg ( );
    IMovingAvgFunctionPtr GetasMovAvg ( );
    enum EFunctionPeriodStyle GetPeriodStyle ( );
    void PutPeriodStyle (
        enum EFunctionPeriodStyle Value );
    enum EFunctionPeriodAlign GetPeriodAlign ( );
    void PutPeriodAlign (
        enum EFunctionPeriodAlign Value );
    IStdDeviationFunctionPtr GetasStdDeviation ( );
    HRESULT BeginUpdate ( );
    HRESULT EndUpdate ( );
    IRSIFunctionPtr GetasRSI ( );
    IBollingerFunctionPtr GetasBollinger ( );
    IADXFunctionPtr GetasADX ( );
    IMACDFunctionPtr GetasMACD ( );
    IRMSFunctionPtr GetasRMS ( );
    IAverageFunctionPtr GetasAverage ( );
    ISmoothingFunctionPtr GetasSmoothing ( );
    ICustomFunctionPtr GetasCustom ( );
    ICompressFunctionPtr GetasCompress ( );
    ICLVFunctionPtr GetasCLV ( );
    IOBVFunctionPtr GetasOBV ( );
    ICCIFunctionPtr GetasCCI ( );
    IPVOFunctionPtr GetasPVO ( );
    IPerformanceFunctionPtr GetasPerformance ( );
    IModeFunctionPtr GetasMode ( );
    IMedianFunctionPtr GetasMedian ( );
    HRESULT Recalculate ( );
    IDownSamplingFunctionPtr GetasDownSampling ( );
    ITrendFunctionPtr GetasTrend ( );
    ISubsetTeeFunctionPtr GetasSubset ( );
    IExpMovAvgFunctionPtr GetasExpMovAvg ( );
    ISARFunctionPtr GetasSAR ( );
    IHistogramFunctionPtr GetasHistogram ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Period (
        /*[out,retval]*/ double * Period ) = 0;
      virtual HRESULT __stdcall put_Period (
        /*[in]*/ double Period ) = 0;
      virtual HRESULT __stdcall get_asCurveFit (
        /*[out,retval]*/ struct ICurveFittingFunction * * asCurveFit ) = 0;
      virtual HRESULT __stdcall get_asExpAvg (
        /*[out,retval]*/ struct IExpAvgFunction * * asExpAvg ) = 0;
      virtual HRESULT __stdcall get_asMovAvg (
        /*[out,retval]*/ struct IMovingAvgFunction * * asMovAvg ) = 0;
      virtual HRESULT __stdcall get_PeriodStyle (
        /*[out,retval]*/ enum EFunctionPeriodStyle * Value ) = 0;
      virtual HRESULT __stdcall put_PeriodStyle (
        /*[in]*/ enum EFunctionPeriodStyle Value ) = 0;
      virtual HRESULT __stdcall get_PeriodAlign (
        /*[out,retval]*/ enum EFunctionPeriodAlign * Value ) = 0;
      virtual HRESULT __stdcall put_PeriodAlign (
        /*[in]*/ enum EFunctionPeriodAlign Value ) = 0;
      virtual HRESULT __stdcall get_asStdDeviation (
        /*[out,retval]*/ struct IStdDeviationFunction * * Value ) = 0;
      virtual HRESULT __stdcall raw_BeginUpdate ( ) = 0;
      virtual HRESULT __stdcall raw_EndUpdate ( ) = 0;
      virtual HRESULT __stdcall get_asRSI (
        /*[out,retval]*/ struct IRSIFunction * * Value ) = 0;
      virtual HRESULT __stdcall get_asBollinger (
        /*[out,retval]*/ struct IBollingerFunction * * Value ) = 0;
      virtual HRESULT __stdcall get_asADX (
        /*[out,retval]*/ struct IADXFunction * * Value ) = 0;
      virtual HRESULT __stdcall get_asMACD (
        /*[out,retval]*/ struct IMACDFunction * * Value ) = 0;
      virtual HRESULT __stdcall get_asRMS (
        /*[out,retval]*/ struct IRMSFunction * * Value ) = 0;
      virtual HRESULT __stdcall get_asAverage (
        /*[out,retval]*/ struct IAverageFunction * * Value ) = 0;
      virtual HRESULT __stdcall get_asSmoothing (
        /*[out,retval]*/ struct ISmoothingFunction * * Value ) = 0;
      virtual HRESULT __stdcall get_asCustom (
        /*[out,retval]*/ struct ICustomFunction * * Value ) = 0;
      virtual HRESULT __stdcall get_asCompress (
        /*[out,retval]*/ struct ICompressFunction * * Value ) = 0;
      virtual HRESULT __stdcall get_asCLV (
        /*[out,retval]*/ struct ICLVFunction * * Value ) = 0;
      virtual HRESULT __stdcall get_asOBV (
        /*[out,retval]*/ struct IOBVFunction * * Value ) = 0;
      virtual HRESULT __stdcall get_asCCI (
        /*[out,retval]*/ struct ICCIFunction * * Value ) = 0;
      virtual HRESULT __stdcall get_asPVO (
        /*[out,retval]*/ struct IPVOFunction * * Value ) = 0;
      virtual HRESULT __stdcall get_asPerformance (
        /*[out,retval]*/ struct IPerformanceFunction * * Value ) = 0;
      virtual HRESULT __stdcall get_asMode (
        /*[out,retval]*/ struct IModeFunction * * Value ) = 0;
      virtual HRESULT __stdcall get_asMedian (
        /*[out,retval]*/ struct IMedianFunction * * Value ) = 0;
      virtual HRESULT __stdcall raw_Recalculate ( ) = 0;
      virtual HRESULT __stdcall get_asDownSampling (
        /*[out,retval]*/ struct IDownSamplingFunction * * Value ) = 0;
      virtual HRESULT __stdcall get_asTrend (
        /*[out,retval]*/ struct ITrendFunction * * Value ) = 0;
      virtual HRESULT __stdcall get_asSubset (
        /*[out,retval]*/ struct ISubsetTeeFunction * * Value ) = 0;
      virtual HRESULT __stdcall get_asExpMovAvg (
        /*[out,retval]*/ struct IExpMovAvgFunction * * Value ) = 0;
      virtual HRESULT __stdcall get_asSAR (
        /*[out,retval]*/ struct ISARFunction * * Value ) = 0;
      virtual HRESULT __stdcall get_asHistogram (
        /*[out,retval]*/ struct IHistogramFunction * * Value ) = 0;
};

struct __declspec(uuid("37f98a5a-4bdc-40a6-a3cb-84d1b33d2c59"))
ICustomSeriesList : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItems))
    ISeriesPtr Items[];

    //
    // Wrapper methods for error-handling
    //

    HRESULT ClearValues ( );
    long First ( );
    long Last ( );
    ISeriesPtr GetItems (
        long Index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_ClearValues ( ) = 0;
      virtual HRESULT __stdcall raw_First (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall raw_Last (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_Items (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct ISeries * * Value ) = 0;
};

struct __declspec(uuid("ecec2256-9ed2-45c2-9233-ce7f93fce378"))
ISeriesGroup : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetActive,put=PutActive))
    enum ESeriesGroupActive Active;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetSeriesCount))
    _variant_t SeriesCount;
    __declspec(property(get=GetGroupLink))
    long GroupLink;
    __declspec(property(get=GetSeries))
    ICustomSeriesListPtr Series;

    //
    // Wrapper methods for error-handling
    //

    HRESULT Add (
        long SeriesIndex );
    HRESULT Hide ( );
    HRESULT Show ( );
    enum ESeriesGroupActive GetActive ( );
    void PutActive (
        enum ESeriesGroupActive Value );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t Value );
    _variant_t GetSeriesCount ( );
    long GetGroupLink ( );
    HRESULT Delete (
        long Index );
    HRESULT Insert (
        long IndexInGroup,
        long SeriesIndex );
    ICustomSeriesListPtr GetSeries ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ long SeriesIndex ) = 0;
      virtual HRESULT __stdcall raw_Hide ( ) = 0;
      virtual HRESULT __stdcall raw_Show ( ) = 0;
      virtual HRESULT __stdcall get_Active (
        /*[out,retval]*/ enum ESeriesGroupActive * Value ) = 0;
      virtual HRESULT __stdcall put_Active (
        /*[in]*/ enum ESeriesGroupActive Value ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR Value ) = 0;
      virtual HRESULT __stdcall get_SeriesCount (
        /*[out,retval]*/ VARIANT * Value ) = 0;
      virtual HRESULT __stdcall get_GroupLink (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[in]*/ long Index ) = 0;
      virtual HRESULT __stdcall raw_Insert (
        /*[in]*/ long IndexInGroup,
        /*[in]*/ long SeriesIndex ) = 0;
      virtual HRESULT __stdcall get_Series (
        /*[out,retval]*/ struct ICustomSeriesList * * Value ) = 0;
};

struct __declspec(uuid("cf5727bf-4b10-40b3-b222-54a4867e7857"))
ITeeListBox : ITeeLinked
{
    //
    // Property data
    //

    __declspec(property(get=GetSelectedSeries,put=PutSelectedSeries))
    long SelectedSeries;
    __declspec(property(get=GetShowActive,put=PutShowActive))
    VARIANT_BOOL ShowActive;
    __declspec(property(get=GetShowColor,put=PutShowColor))
    VARIANT_BOOL ShowColor;
    __declspec(property(get=GetShowTitle,put=PutShowTitle))
    VARIANT_BOOL ShowTitle;
    __declspec(property(get=GetShowIcon,put=PutShowIcon))
    VARIANT_BOOL ShowIcon;
    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;
    __declspec(property(get=GetSeriesGroup,put=PutSeriesGroup))
    ISeriesGroupPtr SeriesGroup;
    __declspec(property(get=GetCheckStyle,put=PutCheckStyle))
    enum ECheckBoxesStyle CheckStyle;
    __declspec(property(get=GetItemHeight,put=PutItemHeight))
    long ItemHeight;
    __declspec(property(get=GetSorted,put=PutSorted))
    VARIANT_BOOL Sorted;
    __declspec(property(get=GetAskDelete,put=PutAskDelete))
    VARIANT_BOOL AskDelete;
    __declspec(property(get=GetAllowDeleteSeries,put=PutAllowDeleteSeries))
    VARIANT_BOOL AllowDeleteSeries;
    __declspec(property(get=GetAllowAddSeries,put=PutAllowAddSeries))
    VARIANT_BOOL AllowAddSeries;
    __declspec(property(get=GetSections))
    ITeeListBoxSectionPtr Sections[];
    __declspec(property(get=GetFontSeriesColor,put=PutFontSeriesColor))
    VARIANT_BOOL FontSeriesColor;
    __declspec(property(get=GetItems))
    IStringsPtr Items;

    //
    // Wrapper methods for error-handling
    //

    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR Value );
    HRESULT UpdateSeries ( );
    long GetSelectedSeries ( );
    void PutSelectedSeries (
        long Value );
    VARIANT_BOOL GetShowActive ( );
    void PutShowActive (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetShowColor ( );
    void PutShowColor (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetShowTitle ( );
    void PutShowTitle (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetShowIcon ( );
    void PutShowIcon (
        VARIANT_BOOL Value );
    ISeriesGroupPtr GetSeriesGroup ( );
    void PutSeriesGroup (
        struct ISeriesGroup * Value );
    enum ECheckBoxesStyle GetCheckStyle ( );
    void PutCheckStyle (
        enum ECheckBoxesStyle Value );
    HRESULT ShowEditor ( );
    HRESULT HideEditor ( );
    long GetItemHeight ( );
    void PutItemHeight (
        long Value );
    HRESULT ClearItems ( );
    HRESULT Repaint ( );
    VARIANT_BOOL GetSorted ( );
    void PutSorted (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetAskDelete ( );
    void PutAskDelete (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetAllowDeleteSeries ( );
    void PutAllowDeleteSeries (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetAllowAddSeries ( );
    void PutAllowAddSeries (
        VARIANT_BOOL Value );
    ITeeListBoxSectionPtr GetSections (
        long Index );
    VARIANT_BOOL GetFontSeriesColor ( );
    void PutFontSeriesColor (
        VARIANT_BOOL Value );
    IStringsPtr GetItems ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * Value ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR Value ) = 0;
      virtual HRESULT __stdcall raw_UpdateSeries ( ) = 0;
      virtual HRESULT __stdcall get_SelectedSeries (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_SelectedSeries (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_ShowActive (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_ShowActive (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_ShowColor (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_ShowColor (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_ShowTitle (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_ShowTitle (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_ShowIcon (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_ShowIcon (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_SeriesGroup (
        /*[out,retval]*/ struct ISeriesGroup * * Value ) = 0;
      virtual HRESULT __stdcall put_SeriesGroup (
        /*[in]*/ struct ISeriesGroup * Value ) = 0;
      virtual HRESULT __stdcall get_CheckStyle (
        /*[out,retval]*/ enum ECheckBoxesStyle * Value ) = 0;
      virtual HRESULT __stdcall put_CheckStyle (
        /*[in]*/ enum ECheckBoxesStyle Value ) = 0;
      virtual HRESULT __stdcall raw_ShowEditor ( ) = 0;
      virtual HRESULT __stdcall raw_HideEditor ( ) = 0;
      virtual HRESULT __stdcall get_ItemHeight (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_ItemHeight (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_ClearItems ( ) = 0;
      virtual HRESULT __stdcall raw_Repaint ( ) = 0;
      virtual HRESULT __stdcall get_Sorted (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Sorted (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_AskDelete (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_AskDelete (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_AllowDeleteSeries (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_AllowDeleteSeries (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_AllowAddSeries (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_AllowAddSeries (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_Sections (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct ITeeListBoxSection * * Value ) = 0;
      virtual HRESULT __stdcall get_FontSeriesColor (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_FontSeriesColor (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_Items (
        /*[out,retval]*/ struct IStrings * * Value ) = 0;
};

struct __declspec(uuid("1a86275d-45f4-4b29-9397-84f0e30a70bb"))
ISeriesGroups : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItems))
    ISeriesGroupPtr Items[];
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    ISeriesGroupPtr GetItems (
        long Index );
    long GetCount ( );
    HRESULT Delete (
        long Index );
    long Contains (
        long SeriesIndex );
    long FindByName (
        _bstr_t Name,
        VARIANT_BOOL CaseSensitive );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Items (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct ISeriesGroup * * Value ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[in]*/ long Index ) = 0;
      virtual HRESULT __stdcall raw_Contains (
        /*[in]*/ long SeriesIndex,
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall raw_FindByName (
        /*[in]*/ BSTR Name,
        /*[in]*/ VARIANT_BOOL CaseSensitive,
        /*[out,retval]*/ long * SeriesGroupIndex ) = 0;
};

struct __declspec(uuid("2bd79012-fa21-4577-855a-2eb5bc52d926"))
ISeriesList : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAllActive,put=PutAllActive))
    VARIANT_BOOL AllActive;
    __declspec(property(get=GetGroups))
    ISeriesGroupsPtr Groups;
    __declspec(property(get=GetItems))
    ISeriesPtr Items[];

    //
    // Wrapper methods for error-handling
    //

    HRESULT AddGroup (
        _bstr_t Name );
    VARIANT_BOOL GetAllActive ( );
    void PutAllActive (
        VARIANT_BOOL Value );
    ISeriesGroupsPtr GetGroups ( );
    HRESULT ClearValues ( );
    long First ( );
    long Last ( );
    ISeriesPtr GetItems (
        long Index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_AddGroup (
        /*[in]*/ BSTR Name ) = 0;
      virtual HRESULT __stdcall get_AllActive (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_AllActive (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_Groups (
        /*[out,retval]*/ struct ISeriesGroups * * Value ) = 0;
      virtual HRESULT __stdcall raw_ClearValues ( ) = 0;
      virtual HRESULT __stdcall raw_First (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall raw_Last (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_Items (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct ISeries * * Value ) = 0;
};

//
// Function implementation mapping
//

#pragma start_map_region("d:\mine\课程\实时软件控制\homework\caffe\test\test\debug\teechart8.tli")
__declspec(implementation_key(1)) HRESULT ITChartEvents::OnAfterDraw ( );
__declspec(implementation_key(2)) HRESULT ITChartEvents::OnBeforeDrawSeries ( );
__declspec(implementation_key(3)) HRESULT ITChartEvents::OnBeforeDrawAxes ( );
__declspec(implementation_key(4)) HRESULT ITChartEvents::OnClick ( );
__declspec(implementation_key(5)) HRESULT ITChartEvents::OnClickAxis ( long Axis, enum EMouseButton Button, enum EShiftState Shift, long X, long Y );
__declspec(implementation_key(6)) HRESULT ITChartEvents::OnClickBackground ( enum EMouseButton Button, enum EShiftState Shift, long X, long Y );
__declspec(implementation_key(7)) HRESULT ITChartEvents::OnClickLegend ( enum EMouseButton Button, enum EShiftState Shift, long X, long Y );
__declspec(implementation_key(8)) HRESULT ITChartEvents::OnClickSeries ( long SeriesIndex, long ValueIndex, enum EMouseButton Button, enum EShiftState Shift, long X, long Y );
__declspec(implementation_key(9)) HRESULT ITChartEvents::OnDblClick ( );
__declspec(implementation_key(10)) HRESULT ITChartEvents::OnDragDrop ( long X, long Y );
__declspec(implementation_key(11)) HRESULT ITChartEvents::OnDragOver ( long X, long Y, enum EDragState State, VARIANT_BOOL * Accept );
__declspec(implementation_key(12)) HRESULT ITChartEvents::OnEndDrag ( long X, long Y );
__declspec(implementation_key(13)) HRESULT ITChartEvents::OnEnter ( );
__declspec(implementation_key(14)) HRESULT ITChartEvents::OnExit ( );
__declspec(implementation_key(15)) HRESULT ITChartEvents::OnGetAxisLabel ( long Axis, long SeriesIndex, long ValueIndex, BSTR * LabelText );
__declspec(implementation_key(16)) HRESULT ITChartEvents::OnGetLegendRect ( long * Left, long * Top, long * Right, long * Bottom );
__declspec(implementation_key(17)) HRESULT ITChartEvents::OnGetNextAxisLabel ( long Axis, long LabelIndex, double * LabelValue, VARIANT_BOOL * MoreLabels );
__declspec(implementation_key(18)) HRESULT ITChartEvents::OnMouseDown ( enum EMouseButton Button, enum EShiftState Shift, long X, long Y );
__declspec(implementation_key(19)) HRESULT ITChartEvents::OnMouseMove ( enum EShiftState Shift, long X, long Y );
__declspec(implementation_key(20)) HRESULT ITChartEvents::OnMouseUp ( enum EMouseButton Button, enum EShiftState Shift, long X, long Y );
__declspec(implementation_key(21)) HRESULT ITChartEvents::OnPageChange ( );
__declspec(implementation_key(22)) HRESULT ITChartEvents::OnResize ( );
__declspec(implementation_key(23)) HRESULT ITChartEvents::OnScroll ( );
__declspec(implementation_key(24)) HRESULT ITChartEvents::OnStartDrag ( );
__declspec(implementation_key(25)) HRESULT ITChartEvents::OnUndoZoom ( );
__declspec(implementation_key(26)) HRESULT ITChartEvents::OnZoom ( );
__declspec(implementation_key(27)) HRESULT ITChartEvents::OnAllowScroll ( enum EAxisType Axis, double * AMin, double * AMax, VARIANT_BOOL * AllowScroll );
__declspec(implementation_key(28)) HRESULT ITChartEvents::OnGetLegendPos ( long ItemIndex, long * X, long * Y, long * XColor );
__declspec(implementation_key(29)) HRESULT ITChartEvents::OnGetLegendText ( long LegendStyle, long ValueIndex, BSTR * LegendText );
__declspec(implementation_key(30)) HRESULT ITChartEvents::OnDatabaseRecord ( long SeriesIndex, long Index, VARIANT_BOOL * StopRetrieve );
__declspec(implementation_key(31)) HRESULT ITChartEvents::OnTimer ( );
__declspec(implementation_key(32)) HRESULT ITChartEvents::OnGetSeriesMark ( long SeriesIndex, long ValueIndex, BSTR * MarkText );
__declspec(implementation_key(33)) HRESULT ITChartEvents::OnGetSeriesPointerStyle ( long SeriesIndex, long ValueIndex, enum EPointerStyle * AStyle );
__declspec(implementation_key(34)) HRESULT ITChartEvents::OnGetSeriesContourLevel ( long SeriesIndex, long LevelIndex, double * LevelValue, OLE_COLOR * LevelColor );
__declspec(implementation_key(35)) HRESULT ITChartEvents::OnBeforeDrawChart ( );
__declspec(implementation_key(36)) HRESULT ITChartEvents::OnSeriesBeforeDrawValues ( long SeriesIndex );
__declspec(implementation_key(37)) HRESULT ITChartEvents::OnSeriesAfterDrawValues ( long SeriesIndex );
__declspec(implementation_key(38)) HRESULT ITChartEvents::OnMarkTipToolGetText ( long Tool, BSTR * Text );
__declspec(implementation_key(39)) HRESULT ITChartEvents::OnCursorToolChange ( long Tool, long X, long Y, double XVal, double YVal, long Series, long ValueIndex );
__declspec(implementation_key(40)) HRESULT ITChartEvents::OnDrawLineToolLineDrag ( );
__declspec(implementation_key(41)) HRESULT ITChartEvents::OnDrawLineToolNewLine ( );
__declspec(implementation_key(42)) HRESULT ITChartEvents::OnDrawLineToolDraggedLine ( );
__declspec(implementation_key(43)) HRESULT ITChartEvents::OnDrawLineToolSelectLine ( );
__declspec(implementation_key(44)) HRESULT ITChartEvents::OnCalendarSeriesChange ( long Series, double Value );
__declspec(implementation_key(45)) HRESULT ITChartEvents::OnSeriesBeforeAdd ( long SeriesIndex, VARIANT_BOOL * MoreValues );
__declspec(implementation_key(46)) HRESULT ITChartEvents::OnMouseEnterSeries ( long SeriesIndex );
__declspec(implementation_key(47)) HRESULT ITChartEvents::OnMouseLeaveSeries ( long SeriesIndex );
__declspec(implementation_key(48)) HRESULT ITChartEvents::OnSeriesContourBeforeDrawLevel ( long SeriesIndex, long LevelIndex );
__declspec(implementation_key(49)) HRESULT ITChartEvents::OnSeriesAnimationToolStep ( long Tool, long Step );
__declspec(implementation_key(50)) HRESULT ITChartEvents::OnGanttToolDragBar ( long Tool, long GanttBar );
__declspec(implementation_key(51)) HRESULT ITChartEvents::OnGanttToolResizeBar ( long Tool, long GanttBar, enum EGanttToolPartBar BarPart );
__declspec(implementation_key(52)) HRESULT ITChartEvents::OnFunctionCalculate ( long SeriesIndex, double X, double * Y );
__declspec(implementation_key(53)) HRESULT ITChartEvents::OnCompressFunctionGetDate ( long FunctionSeriesIndex, long SourceSeriesIndex, long ValueIndex, DATE * D );
__declspec(implementation_key(54)) HRESULT ITChartEvents::OnGaugeChange ( long SeriesIndex );
__declspec(implementation_key(55)) HRESULT ITChartEvents::OnNearestToolChange ( );
__declspec(implementation_key(56)) HRESULT ITChartEvents::OnBeforePrint ( );
__declspec(implementation_key(57)) HRESULT ITChartEvents::OnKeyDown ( long KeyCode, enum EShiftState Shift );
__declspec(implementation_key(58)) HRESULT ITChartEvents::OnKeyUp ( long KeyCode, enum EShiftState Shift );
__declspec(implementation_key(59)) HRESULT ITChartEvents::OnLegendScrollBarToolScrolled ( );
__declspec(implementation_key(60)) HRESULT ITChartEvents::OnSurfaceNearestToolSelectCell ( );
__declspec(implementation_key(61)) HRESULT ITChartEvents::OnDrawAxisLabel ( long Axis, long X, long Y, BSTR * LabelText );
__declspec(implementation_key(62)) HRESULT ITChartEvents::OnLegendDrawSymbol ( long Series, long ValueIndex, long Left, long Top, long Right, long Bottom );
__declspec(implementation_key(63)) HRESULT ITChartEvents::OnColorBandToolClick ( enum EMouseButton Button, enum EShiftState Shift, long X, long Y );
__declspec(implementation_key(64)) HRESULT ITChartEvents::OnRotateToolRotate ( );
__declspec(implementation_key(65)) HRESULT ITChartEvents::OnColorLineToolBeginDragLine ( );
__declspec(implementation_key(66)) HRESULT ITChartEvents::OnColorLineToolDragLine ( );
__declspec(implementation_key(67)) HRESULT ITChartEvents::OnColorLineToolEndDragLine ( );
__declspec(implementation_key(68)) HRESULT ITChartEvents::OnDragPointToolDragPoint ( long Index );
__declspec(implementation_key(69)) HRESULT ITChartEvents::OnDrawLineToolSelecting ( long Index, VARIANT_BOOL AllowSelect );
__declspec(implementation_key(70)) HRESULT ITChartEvents::OnSelectorToolDragged ( );
__declspec(implementation_key(71)) HRESULT ITChartEvents::OnSelectorToolDragging ( );
__declspec(implementation_key(72)) HRESULT ITChartEvents::OnSelectorToolResized ( );
__declspec(implementation_key(73)) HRESULT ITChartEvents::OnSelectorToolResizing ( );
__declspec(implementation_key(74)) HRESULT ITChartEvents::OnSelectorToolSelected ( );
__declspec(implementation_key(75)) HRESULT ITChartEvents::OnAnnotationToolClick ( enum EMouseButton Button, enum EShiftState Shift, long X, long Y );
__declspec(implementation_key(76)) HRESULT ITChartEvents::OnRectangleToolDragging ( );
__declspec(implementation_key(77)) HRESULT ITChartEvents::OnRectangleToolResizing ( );
__declspec(implementation_key(78)) HRESULT ITChartEvents::OnRectangleToolClick ( enum EMouseButton Button, enum EShiftState Shift, long X, long Y );
__declspec(implementation_key(79)) HRESULT ITChartEvents::OnSeriesAfterAdd ( long SeriesIndex, long ValueIndex );
__declspec(implementation_key(80)) HRESULT ITChartEvents::OnGetSeriesBarStyle ( long SeriesIndex, long ValueIndex, enum EBarStyle * BarStyle );
__declspec(implementation_key(81)) HRESULT ITChartEvents::OnVideoToolNewFrame ( );
__declspec(implementation_key(82)) HRESULT ITChartEvents::OnVideoToolStart ( );
__declspec(implementation_key(83)) HRESULT ITChartEvents::OnVideoToolStop ( );
__declspec(implementation_key(84)) HRESULT ITChartEvents::OnVideoPlayerToolFrame ( );
__declspec(implementation_key(85)) HRESULT ITChartEvents::OnOpenGLInit ( );
__declspec(implementation_key(86)) HRESULT ITChartEvents::OnOpenGLRepaint ( );
__declspec(implementation_key(87)) HRESULT ITChartEvents::OnCursorToolSnapChange ( long Tool, long X, long Y, double XVal, double YVal, long Series, long ValueIndex );
__declspec(implementation_key(88)) HRESULT ITChartEvents::OnDragMarksToolDraggedMark ( long Index, enum EMouseButton Button, enum EShiftState Shift, long X, long Y );
__declspec(implementation_key(89)) HRESULT ITChartEvents::OnDragMarksToolDraggingMark ( long Index, enum EMouseButton Button, enum EShiftState Shift, long X, long Y );
__declspec(implementation_key(90)) HRESULT ITChartEvents::OnRectangleToolDragged ( );
__declspec(implementation_key(91)) HRESULT ITChartEvents::OnRectangleToolResized ( );
__declspec(implementation_key(92)) HRESULT ITChartEvents::OnMarkTipToolCancelHint ( );
__declspec(implementation_key(93)) HRESULT ITChartEvents::OnSeriesClickPointer ( long SeriesIndex, long ValueIndex, long X, long Y );
__declspec(implementation_key(94)) HRESULT ITChartEvents::OnSeriesClickPointer3D ( long SeriesIndex, long ValueIndex, long X, long Y );
__declspec(implementation_key(95)) HRESULT ITChartEvents::OnFaderToolStop ( );
__declspec(implementation_key(96)) HRESULT ITChartEvents::OnAxisArrowToolClick ( long ToolIndex, VARIANT_BOOL AtStart );
__declspec(implementation_key(97)) HRESULT ITChartEvents::OnColorBandToolResized ( );
__declspec(implementation_key(98)) HRESULT ITChartEvents::OnAddSeries ( long SeriesIndex );
__declspec(implementation_key(99)) HRESULT ITChartEvents::OnRemoveSeries ( long SeriesIndex );
__declspec(implementation_key(100)) HRESULT ITChartEvents::OnLegendScrollBarToolChangeSize ( );
__declspec(implementation_key(101)) HRESULT ITChartEvents::OnLegendScrollBarToolSetPosition ( long Value );
__declspec(implementation_key(102)) HRESULT ITChartEvents::OnImageSeriesGetImage ( long SeriesIndex, long ValueIndex, struct ITeePicture * * Picture );
__declspec(implementation_key(103)) HRESULT ITChartEvents::OnGetSeriesCircleLabel ( long SeriesIndex, double Angle, long Index, BSTR * Text );
__declspec(implementation_key(104)) HRESULT ITChartEvents::OnTagCloudSeriesDrawTag ( long SeriesIndex, long ValueIndex );
__declspec(implementation_key(105)) HRESULT ITChartEvents::OnSurfaceSeriesGetYValue ( long SeriesIndex, long X, long Z, double * Y );
__declspec(implementation_key(106)) HRESULT ITChartEvents::OnDataTableToolFilterSeries ( long SeriesIndex, VARIANT_BOOL * Accept );
__declspec(implementation_key(107)) OLE_COLOR IBrush::GetColor ( );
__declspec(implementation_key(108)) void IBrush::PutColor ( OLE_COLOR Color );
__declspec(implementation_key(109)) enum EBrushStyle IBrush::GetStyle ( );
__declspec(implementation_key(110)) void IBrush::PutStyle ( enum EBrushStyle Style );
__declspec(implementation_key(111)) HRESULT IBrush::LoadImage ( _bstr_t FileName );
__declspec(implementation_key(112)) HRESULT IBrush::AssignImage ( long ImageHandle );
__declspec(implementation_key(113)) HRESULT IBrush::ClearImage ( );
__declspec(implementation_key(114)) HRESULT IBrush::ShowEditor ( );
__declspec(implementation_key(115)) long IBrush::GetHandle ( );
__declspec(implementation_key(116)) OLE_COLOR IBrush::GetBackColor ( );
__declspec(implementation_key(117)) void IBrush::PutBackColor ( OLE_COLOR Value );
__declspec(implementation_key(118)) long IBrush::GetBrushLink ( );
__declspec(implementation_key(119)) _variant_t IStrings::GetControlDefault ( long Index );
__declspec(implementation_key(120)) void IStrings::PutControlDefault ( long Index, const _variant_t & Value );
__declspec(implementation_key(121)) long IStrings::Count ( );
__declspec(implementation_key(122)) _variant_t IStrings::GetItem ( long Index );
__declspec(implementation_key(123)) void IStrings::PutItem ( long Index, const _variant_t & Value );
__declspec(implementation_key(124)) HRESULT IStrings::Remove ( long Index );
__declspec(implementation_key(125)) HRESULT IStrings::Clear ( );
__declspec(implementation_key(126)) long IStrings::Add ( const _variant_t & AItem );
__declspec(implementation_key(127)) _bstr_t IStrings::GetText ( );
__declspec(implementation_key(128)) void IStrings::PutText ( _bstr_t Value );
__declspec(implementation_key(129)) HRESULT IImport::LoadFromFile ( _bstr_t FileName );
__declspec(implementation_key(130)) HRESULT IImport::LoadFromURL ( _bstr_t URL );
__declspec(implementation_key(131)) HRESULT IImport::LoadFromStream ( const _variant_t & AStream );
__declspec(implementation_key(132)) HRESULT IImport::LoadFromBase64Stream ( const _variant_t & AStream );
__declspec(implementation_key(133)) VARIANT_BOOL IImport::GetV5TeeCompatible ( );
__declspec(implementation_key(134)) void IImport::PutV5TeeCompatible ( VARIANT_BOOL Value );
__declspec(implementation_key(135)) enum EChartScroll IScroll::GetEnable ( );
__declspec(implementation_key(136)) void IScroll::PutEnable ( enum EChartScroll Enable );
__declspec(implementation_key(137)) enum EMouseButton IScroll::GetMouseButton ( );
__declspec(implementation_key(138)) void IScroll::PutMouseButton ( enum EMouseButton Value );
__declspec(implementation_key(139)) HRESULT IPage::Next ( );
__declspec(implementation_key(140)) HRESULT IPage::Previous ( );
__declspec(implementation_key(141)) long IPage::GetMaxPointsPerPage ( );
__declspec(implementation_key(142)) void IPage::PutMaxPointsPerPage ( long MaxPointsPerPage );
__declspec(implementation_key(143)) long IPage::GetCurrent ( );
__declspec(implementation_key(144)) void IPage::PutCurrent ( long Current );
__declspec(implementation_key(145)) VARIANT_BOOL IPage::GetScaleLastPage ( );
__declspec(implementation_key(146)) void IPage::PutScaleLastPage ( VARIANT_BOOL ScaleLastPage );
__declspec(implementation_key(147)) long IPage::GetCount ( );
__declspec(implementation_key(148)) long IPage::GetFirstValueIndex ( );
__declspec(implementation_key(149)) VARIANT_BOOL IPage::GetAutoScale ( );
__declspec(implementation_key(150)) void IPage::PutAutoScale ( VARIANT_BOOL Value );
__declspec(implementation_key(151)) long IValueList::GetCount ( );
__declspec(implementation_key(152)) VARIANT_BOOL IValueList::GetDateTime ( );
__declspec(implementation_key(153)) void IValueList::PutDateTime ( VARIANT_BOOL DateTime );
__declspec(implementation_key(154)) double IValueList::GetFirst ( );
__declspec(implementation_key(155)) double IValueList::GetLast ( );
__declspec(implementation_key(156)) double IValueList::GetMaximum ( );
__declspec(implementation_key(157)) double IValueList::GetMinimum ( );
__declspec(implementation_key(158)) enum EValueListOrder IValueList::GetOrder ( );
__declspec(implementation_key(159)) void IValueList::PutOrder ( enum EValueListOrder Order );
__declspec(implementation_key(160)) double IValueList::GetTotal ( );
__declspec(implementation_key(161)) double IValueList::GetTotalABS ( );
__declspec(implementation_key(162)) double IValueList::GetValue ( long Index );
__declspec(implementation_key(163)) void IValueList::PutValue ( long Index, double Value );
__declspec(implementation_key(164)) _bstr_t IValueList::GetValueSource ( );
__declspec(implementation_key(165)) void IValueList::PutValueSource ( _bstr_t ValueSource );
__declspec(implementation_key(166)) HRESULT IValueList::Delete ( long Index );
__declspec(implementation_key(167)) HRESULT IValueList::FillSequence ( );
__declspec(implementation_key(168)) long IValueList::Locate ( double SomeValue );
__declspec(implementation_key(169)) HRESULT IValueList::Sort ( );
__declspec(implementation_key(170)) VARIANT_BOOL IValueList::GetModified ( );
__declspec(implementation_key(171)) void IValueList::PutModified ( VARIANT_BOOL Value );
__declspec(implementation_key(172)) double IValueList::GetTempValue ( );
__declspec(implementation_key(173)) void IValueList::PutTempValue ( double Value );
__declspec(implementation_key(174)) _bstr_t IValueList::GetName ( );
__declspec(implementation_key(175)) void IValueList::PutName ( _bstr_t Value );
__declspec(implementation_key(176)) VARIANT_BOOL IAverageFunction::GetIncludeNulls ( );
__declspec(implementation_key(177)) void IAverageFunction::PutIncludeNulls ( VARIANT_BOOL Value );
__declspec(implementation_key(178)) long ICurveFittingFunction::GetPolyDegree ( );
__declspec(implementation_key(179)) void ICurveFittingFunction::PutPolyDegree ( long PolyDegree );
__declspec(implementation_key(180)) enum ETypeFitting ICurveFittingFunction::GetTypeFitting ( );
__declspec(implementation_key(181)) void ICurveFittingFunction::PutTypeFitting ( enum ETypeFitting TypeFitting );
__declspec(implementation_key(182)) long ICurveFittingFunction::GetFirstPoint ( );
__declspec(implementation_key(183)) void ICurveFittingFunction::PutFirstPoint ( long FirstPoint );
__declspec(implementation_key(184)) long ICurveFittingFunction::GetLastPoint ( );
__declspec(implementation_key(185)) void ICurveFittingFunction::PutLastPoint ( long LastPoint );
__declspec(implementation_key(186)) long ICurveFittingFunction::GetFirstCalcPoint ( );
__declspec(implementation_key(187)) void ICurveFittingFunction::PutFirstCalcPoint ( long FirstCalcPoint );
__declspec(implementation_key(188)) long ICurveFittingFunction::GetLastCalcPoint ( );
__declspec(implementation_key(189)) void ICurveFittingFunction::PutLastCalcPoint ( long LastCalcPoint );
__declspec(implementation_key(190)) double ICurveFittingFunction::GetAnswerVector ( long Index );
__declspec(implementation_key(191)) double ICurveFittingFunction::GetCurveYValue ( double X );
__declspec(implementation_key(192)) double IExpAvgFunction::GetWeight ( );
__declspec(implementation_key(193)) void IExpAvgFunction::PutWeight ( double Weight );
__declspec(implementation_key(194)) VARIANT_BOOL IMovingAvgFunction::GetWeighted ( );
__declspec(implementation_key(195)) void IMovingAvgFunction::PutWeighted ( VARIANT_BOOL Weighted );
__declspec(implementation_key(196)) _bstr_t IChartFont::GetName ( );
__declspec(implementation_key(197)) void IChartFont::PutName ( _bstr_t Name );
__declspec(implementation_key(198)) long IChartFont::GetSize ( );
__declspec(implementation_key(199)) void IChartFont::PutSize ( long Size );
__declspec(implementation_key(200)) VARIANT_BOOL IChartFont::GetBold ( );
__declspec(implementation_key(201)) void IChartFont::PutBold ( VARIANT_BOOL Bold );
__declspec(implementation_key(202)) VARIANT_BOOL IChartFont::GetItalic ( );
__declspec(implementation_key(203)) void IChartFont::PutItalic ( VARIANT_BOOL Italic );
__declspec(implementation_key(204)) VARIANT_BOOL IChartFont::GetUnderline ( );
__declspec(implementation_key(205)) void IChartFont::PutUnderline ( VARIANT_BOOL Underline );
__declspec(implementation_key(206)) VARIANT_BOOL IChartFont::GetStrikethrough ( );
__declspec(implementation_key(207)) void IChartFont::PutStrikethrough ( VARIANT_BOOL Strikethrough );
__declspec(implementation_key(208)) short IChartFont::GetCharset ( );
__declspec(implementation_key(209)) void IChartFont::PutCharset ( short Charset );
__declspec(implementation_key(210)) OLE_COLOR IChartFont::GetColor ( );
__declspec(implementation_key(211)) void IChartFont::PutColor ( OLE_COLOR Value );
__declspec(implementation_key(212)) long IChartFont::GetHeight ( );
__declspec(implementation_key(213)) void IChartFont::PutHeight ( long Value );
__declspec(implementation_key(214)) long IChartFont::GetPixelsPerInch ( );
__declspec(implementation_key(215)) long IExplodedSlices::GetValue ( long Index );
__declspec(implementation_key(216)) void IExplodedSlices::PutValue ( long Index, long Value );
__declspec(implementation_key(217)) VARIANT_BOOL ICircleLabels::GetVisible ( );
__declspec(implementation_key(218)) void ICircleLabels::PutVisible ( VARIANT_BOOL Value );
__declspec(implementation_key(219)) IChartFontPtr ICircleLabels::GetFont ( );
__declspec(implementation_key(220)) VARIANT_BOOL ICircleLabels::GetRotated ( );
__declspec(implementation_key(221)) void ICircleLabels::PutRotated ( VARIANT_BOOL Value );
__declspec(implementation_key(222)) _bstr_t ICircleLabels::GetDegreeSymbol ( );
__declspec(implementation_key(223)) void ICircleLabels::PutDegreeSymbol ( _bstr_t Value );
__declspec(implementation_key(224)) long ITrendFunction::CalculateTrend ( double * m, double * b, long SourceSeriesIndex, long FirstIndex, long LastIndex );
__declspec(implementation_key(225)) VARIANT_BOOL IStdDeviationFunction::GetComplete ( );
__declspec(implementation_key(226)) void IStdDeviationFunction::PutComplete ( VARIANT_BOOL Value );
__declspec(implementation_key(227)) VARIANT_BOOL IEnvironment::GetNoPromptDBConnect ( );
__declspec(implementation_key(228)) void IEnvironment::PutNoPromptDBConnect ( VARIANT_BOOL Value );
__declspec(implementation_key(229)) VARIANT_BOOL IEnvironment::GetIEPrintWithPage ( );
__declspec(implementation_key(230)) void IEnvironment::PutIEPrintWithPage ( VARIANT_BOOL Value );
__declspec(implementation_key(231)) HRESULT IEnvironment::InternalRepaint ( );
__declspec(implementation_key(232)) VARIANT_BOOL IEnvironment::GetMouseWheelScroll ( );
__declspec(implementation_key(233)) void IEnvironment::PutMouseWheelScroll ( VARIANT_BOOL Value );
__declspec(implementation_key(234)) _bstr_t IEnvironment::GetDecimalSeparator ( );
__declspec(implementation_key(235)) VARIANT_BOOL IEnvironment::GetTeeClipWhenPrinting ( );
__declspec(implementation_key(236)) void IEnvironment::PutTeeClipWhenPrinting ( VARIANT_BOOL Value );
__declspec(implementation_key(237)) VARIANT_BOOL IEnvironment::GetTeeClipWhenMetafiling ( );
__declspec(implementation_key(238)) void IEnvironment::PutTeeClipWhenMetafiling ( VARIANT_BOOL Value );
__declspec(implementation_key(239)) _bstr_t IEnvironment::DecodeUTF8String ( _bstr_t aString );
__declspec(implementation_key(240)) _bstr_t IEnvironment::CodeUTF8String ( _bstr_t aString, VARIANT_BOOL addPrefix );
__declspec(implementation_key(241)) VARIANT_BOOL IEnvironment::GetChartVisible ( );
__declspec(implementation_key(242)) void IEnvironment::PutChartVisible ( VARIANT_BOOL Value );
__declspec(implementation_key(243)) HRESULT ITeeCommanderEvents::OnEditedChart ( );
__declspec(implementation_key(244)) HRESULT ITeeListBoxEvents::OnDblClickSeries ( long SeriesIndex );
__declspec(implementation_key(245)) HRESULT ITeeListBoxEvents::OnClick ( );
__declspec(implementation_key(246)) HRESULT ITeeListBoxEvents::OnChangeActive ( long SeriesIndex );
__declspec(implementation_key(247)) HRESULT ITeeListBoxEvents::OnMouseUp ( enum EMouseButton Button, enum EShiftState Shift, long X, long Y );
__declspec(implementation_key(248)) HRESULT ITeeListBoxEvents::OnMouseDown ( enum EMouseButton Button, enum EShiftState Shift, long X, long Y );
__declspec(implementation_key(249)) HRESULT ITeeListBoxEvents::OnMouseMove ( enum EShiftState Shift, long X, long Y );
__declspec(implementation_key(250)) HRESULT ITeeListBoxEvents::OnChangeColor ( long SeriesIndex );
__declspec(implementation_key(251)) HRESULT ITeeListBoxEvents::OnChangeOrder ( long SeriesIndex1, long SeriesIndex2 );
__declspec(implementation_key(252)) HRESULT ITeeListBoxEvents::OnOtherItemsChange ( );
__declspec(implementation_key(253)) HRESULT ITeeListBoxEvents::OnRefresh ( );
__declspec(implementation_key(254)) HRESULT ITeeListBoxEvents::OnRemovedSeries ( long SeriesIndex );
__declspec(implementation_key(255)) double ITeePoint2D::GetX ( );
__declspec(implementation_key(256)) void ITeePoint2D::PutX ( double Value );
__declspec(implementation_key(257)) double ITeePoint2D::GetY ( );
__declspec(implementation_key(258)) void ITeePoint2D::PutY ( double Value );
__declspec(implementation_key(259)) long ICircledSeries::GetXRadius ( );
__declspec(implementation_key(260)) void ICircledSeries::PutXRadius ( long XRadius );
__declspec(implementation_key(261)) long ICircledSeries::GetYRadius ( );
__declspec(implementation_key(262)) void ICircledSeries::PutYRadius ( long YRadius );
__declspec(implementation_key(263)) long ICircledSeries::GetXCenter ( );
__declspec(implementation_key(264)) long ICircledSeries::GetYCenter ( );
__declspec(implementation_key(265)) long ICircledSeries::GetCircleWidth ( );
__declspec(implementation_key(266)) long ICircledSeries::GetCircleHeight ( );
__declspec(implementation_key(267)) OLE_COLOR ICircledSeries::GetCircleBackColor ( );
__declspec(implementation_key(268)) void ICircledSeries::PutCircleBackColor ( OLE_COLOR CircleBackColor );
__declspec(implementation_key(269)) VARIANT_BOOL ICircledSeries::GetCircled ( );
__declspec(implementation_key(270)) void ICircledSeries::PutCircled ( VARIANT_BOOL Circled );
__declspec(implementation_key(271)) long ICircledSeries::GetRotationAngle ( );
__declspec(implementation_key(272)) void ICircledSeries::PutRotationAngle ( long RotationAngle );
__declspec(implementation_key(273)) ITeePoint2DPtr ICircledSeries::AngleToPoint ( double Angle, double AXRadius, double AYRadius );
__declspec(implementation_key(274)) double ICircledSeries::PointToAngle ( long XCoord, long YCoord );
__declspec(implementation_key(275)) double ICircledSeries::PointToRadius ( long XCoord, long YCoord );
__declspec(implementation_key(276)) ITeePoint2DPtr ISeriesMarkPosition::GetArrowFrom ( );
__declspec(implementation_key(277)) ITeePoint2DPtr ISeriesMarkPosition::GetArrowTo ( );
__declspec(implementation_key(278)) VARIANT_BOOL ISeriesMarkPosition::GetCustom ( );
__declspec(implementation_key(279)) void ISeriesMarkPosition::PutCustom ( VARIANT_BOOL Value );
__declspec(implementation_key(280)) long ISeriesMarkPosition::GetHeight ( );
__declspec(implementation_key(281)) void ISeriesMarkPosition::PutHeight ( long Value );
__declspec(implementation_key(282)) ITeePoint2DPtr ISeriesMarkPosition::GetLeftTop ( );
__declspec(implementation_key(283)) long ISeriesMarkPosition::GetWidth ( );
__declspec(implementation_key(284)) void ISeriesMarkPosition::PutWidth ( long Value );
__declspec(implementation_key(285)) ISeriesMarkPositionPtr ISeriesMarksPositions::GetPosition ( long Index );
__declspec(implementation_key(286)) HRESULT ISeriesMarksPositions::Automatic ( long Index );
__declspec(implementation_key(287)) double ITeePoint3D::GetZ ( );
__declspec(implementation_key(288)) void ITeePoint3D::PutZ ( double Value );
__declspec(implementation_key(289)) VARIANT_BOOL ITeeEditorShowPages::GetMain ( );
__declspec(implementation_key(290)) void ITeeEditorShowPages::PutMain ( VARIANT_BOOL Value );
__declspec(implementation_key(291)) VARIANT_BOOL ITeeEditorShowPages::GetGeneral ( );
__declspec(implementation_key(292)) void ITeeEditorShowPages::PutGeneral ( VARIANT_BOOL Value );
__declspec(implementation_key(293)) VARIANT_BOOL ITeeEditorShowPages::GetAxis ( );
__declspec(implementation_key(294)) void ITeeEditorShowPages::PutAxis ( VARIANT_BOOL Value );
__declspec(implementation_key(295)) VARIANT_BOOL ITeeEditorShowPages::GetTitles ( );
__declspec(implementation_key(296)) void ITeeEditorShowPages::PutTitles ( VARIANT_BOOL Value );
__declspec(implementation_key(297)) VARIANT_BOOL ITeeEditorShowPages::GetLegend ( );
__declspec(implementation_key(298)) void ITeeEditorShowPages::PutLegend ( VARIANT_BOOL Value );
__declspec(implementation_key(299)) VARIANT_BOOL ITeeEditorShowPages::GetPanel ( );
__declspec(implementation_key(300)) void ITeeEditorShowPages::PutPanel ( VARIANT_BOOL Value );
__declspec(implementation_key(301)) VARIANT_BOOL ITeeEditorShowPages::GetPaging ( );
__declspec(implementation_key(302)) void ITeeEditorShowPages::PutPaging ( VARIANT_BOOL Value );
__declspec(implementation_key(303)) VARIANT_BOOL ITeeEditorShowPages::GetWalls ( );
__declspec(implementation_key(304)) void ITeeEditorShowPages::PutWalls ( VARIANT_BOOL Value );
__declspec(implementation_key(305)) VARIANT_BOOL ITeeEditorShowPages::GetAspect ( );
__declspec(implementation_key(306)) void ITeeEditorShowPages::PutAspect ( VARIANT_BOOL Value );
__declspec(implementation_key(307)) VARIANT_BOOL ITeeEditorShowPages::GetSeriesGeneral ( );
__declspec(implementation_key(308)) void ITeeEditorShowPages::PutSeriesGeneral ( VARIANT_BOOL Value );
__declspec(implementation_key(309)) VARIANT_BOOL ITeeEditorShowPages::GetSeriesMarks ( );
__declspec(implementation_key(310)) void ITeeEditorShowPages::PutSeriesMarks ( VARIANT_BOOL Value );
__declspec(implementation_key(311)) VARIANT_BOOL ITeeEditorShowPages::GetTools ( );
__declspec(implementation_key(312)) void ITeeEditorShowPages::PutTools ( VARIANT_BOOL Value );
__declspec(implementation_key(313)) VARIANT_BOOL ITeeEditorShowPages::GetSeriesData ( );
__declspec(implementation_key(314)) void ITeeEditorShowPages::PutSeriesData ( VARIANT_BOOL Value );
__declspec(implementation_key(315)) VARIANT_BOOL ITeeEditorShowPages::GetExportDialog ( );
__declspec(implementation_key(316)) void ITeeEditorShowPages::PutExportDialog ( VARIANT_BOOL Value );
__declspec(implementation_key(317)) VARIANT_BOOL ITeeEditorShowPages::GetPrintPreview ( );
__declspec(implementation_key(318)) void ITeeEditorShowPages::PutPrintPreview ( VARIANT_BOOL Value );
__declspec(implementation_key(319)) VARIANT_BOOL ITeeEditorShowPages::GetOpenGL ( );
__declspec(implementation_key(320)) void ITeeEditorShowPages::PutOpenGL ( VARIANT_BOOL Value );
__declspec(implementation_key(321)) void ITeeEditorShowPages::PutThemes ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(322)) VARIANT_BOOL ITeeEditorShowPages::GetExportNative ( );
__declspec(implementation_key(323)) void ITeeEditorShowPages::PutExportNative ( VARIANT_BOOL Value );
__declspec(implementation_key(324)) VARIANT_BOOL ITeeEditorShowPages::GetAllSeries ( );
__declspec(implementation_key(325)) void ITeeEditorShowPages::PutAllSeries ( VARIANT_BOOL Value );
__declspec(implementation_key(326)) VARIANT_BOOL ITeeEditorOptions::GetAdd ( );
__declspec(implementation_key(327)) void ITeeEditorOptions::PutAdd ( VARIANT_BOOL Value );
__declspec(implementation_key(328)) VARIANT_BOOL ITeeEditorOptions::GetDelete ( );
__declspec(implementation_key(329)) void ITeeEditorOptions::PutDelete ( VARIANT_BOOL Value );
__declspec(implementation_key(330)) VARIANT_BOOL ITeeEditorOptions::GetChange ( );
__declspec(implementation_key(331)) void ITeeEditorOptions::PutChange ( VARIANT_BOOL Value );
__declspec(implementation_key(332)) VARIANT_BOOL ITeeEditorOptions::GetClone ( );
__declspec(implementation_key(333)) void ITeeEditorOptions::PutClone ( VARIANT_BOOL Value );
__declspec(implementation_key(334)) VARIANT_BOOL ITeeEditorOptions::GetDataSource ( );
__declspec(implementation_key(335)) void ITeeEditorOptions::PutDataSource ( VARIANT_BOOL Value );
__declspec(implementation_key(336)) VARIANT_BOOL ITeeEditorOptions::GetTitle ( );
__declspec(implementation_key(337)) void ITeeEditorOptions::PutTitle ( VARIANT_BOOL Value );
__declspec(implementation_key(338)) VARIANT_BOOL ITeeEditorOptions::GetHelp ( );
__declspec(implementation_key(339)) void ITeeEditorOptions::PutHelp ( VARIANT_BOOL Value );
__declspec(implementation_key(340)) VARIANT_BOOL ITeeEditorOptions::GetGroups ( );
__declspec(implementation_key(341)) void ITeeEditorOptions::PutGroups ( VARIANT_BOOL Value );
__declspec(implementation_key(342)) VARIANT_BOOL ITeeEditorOptions::GetAllGroups ( );
__declspec(implementation_key(343)) void ITeeEditorOptions::PutAllGroups ( VARIANT_BOOL Value );
__declspec(implementation_key(344)) VARIANT_BOOL ITeeEditorOptions::GetOrderSeries ( );
__declspec(implementation_key(345)) void ITeeEditorOptions::PutOrderSeries ( VARIANT_BOOL Value );
__declspec(implementation_key(346)) VARIANT_BOOL ITeePreviewerOptions::GetChangePrinter ( );
__declspec(implementation_key(347)) void ITeePreviewerOptions::PutChangePrinter ( VARIANT_BOOL Value );
__declspec(implementation_key(348)) VARIANT_BOOL ITeePreviewerOptions::GetSetupPrinter ( );
__declspec(implementation_key(349)) void ITeePreviewerOptions::PutSetupPrinter ( VARIANT_BOOL Value );
__declspec(implementation_key(350)) VARIANT_BOOL ITeePreviewerOptions::GetResizeImage ( );
__declspec(implementation_key(351)) void ITeePreviewerOptions::PutResizeImage ( VARIANT_BOOL Value );
__declspec(implementation_key(352)) VARIANT_BOOL ITeePreviewerOptions::GetMoveImage ( );
__declspec(implementation_key(353)) void ITeePreviewerOptions::PutMoveImage ( VARIANT_BOOL Value );
__declspec(implementation_key(354)) VARIANT_BOOL ITeePreviewerOptions::GetChangeDetail ( );
__declspec(implementation_key(355)) void ITeePreviewerOptions::PutChangeDetail ( VARIANT_BOOL Value );
__declspec(implementation_key(356)) VARIANT_BOOL ITeePreviewerOptions::GetChangePaperOrientation ( );
__declspec(implementation_key(357)) void ITeePreviewerOptions::PutChangePaperOrientation ( VARIANT_BOOL Value );
__declspec(implementation_key(358)) VARIANT_BOOL ITeePreviewerOptions::GetChangeMargins ( );
__declspec(implementation_key(359)) void ITeePreviewerOptions::PutChangeMargins ( VARIANT_BOOL Value );
__declspec(implementation_key(360)) VARIANT_BOOL ITeePreviewerOptions::GetDragImage ( );
__declspec(implementation_key(361)) void ITeePreviewerOptions::PutDragImage ( VARIANT_BOOL Value );
__declspec(implementation_key(362)) VARIANT_BOOL ITeePreviewerOptions::GetPrintPanel ( );
__declspec(implementation_key(363)) void ITeePreviewerOptions::PutPrintPanel ( VARIANT_BOOL Value );
__declspec(implementation_key(364)) VARIANT_BOOL ITeePreviewerOptions::GetAsBitmap ( );
__declspec(implementation_key(365)) void ITeePreviewerOptions::PutAsBitmap ( VARIANT_BOOL Value );
__declspec(implementation_key(366)) _variant_t ICustomToolSeries::GetSeries ( );
__declspec(implementation_key(367)) void ICustomToolSeries::PutSeries ( const _variant_t & Value );
__declspec(implementation_key(368)) _variant_t ICustomToolAxis::GetAxis ( );
__declspec(implementation_key(369)) void ICustomToolAxis::PutAxis ( const _variant_t & Value );
__declspec(implementation_key(370)) long IBaseHighLowSeries::AddHighLow ( double AX, double AHigh, double ALow, _bstr_t AXLabel, OLE_COLOR AColor );
__declspec(implementation_key(371)) IValueListPtr IBaseHighLowSeries::GetHighValues ( );
__declspec(implementation_key(372)) IValueListPtr IBaseHighLowSeries::GetLowValues ( );
__declspec(implementation_key(373)) double IBaseHighLowSeries::MaxYValue ( );
__declspec(implementation_key(374)) double IBaseHighLowSeries::MinYValue ( );
__declspec(implementation_key(375)) long ITeeShadow::GetHorizSize ( );
__declspec(implementation_key(376)) void ITeeShadow::PutHorizSize ( long Value );
__declspec(implementation_key(377)) long ITeeShadow::GetVertSize ( );
__declspec(implementation_key(378)) void ITeeShadow::PutVertSize ( long Value );
__declspec(implementation_key(379)) OLE_COLOR ITeeShadow::GetColor ( );
__declspec(implementation_key(380)) void ITeeShadow::PutColor ( OLE_COLOR Value );
__declspec(implementation_key(381)) long ITeeShadow::GetTransparency ( );
__declspec(implementation_key(382)) void ITeeShadow::PutTransparency ( long Value );
__declspec(implementation_key(383)) HRESULT ITeeShadow::ShowEditor ( );
__declspec(implementation_key(384)) VARIANT_BOOL ITeeShadow::GetVisible ( );
__declspec(implementation_key(385)) void ITeeShadow::PutVisible ( VARIANT_BOOL Value );
__declspec(implementation_key(386)) VARIANT_BOOL ITeeShadow::GetSmooth ( );
__declspec(implementation_key(387)) void ITeeShadow::PutSmooth ( VARIANT_BOOL Value );
__declspec(implementation_key(388)) long ITeeShadow::GetSmoothBlur ( );
__declspec(implementation_key(389)) void ITeeShadow::PutSmoothBlur ( long Value );
__declspec(implementation_key(390)) VARIANT_BOOL ITeeShadow::GetClip ( );
__declspec(implementation_key(391)) void ITeeShadow::PutClip ( VARIANT_BOOL Value );
__declspec(implementation_key(392)) HRESULT ITeePreviewPanelEvents::OnChangeMargins ( VARIANT_BOOL DisableProportional, long Left, long Top, long Right, long Bottom );
__declspec(implementation_key(393)) HRESULT ITeePreviewPanelEvents::OnAfterDraw ( );
__declspec(implementation_key(394)) HRESULT IChartGridEvents::OnClick ( );
__declspec(implementation_key(395)) enum ERSIStyle IRSIFunction::GetStyle ( );
__declspec(implementation_key(396)) void IRSIFunction::PutStyle ( enum ERSIStyle Value );
__declspec(implementation_key(397)) long IPyramidSeries::GetSizePercent ( );
__declspec(implementation_key(398)) void IPyramidSeries::PutSizePercent ( long Value );
__declspec(implementation_key(399)) HRESULT ITeePanelsList::Delete ( long Index );
__declspec(implementation_key(400)) HRESULT ITeePanelsList::Clear ( );
__declspec(implementation_key(401)) long ITeePanelsList::GetCount ( );
__declspec(implementation_key(402)) long IExportFormat::GetWidth ( );
__declspec(implementation_key(403)) void IExportFormat::PutWidth ( long Value );
__declspec(implementation_key(404)) long IExportFormat::GetHeight ( );
__declspec(implementation_key(405)) void IExportFormat::PutHeight ( long Value );
__declspec(implementation_key(406)) HRESULT IExportFormat::SaveToFile ( _bstr_t FileName );
__declspec(implementation_key(407)) _variant_t IExportFormat::SaveToStream ( );
__declspec(implementation_key(408)) VARIANT_BOOL IJPEGExport::GetGrayScale ( );
__declspec(implementation_key(409)) void IJPEGExport::PutGrayScale ( VARIANT_BOOL Value );
__declspec(implementation_key(410)) long IJPEGExport::GetCompressionQuality ( );
__declspec(implementation_key(411)) void IJPEGExport::PutCompressionQuality ( long Value );
__declspec(implementation_key(412)) long IPNGExport::GetCompressionLevel ( );
__declspec(implementation_key(413)) void IPNGExport::PutCompressionLevel ( long Value );
__declspec(implementation_key(414)) enum EGIFCompression IGIFExport::GetCompression ( );
__declspec(implementation_key(415)) void IGIFExport::PutCompression ( enum EGIFCompression Value );
__declspec(implementation_key(416)) enum EGIFDitherMode IGIFExport::GetDitherMode ( );
__declspec(implementation_key(417)) void IGIFExport::PutDitherMode ( enum EGIFDitherMode Value );
__declspec(implementation_key(418)) enum EGIFColorReduction IGIFExport::GetColorReduction ( );
__declspec(implementation_key(419)) void IGIFExport::PutColorReduction ( enum EGIFColorReduction Value );
__declspec(implementation_key(420)) VARIANT_BOOL IMetafileExport::GetEnhanced ( );
__declspec(implementation_key(421)) void IMetafileExport::PutEnhanced ( VARIANT_BOOL Value );
__declspec(implementation_key(422)) enum EPixelFormat IBMPExport::GetColors ( );
__declspec(implementation_key(423)) void IBMPExport::PutColors ( enum EPixelFormat Value );
__declspec(implementation_key(424)) VARIANT_BOOL IBMPExport::GetMonochrome ( );
__declspec(implementation_key(425)) void IBMPExport::PutMonochrome ( VARIANT_BOOL Value );
__declspec(implementation_key(426)) enum EMarkToolMouseAction IMarksTipTool::GetMouseAction ( );
__declspec(implementation_key(427)) void IMarksTipTool::PutMouseAction ( enum EMarkToolMouseAction Value );
__declspec(implementation_key(428)) enum EMarkStyle IMarksTipTool::GetStyle ( );
__declspec(implementation_key(429)) void IMarksTipTool::PutStyle ( enum EMarkStyle Value );
__declspec(implementation_key(430)) long IMarksTipTool::GetDelay ( );
__declspec(implementation_key(431)) void IMarksTipTool::PutDelay ( long Value );
__declspec(implementation_key(432)) long IMarksTipTool::GetHideDelay ( );
__declspec(implementation_key(433)) void IMarksTipTool::PutHideDelay ( long Value );
__declspec(implementation_key(434)) VARIANT_BOOL IExpMovAvgFunction::GetIgnoreNulls ( );
__declspec(implementation_key(435)) void IExpMovAvgFunction::PutIgnoreNulls ( VARIANT_BOOL Value );
__declspec(implementation_key(436)) VARIANT_BOOL IRMSFunction::GetComplete ( );
__declspec(implementation_key(437)) void IRMSFunction::PutComplete ( VARIANT_BOOL Value );
__declspec(implementation_key(438)) HRESULT INativeExport::SaveToFile ( _bstr_t FileName, VARIANT_BOOL IncludeData );
__declspec(implementation_key(439)) _variant_t INativeExport::SaveToStream ( VARIANT_BOOL IncludeData );
__declspec(implementation_key(440)) _variant_t INativeExport::SaveToBase64Stream ( VARIANT_BOOL IncludeData );
__declspec(implementation_key(441)) VARIANT_BOOL IDataExport::GetIncludeHeader ( );
__declspec(implementation_key(442)) void IDataExport::PutIncludeHeader ( VARIANT_BOOL Value );
__declspec(implementation_key(443)) VARIANT_BOOL IDataExport::GetIncludeLabels ( );
__declspec(implementation_key(444)) void IDataExport::PutIncludeLabels ( VARIANT_BOOL Value );
__declspec(implementation_key(445)) VARIANT_BOOL IDataExport::GetIncludeIndex ( );
__declspec(implementation_key(446)) void IDataExport::PutIncludeIndex ( VARIANT_BOOL Value );
__declspec(implementation_key(447)) _variant_t IDataExport::GetSeries ( );
__declspec(implementation_key(448)) void IDataExport::PutSeries ( const _variant_t & Value );
__declspec(implementation_key(449)) HRESULT IDataExport::SaveToFile ( _bstr_t FileName );
__declspec(implementation_key(450)) _variant_t IDataExport::SaveToStream ( );
__declspec(implementation_key(451)) _bstr_t IDataExport::AsString ( );
__declspec(implementation_key(452)) VARIANT_BOOL IDataExport::GetIncludeColors ( );
__declspec(implementation_key(453)) void IDataExport::PutIncludeColors ( VARIANT_BOOL Value );
__declspec(implementation_key(454)) VARIANT_BOOL IDataExport::GetUseSeriesFormat ( );
__declspec(implementation_key(455)) void IDataExport::PutUseSeriesFormat ( VARIANT_BOOL Value );
__declspec(implementation_key(456)) _bstr_t IDataExport::GetValueFormat ( );
__declspec(implementation_key(457)) void IDataExport::PutValueFormat ( _bstr_t Value );
__declspec(implementation_key(458)) _bstr_t ITextExport::GetTextDelimiter ( );
__declspec(implementation_key(459)) void ITextExport::PutTextDelimiter ( _bstr_t Value );
__declspec(implementation_key(460)) long ISeriesTextField::GetFieldIndex ( );
__declspec(implementation_key(461)) void ISeriesTextField::PutFieldIndex ( long Value );
__declspec(implementation_key(462)) _bstr_t ISeriesTextField::GetFieldName ( );
__declspec(implementation_key(463)) void ISeriesTextField::PutFieldName ( _bstr_t Value );
__declspec(implementation_key(464)) ISeriesTextFieldPtr ISeriesTextFields::GetItems ( long Index );
__declspec(implementation_key(465)) HRESULT ISeriesTextFields::Clear ( );
__declspec(implementation_key(466)) HRESULT ISeriesTextFields::Delete ( long Index );
__declspec(implementation_key(467)) long ISeriesTextFields::GetCount ( );
__declspec(implementation_key(468)) long IValueLists::GetCount ( );
__declspec(implementation_key(469)) IValueListPtr IValueLists::GetItems ( long Index );
__declspec(implementation_key(470)) long IChartGridRows::GetRow ( );
__declspec(implementation_key(471)) void IChartGridRows::PutRow ( long Value );
__declspec(implementation_key(472)) long IChartGridRows::GetCount ( );
__declspec(implementation_key(473)) long IChartGridRows::GetHeights ( long Index );
__declspec(implementation_key(474)) void IChartGridRows::PutHeights ( long Index, long Value );
__declspec(implementation_key(475)) long IChartGridCols::GetCol ( );
__declspec(implementation_key(476)) void IChartGridCols::PutCol ( long Value );
__declspec(implementation_key(477)) long IChartGridCols::GetCount ( );
__declspec(implementation_key(478)) long IChartGridCols::GetWidths ( long Index );
__declspec(implementation_key(479)) void IChartGridCols::PutWidths ( long Index, long Value );
__declspec(implementation_key(480)) VARIANT_BOOL ISmoothPoints::GetActive ( );
__declspec(implementation_key(481)) void ISmoothPoints::PutActive ( VARIANT_BOOL Value );
__declspec(implementation_key(482)) VARIANT_BOOL ISmoothPoints::GetInterpolate ( );
__declspec(implementation_key(483)) void ISmoothPoints::PutInterpolate ( VARIANT_BOOL Value );
__declspec(implementation_key(484)) long ISmoothPoints::GetFactor ( );
__declspec(implementation_key(485)) void ISmoothPoints::PutFactor ( long Value );
__declspec(implementation_key(486)) long ILevelSegment::GetNumPoints ( );
__declspec(implementation_key(487)) ITeePoint2DPtr ILevelSegment::GetPoints ( long Index );
__declspec(implementation_key(488)) HRESULT IGridTransposeTool::Transpose ( );
__declspec(implementation_key(489)) _variant_t IGridTransposeTool::GetSeries ( );
__declspec(implementation_key(490)) void IGridTransposeTool::PutSeries ( const _variant_t & Value );
__declspec(implementation_key(491)) VARIANT_BOOL ISmoothingFunction::GetInterpolate ( );
__declspec(implementation_key(492)) void ISmoothingFunction::PutInterpolate ( VARIANT_BOOL Value );
__declspec(implementation_key(493)) long ISmoothingFunction::GetFactor ( );
__declspec(implementation_key(494)) void ISmoothingFunction::PutFactor ( long Value );
__declspec(implementation_key(495)) long ICustomFunction::GetNumPoints ( );
__declspec(implementation_key(496)) void ICustomFunction::PutNumPoints ( long Value );
__declspec(implementation_key(497)) double ICustomFunction::GetStartX ( );
__declspec(implementation_key(498)) void ICustomFunction::PutStartX ( double Value );
__declspec(implementation_key(499)) double ICustomFunction::GetX ( );
__declspec(implementation_key(500)) void ICustomFunction::PutX ( double Value );
__declspec(implementation_key(501)) enum ECompressionPeriod ICompressFunction::GetCompress ( );
__declspec(implementation_key(502)) void ICompressFunction::PutCompress ( enum ECompressionPeriod Value );
__declspec(implementation_key(503)) VARIANT_BOOL ICLVFunction::GetAccumulate ( );
__declspec(implementation_key(504)) void ICLVFunction::PutAccumulate ( VARIANT_BOOL Value );
__declspec(implementation_key(505)) _variant_t ICLVFunction::GetVolume ( );
__declspec(implementation_key(506)) void ICLVFunction::PutVolume ( const _variant_t & Value );
__declspec(implementation_key(507)) _variant_t IOBVFunction::GetVolume ( );
__declspec(implementation_key(508)) void IOBVFunction::PutVolume ( const _variant_t & Value );
__declspec(implementation_key(509)) double ICCIFunction::GetConstant ( );
__declspec(implementation_key(510)) void ICCIFunction::PutConstant ( double Value );
__declspec(implementation_key(511)) VARIANT_BOOL IPVOFunction::GetPercentage ( );
__declspec(implementation_key(512)) void IPVOFunction::PutPercentage ( VARIANT_BOOL Value );
__declspec(implementation_key(513)) long IPVOFunction::GetPeriod2 ( );
__declspec(implementation_key(514)) void IPVOFunction::PutPeriod2 ( long Value );
__declspec(implementation_key(515)) double IPerformanceFunction::Calculate ( long SourceSeriesIndex, long FirstIndex, long LastIndex );
__declspec(implementation_key(516)) long ITeeRect::GetLeft ( );
__declspec(implementation_key(517)) long ITeeRect::GetTop ( );
__declspec(implementation_key(518)) long ITeeRect::GetRight ( );
__declspec(implementation_key(519)) long ITeeRect::GetBottom ( );
__declspec(implementation_key(520)) enum EDragPointStyle IDragPointTool::GetDragStyle ( );
__declspec(implementation_key(521)) void IDragPointTool::PutDragStyle ( enum EDragPointStyle Value );
__declspec(implementation_key(522)) long ILightTool::GetFactor ( );
__declspec(implementation_key(523)) void ILightTool::PutFactor ( long Value );
__declspec(implementation_key(524)) long ILightTool::GetLeft ( );
__declspec(implementation_key(525)) void ILightTool::PutLeft ( long Value );
__declspec(implementation_key(526)) enum ELightStyle ILightTool::GetStyle ( );
__declspec(implementation_key(527)) void ILightTool::PutStyle ( enum ELightStyle Value );
__declspec(implementation_key(528)) long ILightTool::GetTop ( );
__declspec(implementation_key(529)) void ILightTool::PutTop ( long Value );
__declspec(implementation_key(530)) VARIANT_BOOL ILightTool::GetFollowMouse ( );
__declspec(implementation_key(531)) void ILightTool::PutFollowMouse ( VARIANT_BOOL Value );
__declspec(implementation_key(532)) OLE_COLOR ISurfaceNearestTool::GetCellColor ( );
__declspec(implementation_key(533)) void ISurfaceNearestTool::PutCellColor ( OLE_COLOR Value );
__declspec(implementation_key(534)) OLE_COLOR ISurfaceNearestTool::GetColumnColor ( );
__declspec(implementation_key(535)) void ISurfaceNearestTool::PutColumnColor ( OLE_COLOR Value );
__declspec(implementation_key(536)) OLE_COLOR ISurfaceNearestTool::GetRowColor ( );
__declspec(implementation_key(537)) void ISurfaceNearestTool::PutRowColor ( OLE_COLOR Value );
__declspec(implementation_key(538)) long ISurfaceNearestTool::GetSelectedCell ( );
__declspec(implementation_key(539)) void ISurfaceNearestTool::PutSelectedCell ( long Value );
__declspec(implementation_key(540)) long ISurfaceNearestTool::GetRow ( );
__declspec(implementation_key(541)) long ISurfaceNearestTool::GetCol ( );
__declspec(implementation_key(542)) VARIANT_BOOL IAxisScrollTool::GetScrollInverted ( );
__declspec(implementation_key(543)) void IAxisScrollTool::PutScrollInverted ( VARIANT_BOOL Value );
__declspec(implementation_key(544)) VARIANT_BOOL ICustomSortedFunction::GetIncludeNulls ( );
__declspec(implementation_key(545)) void ICustomSortedFunction::PutIncludeNulls ( VARIANT_BOOL Value );
__declspec(implementation_key(546)) enum EDownSampleMethod IDownSamplingFunction::GetDownSampleMethod ( );
__declspec(implementation_key(547)) void IDownSamplingFunction::PutDownSampleMethod ( enum EDownSampleMethod Value );
__declspec(implementation_key(548)) long IDownSamplingFunction::GetTolerance ( );
__declspec(implementation_key(549)) void IDownSamplingFunction::PutTolerance ( long Value );
__declspec(implementation_key(550)) long IDownSamplingFunction::GetReducedSize ( );
__declspec(implementation_key(551)) HRESULT ITeeCommanderButton::Hide ( );
__declspec(implementation_key(552)) long IPointArray::GetCount ( );
__declspec(implementation_key(553)) ITeePoint2DPtr IPointArray::GetItem ( long Index );
__declspec(implementation_key(554)) struct TeeRect ILegendItem::GetSymbolRect ( );
__declspec(implementation_key(555)) void ILegendItem::PutSymbolRect ( struct TeeRect Value );
__declspec(implementation_key(556)) long ILegendItem::GetAlign ( );
__declspec(implementation_key(557)) long ILegendItem::GetLeft ( );
__declspec(implementation_key(558)) _bstr_t ILegendItem::GetText ( );
__declspec(implementation_key(559)) void ILegendItem::PutText ( _bstr_t Value );
__declspec(implementation_key(560)) long ILegendItem::GetTop ( );
__declspec(implementation_key(561)) HRESULT ILegendItems::Clear ( );
__declspec(implementation_key(562)) VARIANT_BOOL ILegendItems::GetCustom ( );
__declspec(implementation_key(563)) void ILegendItems::PutCustom ( VARIANT_BOOL Value );
__declspec(implementation_key(564)) ILegendItemPtr ILegendItems::GetItems ( long Index );
__declspec(implementation_key(565)) IStringsPtr ISeriesStatsTool::GetStatistics ( );
__declspec(implementation_key(566)) HRESULT IVideoTool::StartRecording ( _bstr_t FileName );
__declspec(implementation_key(567)) HRESULT IVideoTool::StopRecording ( );
__declspec(implementation_key(568)) long IVideoTool::GetFrameCount ( );
__declspec(implementation_key(569)) VARIANT_BOOL IVideoTool::GetIsRecording ( );
__declspec(implementation_key(570)) _bstr_t IVideoTool::GetCompression ( );
__declspec(implementation_key(571)) void IVideoTool::PutCompression ( _bstr_t Value );
__declspec(implementation_key(572)) long IVideoTool::GetCompressionQuality ( );
__declspec(implementation_key(573)) void IVideoTool::PutCompressionQuality ( long Value );
__declspec(implementation_key(574)) _bstr_t IVideoTool::GetFileName ( );
__declspec(implementation_key(575)) void IVideoTool::PutFileName ( _bstr_t Value );
__declspec(implementation_key(576)) long IVideoTool::GetFrameDuration ( );
__declspec(implementation_key(577)) void IVideoTool::PutFrameDuration ( long Value );
__declspec(implementation_key(578)) HRESULT IFilterRegion::SetRectangle ( long Left, long Top, long Right, long Bottom );
__declspec(implementation_key(579)) long IFilterRegion::GetHeight ( );
__declspec(implementation_key(580)) void IFilterRegion::PutHeight ( long Value );
__declspec(implementation_key(581)) long IFilterRegion::GetLeft ( );
__declspec(implementation_key(582)) void IFilterRegion::PutLeft ( long Value );
__declspec(implementation_key(583)) long IFilterRegion::GetTop ( );
__declspec(implementation_key(584)) void IFilterRegion::PutTop ( long Value );
__declspec(implementation_key(585)) long IFilterRegion::GetWidth ( );
__declspec(implementation_key(586)) void IFilterRegion::PutWidth ( long Value );
__declspec(implementation_key(587)) HRESULT ITransposeSeriesTool::Transpose ( );
__declspec(implementation_key(588)) double ISubsetTeeFunction::GetStartValue ( );
__declspec(implementation_key(589)) void ISubsetTeeFunction::PutStartValue ( double Value );
__declspec(implementation_key(590)) double ISubsetTeeFunction::GetEndValue ( );
__declspec(implementation_key(591)) void ISubsetTeeFunction::PutEndValue ( double Value );
__declspec(implementation_key(592)) VARIANT_BOOL IHistogramFunction::GetCumulative ( );
__declspec(implementation_key(593)) void IHistogramFunction::PutCumulative ( VARIANT_BOOL Value );
__declspec(implementation_key(594)) long IHistogramFunction::GetNumBins ( );
__declspec(implementation_key(595)) void IHistogramFunction::PutNumBins ( long Value );
__declspec(implementation_key(596)) double ISARFunction::GetAccelerationFactor ( );
__declspec(implementation_key(597)) void ISARFunction::PutAccelerationFactor ( double Value );
__declspec(implementation_key(598)) double ISARFunction::GetMaxStep ( );
__declspec(implementation_key(599)) void ISARFunction::PutMaxStep ( double Value );
__declspec(implementation_key(600)) long IBlurFilter::GetAmount ( );
__declspec(implementation_key(601)) void IBlurFilter::PutAmount ( long Value );
__declspec(implementation_key(602)) long IBlurFilter::GetSteps ( );
__declspec(implementation_key(603)) void IBlurFilter::PutSteps ( long Value );
__declspec(implementation_key(604)) long IResizeFilter::GetWidth ( );
__declspec(implementation_key(605)) void IResizeFilter::PutWidth ( long Value );
__declspec(implementation_key(606)) long IResizeFilter::GetHeight ( );
__declspec(implementation_key(607)) void IResizeFilter::PutHeight ( long Value );
__declspec(implementation_key(608)) long ICropFilter::GetLeft ( );
__declspec(implementation_key(609)) void ICropFilter::PutLeft ( long Value );
__declspec(implementation_key(610)) long ICropFilter::GetTop ( );
__declspec(implementation_key(611)) void ICropFilter::PutTop ( long Value );
__declspec(implementation_key(612)) enum EGrayMethod IGrayScaleFilter::GetMethod ( );
__declspec(implementation_key(613)) void IGrayScaleFilter::PutMethod ( enum EGrayMethod Value );
__declspec(implementation_key(614)) VARIANT_BOOL IAmountFilter::GetPercent ( );
__declspec(implementation_key(615)) void IAmountFilter::PutPercent ( VARIANT_BOOL Value );
__declspec(implementation_key(616)) long IAmountFilter::GetAmount ( );
__declspec(implementation_key(617)) void IAmountFilter::PutAmount ( long Value );
__declspec(implementation_key(618)) long IColorFilter::GetRed ( );
__declspec(implementation_key(619)) void IColorFilter::PutRed ( long Value );
__declspec(implementation_key(620)) long IColorFilter::GetGreen ( );
__declspec(implementation_key(621)) void IColorFilter::PutGreen ( long Value );
__declspec(implementation_key(622)) long IColorFilter::GetBlue ( );
__declspec(implementation_key(623)) void IColorFilter::PutBlue ( long Value );
__declspec(implementation_key(624)) long IHueLumSatFilter::GetHue ( );
__declspec(implementation_key(625)) void IHueLumSatFilter::PutHue ( long Value );
__declspec(implementation_key(626)) long IHueLumSatFilter::GetLuminance ( );
__declspec(implementation_key(627)) void IHueLumSatFilter::PutLuminance ( long Value );
__declspec(implementation_key(628)) long IHueLumSatFilter::GetSaturation ( );
__declspec(implementation_key(629)) void IHueLumSatFilter::PutSaturation ( long Value );
__declspec(implementation_key(630)) double IRotateFilter::GetAngle ( );
__declspec(implementation_key(631)) void IRotateFilter::PutAngle ( double Value );
__declspec(implementation_key(632)) VARIANT_BOOL IRotateFilter::GetAutoSize ( );
__declspec(implementation_key(633)) void IRotateFilter::PutAutoSize ( VARIANT_BOOL Value );
__declspec(implementation_key(634)) OLE_COLOR IRotateFilter::GetBackColor ( );
__declspec(implementation_key(635)) void IRotateFilter::PutBackColor ( OLE_COLOR Value );
__declspec(implementation_key(636)) enum EMirrorDirection IMirrorFilter::GetDirection ( );
__declspec(implementation_key(637)) void IMirrorFilter::PutDirection ( enum EMirrorDirection Value );
__declspec(implementation_key(638)) long ITileFilter::GetNumCols ( );
__declspec(implementation_key(639)) void ITileFilter::PutNumCols ( long Value );
__declspec(implementation_key(640)) long ITileFilter::GetNumRows ( );
__declspec(implementation_key(641)) void ITileFilter::PutNumRows ( long Value );
__declspec(implementation_key(642)) long IBevelFilter::GetBright ( );
__declspec(implementation_key(643)) void IBevelFilter::PutBright ( long Value );
__declspec(implementation_key(644)) long IBevelFilter::GetSize ( );
__declspec(implementation_key(645)) void IBevelFilter::PutSize ( long Value );
__declspec(implementation_key(646)) double IZoomFilter::GetPercent ( );
__declspec(implementation_key(647)) void IZoomFilter::PutPercent ( double Value );
__declspec(implementation_key(648)) VARIANT_BOOL IZoomFilter::GetSmooth ( );
__declspec(implementation_key(649)) void IZoomFilter::PutSmooth ( VARIANT_BOOL Value );
__declspec(implementation_key(650)) VARIANT_BOOL ITeeFilter::GetEnabled ( );
__declspec(implementation_key(651)) void ITeeFilter::PutEnabled ( VARIANT_BOOL Value );
__declspec(implementation_key(652)) IFilterRegionPtr ITeeFilter::GetRegion ( );
__declspec(implementation_key(653)) IResizeFilterPtr ITeeFilter::GetasResize ( );
__declspec(implementation_key(654)) ICropFilterPtr ITeeFilter::GetasCrop ( );
__declspec(implementation_key(655)) IGrayScaleFilterPtr ITeeFilter::GetasGrayScale ( );
__declspec(implementation_key(656)) IMosaicFilterPtr ITeeFilter::GetasMosaic ( );
__declspec(implementation_key(657)) IColorFilterPtr ITeeFilter::GetasColor ( );
__declspec(implementation_key(658)) IHueLumSatFilterPtr ITeeFilter::GetasHueLumSat ( );
__declspec(implementation_key(659)) IRotateFilterPtr ITeeFilter::GetasRotate ( );
__declspec(implementation_key(660)) IMirrorFilterPtr ITeeFilter::GetasMirror ( );
__declspec(implementation_key(661)) IBlurFilterPtr ITeeFilter::GetasBlur ( );
__declspec(implementation_key(662)) IBrightnessFilterPtr ITeeFilter::GetasBrightness ( );
__declspec(implementation_key(663)) IContrastFilterPtr ITeeFilter::GetasContrast ( );
__declspec(implementation_key(664)) IGammaCorrectionFilterPtr ITeeFilter::GetasGammaCorrection ( );
__declspec(implementation_key(665)) IAmountFilterPtr ITeeFilter::GetasAmount ( );
__declspec(implementation_key(666)) ISharpenFilterPtr ITeeFilter::GetasSharpen ( );
__declspec(implementation_key(667)) IEmbossFilterPtr ITeeFilter::GetasEmboss ( );
__declspec(implementation_key(668)) ISoftenFilterPtr ITeeFilter::GetasSoften ( );
__declspec(implementation_key(669)) ITileFilterPtr ITeeFilter::GetasTile ( );
__declspec(implementation_key(670)) IBevelFilterPtr ITeeFilter::GetasBevel ( );
__declspec(implementation_key(671)) IZoomFilterPtr ITeeFilter::GetasZoom ( );
__declspec(implementation_key(672)) long IFilterItems::Add ( enum EFilterClass FilterClass );
__declspec(implementation_key(673)) HRESULT IFilterItems::LoadImage ( _bstr_t FileName );
__declspec(implementation_key(674)) ITeeFilterPtr IFilterItems::GetItem ( long Index );
__declspec(implementation_key(675)) HRESULT IFilterItems::AssignImage ( long ImageHandle );
__declspec(implementation_key(676)) OLE_COLOR IGLLight::GetColor ( );
__declspec(implementation_key(677)) void IGLLight::PutColor ( OLE_COLOR Value );
__declspec(implementation_key(678)) VARIANT_BOOL IGLLight::GetVisible ( );
__declspec(implementation_key(679)) void IGLLight::PutVisible ( VARIANT_BOOL Value );
__declspec(implementation_key(680)) double IGLPosition::GetX ( );
__declspec(implementation_key(681)) void IGLPosition::PutX ( double Value );
__declspec(implementation_key(682)) double IGLPosition::GetY ( );
__declspec(implementation_key(683)) void IGLPosition::PutY ( double Value );
__declspec(implementation_key(684)) double IGLPosition::GetZ ( );
__declspec(implementation_key(685)) void IGLPosition::PutZ ( double Value );
__declspec(implementation_key(686)) IGLPositionPtr IGLLightSource::GetDirection ( );
__declspec(implementation_key(687)) VARIANT_BOOL IGLLightSource::GetFixedPosition ( );
__declspec(implementation_key(688)) void IGLLightSource::PutFixedPosition ( VARIANT_BOOL Value );
__declspec(implementation_key(689)) IGLPositionPtr IGLLightSource::GetPosition ( );
__declspec(implementation_key(690)) double IGLLightSource::GetSpotDegrees ( );
__declspec(implementation_key(691)) void IGLLightSource::PutSpotDegrees ( double Value );
__declspec(implementation_key(692)) VARIANT_BOOL IGLLightSource::GetUseDirection ( );
__declspec(implementation_key(693)) void IGLLightSource::PutUseDirection ( VARIANT_BOOL Value );
__declspec(implementation_key(694)) VARIANT_BOOL ITeeOpenGL::GetActive ( );
__declspec(implementation_key(695)) void ITeeOpenGL::PutActive ( VARIANT_BOOL Value );
__declspec(implementation_key(696)) long ITeeOpenGL::GetAmbientLight ( );
__declspec(implementation_key(697)) void ITeeOpenGL::PutAmbientLight ( long Value );
__declspec(implementation_key(698)) ITeePoint3DPtr ITeeOpenGL::GetLightPosition ( );
__declspec(implementation_key(699)) OLE_COLOR ITeeOpenGL::GetLightColor ( );
__declspec(implementation_key(700)) void ITeeOpenGL::PutLightColor ( OLE_COLOR Value );
__declspec(implementation_key(701)) VARIANT_BOOL ITeeOpenGL::GetFontOutlines ( );
__declspec(implementation_key(702)) void ITeeOpenGL::PutFontOutlines ( VARIANT_BOOL Value );
__declspec(implementation_key(703)) VARIANT_BOOL ITeeOpenGL::GetShadeQuality ( );
__declspec(implementation_key(704)) void ITeeOpenGL::PutShadeQuality ( VARIANT_BOOL Value );
__declspec(implementation_key(705)) VARIANT_BOOL ITeeOpenGL::GetAntialias ( );
__declspec(implementation_key(706)) void ITeeOpenGL::PutAntialias ( VARIANT_BOOL Value );
__declspec(implementation_key(707)) long ITeeOpenGL::GetFontExtrusion ( );
__declspec(implementation_key(708)) void ITeeOpenGL::PutFontExtrusion ( long Value );
__declspec(implementation_key(709)) IGLLightSourcePtr ITeeOpenGL::GetLight ( );
__declspec(implementation_key(710)) IGLLightSourcePtr ITeeOpenGL::GetLight1 ( );
__declspec(implementation_key(711)) IGLLightSourcePtr ITeeOpenGL::GetLight2 ( );
__declspec(implementation_key(712)) double ITeeOpenGL::GetShininess ( );
__declspec(implementation_key(713)) void ITeeOpenGL::PutShininess ( double Value );
__declspec(implementation_key(714)) HRESULT ITeeOpenGL::ShowEditor ( );
__declspec(implementation_key(715)) VARIANT_BOOL IAspect::GetApplyZOrder ( );
__declspec(implementation_key(716)) void IAspect::PutApplyZOrder ( VARIANT_BOOL ApplyZOrder );
__declspec(implementation_key(717)) long IAspect::GetChart3DPercent ( );
__declspec(implementation_key(718)) void IAspect::PutChart3DPercent ( long Chart3DPercent );
__declspec(implementation_key(719)) long IAspect::GetHeight3D ( );
__declspec(implementation_key(720)) VARIANT_BOOL IAspect::GetView3D ( );
__declspec(implementation_key(721)) void IAspect::PutView3D ( VARIANT_BOOL View3D );
__declspec(implementation_key(722)) long IAspect::GetWidth3D ( );
__declspec(implementation_key(723)) long IAspect::GetRotation ( );
__declspec(implementation_key(724)) void IAspect::PutRotation ( long RotationX );
__declspec(implementation_key(725)) long IAspect::GetElevation ( );
__declspec(implementation_key(726)) void IAspect::PutElevation ( long RotationY );
__declspec(implementation_key(727)) long IAspect::GetZoom ( );
__declspec(implementation_key(728)) void IAspect::PutZoom ( long Zoom );
__declspec(implementation_key(729)) VARIANT_BOOL IAspect::GetZoomText ( );
__declspec(implementation_key(730)) void IAspect::PutZoomText ( VARIANT_BOOL Value );
__declspec(implementation_key(731)) long IAspect::GetHorizOffset ( );
__declspec(implementation_key(732)) void IAspect::PutHorizOffset ( long Value );
__declspec(implementation_key(733)) long IAspect::GetVertOffset ( );
__declspec(implementation_key(734)) void IAspect::PutVertOffset ( long Value );
__declspec(implementation_key(735)) long IAspect::GetTilt ( );
__declspec(implementation_key(736)) void IAspect::PutTilt ( long Value );
__declspec(implementation_key(737)) VARIANT_BOOL IAspect::GetOrthogonal ( );
__declspec(implementation_key(738)) void IAspect::PutOrthogonal ( VARIANT_BOOL Value );
__declspec(implementation_key(739)) long IAspect::GetPerspective ( );
__declspec(implementation_key(740)) void IAspect::PutPerspective ( long Value );
__declspec(implementation_key(741)) ITeeOpenGLPtr IAspect::GetOpenGL ( );
__declspec(implementation_key(742)) long IAspect::GetOrthoAngle ( );
__declspec(implementation_key(743)) void IAspect::PutOrthoAngle ( long Value );
__declspec(implementation_key(744)) double IAspect::GetElevationFloat ( );
__declspec(implementation_key(745)) void IAspect::PutElevationFloat ( double Value );
__declspec(implementation_key(746)) double IAspect::GetRotationFloat ( );
__declspec(implementation_key(747)) void IAspect::PutRotationFloat ( double Value );
__declspec(implementation_key(748)) long IAspect::GetFontZoom ( );
__declspec(implementation_key(749)) void IAspect::PutFontZoom ( long Value );
__declspec(implementation_key(750)) long IAxisGridPen::GetDrawEvery ( );
__declspec(implementation_key(751)) void IAxisGridPen::PutDrawEvery ( long Value );
__declspec(implementation_key(752)) double IAxisGridPen::GetZPosition ( );
__declspec(implementation_key(753)) void IAxisGridPen::PutZPosition ( double Value );
__declspec(implementation_key(754)) OLE_COLOR IPen::GetColor ( );
__declspec(implementation_key(755)) void IPen::PutColor ( OLE_COLOR Color );
__declspec(implementation_key(756)) long IPen::GetWidth ( );
__declspec(implementation_key(757)) void IPen::PutWidth ( long Width );
__declspec(implementation_key(758)) enum EChartPenStyle IPen::GetStyle ( );
__declspec(implementation_key(759)) void IPen::PutStyle ( enum EChartPenStyle Style );
__declspec(implementation_key(760)) VARIANT_BOOL IPen::GetVisible ( );
__declspec(implementation_key(761)) void IPen::PutVisible ( VARIANT_BOOL Visible );
__declspec(implementation_key(762)) enum EPenEndStyle IPen::GetEndStyle ( );
__declspec(implementation_key(763)) void IPen::PutEndStyle ( enum EPenEndStyle Value );
__declspec(implementation_key(764)) HRESULT IPen::ShowEditor ( VARIANT_BOOL HideColor, _bstr_t Title );
__declspec(implementation_key(765)) long IPen::GetSmallSpace ( );
__declspec(implementation_key(766)) void IPen::PutSmallSpace ( long Value );
__declspec(implementation_key(767)) enum EPenMode IPen::GetMode ( );
__declspec(implementation_key(768)) void IPen::PutMode ( enum EPenMode Value );
__declspec(implementation_key(769)) HRESULT IPen::Show ( );
__declspec(implementation_key(770)) HRESULT IPen::Hide ( );
__declspec(implementation_key(771)) IBrushPtr ICanvas::GetBrush ( );
__declspec(implementation_key(772)) IPenPtr ICanvas::GetPen ( );
__declspec(implementation_key(773)) HRESULT ICanvas::LineTo ( long X, long Y );
__declspec(implementation_key(774)) HRESULT ICanvas::MoveTo ( long X, long Y );
__declspec(implementation_key(775)) HRESULT ICanvas::Rectangle ( long Left, long Top, long Right, long Bottom );
__declspec(implementation_key(776)) IChartFontPtr ICanvas::GetFont ( );
__declspec(implementation_key(777)) HRESULT ICanvas::Arc ( long X1, long Y1, long X2, long Y2, long X3, long Y3, long X4, long Y4 );
__declspec(implementation_key(778)) HRESULT ICanvas::Ellipse ( long X1, long Y1, long X2, long Y2 );
__declspec(implementation_key(779)) HRESULT ICanvas::TextOut ( long X, long Y, _bstr_t Text );
__declspec(implementation_key(780)) long ICanvas::TextHeight ( _bstr_t SomeText );
__declspec(implementation_key(781)) long ICanvas::TextWidth ( _bstr_t SomeText );
__declspec(implementation_key(782)) HRESULT ICanvas::ClipRectangle ( long Left, long Top, long Right, long Bottom );
__declspec(implementation_key(783)) HRESULT ICanvas::UnClipRectangle ( );
__declspec(implementation_key(784)) HRESULT ICanvas::RotateLabel ( long X, long Y, _bstr_t St, long RotDegree );
__declspec(implementation_key(785)) VARIANT_BOOL ICanvas::IsScreenHighColor ( );
__declspec(implementation_key(786)) long ICanvas::GetTop ( );
__declspec(implementation_key(787)) long ICanvas::GetLeft ( );
__declspec(implementation_key(788)) long ICanvas::GetWidth ( );
__declspec(implementation_key(789)) long ICanvas::GetHeight ( );
__declspec(implementation_key(790)) enum ECanvasBackMode ICanvas::GetBackMode ( );
__declspec(implementation_key(791)) void ICanvas::PutBackMode ( enum ECanvasBackMode Value );
__declspec(implementation_key(792)) OLE_COLOR ICanvas::GetBackColor ( );
__declspec(implementation_key(793)) void ICanvas::PutBackColor ( OLE_COLOR Value );
__declspec(implementation_key(794)) VARIANT_BOOL ICanvas::GetSupportsFullRotation ( );
__declspec(implementation_key(795)) VARIANT_BOOL ICanvas::GetUseBuffer ( );
__declspec(implementation_key(796)) void ICanvas::PutUseBuffer ( VARIANT_BOOL Value );
__declspec(implementation_key(797)) HRESULT ICanvas::Pie3D ( long XCenter, long YCenter, long XRadius, long YRadius, long Z0, long Z1, double StartAngle, double EndAngle, VARIANT_BOOL DarkSides, VARIANT_BOOL DrawSides );
__declspec(implementation_key(798)) HRESULT ICanvas::LineWithZ ( long X0, long Y0, long X1, long Y1, long Z );
__declspec(implementation_key(799)) HRESULT ICanvas::MoveTo3D ( long X, long Y, long Z );
__declspec(implementation_key(800)) HRESULT ICanvas::LineTo3D ( long X, long Y, long Z );
__declspec(implementation_key(801)) HRESULT ICanvas::Plane3D ( long X0, long Y0, long X1, long Y1, long Z0, long Z1 );
__declspec(implementation_key(802)) HRESULT ICanvas::ZLine3D ( long X, long Y, long Z0, long Z1 );
__declspec(implementation_key(803)) HRESULT ICanvas::RotateLabel3D ( long X, long Y, long Z, _bstr_t St, long RotDegree );
__declspec(implementation_key(804)) enum ECanvasTextAlign ICanvas::GetTextAlign ( );
__declspec(implementation_key(805)) void ICanvas::PutTextAlign ( enum ECanvasTextAlign Value );
__declspec(implementation_key(806)) HRESULT ICanvas::VertLine3D ( long X, long Top, long Bottom, long Z );
__declspec(implementation_key(807)) HRESULT ICanvas::HorizLine3D ( long Left, long Right, long Y, long Z );
__declspec(implementation_key(808)) HRESULT ICanvas::Cylinder ( VARIANT_BOOL Vertical, long Left, long Top, long Right, long Bottom, long Z0, long Z1, VARIANT_BOOL DarkCover );
__declspec(implementation_key(809)) HRESULT ICanvas::Cube ( long Left, long Right, long Top, long Bottom, long Z0, long Z1, VARIANT_BOOL DarkSides );
__declspec(implementation_key(810)) HRESULT ICanvas::EllipseWithZ ( long X1, long Y1, long X2, long Y2, long Z );
__declspec(implementation_key(811)) HRESULT ICanvas::PlaneWithZ ( long X1, long Y1, long X2, long Y2, long X3, long Y3, long X4, long Y4, long Z );
__declspec(implementation_key(812)) HRESULT ICanvas::PlaneFour3D ( long X1, long Y1, long X2, long Y2, long X3, long Y3, long X4, long Y4, long Z0, long Z1 );
__declspec(implementation_key(813)) HRESULT ICanvas::RectangleWithZ ( long Left, long Top, long Right, long Bottom, long Z );
__declspec(implementation_key(814)) HRESULT ICanvas::RectangleZ ( long Left, long Top, long Bottom, long Z0, long Z1 );
__declspec(implementation_key(815)) HRESULT ICanvas::TextOut3D ( long X, long Y, long Z, _bstr_t Text );
__declspec(implementation_key(816)) HRESULT ICanvas::TriangleWithZ ( long X1, long Y1, long X2, long Y2, long X3, long Y3, long Z );
__declspec(implementation_key(817)) HRESULT ICanvas::Frame3D ( long Left, long Top, long Right, long Bottom, OLE_COLOR TopColor, OLE_COLOR BottomColor, long Width );
__declspec(implementation_key(818)) HRESULT ICanvas::EraseBackground ( long Left, long Top, long Right, long Bottom );
__declspec(implementation_key(819)) HRESULT ICanvas::GradientFill ( long Left, long Top, long Right, long Bottom, OLE_COLOR StartColor, OLE_COLOR EndColor, enum EGradientDirection Direction );
__declspec(implementation_key(820)) HRESULT ICanvas::Line ( long X0, long Y0, long X1, long Y1 );
__declspec(implementation_key(821)) HRESULT ICanvas::RectangleY ( long Left, long Top, long Right, long Z0, long Z1 );
__declspec(implementation_key(822)) HRESULT ICanvas::Pixels3D ( long X, long Y, long Z, OLE_COLOR Value );
__declspec(implementation_key(823)) _variant_t ICanvas::GetHandleDC ( );
__declspec(implementation_key(824)) HRESULT ICanvas::Cone ( VARIANT_BOOL Vertical, long Left, long Top, long Right, long Bottom, long Z0, long Z1, VARIANT_BOOL Dark3D, long ConePercent );
__declspec(implementation_key(825)) HRESULT ICanvas::Sphere ( long X, long Y, long Z, double Radius );
__declspec(implementation_key(826)) HRESULT ICanvas::Arrow ( VARIANT_BOOL Filled, long X0, long Y0, long X1, long Y1, long HeadWidth, long HeadHeight, long Z );
__declspec(implementation_key(827)) HRESULT ICanvas::Draw ( long X, long Y, struct IPicture * Image );
__declspec(implementation_key(828)) ITeePoint3DPtr ICanvas::GetRotationCenter ( );
__declspec(implementation_key(829)) long ICanvas::GetChartXCenter ( );
__declspec(implementation_key(830)) long ICanvas::GetChartYCenter ( );
__declspec(implementation_key(831)) HRESULT ICanvas::GrayScale ( VARIANT_BOOL Inverted );
__declspec(implementation_key(832)) HRESULT ICanvas::Polyline ( long ArraySize, const _variant_t & XArray, const _variant_t & YArray, long Z );
__declspec(implementation_key(833)) HRESULT ICanvas::RotatedEllipse ( long Left, long Top, long Right, long Bottom, long Z, double Angle );
__declspec(implementation_key(834)) HRESULT ICanvas::StretchDraw ( long Left, long Top, long Right, long Bottom, struct IPicture * Image );
__declspec(implementation_key(835)) HRESULT ICanvas::StretchDrawZ ( long Left, long Top, long Right, long Bottom, struct IPicture * Image, long Z );
__declspec(implementation_key(836)) HRESULT ICanvas::Pie ( long X1, long Y1, long X2, long Y2, long X3, long Y3, long X4, long Y4 );
__declspec(implementation_key(837)) HRESULT ICanvas::PolygonWithZ ( long ArraySize, const _variant_t & XArray, const _variant_t & YArray, long Z );
__declspec(implementation_key(838)) VARIANT_BOOL ICanvas::GetUseAntiAlias ( );
__declspec(implementation_key(839)) void ICanvas::PutUseAntiAlias ( VARIANT_BOOL Value );
__declspec(implementation_key(840)) HRESULT ICanvas::Polygon ( long NumPoints, const _variant_t & Points );
__declspec(implementation_key(841)) HRESULT ICanvas::DrawBevel ( enum EPanelBevel Value, long Left, long Top, long Right, long Bottom, long Size );
__declspec(implementation_key(842)) OLE_COLOR ICanvas::ApplyDark ( OLE_COLOR Color, long HowMuch );
__declspec(implementation_key(843)) HRESULT ICanvas::DrawLine ( long X0, long Y0, long X1, long Y1 );
__declspec(implementation_key(844)) VARIANT_BOOL ICanvas::GetTeeCheckPenWidth ( );
__declspec(implementation_key(845)) VARIANT_BOOL ICanvas::GetMetafiling ( );
__declspec(implementation_key(846)) void ICanvas::PutMetafiling ( VARIANT_BOOL Value );
__declspec(implementation_key(847)) VARIANT_BOOL ICanvas::GetMonochrome ( );
__declspec(implementation_key(848)) void ICanvas::PutMonochrome ( VARIANT_BOOL Value );
__declspec(implementation_key(849)) HRESULT ICanvas::AssignBrush ( long ABrush );
__declspec(implementation_key(850)) long ICanvas::GetFontHeight ( );
__declspec(implementation_key(851)) OLE_COLOR ICanvas::GetGetPixels3D ( long X, long Y, long Z );
__declspec(implementation_key(852)) HRESULT ICanvas::Pixels ( long X, long Y, OLE_COLOR Value );
__declspec(implementation_key(853)) OLE_COLOR ICanvas::GetGetPixels ( long X, long Y );
__declspec(implementation_key(854)) VARIANT_BOOL ICanvas::GetSupports3DText ( );
__declspec(implementation_key(855)) HRESULT ICanvas::ClipRoundRectangle ( long Left, long Top, long Right, long Bottom, long RoundSize );
__declspec(implementation_key(856)) HRESULT ICanvas::ClipEllipse ( long Left, long Top, long Right, long Bottom );
__declspec(implementation_key(857)) HRESULT ICanvas::ClipPolygon ( VARIANT * Points, long NumPoints );
__declspec(implementation_key(858)) HRESULT ICanvas::PolygonGradient ( long ArraySize, VARIANT * Points, OLE_COLOR StartColor, OLE_COLOR MiddleColor, OLE_COLOR EndColor, enum EGradientDirection Direction );
__declspec(implementation_key(859)) VARIANT_BOOL IZoom::GetEnable ( );
__declspec(implementation_key(860)) void IZoom::PutEnable ( VARIANT_BOOL Enable );
__declspec(implementation_key(861)) VARIANT_BOOL IZoom::GetAnimated ( );
__declspec(implementation_key(862)) void IZoom::PutAnimated ( VARIANT_BOOL Animated );
__declspec(implementation_key(863)) long IZoom::GetAnimatedSteps ( );
__declspec(implementation_key(864)) void IZoom::PutAnimatedSteps ( long AnimatedSteps );
__declspec(implementation_key(865)) HRESULT IZoom::Undo ( );
__declspec(implementation_key(866)) HRESULT IZoom::ZoomRect ( long Left, long Top, long Right, long Bottom );
__declspec(implementation_key(867)) VARIANT_BOOL IZoom::GetZoomed ( );
__declspec(implementation_key(868)) IPenPtr IZoom::GetPen ( );
__declspec(implementation_key(869)) long IZoom::GetMinimumPixels ( );
__declspec(implementation_key(870)) void IZoom::PutMinimumPixels ( long Value );
__declspec(implementation_key(871)) enum EMouseButton IZoom::GetMouseButton ( );
__declspec(implementation_key(872)) void IZoom::PutMouseButton ( enum EMouseButton Value );
__declspec(implementation_key(873)) enum ETeeZoomDirection IZoom::GetDirection ( );
__declspec(implementation_key(874)) void IZoom::PutDirection ( enum ETeeZoomDirection Value );
__declspec(implementation_key(875)) IBrushPtr IZoom::GetBrush ( );
__declspec(implementation_key(876)) HRESULT IZoom::ZoomPercent ( double PercentZoom );
__declspec(implementation_key(877)) VARIANT_BOOL IZoom::GetUpLeftZooms ( );
__declspec(implementation_key(878)) void IZoom::PutUpLeftZooms ( VARIANT_BOOL Value );
__declspec(implementation_key(879)) long ICustom3DSeries::AddXYZ ( double AX, double AY, double AZ, _bstr_t AXLabel, OLE_COLOR Value );
__declspec(implementation_key(880)) double ICustom3DSeries::MaxZValue ( );
__declspec(implementation_key(881)) double ICustom3DSeries::MinZValue ( );
__declspec(implementation_key(882)) long ICustom3DSeries::GetTimesZOrder ( );
__declspec(implementation_key(883)) void ICustom3DSeries::PutTimesZOrder ( long TimesZOrder );
__declspec(implementation_key(884)) IValueListPtr ICustom3DSeries::GetZValues ( );
__declspec(implementation_key(885)) double ICustom3DSeries::GetZValue ( long Index );
__declspec(implementation_key(886)) void ICustom3DSeries::PutZValue ( long Index, double Value );
__declspec(implementation_key(887)) IBrushPtr ICustom3DSeries::GetBrush ( );
__declspec(implementation_key(888)) IPenPtr ICustom3DSeries::GetPen ( );
__declspec(implementation_key(889)) HRESULT ICustom3DSeries::AddArrayXYZ ( const _variant_t & XArray, const _variant_t & YArray, const _variant_t & ZArray );
__declspec(implementation_key(890)) HRESULT ICustom3DSeries::AddArrayGrid ( long NumX, long NumZ, const _variant_t & XZArray );
__declspec(implementation_key(891)) long ICustom3DSeries::CalcZPos ( long ValueIndex );
__declspec(implementation_key(892)) IValueListPtr IVolumeSeries::GetVolumeValues ( );
__declspec(implementation_key(893)) IPenPtr IVolumeSeries::GetLinePen ( );
__declspec(implementation_key(894)) VARIANT_BOOL IVolumeSeries::GetUseYOrigin ( );
__declspec(implementation_key(895)) void IVolumeSeries::PutUseYOrigin ( VARIANT_BOOL Value );
__declspec(implementation_key(896)) double IVolumeSeries::GetYOrigin ( );
__declspec(implementation_key(897)) void IVolumeSeries::PutYOrigin ( double Value );
__declspec(implementation_key(898)) long ICustom3DPaletteSeries::AddPalette ( double Value, OLE_COLOR Color );
__declspec(implementation_key(899)) OLE_COLOR ICustom3DPaletteSeries::GetStartColor ( );
__declspec(implementation_key(900)) void ICustom3DPaletteSeries::PutStartColor ( OLE_COLOR Value );
__declspec(implementation_key(901)) OLE_COLOR ICustom3DPaletteSeries::GetEndColor ( );
__declspec(implementation_key(902)) void ICustom3DPaletteSeries::PutEndColor ( OLE_COLOR Value );
__declspec(implementation_key(903)) long ICustom3DPaletteSeries::GetPaletteSteps ( );
__declspec(implementation_key(904)) void ICustom3DPaletteSeries::PutPaletteSteps ( long Value );
__declspec(implementation_key(905)) VARIANT_BOOL ICustom3DPaletteSeries::GetUsePalette ( );
__declspec(implementation_key(906)) void ICustom3DPaletteSeries::PutUsePalette ( VARIANT_BOOL Value );
__declspec(implementation_key(907)) VARIANT_BOOL ICustom3DPaletteSeries::GetUseColorRange ( );
__declspec(implementation_key(908)) void ICustom3DPaletteSeries::PutUseColorRange ( VARIANT_BOOL Value );
__declspec(implementation_key(909)) HRESULT ICustom3DPaletteSeries::ClearPalette ( );
__declspec(implementation_key(910)) HRESULT ICustom3DPaletteSeries::CreateDefaultPalette ( long NumSteps );
__declspec(implementation_key(911)) OLE_COLOR ICustom3DPaletteSeries::GetSurfacePaletteColor ( double Y );
__declspec(implementation_key(912)) OLE_COLOR ICustom3DPaletteSeries::GetMidColor ( );
__declspec(implementation_key(913)) void ICustom3DPaletteSeries::PutMidColor ( OLE_COLOR Value );
__declspec(implementation_key(914)) HRESULT ICustom3DPaletteSeries::CreateRangePalette ( );
__declspec(implementation_key(915)) enum EPaletteStyle ICustom3DPaletteSeries::GetPaletteStyle ( );
__declspec(implementation_key(916)) void ICustom3DPaletteSeries::PutPaletteStyle ( enum EPaletteStyle Value );
__declspec(implementation_key(917)) VARIANT_BOOL ICustom3DPaletteSeries::GetUsePaletteMin ( );
__declspec(implementation_key(918)) void ICustom3DPaletteSeries::PutUsePaletteMin ( VARIANT_BOOL Value );
__declspec(implementation_key(919)) double ICustom3DPaletteSeries::GetPaletteMin ( );
__declspec(implementation_key(920)) void ICustom3DPaletteSeries::PutPaletteMin ( double Value );
__declspec(implementation_key(921)) double ICustom3DPaletteSeries::GetPaletteStep ( );
__declspec(implementation_key(922)) void ICustom3DPaletteSeries::PutPaletteStep ( double Value );
__declspec(implementation_key(923)) HRESULT ICustom3DPaletteSeries::InvertPalette ( );
__declspec(implementation_key(924)) HRESULT ICustom3DPaletteSeries::AddCustomPalette ( const _variant_t & colorArray );
__declspec(implementation_key(925)) long ICustom3DGridSeries::GetNumXValues ( );
__declspec(implementation_key(926)) void ICustom3DGridSeries::PutNumXValues ( long Value );
__declspec(implementation_key(927)) long ICustom3DGridSeries::GetNumZValues ( );
__declspec(implementation_key(928)) void ICustom3DGridSeries::PutNumZValues ( long Value );
__declspec(implementation_key(929)) double ICustom3DGridSeries::GetXZValue ( long X, long Z );
__declspec(implementation_key(930)) VARIANT_BOOL ICustom3DGridSeries::GetIrregularGrid ( );
__declspec(implementation_key(931)) void ICustom3DGridSeries::PutIrregularGrid ( VARIANT_BOOL Value );
__declspec(implementation_key(932)) HRESULT ICustom3DGridSeries::SmoothGrid3D ( );
__declspec(implementation_key(933)) VARIANT_BOOL ICustom3DGridSeries::GetReuseGridIndex ( );
__declspec(implementation_key(934)) void ICustom3DGridSeries::PutReuseGridIndex ( VARIANT_BOOL Value );
__declspec(implementation_key(935)) HRESULT ICustom3DGridSeries::FillGridIndex ( long StartIndex );
__declspec(implementation_key(936)) IBrushPtr INearestTool::GetBrush ( );
__declspec(implementation_key(937)) VARIANT_BOOL INearestTool::GetDrawLine ( );
__declspec(implementation_key(938)) void INearestTool::PutDrawLine ( VARIANT_BOOL Value );
__declspec(implementation_key(939)) VARIANT_BOOL INearestTool::GetFullRepaint ( );
__declspec(implementation_key(940)) void INearestTool::PutFullRepaint ( VARIANT_BOOL Value );
__declspec(implementation_key(941)) IPenPtr INearestTool::GetPen ( );
__declspec(implementation_key(942)) long INearestTool::GetSize ( );
__declspec(implementation_key(943)) void INearestTool::PutSize ( long Value );
__declspec(implementation_key(944)) enum ENearestToolStyle INearestTool::GetStyle ( );
__declspec(implementation_key(945)) void INearestTool::PutStyle ( enum ENearestToolStyle Value );
__declspec(implementation_key(946)) long INearestTool::GetPoint ( );
__declspec(implementation_key(947)) void INearestTool::PutPoint ( long Value );
__declspec(implementation_key(948)) IPenPtr IColorLineTool::GetPen ( );
__declspec(implementation_key(949)) double IColorLineTool::GetValue ( );
__declspec(implementation_key(950)) void IColorLineTool::PutValue ( double Value );
__declspec(implementation_key(951)) VARIANT_BOOL IColorLineTool::GetAllowDrag ( );
__declspec(implementation_key(952)) void IColorLineTool::PutAllowDrag ( VARIANT_BOOL Value );
__declspec(implementation_key(953)) VARIANT_BOOL IColorLineTool::Clicked ( long X, long Y );
__declspec(implementation_key(954)) VARIANT_BOOL IColorLineTool::GetDragRepaint ( );
__declspec(implementation_key(955)) void IColorLineTool::PutDragRepaint ( VARIANT_BOOL Value );
__declspec(implementation_key(956)) VARIANT_BOOL IColorLineTool::GetNoLimitDrag ( );
__declspec(implementation_key(957)) void IColorLineTool::PutNoLimitDrag ( VARIANT_BOOL Value );
__declspec(implementation_key(958)) VARIANT_BOOL IColorLineTool::GetDraw3D ( );
__declspec(implementation_key(959)) void IColorLineTool::PutDraw3D ( VARIANT_BOOL Value );
__declspec(implementation_key(960)) enum EColorLineStyle IColorLineTool::GetStyle ( );
__declspec(implementation_key(961)) void IColorLineTool::PutStyle ( enum EColorLineStyle Value );
__declspec(implementation_key(962)) VARIANT_BOOL IColorLineTool::GetDrawBehind ( );
__declspec(implementation_key(963)) void IColorLineTool::PutDrawBehind ( VARIANT_BOOL Value );
__declspec(implementation_key(964)) OLE_COLOR IContourLevel::GetColor ( );
__declspec(implementation_key(965)) void IContourLevel::PutColor ( OLE_COLOR Value );
__declspec(implementation_key(966)) double IContourLevel::GetUpToValue ( );
__declspec(implementation_key(967)) void IContourLevel::PutUpToValue ( double Value );
__declspec(implementation_key(968)) ILevelSegmentPtr IContourLevel::GetSegments ( long Index );
__declspec(implementation_key(969)) long IContourLevel::GetNumSegments ( );
__declspec(implementation_key(970)) IPenPtr IContourLevel::GetPen ( );
__declspec(implementation_key(971)) HRESULT IContourLevel::ClearSegments ( );
__declspec(implementation_key(972)) VARIANT_BOOL IContourLevel::Clicked ( long XCoord, long YCoord, long * SegmentIndex, long * PointIndex );
__declspec(implementation_key(973)) VARIANT_BOOL IContourLevel::ClickedSegment ( long XCoord, long YCoord, long SegmentIndex, long * PointIndex );
__declspec(implementation_key(974)) VARIANT_BOOL IContourLevel::GetDefaultPen ( );
__declspec(implementation_key(975)) IContourLevelPtr IContourLevels::GetItems ( long Index );
__declspec(implementation_key(976)) long IContourLevels::Clicked ( long XCoord, long YCoord, long * SegmentIndex, long * PointIndex );
__declspec(implementation_key(977)) long IContourLevels::AddLevel ( double LevelValue, OLE_COLOR Color );
__declspec(implementation_key(978)) IPenPtr ITriSurfaceSeries::GetBorder ( );
__declspec(implementation_key(979)) VARIANT_BOOL ITriSurfaceSeries::GetHideTriangles ( );
__declspec(implementation_key(980)) void ITriSurfaceSeries::PutHideTriangles ( VARIANT_BOOL Value );
__declspec(implementation_key(981)) VARIANT_BOOL ITriSurfaceSeries::GetCacheTriangles ( );
__declspec(implementation_key(982)) void ITriSurfaceSeries::PutCacheTriangles ( VARIANT_BOOL Value );
__declspec(implementation_key(983)) IPenPtr IHistogramSeries::GetLinesPen ( );
__declspec(implementation_key(984)) long IHistogramSeries::GetTransparency ( );
__declspec(implementation_key(985)) void IHistogramSeries::PutTransparency ( long Value );
__declspec(implementation_key(986)) IPenPtr IHistogramSeries::GetLinePen ( );
__declspec(implementation_key(987)) IBrushPtr IHistogramSeries::GetBrush ( );
__declspec(implementation_key(988)) VARIANT_BOOL ICursorTool::GetFollowMouse ( );
__declspec(implementation_key(989)) void ICursorTool::PutFollowMouse ( VARIANT_BOOL Value );
__declspec(implementation_key(990)) IPenPtr ICursorTool::GetPen ( );
__declspec(implementation_key(991)) VARIANT_BOOL ICursorTool::GetSnap ( );
__declspec(implementation_key(992)) void ICursorTool::PutSnap ( VARIANT_BOOL Value );
__declspec(implementation_key(993)) enum ECursorToolStyle ICursorTool::GetStyle ( );
__declspec(implementation_key(994)) void ICursorTool::PutStyle ( enum ECursorToolStyle Value );
__declspec(implementation_key(995)) double ICursorTool::GetXVal ( );
__declspec(implementation_key(996)) void ICursorTool::PutXVal ( double Value );
__declspec(implementation_key(997)) double ICursorTool::GetYVal ( );
__declspec(implementation_key(998)) void ICursorTool::PutYVal ( double Value );
__declspec(implementation_key(999)) long ICursorTool::GetClickTolerance ( );
__declspec(implementation_key(1000)) void ICursorTool::PutClickTolerance ( long Value );
__declspec(implementation_key(1001)) long ICursorTool::GetHorizSize ( );
__declspec(implementation_key(1002)) void ICursorTool::PutHorizSize ( long Value );
__declspec(implementation_key(1003)) long ICursorTool::GetScopeSize ( );
__declspec(implementation_key(1004)) void ICursorTool::PutScopeSize ( long Value );
__declspec(implementation_key(1005)) enum EScopeCursorStyle ICursorTool::GetScopeStyle ( );
__declspec(implementation_key(1006)) void ICursorTool::PutScopeStyle ( enum EScopeCursorStyle Value );
__declspec(implementation_key(1007)) enum ESnapStyle ICursorTool::GetSnapStyle ( );
__declspec(implementation_key(1008)) void ICursorTool::PutSnapStyle ( enum ESnapStyle Value );
__declspec(implementation_key(1009)) VARIANT_BOOL ICursorTool::GetUseSeriesZ ( );
__declspec(implementation_key(1010)) void ICursorTool::PutUseSeriesZ ( VARIANT_BOOL Value );
__declspec(implementation_key(1011)) long ICursorTool::GetVertSize ( );
__declspec(implementation_key(1012)) void ICursorTool::PutVertSize ( long Value );
__declspec(implementation_key(1013)) VARIANT_BOOL ICursorTool::GetUseChartRect ( );
__declspec(implementation_key(1014)) void ICursorTool::PutUseChartRect ( VARIANT_BOOL Value );
__declspec(implementation_key(1015)) ITeePoint2DPtr IDrawLine::GetEndPos ( );
__declspec(implementation_key(1016)) ITeePoint2DPtr IDrawLine::GetStartPos ( );
__declspec(implementation_key(1017)) IPenPtr IDrawLine::GetPen ( );
__declspec(implementation_key(1018)) HRESULT IDrawLine::DrawHandles ( );
__declspec(implementation_key(1019)) struct TeeRect IDrawLine::EndHandle ( );
__declspec(implementation_key(1020)) struct TeeRect IDrawLine::StartHandle ( );
__declspec(implementation_key(1021)) enum EDrawLineStyle IDrawLine::GetStyle ( );
__declspec(implementation_key(1022)) void IDrawLine::PutStyle ( enum EDrawLineStyle Value );
__declspec(implementation_key(1023)) IDrawLinePtr IDrawLineList::GetItems ( long Index );
__declspec(implementation_key(1024)) _variant_t IDrawLineList::GetControlDefault ( long Index );
__declspec(implementation_key(1025)) HRESULT IDrawLineList::Clear ( );
__declspec(implementation_key(1026)) HRESULT IDrawLineList::Delete ( long Index );
__declspec(implementation_key(1027)) long IDrawLineList::GetCount ( );
__declspec(implementation_key(1028)) ITeePoint2DPtr IDrawLineTool::GetFromPoint ( );
__declspec(implementation_key(1029)) ITeePoint2DPtr IDrawLineTool::GetToPoint ( );
__declspec(implementation_key(1030)) ITeePoint2DPtr IDrawLineTool::AxisPoint ( double X, double Y );
__declspec(implementation_key(1031)) long IDrawLineTool::Clicked ( long X, long Y );
__declspec(implementation_key(1032)) HRESULT IDrawLineTool::DeleteSelected ( );
__declspec(implementation_key(1033)) ITeePoint2DPtr IDrawLineTool::ScreenPoint ( long X, long Y );
__declspec(implementation_key(1034)) IDrawLineListPtr IDrawLineTool::GetLines ( );
__declspec(implementation_key(1035)) long IDrawLineTool::GetSelected ( );
__declspec(implementation_key(1036)) void IDrawLineTool::PutSelected ( long Index );
__declspec(implementation_key(1037)) enum EMouseButton IDrawLineTool::GetButton ( );
__declspec(implementation_key(1038)) void IDrawLineTool::PutButton ( enum EMouseButton Value );
__declspec(implementation_key(1039)) VARIANT_BOOL IDrawLineTool::GetEnableDraw ( );
__declspec(implementation_key(1040)) void IDrawLineTool::PutEnableDraw ( VARIANT_BOOL Value );
__declspec(implementation_key(1041)) VARIANT_BOOL IDrawLineTool::GetEnableSelect ( );
__declspec(implementation_key(1042)) void IDrawLineTool::PutEnableSelect ( VARIANT_BOOL Value );
__declspec(implementation_key(1043)) IPenPtr IDrawLineTool::GetPen ( );
__declspec(implementation_key(1044)) long IDrawLineTool::AddLine ( double FromX, double FromY, double ToX, double ToY );
__declspec(implementation_key(1045)) long IDrawLineTool::GetClickTolerance ( );
__declspec(implementation_key(1046)) void IDrawLineTool::PutClickTolerance ( long Value );
__declspec(implementation_key(1047)) VARIANT_BOOL IDrawLineTool::GetSelectNewLines ( );
__declspec(implementation_key(1048)) void IDrawLineTool::PutSelectNewLines ( VARIANT_BOOL Value );
__declspec(implementation_key(1049)) enum EDrawLineStyle IDrawLineTool::GetStyle ( );
__declspec(implementation_key(1050)) void IDrawLineTool::PutStyle ( enum EDrawLineStyle Value );
__declspec(implementation_key(1051)) long IDrawLineTool::ClickedTolerance ( long X, long Y, long ClickTolerance );
__declspec(implementation_key(1052)) enum EAxisArrowToolPosition IAxisArrowTool::GetPosition ( );
__declspec(implementation_key(1053)) void IAxisArrowTool::PutPosition ( enum EAxisArrowToolPosition Value );
__declspec(implementation_key(1054)) IBrushPtr IAxisArrowTool::GetBrush ( );
__declspec(implementation_key(1055)) long IAxisArrowTool::GetLength ( );
__declspec(implementation_key(1056)) void IAxisArrowTool::PutLength ( long Value );
__declspec(implementation_key(1057)) IPenPtr IAxisArrowTool::GetPen ( );
__declspec(implementation_key(1058)) long IAxisArrowTool::GetScrollPercent ( );
__declspec(implementation_key(1059)) void IAxisArrowTool::PutScrollPercent ( long Value );
__declspec(implementation_key(1060)) VARIANT_BOOL IAxisArrowTool::GetScrollInverted ( );
__declspec(implementation_key(1061)) void IAxisArrowTool::PutScrollInverted ( VARIANT_BOOL Value );
__declspec(implementation_key(1062)) long IAxisArrowTool::GetHeadWidth ( );
__declspec(implementation_key(1063)) void IAxisArrowTool::PutHeadWidth ( long Value );
__declspec(implementation_key(1064)) long IAxisArrowTool::GetSizePercent ( );
__declspec(implementation_key(1065)) void IAxisArrowTool::PutSizePercent ( long Value );
__declspec(implementation_key(1066)) HRESULT IChartImageTool::ImageLoad ( _bstr_t FileName );
__declspec(implementation_key(1067)) HRESULT IChartImageTool::ImageClear ( );
__declspec(implementation_key(1068)) IPenPtr IChartImageTool::GetPen ( );
__declspec(implementation_key(1069)) long IFunnelSeries::AddSegment ( double AQuote, double AOpportunity, _bstr_t ALabel, OLE_COLOR AColor );
__declspec(implementation_key(1070)) HRESULT IFunnelSeries::Recalc ( );
__declspec(implementation_key(1071)) IBrushPtr IFunnelSeries::GetBrush ( );
__declspec(implementation_key(1072)) IPenPtr IFunnelSeries::GetPen ( );
__declspec(implementation_key(1073)) IPenPtr IFunnelSeries::GetLinesPen ( );
__declspec(implementation_key(1074)) VARIANT_BOOL IFunnelSeries::GetAutoUpdate ( );
__declspec(implementation_key(1075)) void IFunnelSeries::PutAutoUpdate ( VARIANT_BOOL Value );
__declspec(implementation_key(1076)) VARIANT_BOOL IFunnelSeries::GetQuotesSorted ( );
__declspec(implementation_key(1077)) void IFunnelSeries::PutQuotesSorted ( VARIANT_BOOL Value );
__declspec(implementation_key(1078)) double IFunnelSeries::GetDifferenceLimit ( );
__declspec(implementation_key(1079)) void IFunnelSeries::PutDifferenceLimit ( double Value );
__declspec(implementation_key(1080)) OLE_COLOR IFunnelSeries::GetAboveColor ( );
__declspec(implementation_key(1081)) void IFunnelSeries::PutAboveColor ( OLE_COLOR Value );
__declspec(implementation_key(1082)) OLE_COLOR IFunnelSeries::GetWithinColor ( );
__declspec(implementation_key(1083)) void IFunnelSeries::PutWithinColor ( OLE_COLOR Value );
__declspec(implementation_key(1084)) OLE_COLOR IFunnelSeries::GetBelowColor ( );
__declspec(implementation_key(1085)) void IFunnelSeries::PutBelowColor ( OLE_COLOR Value );
__declspec(implementation_key(1086)) IValueListPtr IFunnelSeries::GetOpportunityValues ( );
__declspec(implementation_key(1087)) IValueListPtr IFunnelSeries::GetQuoteValues ( );
__declspec(implementation_key(1088)) IPenPtr IPieTool::GetPen ( );
__declspec(implementation_key(1089)) enum EPieToolStyle IPieTool::GetStyle ( );
__declspec(implementation_key(1090)) void IPieTool::PutStyle ( enum EPieToolStyle Value );
__declspec(implementation_key(1091)) long IPieTool::GetSlice ( );
__declspec(implementation_key(1092)) long IVector3DSeries::AddVector ( double X0, double Y0, double Z0, double X1, double Y1, double Z1, _bstr_t ALabel, OLE_COLOR AColor );
__declspec(implementation_key(1093)) long IVector3DSeries::GetArrowHeight ( );
__declspec(implementation_key(1094)) void IVector3DSeries::PutArrowHeight ( long Value );
__declspec(implementation_key(1095)) long IVector3DSeries::GetArrowWidth ( );
__declspec(implementation_key(1096)) void IVector3DSeries::PutArrowWidth ( long Value );
__declspec(implementation_key(1097)) IPenPtr IVector3DSeries::GetEndArrow ( );
__declspec(implementation_key(1098)) IValueListPtr IVector3DSeries::GetEndXValues ( );
__declspec(implementation_key(1099)) IValueListPtr IVector3DSeries::GetEndYValues ( );
__declspec(implementation_key(1100)) IValueListPtr IVector3DSeries::GetEndZValues ( );
__declspec(implementation_key(1101)) double IVector3DSeries::MinXValueVector ( );
__declspec(implementation_key(1102)) double IVector3DSeries::MaxXValueVector ( );
__declspec(implementation_key(1103)) double IVector3DSeries::MinYValueVector ( );
__declspec(implementation_key(1104)) double IVector3DSeries::MaxYValueVector ( );
__declspec(implementation_key(1105)) double IVector3DSeries::MinZValueVector ( );
__declspec(implementation_key(1106)) double IVector3DSeries::MaxZValueVector ( );
__declspec(implementation_key(1107)) IPenPtr IVector3DSeries::GetStartArrow ( );
__declspec(implementation_key(1108)) long ITowerSeries::Clicked ( long X, long Y );
__declspec(implementation_key(1109)) VARIANT_BOOL ITowerSeries::GetDark3D ( );
__declspec(implementation_key(1110)) void ITowerSeries::PutDark3D ( VARIANT_BOOL Value );
__declspec(implementation_key(1111)) long ITowerSeries::GetPercentDepth ( );
__declspec(implementation_key(1112)) void ITowerSeries::PutPercentDepth ( long Value );
__declspec(implementation_key(1113)) double ITowerSeries::GetOrigin ( );
__declspec(implementation_key(1114)) void ITowerSeries::PutOrigin ( double Value );
__declspec(implementation_key(1115)) enum ETowerStyle ITowerSeries::GetTowerStyle ( );
__declspec(implementation_key(1116)) void ITowerSeries::PutTowerStyle ( enum ETowerStyle Value );
__declspec(implementation_key(1117)) long ITowerSeries::GetTransparency ( );
__declspec(implementation_key(1118)) void ITowerSeries::PutTransparency ( long Value );
__declspec(implementation_key(1119)) long ITowerSeries::GetPercentWidth ( );
__declspec(implementation_key(1120)) void ITowerSeries::PutPercentWidth ( long Value );
__declspec(implementation_key(1121)) VARIANT_BOOL ITowerSeries::GetUseOrigin ( );
__declspec(implementation_key(1122)) void ITowerSeries::PutUseOrigin ( VARIANT_BOOL Value );
__declspec(implementation_key(1123)) double ITowerSeries::MinXValueTower ( );
__declspec(implementation_key(1124)) double ITowerSeries::MaxXValueTower ( );
__declspec(implementation_key(1125)) double ITowerSeries::MinZValueTower ( );
__declspec(implementation_key(1126)) double ITowerSeries::MaxZValueTower ( );
__declspec(implementation_key(1127)) VARIANT_BOOL ISelectorTool::GetAllowDrag ( );
__declspec(implementation_key(1128)) void ISelectorTool::PutAllowDrag ( VARIANT_BOOL Value );
__declspec(implementation_key(1129)) VARIANT_BOOL ISelectorTool::GetAllowResizeChart ( );
__declspec(implementation_key(1130)) void ISelectorTool::PutAllowResizeChart ( VARIANT_BOOL Value );
__declspec(implementation_key(1131)) IBrushPtr ISelectorTool::GetBrush ( );
__declspec(implementation_key(1132)) long ISelectorTool::GetHandleSize ( );
__declspec(implementation_key(1133)) void ISelectorTool::PutHandleSize ( long Value );
__declspec(implementation_key(1134)) IPenPtr ISelectorTool::GetPen ( );
__declspec(implementation_key(1135)) IBrushPtr ISurfaceSides::GetBrush ( );
__declspec(implementation_key(1136)) VARIANT_BOOL ISurfaceSides::GetLevels ( );
__declspec(implementation_key(1137)) void ISurfaceSides::PutLevels ( VARIANT_BOOL Value );
__declspec(implementation_key(1138)) IPenPtr ISurfaceSides::GetPen ( );
__declspec(implementation_key(1139)) enum EPenLineMode IChartAxisPen::GetLineMode ( );
__declspec(implementation_key(1140)) void IChartAxisPen::PutLineMode ( enum EPenLineMode Value );
__declspec(implementation_key(1141)) long ITeeListBoxSection::GetWidth ( );
__declspec(implementation_key(1142)) void ITeeListBoxSection::PutWidth ( long Value );
__declspec(implementation_key(1143)) VARIANT_BOOL ITeeListBoxSection::GetVisible ( );
__declspec(implementation_key(1144)) void ITeeListBoxSection::PutVisible ( VARIANT_BOOL Value );
__declspec(implementation_key(1145)) HRESULT IFaderTool::Start ( );
__declspec(implementation_key(1146)) HRESULT IFaderTool::Stop ( );
__declspec(implementation_key(1147)) OLE_COLOR IFaderTool::GetColor ( );
__declspec(implementation_key(1148)) void IFaderTool::PutColor ( OLE_COLOR Value );
__declspec(implementation_key(1149)) long IFaderTool::GetInitialDelay ( );
__declspec(implementation_key(1150)) void IFaderTool::PutInitialDelay ( long Value );
__declspec(implementation_key(1151)) double IFaderTool::GetSpeed ( );
__declspec(implementation_key(1152)) void IFaderTool::PutSpeed ( double Value );
__declspec(implementation_key(1153)) enum EFaderStyle IFaderTool::GetStyle ( );
__declspec(implementation_key(1154)) void IFaderTool::PutStyle ( enum EFaderStyle Value );
__declspec(implementation_key(1155)) VARIANT_BOOL ISurfaceSeries::GetDotFrame ( );
__declspec(implementation_key(1156)) void ISurfaceSeries::PutDotFrame ( VARIANT_BOOL DotFrame );
__declspec(implementation_key(1157)) VARIANT_BOOL ISurfaceSeries::GetWireFrame ( );
__declspec(implementation_key(1158)) void ISurfaceSeries::PutWireFrame ( VARIANT_BOOL Value );
__declspec(implementation_key(1159)) IBrushPtr ISurfaceSeries::GetSideBrush ( );
__declspec(implementation_key(1160)) VARIANT_BOOL ISurfaceSeries::GetSmoothPalette ( );
__declspec(implementation_key(1161)) void ISurfaceSeries::PutSmoothPalette ( VARIANT_BOOL Value );
__declspec(implementation_key(1162)) long ISurfaceSeries::GetTransparency ( );
__declspec(implementation_key(1163)) void ISurfaceSeries::PutTransparency ( long Value );
__declspec(implementation_key(1164)) VARIANT_BOOL ISurfaceSeries::GetFastBrush ( );
__declspec(implementation_key(1165)) void ISurfaceSeries::PutFastBrush ( VARIANT_BOOL Value );
__declspec(implementation_key(1166)) VARIANT_BOOL ISurfaceSeries::GetHideCells ( );
__declspec(implementation_key(1167)) void ISurfaceSeries::PutHideCells ( VARIANT_BOOL Value );
__declspec(implementation_key(1168)) IChartHiddenPenPtr ISurfaceSeries::GetSideLines ( );
__declspec(implementation_key(1169)) VARIANT_BOOL IWaterfallSeries::GetWaterfall ( );
__declspec(implementation_key(1170)) void IWaterfallSeries::PutWaterfall ( VARIANT_BOOL Value );
__declspec(implementation_key(1171)) IPenPtr IWaterfallSeries::GetWaterLines ( );
__declspec(implementation_key(1172)) VARIANT_BOOL IIsoSurfaceSeries::GetUseYPosition ( );
__declspec(implementation_key(1173)) void IIsoSurfaceSeries::PutUseYPosition ( VARIANT_BOOL Value );
__declspec(implementation_key(1174)) double IIsoSurfaceSeries::GetYPosition ( );
__declspec(implementation_key(1175)) void IIsoSurfaceSeries::PutYPosition ( double Value );
__declspec(implementation_key(1176)) IPenPtr IIsoSurfaceSeries::GetBandPen ( );
__declspec(implementation_key(1177)) ISurfaceSidesPtr IIsoSurfaceSeries::GetSides ( );
__declspec(implementation_key(1178)) double IFloatXYZ::GetX ( );
__declspec(implementation_key(1179)) void IFloatXYZ::PutX ( double Value );
__declspec(implementation_key(1180)) double IFloatXYZ::GetY ( );
__declspec(implementation_key(1181)) void IFloatXYZ::PutY ( double Value );
__declspec(implementation_key(1182)) double IFloatXYZ::GetZ ( );
__declspec(implementation_key(1183)) void IFloatXYZ::PutZ ( double Value );
__declspec(implementation_key(1184)) double IColorGridSeries::MaxXValue ( );
__declspec(implementation_key(1185)) double IColorGridSeries::MaxYValue ( );
__declspec(implementation_key(1186)) double IColorGridSeries::MinYValue ( );
__declspec(implementation_key(1187)) VARIANT_BOOL IColorGridSeries::GetCenteredPoints ( );
__declspec(implementation_key(1188)) void IColorGridSeries::PutCenteredPoints ( VARIANT_BOOL Value );
__declspec(implementation_key(1189)) void IColorGridSeries::PutBitmap ( long _arg1 );
__declspec(implementation_key(1190)) VARIANT_BOOL IColorGridSeries::GetSmoothBitmap ( );
__declspec(implementation_key(1191)) void IColorGridSeries::PutSmoothBitmap ( VARIANT_BOOL Value );
__declspec(implementation_key(1192)) long IColorGridSeries::GetTransparency ( );
__declspec(implementation_key(1193)) void IColorGridSeries::PutTransparency ( long Value );
__declspec(implementation_key(1194)) enum ECanvas3DPlane IColorGridSeries::GetDrawPlane3D ( );
__declspec(implementation_key(1195)) void IColorGridSeries::PutDrawPlane3D ( enum ECanvas3DPlane Value );
__declspec(implementation_key(1196)) long IColorGridSeries::GetDrawPosition ( );
__declspec(implementation_key(1197)) void IColorGridSeries::PutDrawPosition ( long Value );
__declspec(implementation_key(1198)) IChartHiddenPenPtr IColorGridSeries::GetFrame ( );
__declspec(implementation_key(1199)) long IColorGridSeries::GetXGridEvery ( );
__declspec(implementation_key(1200)) void IColorGridSeries::PutXGridEvery ( long Value );
__declspec(implementation_key(1201)) long IColorGridSeries::GetZGridEvery ( );
__declspec(implementation_key(1202)) void IColorGridSeries::PutZGridEvery ( long Value );
__declspec(implementation_key(1203)) VARIANT_BOOL IRotateTool::GetActive ( );
__declspec(implementation_key(1204)) void IRotateTool::PutActive ( VARIANT_BOOL Value );
__declspec(implementation_key(1205)) enum EMouseButton IRotateTool::GetButton ( );
__declspec(implementation_key(1206)) void IRotateTool::PutButton ( enum EMouseButton Value );
__declspec(implementation_key(1207)) _bstr_t IRotateTool::Description ( );
__declspec(implementation_key(1208)) IPenPtr IRotateTool::GetOutline ( );
__declspec(implementation_key(1209)) short IRotateTool::GetCursor ( );
__declspec(implementation_key(1210)) void IRotateTool::PutCursor ( short Value );
__declspec(implementation_key(1211)) long IRotateTool::GetInertia ( );
__declspec(implementation_key(1212)) void IRotateTool::PutInertia ( long Value );
__declspec(implementation_key(1213)) VARIANT_BOOL IRotateTool::GetInverted ( );
__declspec(implementation_key(1214)) void IRotateTool::PutInverted ( VARIANT_BOOL Value );
__declspec(implementation_key(1215)) long IRotateTool::GetSpeed ( );
__declspec(implementation_key(1216)) void IRotateTool::PutSpeed ( long Value );
__declspec(implementation_key(1217)) enum ERotateToolStyle IRotateTool::GetStyle ( );
__declspec(implementation_key(1218)) void IRotateTool::PutStyle ( enum ERotateToolStyle Value );
__declspec(implementation_key(1219)) IFilterItemsPtr ITeePicture::GetFilters ( );
__declspec(implementation_key(1220)) HRESULT ITeePicture::LoadImage ( _bstr_t FileName );
__declspec(implementation_key(1221)) HRESULT ITeePicture::AssignImage ( long ImageHandle );
__declspec(implementation_key(1222)) HRESULT ITeePicture::ClearImage ( );
__declspec(implementation_key(1223)) VARIANT_BOOL ITeePicture::ShowFiltersEditor ( );
__declspec(implementation_key(1224)) long ITeePicture::GetHandle ( );
__declspec(implementation_key(1225)) HRESULT ITeePicture::SaveToFile ( _bstr_t FileName );
__declspec(implementation_key(1226)) VARIANT_BOOL IVideoPlayerTool::GetPaused ( );
__declspec(implementation_key(1227)) ITeePicturePtr IVideoPlayerTool::GetImage ( );
__declspec(implementation_key(1228)) VARIANT_BOOL IVideoPlayerTool::GetPlaying ( );
__declspec(implementation_key(1229)) long IVideoPlayerTool::GetPosition ( );
__declspec(implementation_key(1230)) void IVideoPlayerTool::PutPosition ( long Value );
__declspec(implementation_key(1231)) long IVideoPlayerTool::GetStartFrame ( );
__declspec(implementation_key(1232)) long IVideoPlayerTool::GetEndFrame ( );
__declspec(implementation_key(1233)) long IVideoPlayerTool::GetDelay ( );
__declspec(implementation_key(1234)) void IVideoPlayerTool::PutDelay ( long Value );
__declspec(implementation_key(1235)) _bstr_t IVideoPlayerTool::GetFileName ( );
__declspec(implementation_key(1236)) void IVideoPlayerTool::PutFileName ( _bstr_t Value );
__declspec(implementation_key(1237)) VARIANT_BOOL IVideoPlayerTool::GetLoop ( );
__declspec(implementation_key(1238)) void IVideoPlayerTool::PutLoop ( VARIANT_BOOL Value );
__declspec(implementation_key(1239)) IFilterItemsPtr IVideoPlayerTool::GetFilters ( );
__declspec(implementation_key(1240)) HRESULT IVideoPlayerTool::Pause ( );
__declspec(implementation_key(1241)) HRESULT IVideoPlayerTool::Play ( );
__declspec(implementation_key(1242)) HRESULT IVideoPlayerTool::Stop ( );
__declspec(implementation_key(1243)) ITeePicturePtr IAntiAliasTool::GetBitmap ( );
__declspec(implementation_key(1244)) IFilterItemsPtr IAntiAliasTool::GetFilters ( );
__declspec(implementation_key(1245)) VARIANT_BOOL IAntiAliasTool::GetAntialias ( );
__declspec(implementation_key(1246)) void IAntiAliasTool::PutAntialias ( VARIANT_BOOL Value );
__declspec(implementation_key(1247)) VARIANT_BOOL IFrameTool::GetResizeChart ( );
__declspec(implementation_key(1248)) void IFrameTool::PutResizeChart ( VARIANT_BOOL Value );
__declspec(implementation_key(1249)) long IFrameTool::GetSize ( );
__declspec(implementation_key(1250)) void IFrameTool::PutSize ( long Value );
__declspec(implementation_key(1251)) long IFrameTool::GetStyle ( );
__declspec(implementation_key(1252)) void IFrameTool::PutStyle ( long Value );
__declspec(implementation_key(1253)) IPenPtr IFrameTool::GetPen ( );
__declspec(implementation_key(1254)) long IFrameTool::GetPaspartou ( );
__declspec(implementation_key(1255)) void IFrameTool::PutPaspartou ( long Value );
__declspec(implementation_key(1256)) ITeePicturePtr IFrameTool::GetFrame ( );
__declspec(implementation_key(1257)) IBrushPtr IFrameTool::GetBrush ( );
__declspec(implementation_key(1258)) VARIANT_BOOL IBackImage::GetInside ( );
__declspec(implementation_key(1259)) void IBackImage::PutInside ( VARIANT_BOOL Value );
__declspec(implementation_key(1260)) long IBackImage::GetLeft ( );
__declspec(implementation_key(1261)) void IBackImage::PutLeft ( long Value );
__declspec(implementation_key(1262)) long IBackImage::GetTop ( );
__declspec(implementation_key(1263)) void IBackImage::PutTop ( long Value );
__declspec(implementation_key(1264)) enum EBackImageMode IBackImage::GetMode ( );
__declspec(implementation_key(1265)) void IBackImage::PutMode ( enum EBackImageMode Value );
__declspec(implementation_key(1266)) short IPrinterSettings::GetOrientation ( );
__declspec(implementation_key(1267)) void IPrinterSettings::PutOrientation ( short Value );
__declspec(implementation_key(1268)) short IPrinterSettings::GetPaperSize ( );
__declspec(implementation_key(1269)) void IPrinterSettings::PutPaperSize ( short Value );
__declspec(implementation_key(1270)) short IPrinterSettings::GetPaperLength ( );
__declspec(implementation_key(1271)) void IPrinterSettings::PutPaperLength ( short Value );
__declspec(implementation_key(1272)) short IPrinterSettings::GetPaperWidth ( );
__declspec(implementation_key(1273)) void IPrinterSettings::PutPaperWidth ( short Value );
__declspec(implementation_key(1274)) short IPrinterSettings::GetCopies ( );
__declspec(implementation_key(1275)) void IPrinterSettings::PutCopies ( short Value );
__declspec(implementation_key(1276)) short IPrinterSettings::GetPrintQuality ( );
__declspec(implementation_key(1277)) void IPrinterSettings::PutPrintQuality ( short Value );
__declspec(implementation_key(1278)) short IPrinterSettings::GetColor ( );
__declspec(implementation_key(1279)) void IPrinterSettings::PutColor ( short Value );
__declspec(implementation_key(1280)) short IPrinterSettings::GetDuplex ( );
__declspec(implementation_key(1281)) void IPrinterSettings::PutDuplex ( short Value );
__declspec(implementation_key(1282)) short IPrinterSettings::GetScale ( );
__declspec(implementation_key(1283)) void IPrinterSettings::PutScale ( short Value );
__declspec(implementation_key(1284)) short IPrinterSettings::GetDefaultSource ( );
__declspec(implementation_key(1285)) void IPrinterSettings::PutDefaultSource ( short Value );
__declspec(implementation_key(1286)) short IPrinterSettings::GetTTOption ( );
__declspec(implementation_key(1287)) void IPrinterSettings::PutTTOption ( short Value );
__declspec(implementation_key(1288)) short IPrinterSettings::GetCollate ( );
__declspec(implementation_key(1289)) void IPrinterSettings::PutCollate ( short Value );
__declspec(implementation_key(1290)) long IPrinterSettings::GetSpecVersion ( );
__declspec(implementation_key(1291)) void IPrinterSettings::PutSpecVersion ( long Value );
__declspec(implementation_key(1292)) long IPrinterSettings::GetDriverVersion ( );
__declspec(implementation_key(1293)) void IPrinterSettings::PutDriverVersion ( long Value );
__declspec(implementation_key(1294)) long IPrinterSettings::GetSize ( );
__declspec(implementation_key(1295)) void IPrinterSettings::PutSize ( long Value );
__declspec(implementation_key(1296)) long IPrinterSettings::GetDriverExtra ( );
__declspec(implementation_key(1297)) void IPrinterSettings::PutDriverExtra ( long Value );
__declspec(implementation_key(1298)) long IPrinterSettings::GetLogPixels ( );
__declspec(implementation_key(1299)) void IPrinterSettings::PutLogPixels ( long Value );
__declspec(implementation_key(1300)) long IPrinterSettings::GetFields ( );
__declspec(implementation_key(1301)) void IPrinterSettings::PutFields ( long Value );
__declspec(implementation_key(1302)) long IPrinterSettings::GetBitsPerPel ( );
__declspec(implementation_key(1303)) void IPrinterSettings::PutBitsPerPel ( long Value );
__declspec(implementation_key(1304)) long IPrinterSettings::GetPelsWidth ( );
__declspec(implementation_key(1305)) void IPrinterSettings::PutPelsWidth ( long Value );
__declspec(implementation_key(1306)) long IPrinterSettings::GetPelsHeight ( );
__declspec(implementation_key(1307)) void IPrinterSettings::PutPelsHeight ( long Value );
__declspec(implementation_key(1308)) long IPrinterSettings::GetDisplayFlags ( );
__declspec(implementation_key(1309)) void IPrinterSettings::PutDisplayFlags ( long Value );
__declspec(implementation_key(1310)) long IPrinterSettings::GetDisplayFrequency ( );
__declspec(implementation_key(1311)) void IPrinterSettings::PutDisplayFrequency ( long Value );
__declspec(implementation_key(1312)) long IPrinterSettings::GetICMMethod ( );
__declspec(implementation_key(1313)) void IPrinterSettings::PutICMMethod ( long Value );
__declspec(implementation_key(1314)) long IPrinterSettings::GetICMIntent ( );
__declspec(implementation_key(1315)) void IPrinterSettings::PutICMIntent ( long Value );
__declspec(implementation_key(1316)) short IPrinterSettings::GetYResolution ( );
__declspec(implementation_key(1317)) void IPrinterSettings::PutYResolution ( short Value );
__declspec(implementation_key(1318)) _bstr_t IPrinterSettings::GetDeviceName ( );
__declspec(implementation_key(1319)) void IPrinterSettings::PutDeviceName ( _bstr_t Value );
__declspec(implementation_key(1320)) _bstr_t IPrinterSettings::GetFormName ( );
__declspec(implementation_key(1321)) void IPrinterSettings::PutFormName ( _bstr_t Value );
__declspec(implementation_key(1322)) long IPrinter::GetDetail ( );
__declspec(implementation_key(1323)) void IPrinter::PutDetail ( long Value );
__declspec(implementation_key(1324)) long IPrinter::GetMarginBottom ( );
__declspec(implementation_key(1325)) void IPrinter::PutMarginBottom ( long Value );
__declspec(implementation_key(1326)) long IPrinter::GetMarginLeft ( );
__declspec(implementation_key(1327)) void IPrinter::PutMarginLeft ( long Value );
__declspec(implementation_key(1328)) long IPrinter::GetMarginTop ( );
__declspec(implementation_key(1329)) void IPrinter::PutMarginTop ( long Value );
__declspec(implementation_key(1330)) long IPrinter::GetMarginRight ( );
__declspec(implementation_key(1331)) void IPrinter::PutMarginRight ( long Value );
__declspec(implementation_key(1332)) enum EPrinterOrientation IPrinter::GetOrientation ( );
__declspec(implementation_key(1333)) void IPrinter::PutOrientation ( enum EPrinterOrientation Value );
__declspec(implementation_key(1334)) HRESULT IPrinter::Print ( );
__declspec(implementation_key(1335)) HRESULT IPrinter::PrintLandscape ( );
__declspec(implementation_key(1336)) HRESULT IPrinter::PrintPortrait ( );
__declspec(implementation_key(1337)) HRESULT IPrinter::ShowPreview ( );
__declspec(implementation_key(1338)) HRESULT IPrinter::PrintPartial ( long Left, long Top, long Right, long Bottom );
__declspec(implementation_key(1339)) HRESULT IPrinter::BeginDoc ( );
__declspec(implementation_key(1340)) HRESULT IPrinter::EndDoc ( );
__declspec(implementation_key(1341)) long IPrinter::GetPrinterIndex ( );
__declspec(implementation_key(1342)) void IPrinter::PutPrinterIndex ( long Value );
__declspec(implementation_key(1343)) long IPrinter::GetPrinterCount ( );
__declspec(implementation_key(1344)) _bstr_t IPrinter::GetPrinterDescription ( long Index );
__declspec(implementation_key(1345)) HRESULT IPrinter::PrintChart ( );
__declspec(implementation_key(1346)) long IPrinter::GetPageHeight ( );
__declspec(implementation_key(1347)) long IPrinter::GetPageWidth ( );
__declspec(implementation_key(1348)) _bstr_t IPrinter::GetJobTitle ( );
__declspec(implementation_key(1349)) void IPrinter::PutJobTitle ( _bstr_t Value );
__declspec(implementation_key(1350)) VARIANT_BOOL IPrinter::GetPrintProportional ( );
__declspec(implementation_key(1351)) void IPrinter::PutPrintProportional ( VARIANT_BOOL Value );
__declspec(implementation_key(1352)) HRESULT IPrinter::PrintPartialHandle ( const _variant_t & DC, long Left, long Top, long Right, long Bottom );
__declspec(implementation_key(1353)) HRESULT IPrinter::PrintPages ( long FromPage, long ToPage );
__declspec(implementation_key(1354)) HRESULT IPrinter::ShowSetupDlg ( );
__declspec(implementation_key(1355)) IPrinterSettingsPtr IPrinter::GetPrinterSettings ( );
__declspec(implementation_key(1356)) IBrushPtr IHighLowSeries::GetHighBrush ( );
__declspec(implementation_key(1357)) IPenPtr IHighLowSeries::GetHighPen ( );
__declspec(implementation_key(1358)) IBrushPtr IHighLowSeries::GetLowBrush ( );
__declspec(implementation_key(1359)) IPenPtr IHighLowSeries::GetLowPen ( );
__declspec(implementation_key(1360)) IPenPtr IHighLowSeries::GetPen ( );
__declspec(implementation_key(1361)) long IHighLowSeries::GetTransparency ( );
__declspec(implementation_key(1362)) void IHighLowSeries::PutTransparency ( long Value );
__declspec(implementation_key(1363)) long ITeeRectArray::GetCount ( );
__declspec(implementation_key(1364)) ITeeRectPtr ITeeRectArray::GetItem ( long Index );
__declspec(implementation_key(1365)) long ISeriesAnimationTool::GetDrawEvery ( );
__declspec(implementation_key(1366)) void ISeriesAnimationTool::PutDrawEvery ( long Value );
__declspec(implementation_key(1367)) VARIANT_BOOL ISeriesAnimationTool::GetStartAtMin ( );
__declspec(implementation_key(1368)) void ISeriesAnimationTool::PutStartAtMin ( VARIANT_BOOL Value );
__declspec(implementation_key(1369)) double ISeriesAnimationTool::GetStartValue ( );
__declspec(implementation_key(1370)) void ISeriesAnimationTool::PutStartValue ( double Value );
__declspec(implementation_key(1371)) long ISeriesAnimationTool::GetSteps ( );
__declspec(implementation_key(1372)) void ISeriesAnimationTool::PutSteps ( long Value );
__declspec(implementation_key(1373)) HRESULT ISeriesAnimationTool::Execute ( );
__declspec(implementation_key(1374)) VARIANT_BOOL ISeriesAnimationTool::GetRunning ( );
__declspec(implementation_key(1375)) HRESULT ISeriesAnimationTool::Stop ( );
__declspec(implementation_key(1376)) long ISeriesAnimationTool::GetDelay ( );
__declspec(implementation_key(1377)) void ISeriesAnimationTool::PutDelay ( long Value );
__declspec(implementation_key(1378)) enum ESeriesAnimationLoop ISeriesAnimationTool::GetLoop ( );
__declspec(implementation_key(1379)) void ISeriesAnimationTool::PutLoop ( enum ESeriesAnimationLoop Value );
__declspec(implementation_key(1380)) long ISpacing::GetHorizontal ( );
__declspec(implementation_key(1381)) void ISpacing::PutHorizontal ( long Value );
__declspec(implementation_key(1382)) long ISpacing::GetVertical ( );
__declspec(implementation_key(1383)) void ISpacing::PutVertical ( long Value );
__declspec(implementation_key(1384)) VARIANT_BOOL IContourMarks::GetAntiOverlap ( );
__declspec(implementation_key(1385)) void IContourMarks::PutAntiOverlap ( VARIANT_BOOL Value );
__declspec(implementation_key(1386)) VARIANT_BOOL IContourMarks::GetAtSegments ( );
__declspec(implementation_key(1387)) void IContourMarks::PutAtSegments ( VARIANT_BOOL Value );
__declspec(implementation_key(1388)) VARIANT_BOOL IContourMarks::GetColorLevel ( );
__declspec(implementation_key(1389)) void IContourMarks::PutColorLevel ( VARIANT_BOOL Value );
__declspec(implementation_key(1390)) long IContourMarks::GetMargin ( );
__declspec(implementation_key(1391)) void IContourMarks::PutMargin ( long Value );
__declspec(implementation_key(1392)) long IContourMarks::GetDensity ( );
__declspec(implementation_key(1393)) void IContourMarks::PutDensity ( long Value );
__declspec(implementation_key(1394)) VARIANT_BOOL IContourMarks::GetVisible ( );
__declspec(implementation_key(1395)) void IContourMarks::PutVisible ( VARIANT_BOOL Value );
__declspec(implementation_key(1396)) IValueListPtr IRenkoSeries::GetCloseValues ( );
__declspec(implementation_key(1397)) double IRenkoSeries::GetBoxSize ( );
__declspec(implementation_key(1398)) void IRenkoSeries::PutBoxSize ( double Value );
__declspec(implementation_key(1399)) OLE_COLOR IRenkoSeries::GetDownSwingColor ( );
__declspec(implementation_key(1400)) void IRenkoSeries::PutDownSwingColor ( OLE_COLOR Value );
__declspec(implementation_key(1401)) VARIANT_BOOL IRenkoSeries::GetDraw3D ( );
__declspec(implementation_key(1402)) void IRenkoSeries::PutDraw3D ( VARIANT_BOOL Value );
__declspec(implementation_key(1403)) long IRenkoSeries::GetTransparency ( );
__declspec(implementation_key(1404)) void IRenkoSeries::PutTransparency ( long Value );
__declspec(implementation_key(1405)) OLE_COLOR IRenkoSeries::GetUpSwingColor ( );
__declspec(implementation_key(1406)) void IRenkoSeries::PutUpSwingColor ( OLE_COLOR Value );
__declspec(implementation_key(1407)) IPenPtr IFastLineSeries::GetLinePen ( );
__declspec(implementation_key(1408)) long IFastLineSeries::AddRealTime ( double X, double Y, _bstr_t SomeLabel, OLE_COLOR SomeColor );
__declspec(implementation_key(1409)) VARIANT_BOOL IFastLineSeries::GetDrawAllPoints ( );
__declspec(implementation_key(1410)) void IFastLineSeries::PutDrawAllPoints ( VARIANT_BOOL Value );
__declspec(implementation_key(1411)) VARIANT_BOOL IFastLineSeries::GetAutoSizeVertAxis ( );
__declspec(implementation_key(1412)) void IFastLineSeries::PutAutoSizeVertAxis ( VARIANT_BOOL Value );
__declspec(implementation_key(1413)) VARIANT_BOOL IFastLineSeries::GetStairs ( );
__declspec(implementation_key(1414)) void IFastLineSeries::PutStairs ( VARIANT_BOOL Value );
__declspec(implementation_key(1415)) VARIANT_BOOL IFastLineSeries::GetInvertedStairs ( );
__declspec(implementation_key(1416)) void IFastLineSeries::PutInvertedStairs ( VARIANT_BOOL Value );
__declspec(implementation_key(1417)) VARIANT_BOOL IFastLineSeries::GetIgnoreNulls ( );
__declspec(implementation_key(1418)) void IFastLineSeries::PutIgnoreNulls ( VARIANT_BOOL Value );
__declspec(implementation_key(1419)) VARIANT_BOOL IFastLineSeries::GetFastPen ( );
__declspec(implementation_key(1420)) void IFastLineSeries::PutFastPen ( VARIANT_BOOL Value );
__declspec(implementation_key(1421)) VARIANT_BOOL IFastLineSeries::GetAutoRepaint ( );
__declspec(implementation_key(1422)) void IFastLineSeries::PutAutoRepaint ( VARIANT_BOOL Value );
__declspec(implementation_key(1423)) enum ETreatNullsStyle IFastLineSeries::GetTreatNulls ( );
__declspec(implementation_key(1424)) void IFastLineSeries::PutTreatNulls ( enum ETreatNullsStyle Value );
__declspec(implementation_key(1425)) VARIANT_BOOL IPieMarks::GetVertCenter ( );
__declspec(implementation_key(1426)) void IPieMarks::PutVertCenter ( VARIANT_BOOL Value );
__declspec(implementation_key(1427)) long IPieMarks::GetLegSize ( );
__declspec(implementation_key(1428)) void IPieMarks::PutLegSize ( long Value );
__declspec(implementation_key(1429)) HRESULT IExport::CopyToClipboardBitmap ( );
__declspec(implementation_key(1430)) HRESULT IExport::CopyToClipboardMetafile ( VARIANT_BOOL Enhanced );
__declspec(implementation_key(1431)) HRESULT IExport::SaveToBitmapFile ( _bstr_t FileName );
__declspec(implementation_key(1432)) HRESULT IExport::SaveToFile ( _bstr_t FileName );
__declspec(implementation_key(1433)) HRESULT IExport::SaveToJPEGFile ( _bstr_t FileName, VARIANT_BOOL Gray, enum EJPEGPerformance Performance, long Quality, long Width, long Height );
__declspec(implementation_key(1434)) HRESULT IExport::SaveToMetafile ( _bstr_t FileName );
__declspec(implementation_key(1435)) HRESULT IExport::SaveToMetafileEnh ( _bstr_t FileName );
__declspec(implementation_key(1436)) HRESULT IExport::ShowExport ( );
__declspec(implementation_key(1437)) _bstr_t IExport::SaveChartDialog ( );
__declspec(implementation_key(1438)) HRESULT IExport::ConvertTeeFileToText ( _bstr_t InputFile, _bstr_t OutputFile );
__declspec(implementation_key(1439)) _variant_t IExport::Stream ( enum EStreamType StreamType );
__declspec(implementation_key(1440)) IJPEGExportPtr IExport::GetasJPEG ( );
__declspec(implementation_key(1441)) IPNGExportPtr IExport::GetasPNG ( );
__declspec(implementation_key(1442)) IGIFExportPtr IExport::GetasGIF ( );
__declspec(implementation_key(1443)) IBMPExportPtr IExport::GetasBMP ( );
__declspec(implementation_key(1444)) IPCXExportPtr IExport::GetasPCX ( );
__declspec(implementation_key(1445)) IMetafileExportPtr IExport::GetasMetafile ( );
__declspec(implementation_key(1446)) INativeExportPtr IExport::GetasNative ( );
__declspec(implementation_key(1447)) IXMLExportPtr IExport::GetasXML ( );
__declspec(implementation_key(1448)) IXLSExportPtr IExport::GetasXLS ( );
__declspec(implementation_key(1449)) IHTMLExportPtr IExport::GetasHTML ( );
__declspec(implementation_key(1450)) ITextExportPtr IExport::GetasText ( );
__declspec(implementation_key(1451)) HRESULT IExport::EmailFile ( _bstr_t FileName, _bstr_t Subject );
__declspec(implementation_key(1452)) IPDFExportPtr IExport::GetasPDF ( );
__declspec(implementation_key(1453)) IEPSExportPtr IExport::GetasEPS ( );
__declspec(implementation_key(1454)) ISVGExportPtr IExport::GetasSVG ( );
__declspec(implementation_key(1455)) _bstr_t IExport::GetLabelHeader ( );
__declspec(implementation_key(1456)) void IExport::PutLabelHeader ( _bstr_t Value );
__declspec(implementation_key(1457)) IXAMLExportPtr IExport::GetasXAML ( );
__declspec(implementation_key(1458)) HRESULT IExport::SaveToXMLFile ( _bstr_t FileName, VARIANT_BOOL IncludeData, VARIANT_BOOL XMLHeader );
__declspec(implementation_key(1459)) _variant_t IExport::SaveToXMLStream ( VARIANT_BOOL IncludeData, VARIANT_BOOL XMLHeader );
__declspec(implementation_key(1460)) IPenPtr IFibonacciItem::GetPen ( );
__declspec(implementation_key(1461)) double IFibonacciItem::GetValue ( );
__declspec(implementation_key(1462)) void IFibonacciItem::PutValue ( double Value );
__declspec(implementation_key(1463)) IFibonacciItemPtr IFibonacciLevels::GetLevel ( long Index );
__declspec(implementation_key(1464)) long IMargins::GetLeft ( );
__declspec(implementation_key(1465)) void IMargins::PutLeft ( long Value );
__declspec(implementation_key(1466)) long IMargins::GetTop ( );
__declspec(implementation_key(1467)) void IMargins::PutTop ( long Value );
__declspec(implementation_key(1468)) long IMargins::GetRight ( );
__declspec(implementation_key(1469)) void IMargins::PutRight ( long Value );
__declspec(implementation_key(1470)) long IMargins::GetBottom ( );
__declspec(implementation_key(1471)) void IMargins::PutBottom ( long Value );
__declspec(implementation_key(1472)) enum EMarginUnits IMargins::GetUnits ( );
__declspec(implementation_key(1473)) void IMargins::PutUnits ( enum EMarginUnits Value );
__declspec(implementation_key(1474)) long IFullScreenTool::GetReleaseKey ( );
__declspec(implementation_key(1475)) void IFullScreenTool::PutReleaseKey ( long Value );
__declspec(implementation_key(1476)) IAspectPtr ITChart::GetAspect ( );
__declspec(implementation_key(1477)) IAxesPtr ITChart::GetAxis ( );
__declspec(implementation_key(1478)) ICanvasPtr ITChart::GetCanvas ( );
__declspec(implementation_key(1479)) VARIANT_BOOL ITChart::GetClipPoints ( );
__declspec(implementation_key(1480)) void ITChart::PutClipPoints ( VARIANT_BOOL ClipPoints );
__declspec(implementation_key(1481)) short ITChart::GetCursor ( );
__declspec(implementation_key(1482)) void ITChart::PutCursor ( short Cursor );
__declspec(implementation_key(1483)) short ITChart::GetDragCursor ( );
__declspec(implementation_key(1484)) void ITChart::PutDragCursor ( short DragCursor );
__declspec(implementation_key(1485)) enum EDragMode ITChart::GetDragMode ( );
__declspec(implementation_key(1486)) void ITChart::PutDragMode ( enum EDragMode DragMode );
__declspec(implementation_key(1487)) VARIANT_BOOL ITChart::GetEnabled ( );
__declspec(implementation_key(1488)) void ITChart::PutEnabled ( VARIANT_BOOL Enabled );
__declspec(implementation_key(1489)) IExportPtr ITChart::GetExport ( );
__declspec(implementation_key(1490)) ITitlesPtr ITChart::GetFooter ( );
__declspec(implementation_key(1491)) IPenPtr ITChart::GetFrame ( );
__declspec(implementation_key(1492)) ITitlesPtr ITChart::GetHeader ( );
__declspec(implementation_key(1493)) long ITChart::GetHeight ( );
__declspec(implementation_key(1494)) void ITChart::PutHeight ( long Height );
__declspec(implementation_key(1495)) IImportPtr ITChart::GetImport ( );
__declspec(implementation_key(1496)) long ITChart::GetLeft ( );
__declspec(implementation_key(1497)) void ITChart::PutLeft ( long Left );
__declspec(implementation_key(1498)) ILegendPtr ITChart::GetLegend ( );
__declspec(implementation_key(1499)) IPagePtr ITChart::GetPage ( );
__declspec(implementation_key(1500)) IPanelPtr ITChart::GetPanel ( );
__declspec(implementation_key(1501)) IPrinterPtr ITChart::GetPrinter ( );
__declspec(implementation_key(1502)) IScrollPtr ITChart::GetScroll ( );
__declspec(implementation_key(1503)) ISeriesPtr ITChart::GetaSeries ( long SeriesIndex );
__declspec(implementation_key(1504)) long ITChart::GetSeriesCount ( );
__declspec(implementation_key(1505)) long ITChart::GetTop ( );
__declspec(implementation_key(1506)) void ITChart::PutTop ( long Top );
__declspec(implementation_key(1507)) VARIANT_BOOL ITChart::GetVisible ( );
__declspec(implementation_key(1508)) void ITChart::PutVisible ( VARIANT_BOOL Visible );
__declspec(implementation_key(1509)) IWallsPtr ITChart::GetWalls ( );
__declspec(implementation_key(1510)) long ITChart::GetWidth ( );
__declspec(implementation_key(1511)) void ITChart::PutWidth ( long Width );
__declspec(implementation_key(1512)) IZoomPtr ITChart::GetZoom ( );
__declspec(implementation_key(1513)) HRESULT ITChart::AboutBox ( );
__declspec(implementation_key(1514)) long ITChart::AddSeries ( enum ESeriesClass SeriesClass );
__declspec(implementation_key(1515)) HRESULT ITChart::ChangeSeriesType ( long SeriesIndex, enum ESeriesClass NewSeriesType );
__declspec(implementation_key(1516)) long ITChart::CloneSeries ( long SourceSeriesIndex );
__declspec(implementation_key(1517)) HRESULT ITChart::Draw ( long DC, long Left, long Top, long Right, long Bottom );
__declspec(implementation_key(1518)) HRESULT ITChart::ExchangeSeries ( long Series1, long Series2 );
__declspec(implementation_key(1519)) double ITChart::GetDateTimeStep ( enum EDateTimeStep DateTimeStep );
__declspec(implementation_key(1520)) OLE_COLOR ITChart::GetFreeSeriesColor ( VARIANT_BOOL CheckBackgroundColor );
__declspec(implementation_key(1521)) ISeriesPtr ITChart::GetLabelsSeries ( enum EAxisType DestAxis );
__declspec(implementation_key(1522)) VARIANT_BOOL ITChart::IsFreeSeriesColor ( OLE_COLOR AColor, VARIANT_BOOL CheckBackgroundColor );
__declspec(implementation_key(1523)) HRESULT ITChart::RemoveAllSeries ( );
__declspec(implementation_key(1524)) HRESULT ITChart::RemoveSeries ( long SeriesIndex );
__declspec(implementation_key(1525)) HRESULT ITChart::Repaint ( );
__declspec(implementation_key(1526)) _bstr_t ITChart::SeriesTitleLegend ( long ASeriesIndex );
__declspec(implementation_key(1527)) HRESULT ITChart::ShowEditor ( long SeriesIndex );
__declspec(implementation_key(1528)) HRESULT ITChart::StopMouse ( );
__declspec(implementation_key(1529)) VARIANT_BOOL ITChart::GetTimerEnabled ( );
__declspec(implementation_key(1530)) void ITChart::PutTimerEnabled ( VARIANT_BOOL TimerEnabled );
__declspec(implementation_key(1531)) long ITChart::GetTimerInterval ( );
__declspec(implementation_key(1532)) void ITChart::PutTimerInterval ( long TimerInterval );
__declspec(implementation_key(1533)) VARIANT_BOOL ITChart::GetAutoRepaint ( );
__declspec(implementation_key(1534)) void ITChart::PutAutoRepaint ( VARIANT_BOOL Value );
__declspec(implementation_key(1535)) HRESULT ITChart::EditOneSeries ( long SeriesIndex );
__declspec(implementation_key(1536)) IEnvironmentPtr ITChart::GetEnvironment ( );
__declspec(implementation_key(1537)) long ITChart::GetChartLink ( );
__declspec(implementation_key(1538)) ITeePoint2DPtr ITChart::GetMousePosition ( );
__declspec(implementation_key(1539)) HRESULT ITChart::ChartRect ( long Left, long Top, long Right, long Bottom );
__declspec(implementation_key(1540)) IToolListPtr ITChart::GetTools ( );
__declspec(implementation_key(1541)) ITitlesPtr ITChart::GetSubHeader ( );
__declspec(implementation_key(1542)) ITitlesPtr ITChart::GetSubFooter ( );
__declspec(implementation_key(1543)) HRESULT ITChart::ClearChart ( );
__declspec(implementation_key(1544)) HRESULT ITChart::RefreshData ( );
__declspec(implementation_key(1545)) ISeriesPtr ITChart::Series ( long SeriesIndex );
__declspec(implementation_key(1546)) HRESULT ITChart::ShowThemesEditor ( );
__declspec(implementation_key(1547)) HRESULT ITChart::SetTheme ( enum EChartTheme aTheme, enum EColorPalette aPalette );
__declspec(implementation_key(1548)) HRESULT ITChart::ApplyPalette ( enum EColorPalette paletteIndex );
__declspec(implementation_key(1549)) HRESULT ITChart::ApplyCustomPalette ( const _variant_t & colorArray );
__declspec(implementation_key(1550)) ISeriesListPtr ITChart::GetSeriesList ( );
__declspec(implementation_key(1551)) _bstr_t ITChart::GetHint ( );
__declspec(implementation_key(1552)) void ITChart::PutHint ( _bstr_t Value );
__declspec(implementation_key(1553)) VARIANT_BOOL ITChart::GetShowHint ( );
__declspec(implementation_key(1554)) void ITChart::PutShowHint ( VARIANT_BOOL Value );
__declspec(implementation_key(1555)) _bstr_t ITChart::GetVersion ( );
__declspec(implementation_key(1556)) VARIANT_BOOL ITChart::GetCustomChartRect ( );
__declspec(implementation_key(1557)) void ITChart::PutCustomChartRect ( VARIANT_BOOL Value );
__declspec(implementation_key(1558)) VARIANT_BOOL ITChart::GetMonochrome ( );
__declspec(implementation_key(1559)) void ITChart::PutMonochrome ( VARIANT_BOOL Value );
__declspec(implementation_key(1560)) short ITChart::GetOriginalCursor ( );
__declspec(implementation_key(1561)) void ITChart::PutOriginalCursor ( short Value );
__declspec(implementation_key(1562)) VARIANT_BOOL ITChart::GetPrinting ( );
__declspec(implementation_key(1563)) long ITChart::GetChartHeight ( );
__declspec(implementation_key(1564)) long ITChart::GetChartWidth ( );
__declspec(implementation_key(1565)) ITeeRectPtr ITChart::GetChartBounds ( );
__declspec(implementation_key(1566)) VARIANT_BOOL ITChart::GetBufferedDisplay ( );
__declspec(implementation_key(1567)) void ITChart::PutBufferedDisplay ( VARIANT_BOOL Value );
__declspec(implementation_key(1568)) VARIANT_BOOL ITChart::GetCanClip ( );
__declspec(implementation_key(1569)) ITeeRectPtr ITChart::GetGetChartRect ( );
__declspec(implementation_key(1570)) VARIANT_BOOL ITChart::EditStrings ( BSTR * Strings, VARIANT_BOOL ReadOnly );
__declspec(implementation_key(1571)) void ITeeLinked::PutChart ( struct ITChart * _arg1 );
__declspec(implementation_key(1572)) void ITeeLinked::PutChartLink ( long _arg1 );
__declspec(implementation_key(1573)) HRESULT ITeeLinked::AboutBox ( );
__declspec(implementation_key(1574)) _bstr_t ITeeEditor::GetEditorTitle ( );
__declspec(implementation_key(1575)) void ITeeEditor::PutEditorTitle ( _bstr_t Value );
__declspec(implementation_key(1576)) enum ETeeEditorPage ITeeEditor::GetDefaultPage ( );
__declspec(implementation_key(1577)) void ITeeEditor::PutDefaultPage ( enum ETeeEditorPage Value );
__declspec(implementation_key(1578)) HRESULT ITeeEditor::ShowEditor ( );
__declspec(implementation_key(1579)) VARIANT_BOOL ITeeEditor::GetAutoRepaint ( );
__declspec(implementation_key(1580)) void ITeeEditor::PutAutoRepaint ( VARIANT_BOOL Value );
__declspec(implementation_key(1581)) ITeeEditorShowPagesPtr ITeeEditor::GetShowPages ( );
__declspec(implementation_key(1582)) long ITeeEditor::GetEditorLink ( );
__declspec(implementation_key(1583)) ITeeEditorOptionsPtr ITeeEditor::GetOptions ( );
__declspec(implementation_key(1584)) VARIANT_BOOL ITeeEditor::GetTreeView ( );
__declspec(implementation_key(1585)) void ITeeEditor::PutTreeView ( VARIANT_BOOL Value );
__declspec(implementation_key(1586)) VARIANT_BOOL ITeeEditor::GetHighLightTabs ( );
__declspec(implementation_key(1587)) void ITeeEditor::PutHighLightTabs ( VARIANT_BOOL Value );
__declspec(implementation_key(1588)) long ITeeEditor::GetPixelsPerInch ( );
__declspec(implementation_key(1589)) void ITeeEditor::PutPixelsPerInch ( long Value );
__declspec(implementation_key(1590)) VARIANT_BOOL ITeeEditor::GetRememberPosition ( );
__declspec(implementation_key(1591)) void ITeeEditor::PutRememberPosition ( VARIANT_BOOL Value );
__declspec(implementation_key(1592)) _bstr_t ITeePreviewer::GetPreviewTitle ( );
__declspec(implementation_key(1593)) void ITeePreviewer::PutPreviewTitle ( _bstr_t Value );
__declspec(implementation_key(1594)) HRESULT ITeePreviewer::ShowPreview ( );
__declspec(implementation_key(1595)) OLE_COLOR ITeePreviewer::GetPaperColor ( );
__declspec(implementation_key(1596)) void ITeePreviewer::PutPaperColor ( OLE_COLOR Value );
__declspec(implementation_key(1597)) long ITeePreviewer::GetPreviewerLink ( );
__declspec(implementation_key(1598)) VARIANT_BOOL ITeePreviewer::GetMaximized ( );
__declspec(implementation_key(1599)) void ITeePreviewer::PutMaximized ( VARIANT_BOOL Value );
__declspec(implementation_key(1600)) ITeePreviewerOptionsPtr ITeePreviewer::GetOptions ( );
__declspec(implementation_key(1601)) long IChartGrid::GetCol ( );
__declspec(implementation_key(1602)) void IChartGrid::PutCol ( long Value );
__declspec(implementation_key(1603)) long IChartGrid::GetColCount ( );
__declspec(implementation_key(1604)) long IChartGrid::GetColwidths ( long Index );
__declspec(implementation_key(1605)) void IChartGrid::PutColwidths ( long Index, long Value );
__declspec(implementation_key(1606)) VARIANT_BOOL IChartGrid::GetEditorMode ( );
__declspec(implementation_key(1607)) void IChartGrid::PutEditorMode ( VARIANT_BOOL Value );
__declspec(implementation_key(1608)) long IChartGrid::GetGridHeight ( );
__declspec(implementation_key(1609)) long IChartGrid::GetGridWidth ( );
__declspec(implementation_key(1610)) long IChartGrid::GetLeftCol ( );
__declspec(implementation_key(1611)) void IChartGrid::PutLeftCol ( long Value );
__declspec(implementation_key(1612)) long IChartGrid::GetGridLink ( );
__declspec(implementation_key(1613)) HRESULT IChartGrid::RecalcDimensions ( );
__declspec(implementation_key(1614)) VARIANT_BOOL IChartGrid::GetShowLabels ( );
__declspec(implementation_key(1615)) void IChartGrid::PutShowLabels ( VARIANT_BOOL Value );
__declspec(implementation_key(1616)) VARIANT_BOOL IChartGrid::GetShowColors ( );
__declspec(implementation_key(1617)) void IChartGrid::PutShowColors ( VARIANT_BOOL Value );
__declspec(implementation_key(1618)) VARIANT_BOOL IChartGrid::GetShowFields ( );
__declspec(implementation_key(1619)) void IChartGrid::PutShowFields ( VARIANT_BOOL Value );
__declspec(implementation_key(1620)) IChartGridColsPtr IChartGrid::Cols ( );
__declspec(implementation_key(1621)) IChartGridRowsPtr IChartGrid::Rows ( );
__declspec(implementation_key(1622)) long IChartGrid::GetDefaultColWidth ( );
__declspec(implementation_key(1623)) void IChartGrid::PutDefaultColWidth ( long Value );
__declspec(implementation_key(1624)) VARIANT_BOOL IChartGrid::GetGrid3DMode ( );
__declspec(implementation_key(1625)) void IChartGrid::PutGrid3DMode ( VARIANT_BOOL Value );
__declspec(implementation_key(1626)) _bstr_t IChartGrid::GetLabelHeader ( );
__declspec(implementation_key(1627)) void IChartGrid::PutLabelHeader ( _bstr_t Value );
__declspec(implementation_key(1628)) VARIANT_BOOL IChartGrid::GetAllowAppend ( );
__declspec(implementation_key(1629)) void IChartGrid::PutAllowAppend ( VARIANT_BOOL Value );
__declspec(implementation_key(1630)) VARIANT_BOOL IChartGrid::GetReadOnly ( );
__declspec(implementation_key(1631)) void IChartGrid::PutReadOnly ( VARIANT_BOOL Value );
__declspec(implementation_key(1632)) VARIANT_BOOL IChartGrid::GetAllowInsertSeries ( );
__declspec(implementation_key(1633)) void IChartGrid::PutAllowInsertSeries ( VARIANT_BOOL Value );
__declspec(implementation_key(1634)) long IChartGrid::GetColorsColumn ( );
__declspec(implementation_key(1635)) long IChartGrid::GetFirstRowNum ( );
__declspec(implementation_key(1636)) long IChartGrid::GetLabelsColumn ( );
__declspec(implementation_key(1637)) VARIANT_BOOL IChartGrid::GetSeriesSymbolClickable ( );
__declspec(implementation_key(1638)) void IChartGrid::PutSeriesSymbolClickable ( VARIANT_BOOL Value );
__declspec(implementation_key(1639)) enum EChartGridShow IChartGrid::GetShowXValues ( );
__declspec(implementation_key(1640)) void IChartGrid::PutShowXValues ( enum EChartGridShow Value );
__declspec(implementation_key(1641)) void IChartGridNavigator::PutGrid ( struct IChartGrid * _arg1 );
__declspec(implementation_key(1642)) void IChartGridNavigator::PutGridLink ( long _arg1 );
__declspec(implementation_key(1643)) HRESULT IChartGridNavigator::EnableButtons ( );
__declspec(implementation_key(1644)) OLE_COLOR IChartGridNavigator::GetColor ( );
__declspec(implementation_key(1645)) void IChartGridNavigator::PutColor ( OLE_COLOR Value );
__declspec(implementation_key(1646)) HRESULT IChartPageNavigator::EnableButtons ( );
__declspec(implementation_key(1647)) OLE_COLOR IChartPageNavigator::GetColor ( );
__declspec(implementation_key(1648)) void IChartPageNavigator::PutColor ( OLE_COLOR Value );
__declspec(implementation_key(1649)) HRESULT IChartEditorPanel::SelectUnderMouse ( );
__declspec(implementation_key(1650)) enum EPanelBevel IChartEditorPanel::GetBevelOuter ( );
__declspec(implementation_key(1651)) void IChartEditorPanel::PutBevelOuter ( enum EPanelBevel Value );
__declspec(implementation_key(1652)) void IChartEditorPanel::PutEditor ( struct ITeeEditor * _arg1 );
__declspec(implementation_key(1653)) void IChartEditorPanel::PutEditorLink ( long _arg1 );
__declspec(implementation_key(1654)) HRESULT ISeriesSource::Open ( );
__declspec(implementation_key(1655)) HRESULT ISeriesSource::Close ( );
__declspec(implementation_key(1656)) VARIANT_BOOL ISeriesSource::GetActive ( );
__declspec(implementation_key(1657)) void ISeriesSource::PutActive ( VARIANT_BOOL Value );
__declspec(implementation_key(1658)) _variant_t ISeriesSource::GetSeries ( );
__declspec(implementation_key(1659)) void ISeriesSource::PutSeries ( const _variant_t & Value );
__declspec(implementation_key(1660)) HRESULT ISeriesSourceFile::Load ( );
__declspec(implementation_key(1661)) HRESULT ISeriesSourceFile::LoadFromFile ( _bstr_t FileName );
__declspec(implementation_key(1662)) HRESULT ISeriesSourceFile::LoadFromURL ( _bstr_t URL );
__declspec(implementation_key(1663)) _bstr_t ISeriesSourceFile::GetFileName ( );
__declspec(implementation_key(1664)) void ISeriesSourceFile::PutFileName ( _bstr_t Value );
__declspec(implementation_key(1665)) enum ELoadMode ISeriesSourceFile::GetLoadMode ( );
__declspec(implementation_key(1666)) void ISeriesSourceFile::PutLoadMode ( enum ELoadMode Value );
__declspec(implementation_key(1667)) _bstr_t ISeriesXMLSource::GetSeriesNode ( );
__declspec(implementation_key(1668)) void ISeriesXMLSource::PutSeriesNode ( _bstr_t Value );
__declspec(implementation_key(1669)) _bstr_t ISeriesXMLSource::GetValueSource ( );
__declspec(implementation_key(1670)) void ISeriesXMLSource::PutValueSource ( _bstr_t Value );
__declspec(implementation_key(1671)) IStringsPtr ISeriesXMLSource::GetXML ( );
__declspec(implementation_key(1672)) HRESULT ISeriesTextSource::LoadAsStream ( const _variant_t & AStream );
__declspec(implementation_key(1673)) long ISeriesTextSource::GetHeaderLines ( );
__declspec(implementation_key(1674)) void ISeriesTextSource::PutHeaderLines ( long Value );
__declspec(implementation_key(1675)) ISeriesTextFieldsPtr ISeriesTextSource::GetFields ( );
__declspec(implementation_key(1676)) _bstr_t ISeriesTextSource::GetFieldSeparator ( );
__declspec(implementation_key(1677)) void ISeriesTextSource::PutFieldSeparator ( _bstr_t Value );
__declspec(implementation_key(1678)) ISeriesTextFieldPtr ISeriesTextSource::AddField ( _bstr_t AName, long AIndex );
__declspec(implementation_key(1679)) HRESULT ISeriesTextSource::LoadFromStrings ( _bstr_t AStrings );
__declspec(implementation_key(1680)) HRESULT ICrossTabSource::Load ( );
__declspec(implementation_key(1681)) VARIANT_BOOL ICrossTabSource::GetCaseSensitive ( );
__declspec(implementation_key(1682)) void ICrossTabSource::PutCaseSensitive ( VARIANT_BOOL Value );
__declspec(implementation_key(1683)) _variant_t ICrossTabSource::GetDataSet ( );
__declspec(implementation_key(1684)) void ICrossTabSource::PutDataSet ( const _variant_t & Value );
__declspec(implementation_key(1685)) enum EGroupFormula ICrossTabSource::GetFormula ( );
__declspec(implementation_key(1686)) void ICrossTabSource::PutFormula ( enum EGroupFormula Value );
__declspec(implementation_key(1687)) _bstr_t ICrossTabSource::GetGroupField ( );
__declspec(implementation_key(1688)) void ICrossTabSource::PutGroupField ( _bstr_t Value );
__declspec(implementation_key(1689)) _bstr_t ICrossTabSource::GetLabelField ( );
__declspec(implementation_key(1690)) void ICrossTabSource::PutLabelField ( _bstr_t Value );
__declspec(implementation_key(1691)) _bstr_t ICrossTabSource::GetValueField ( );
__declspec(implementation_key(1692)) void ICrossTabSource::PutValueField ( _bstr_t Value );
__declspec(implementation_key(1693)) VARIANT_BOOL ICrossTabSource::GetHideSeries ( );
__declspec(implementation_key(1694)) void ICrossTabSource::PutHideSeries ( VARIANT_BOOL Value );
__declspec(implementation_key(1695)) IAxisPtr IAxes::GetLeft ( );
__declspec(implementation_key(1696)) IAxisPtr IAxes::GetRight ( );
__declspec(implementation_key(1697)) IAxisPtr IAxes::GetTop ( );
__declspec(implementation_key(1698)) IAxisPtr IAxes::GetBottom ( );
__declspec(implementation_key(1699)) VARIANT_BOOL IAxes::GetVisible ( );
__declspec(implementation_key(1700)) void IAxes::PutVisible ( VARIANT_BOOL Visible );
__declspec(implementation_key(1701)) IAxisPtr IAxes::GetDepth ( );
__declspec(implementation_key(1702)) VARIANT_BOOL IAxes::GetDrawAxesBeforeSeries ( );
__declspec(implementation_key(1703)) void IAxes::PutDrawAxesBeforeSeries ( VARIANT_BOOL Value );
__declspec(implementation_key(1704)) long IAxes::AddCustom ( VARIANT_BOOL IsHorizontal );
__declspec(implementation_key(1705)) IAxisPtr IAxes::GetCustom ( long CustomAxisIndex );
__declspec(implementation_key(1706)) long IAxes::GetCustomCount ( );
__declspec(implementation_key(1707)) HRESULT IAxes::RemoveCustom ( long CustomAxisIndex );
__declspec(implementation_key(1708)) HRESULT IAxes::RemoveAllCustom ( );
__declspec(implementation_key(1709)) IAxisPtr IAxes::GetDepthTop ( );
__declspec(implementation_key(1710)) VARIANT_BOOL IAxes::GetFastCalc ( );
__declspec(implementation_key(1711)) void IAxes::PutFastCalc ( VARIANT_BOOL Value );
__declspec(implementation_key(1712)) HRESULT IAxes::SetIsometric ( long aVertical, long aHorizontal );
__declspec(implementation_key(1713)) HRESULT IAxes::Hide ( );
__declspec(implementation_key(1714)) VARIANT_BOOL IAxes::GetBehind ( );
__declspec(implementation_key(1715)) void IAxes::PutBehind ( VARIANT_BOOL Value );
__declspec(implementation_key(1716)) VARIANT_BOOL IAxis::GetAutomatic ( );
__declspec(implementation_key(1717)) void IAxis::PutAutomatic ( VARIANT_BOOL Automatic );
__declspec(implementation_key(1718)) VARIANT_BOOL IAxis::GetAutomaticMaximum ( );
__declspec(implementation_key(1719)) void IAxis::PutAutomaticMaximum ( VARIANT_BOOL AutomaticMaximum );
__declspec(implementation_key(1720)) VARIANT_BOOL IAxis::GetAutomaticMinimum ( );
__declspec(implementation_key(1721)) void IAxis::PutAutomaticMinimum ( VARIANT_BOOL AutomaticMinimum );
__declspec(implementation_key(1722)) IChartAxisPenPtr IAxis::GetAxisPen ( );
__declspec(implementation_key(1723)) enum EAxisType IAxis::GetAxisType ( );
__declspec(implementation_key(1724)) VARIANT_BOOL IAxis::GetExactDateTime ( );
__declspec(implementation_key(1725)) void IAxis::PutExactDateTime ( VARIANT_BOOL ExactDateTime );
__declspec(implementation_key(1726)) IPenPtr IAxis::GetGridPen ( );
__declspec(implementation_key(1727)) double IAxis::GetIncrement ( );
__declspec(implementation_key(1728)) void IAxis::PutIncrement ( double Increment );
__declspec(implementation_key(1729)) VARIANT_BOOL IAxis::GetInverted ( );
__declspec(implementation_key(1730)) void IAxis::PutInverted ( VARIANT_BOOL Inverted );
__declspec(implementation_key(1731)) IAxisLabelsPtr IAxis::GetLabels ( );
__declspec(implementation_key(1732)) VARIANT_BOOL IAxis::GetLogarithmic ( );
__declspec(implementation_key(1733)) void IAxis::PutLogarithmic ( VARIANT_BOOL Logarithmic );
__declspec(implementation_key(1734)) double IAxis::GetMaximum ( );
__declspec(implementation_key(1735)) void IAxis::PutMaximum ( double Maximum );
__declspec(implementation_key(1736)) double IAxis::GetMinimum ( );
__declspec(implementation_key(1737)) void IAxis::PutMinimum ( double Minimum );
__declspec(implementation_key(1738)) long IAxis::GetMinorTickCount ( );
__declspec(implementation_key(1739)) void IAxis::PutMinorTickCount ( long MinorTickCount );
__declspec(implementation_key(1740)) long IAxis::GetMinorTickLength ( );
__declspec(implementation_key(1741)) void IAxis::PutMinorTickLength ( long MinorTickLength );
__declspec(implementation_key(1742)) IPenPtr IAxis::GetMinorTicks ( );
__declspec(implementation_key(1743)) long IAxis::GetPosition ( );
__declspec(implementation_key(1744)) long IAxis::GetTickInnerLength ( );
__declspec(implementation_key(1745)) void IAxis::PutTickInnerLength ( long TickInnerLength );
__declspec(implementation_key(1746)) long IAxis::GetTickLength ( );
__declspec(implementation_key(1747)) void IAxis::PutTickLength ( long TickLength );
__declspec(implementation_key(1748)) VARIANT_BOOL IAxis::GetTickOnLabelsOnly ( );
__declspec(implementation_key(1749)) void IAxis::PutTickOnLabelsOnly ( VARIANT_BOOL TickOnLabelsOnly );
__declspec(implementation_key(1750)) IPenPtr IAxis::GetTicks ( );
__declspec(implementation_key(1751)) IPenPtr IAxis::GetTicksInner ( );
__declspec(implementation_key(1752)) IAxisTitlePtr IAxis::GetTitle ( );
__declspec(implementation_key(1753)) long IAxis::GetTitleSize ( );
__declspec(implementation_key(1754)) void IAxis::PutTitleSize ( long TitleSize );
__declspec(implementation_key(1755)) VARIANT_BOOL IAxis::GetVisible ( );
__declspec(implementation_key(1756)) void IAxis::PutVisible ( VARIANT_BOOL Visible );
__declspec(implementation_key(1757)) HRESULT IAxis::AdjustMaxMin ( );
__declspec(implementation_key(1758)) long IAxis::CalcXPosValue ( double SomeValue );
__declspec(implementation_key(1759)) long IAxis::CalcYPosValue ( double SomeValue );
__declspec(implementation_key(1760)) long IAxis::CalcXSizeValue ( double SomeValue );
__declspec(implementation_key(1761)) long IAxis::CalcYSizeValue ( double SomeValue );
__declspec(implementation_key(1762)) double IAxis::CalcPosPoint ( long SomeValue );
__declspec(implementation_key(1763)) VARIANT_BOOL IAxis::Clicked ( long XCoord, long YCoord );
__declspec(implementation_key(1764)) HRESULT IAxis::CustomDraw ( long APosLabels, long APosTitle, long APosAxis, VARIANT_BOOL GridVisible );
__declspec(implementation_key(1765)) VARIANT_BOOL IAxis::IsDateTime ( );
__declspec(implementation_key(1766)) double IAxis::MaxXValue ( );
__declspec(implementation_key(1767)) double IAxis::MaxYValue ( );
__declspec(implementation_key(1768)) double IAxis::MinXValue ( );
__declspec(implementation_key(1769)) double IAxis::MinYValue ( );
__declspec(implementation_key(1770)) HRESULT IAxis::Scroll ( double Offset, VARIANT_BOOL CheckLimits );
__declspec(implementation_key(1771)) HRESULT IAxis::SetMinMax ( double AMin, double AMax );
__declspec(implementation_key(1772)) VARIANT_BOOL IAxis::GetGridCentered ( );
__declspec(implementation_key(1773)) void IAxis::PutGridCentered ( VARIANT_BOOL Value );
__declspec(implementation_key(1774)) double IAxis::GetPositionPercent ( );
__declspec(implementation_key(1775)) void IAxis::PutPositionPercent ( double Value );
__declspec(implementation_key(1776)) double IAxis::GetStartPosition ( );
__declspec(implementation_key(1777)) void IAxis::PutStartPosition ( double Value );
__declspec(implementation_key(1778)) double IAxis::GetEndPosition ( );
__declspec(implementation_key(1779)) void IAxis::PutEndPosition ( double Value );
__declspec(implementation_key(1780)) double IAxis::GetLogarithmicBase ( );
__declspec(implementation_key(1781)) void IAxis::PutLogarithmicBase ( double Value );
__declspec(implementation_key(1782)) HRESULT IAxis::CustomDrawMinMax ( long APosLabels, long APosTitle, long APosAxis, VARIANT_BOOL GridVisible, double AMinimum, double AMaximum, long AStartPosition, long AEndPosition );
__declspec(implementation_key(1783)) IPenPtr IAxis::GetMinorGrid ( );
__declspec(implementation_key(1784)) VARIANT_BOOL IAxis::GetOtherside ( );
__declspec(implementation_key(1785)) void IAxis::PutOtherside ( VARIANT_BOOL Value );
__declspec(implementation_key(1786)) long IAxis::GetAxisLink ( );
__declspec(implementation_key(1787)) double IAxis::MaxVisibleSeriesValue ( VARIANT_BOOL AllSeries, long SeriesIndex );
__declspec(implementation_key(1788)) double IAxis::MinVisibleSeriesValue ( VARIANT_BOOL AllSeries, long SeriesIndex );
__declspec(implementation_key(1789)) double IAxis::CalcIncrement ( );
__declspec(implementation_key(1790)) double IAxis::GetZPosition ( );
__declspec(implementation_key(1791)) void IAxis::PutZPosition ( double Value );
__declspec(implementation_key(1792)) long IAxis::GetMaximumOffset ( );
__declspec(implementation_key(1793)) void IAxis::PutMaximumOffset ( long Value );
__declspec(implementation_key(1794)) long IAxis::GetMinimumOffset ( );
__declspec(implementation_key(1795)) void IAxis::PutMinimumOffset ( long Value );
__declspec(implementation_key(1796)) double IAxis::GetGridZPosition ( );
__declspec(implementation_key(1797)) void IAxis::PutGridZPosition ( double Value );
__declspec(implementation_key(1798)) enum EPositionUnits IAxis::GetPositionUnits ( );
__declspec(implementation_key(1799)) void IAxis::PutPositionUnits ( enum EPositionUnits Value );
__declspec(implementation_key(1800)) long IAxis::GetIndex ( );
__declspec(implementation_key(1801)) long IAxis::GetIStartPos ( );
__declspec(implementation_key(1802)) long IAxis::GetIEndPos ( );
__declspec(implementation_key(1803)) long IAxis::GetIAxisSize ( );
__declspec(implementation_key(1804)) IAxisGridPenPtr IAxis::GetGrid ( );
__declspec(implementation_key(1805)) VARIANT_BOOL IAxis::GetMaximumRound ( );
__declspec(implementation_key(1806)) void IAxis::PutMaximumRound ( VARIANT_BOOL Value );
__declspec(implementation_key(1807)) VARIANT_BOOL IAxis::GetMinimumRound ( );
__declspec(implementation_key(1808)) void IAxis::PutMinimumRound ( VARIANT_BOOL Value );
__declspec(implementation_key(1809)) long IAxisLabels::GetAngle ( );
__declspec(implementation_key(1810)) void IAxisLabels::PutAngle ( long Angle );
__declspec(implementation_key(1811)) VARIANT_BOOL IAxisLabels::GetVisible ( );
__declspec(implementation_key(1812)) void IAxisLabels::PutVisible ( VARIANT_BOOL Visible );
__declspec(implementation_key(1813)) _bstr_t IAxisLabels::GetDateTimeFormat ( );
__declspec(implementation_key(1814)) void IAxisLabels::PutDateTimeFormat ( _bstr_t DateTimeFormat );
__declspec(implementation_key(1815)) ITeeFontPtr IAxisLabels::GetFont ( );
__declspec(implementation_key(1816)) _bstr_t IAxisLabels::FormattedValue ( double SomeValue );
__declspec(implementation_key(1817)) long IAxisLabels::GetPos ( );
__declspec(implementation_key(1818)) long IAxisLabels::Height ( double SomeValue );
__declspec(implementation_key(1819)) long IAxisLabels::MaxWidth ( );
__declspec(implementation_key(1820)) VARIANT_BOOL IAxisLabels::GetOnAxis ( );
__declspec(implementation_key(1821)) void IAxisLabels::PutOnAxis ( VARIANT_BOOL OnAxis );
__declspec(implementation_key(1822)) VARIANT_BOOL IAxisLabels::GetRoundFirstLabel ( );
__declspec(implementation_key(1823)) void IAxisLabels::PutRoundFirstLabel ( VARIANT_BOOL RoundFirstLabel );
__declspec(implementation_key(1824)) long IAxisLabels::GetSeparation ( );
__declspec(implementation_key(1825)) void IAxisLabels::PutSeparation ( long Separation );
__declspec(implementation_key(1826)) long IAxisLabels::GetSize ( );
__declspec(implementation_key(1827)) void IAxisLabels::PutSize ( long Size );
__declspec(implementation_key(1828)) enum EAxisLabelStyle IAxisLabels::GetStyle ( );
__declspec(implementation_key(1829)) void IAxisLabels::PutStyle ( enum EAxisLabelStyle Style );
__declspec(implementation_key(1830)) _bstr_t IAxisLabels::GetValueFormat ( );
__declspec(implementation_key(1831)) void IAxisLabels::PutValueFormat ( _bstr_t ValueFormat );
__declspec(implementation_key(1832)) long IAxisLabels::Width ( double SomeValue );
__declspec(implementation_key(1833)) VARIANT_BOOL IAxisLabels::GetMultiline ( );
__declspec(implementation_key(1834)) void IAxisLabels::PutMultiline ( VARIANT_BOOL Value );
__declspec(implementation_key(1835)) HRESULT IAxisLabels::TeeSplitInLines ( BSTR * St, _bstr_t Separator );
__declspec(implementation_key(1836)) VARIANT_BOOL IAxisLabels::GetExponent ( );
__declspec(implementation_key(1837)) void IAxisLabels::PutExponent ( VARIANT_BOOL Value );
__declspec(implementation_key(1838)) enum EAxisLabelAlign IAxisLabels::GetAlign ( );
__declspec(implementation_key(1839)) void IAxisLabels::PutAlign ( enum EAxisLabelAlign Value );
__declspec(implementation_key(1840)) ITeeCustomShapePtr IAxisLabels::GetFormat ( );
__declspec(implementation_key(1841)) long IAxisLabels::Add ( double Value, _bstr_t Text );
__declspec(implementation_key(1842)) IAxisLabelsItemPtr IAxisLabels::GetItem ( long Index );
__declspec(implementation_key(1843)) HRESULT IAxisLabels::Clear ( );
__declspec(implementation_key(1844)) long IAxisLabels::Count ( );
__declspec(implementation_key(1845)) VARIANT_BOOL IAxisLabels::GetAlternate ( );
__declspec(implementation_key(1846)) void IAxisLabels::PutAlternate ( VARIANT_BOOL Value );
__declspec(implementation_key(1847)) VARIANT_BOOL IAxisLabels::GetAutomatic ( );
__declspec(implementation_key(1848)) void IAxisLabels::PutAutomatic ( VARIANT_BOOL Value );
__declspec(implementation_key(1849)) long IAxisTitle::GetAngle ( );
__declspec(implementation_key(1850)) void IAxisTitle::PutAngle ( long Angle );
__declspec(implementation_key(1851)) _bstr_t IAxisTitle::GetCaption ( );
__declspec(implementation_key(1852)) void IAxisTitle::PutCaption ( _bstr_t Caption );
__declspec(implementation_key(1853)) ITeeFontPtr IAxisTitle::GetFont ( );
__declspec(implementation_key(1854)) VARIANT_BOOL IAxisTitle::GetVisible ( );
__declspec(implementation_key(1855)) void IAxisTitle::PutVisible ( VARIANT_BOOL Value );
__declspec(implementation_key(1856)) VARIANT_BOOL IAxisTitle::Clicked ( long X, long Y );
__declspec(implementation_key(1857)) OLE_COLOR ITeeCustomShape::GetColor ( );
__declspec(implementation_key(1858)) void ITeeCustomShape::PutColor ( OLE_COLOR Value );
__declspec(implementation_key(1859)) ITeeFontPtr ITeeCustomShape::GetFont ( );
__declspec(implementation_key(1860)) IGradientPtr ITeeCustomShape::GetGradient ( );
__declspec(implementation_key(1861)) long ITeeCustomShape::GetShadowSize ( );
__declspec(implementation_key(1862)) void ITeeCustomShape::PutShadowSize ( long Value );
__declspec(implementation_key(1863)) OLE_COLOR ITeeCustomShape::GetShadowColor ( );
__declspec(implementation_key(1864)) void ITeeCustomShape::PutShadowColor ( OLE_COLOR Value );
__declspec(implementation_key(1865)) VARIANT_BOOL ITeeCustomShape::GetTransparent ( );
__declspec(implementation_key(1866)) void ITeeCustomShape::PutTransparent ( VARIANT_BOOL Value );
__declspec(implementation_key(1867)) enum EChartObjectShapeStyle ITeeCustomShape::GetShapeStyle ( );
__declspec(implementation_key(1868)) void ITeeCustomShape::PutShapeStyle ( enum EChartObjectShapeStyle Value );
__declspec(implementation_key(1869)) long ITeeCustomShape::GetTransparency ( );
__declspec(implementation_key(1870)) void ITeeCustomShape::PutTransparency ( long Value );
__declspec(implementation_key(1871)) ITeeRectPtr ITeeCustomShape::GetShapeBounds ( );
__declspec(implementation_key(1872)) enum EPanelBevel ITeeCustomShape::GetBevel ( );
__declspec(implementation_key(1873)) void ITeeCustomShape::PutBevel ( enum EPanelBevel Value );
__declspec(implementation_key(1874)) long ITeeCustomShape::GetBevelWidth ( );
__declspec(implementation_key(1875)) void ITeeCustomShape::PutBevelWidth ( long Value );
__declspec(implementation_key(1876)) HRESULT ITeeCustomShape::ShowEditorShape ( );
__declspec(implementation_key(1877)) ITeeShadowPtr ITeeCustomShape::GetShadow ( );
__declspec(implementation_key(1878)) long ITeeCustomShape::GetRoundSize ( );
__declspec(implementation_key(1879)) void ITeeCustomShape::PutRoundSize ( long Value );
__declspec(implementation_key(1880)) IPenPtr ITeeCustomShape::GetPen ( );
__declspec(implementation_key(1881)) IBackImagePtr ITeeCustomShape::GetPicture ( );
__declspec(implementation_key(1882)) HRESULT ITeeCustomShape::Show ( );
__declspec(implementation_key(1883)) HRESULT ITeeCustomShape::Hide ( );
__declspec(implementation_key(1884)) VARIANT_BOOL ITeeShapePosition::GetCustomPosition ( );
__declspec(implementation_key(1885)) void ITeeShapePosition::PutCustomPosition ( VARIANT_BOOL Value );
__declspec(implementation_key(1886)) long ITeeShapePosition::GetLeft ( );
__declspec(implementation_key(1887)) void ITeeShapePosition::PutLeft ( long Value );
__declspec(implementation_key(1888)) long ITeeShapePosition::GetTop ( );
__declspec(implementation_key(1889)) void ITeeShapePosition::PutTop ( long Value );
__declspec(implementation_key(1890)) VARIANT_BOOL ITitles::GetAdjustFrame ( );
__declspec(implementation_key(1891)) void ITitles::PutAdjustFrame ( VARIANT_BOOL AdjustFrame );
__declspec(implementation_key(1892)) enum ETitleAlignment ITitles::GetAlignment ( );
__declspec(implementation_key(1893)) void ITitles::PutAlignment ( enum ETitleAlignment Alignment );
__declspec(implementation_key(1894)) IBrushPtr ITitles::GetBrush ( );
__declspec(implementation_key(1895)) IPenPtr ITitles::GetFrame ( );
__declspec(implementation_key(1896)) IStringsPtr ITitles::GetText ( );
__declspec(implementation_key(1897)) VARIANT_BOOL ITitles::GetVisible ( );
__declspec(implementation_key(1898)) void ITitles::PutVisible ( VARIANT_BOOL Visible );
__declspec(implementation_key(1899)) VARIANT_BOOL ITitles::Clicked ( long X, long Y );
__declspec(implementation_key(1900)) HRESULT ITitles::Clear ( );
__declspec(implementation_key(1901)) _bstr_t ITitles::GetCaption ( );
__declspec(implementation_key(1902)) void ITitles::PutCaption ( _bstr_t Value );
__declspec(implementation_key(1903)) long ITitles::GetVertMargin ( );
__declspec(implementation_key(1904)) void ITitles::PutVertMargin ( long Value );
__declspec(implementation_key(1905)) VARIANT_BOOL ICalendarCell::GetVisible ( );
__declspec(implementation_key(1906)) void ICalendarCell::PutVisible ( VARIANT_BOOL Value );
__declspec(implementation_key(1907)) _bstr_t ICalendarCellUpper::GetFormat ( );
__declspec(implementation_key(1908)) void ICalendarCellUpper::PutFormat ( _bstr_t Value );
__declspec(implementation_key(1909)) VARIANT_BOOL ICalendarCellUpper::GetUpperCase ( );
__declspec(implementation_key(1910)) void ICalendarCellUpper::PutUpperCase ( VARIANT_BOOL Value );
__declspec(implementation_key(1911)) double ICalendarSeries::GetDate ( );
__declspec(implementation_key(1912)) void ICalendarSeries::PutDate ( double Value );
__declspec(implementation_key(1913)) ICalendarCellPtr ICalendarSeries::GetDays ( );
__declspec(implementation_key(1914)) ICalendarCellUpperPtr ICalendarSeries::GetMonths ( );
__declspec(implementation_key(1915)) ICalendarCellPtr ICalendarSeries::GetTrailing ( );
__declspec(implementation_key(1916)) ICalendarCellPtr ICalendarSeries::GetSunday ( );
__declspec(implementation_key(1917)) ICalendarCellPtr ICalendarSeries::GetToday ( );
__declspec(implementation_key(1918)) ICalendarCellUpperPtr ICalendarSeries::GetWeekdays ( );
__declspec(implementation_key(1919)) HRESULT ICalendarSeries::NextMonth ( );
__declspec(implementation_key(1920)) HRESULT ICalendarSeries::PreviousMonth ( );
__declspec(implementation_key(1921)) struct TeeRect ICalendarSeries::RectCell ( long Column, long Row );
__declspec(implementation_key(1922)) long ICalendarSeries::Rows ( );
__declspec(implementation_key(1923)) struct TeeRect ICalendarSeries::SeriesRect ( );
__declspec(implementation_key(1924)) VARIANT_BOOL ICalendarSeries::GetNextButtonVisible ( );
__declspec(implementation_key(1925)) void ICalendarSeries::PutNextButtonVisible ( VARIANT_BOOL Value );
__declspec(implementation_key(1926)) VARIANT_BOOL ICalendarSeries::GetPreviousButtonVisible ( );
__declspec(implementation_key(1927)) void ICalendarSeries::PutPreviousButtonVisible ( VARIANT_BOOL Value );
__declspec(implementation_key(1928)) VARIANT_BOOL ICalendarSeries::ClickedDate ( long X, long Y, DATE * ADate );
__declspec(implementation_key(1929)) IPenPtr ITeeShapePanel::GetFrame ( );
__declspec(implementation_key(1930)) double IAxisLabelsItem::GetValue ( );
__declspec(implementation_key(1931)) void IAxisLabelsItem::PutValue ( double Value );
__declspec(implementation_key(1932)) _bstr_t IAxisLabelsItem::GetText ( );
__declspec(implementation_key(1933)) void IAxisLabelsItem::PutText ( _bstr_t Value );
__declspec(implementation_key(1934)) VARIANT_BOOL IAxisLabelsItem::GetVisible ( );
__declspec(implementation_key(1935)) void IAxisLabelsItem::PutVisible ( VARIANT_BOOL Value );
__declspec(implementation_key(1936)) IStringsPtr IMarksItem::GetText ( );
__declspec(implementation_key(1937)) VARIANT_BOOL IMarksItem::GetVisible ( );
__declspec(implementation_key(1938)) void IMarksItem::PutVisible ( VARIANT_BOOL Value );
__declspec(implementation_key(1939)) IBrushPtr IMarksItem::GetBrush ( );
__declspec(implementation_key(1940)) long IOrgItem::AddChild ( _bstr_t Text );
__declspec(implementation_key(1941)) long IOrgItem::AddBrother ( _bstr_t Text );
__declspec(implementation_key(1942)) _variant_t IOrgItem::GetSeries ( );
__declspec(implementation_key(1943)) long IOrgItem::GetSuperior ( );
__declspec(implementation_key(1944)) void IOrgItem::PutSuperior ( long Value );
__declspec(implementation_key(1945)) _bstr_t IOrgItem::GetText ( );
__declspec(implementation_key(1946)) void IOrgItem::PutText ( _bstr_t Value );
__declspec(implementation_key(1947)) IOrgShapePtr IOrgItem::GetFormat ( );
__declspec(implementation_key(1948)) IOrgItemPtr IOrgItemCollection::GetItems ( long Index );
__declspec(implementation_key(1949)) long IOrgSeries::Add ( _bstr_t Text, long Superior );
__declspec(implementation_key(1950)) long IOrgSeries::FirstChild ( long ValueIndex );
__declspec(implementation_key(1951)) struct TeeRect IOrgSeries::GetBounds ( );
__declspec(implementation_key(1952)) IOrgItemPtr IOrgSeries::GetItem ( long Index );
__declspec(implementation_key(1953)) IOrgShapePtr IOrgSeries::GetFormat ( );
__declspec(implementation_key(1954)) IOrgItemCollectionPtr IOrgSeries::GetItems ( );
__declspec(implementation_key(1955)) enum EOrgLineStyle IOrgSeries::GetLineStyle ( );
__declspec(implementation_key(1956)) void IOrgSeries::PutLineStyle ( enum EOrgLineStyle Value );
__declspec(implementation_key(1957)) ISpacingPtr IOrgSeries::GetSpacing ( );
__declspec(implementation_key(1958)) VARIANT_BOOL ITextShape::GetAutoSize ( );
__declspec(implementation_key(1959)) void ITextShape::PutAutoSize ( VARIANT_BOOL Value );
__declspec(implementation_key(1960)) VARIANT_BOOL ITextShape::GetClipText ( );
__declspec(implementation_key(1961)) void ITextShape::PutClipText ( VARIANT_BOOL Value );
__declspec(implementation_key(1962)) short ITextShape::GetCursor ( );
__declspec(implementation_key(1963)) void ITextShape::PutCursor ( short Value );
__declspec(implementation_key(1964)) _bstr_t ITextShape::GetText ( );
__declspec(implementation_key(1965)) void ITextShape::PutText ( _bstr_t Value );
__declspec(implementation_key(1966)) enum ETitleAlignment ITextShape::GetTextAlignment ( );
__declspec(implementation_key(1967)) void ITextShape::PutTextAlignment ( enum ETitleAlignment Value );
__declspec(implementation_key(1968)) IMarginsPtr ITextShape::GetMargins ( );
__declspec(implementation_key(1969)) IBrushPtr IWall::GetBrush ( );
__declspec(implementation_key(1970)) OLE_COLOR IWall::GetColor ( );
__declspec(implementation_key(1971)) void IWall::PutColor ( OLE_COLOR Color );
__declspec(implementation_key(1972)) IPenPtr IWall::GetPen ( );
__declspec(implementation_key(1973)) long IWall::GetSize ( );
__declspec(implementation_key(1974)) void IWall::PutSize ( long Size );
__declspec(implementation_key(1975)) VARIANT_BOOL IWall::GetTransparent ( );
__declspec(implementation_key(1976)) void IWall::PutTransparent ( VARIANT_BOOL Value );
__declspec(implementation_key(1977)) VARIANT_BOOL IWall::GetDark3D ( );
__declspec(implementation_key(1978)) void IWall::PutDark3D ( VARIANT_BOOL Value );
__declspec(implementation_key(1979)) IGradientPtr IWall::GetGradient ( );
__declspec(implementation_key(1980)) VARIANT_BOOL IWall::GetVisible ( );
__declspec(implementation_key(1981)) void IWall::PutVisible ( VARIANT_BOOL Value );
__declspec(implementation_key(1982)) long IWall::GetTransparency ( );
__declspec(implementation_key(1983)) void IWall::PutTransparency ( long Value );
__declspec(implementation_key(1984)) VARIANT_BOOL IWall::GetAutoHide ( );
__declspec(implementation_key(1985)) void IWall::PutAutoHide ( VARIANT_BOOL Value );
__declspec(implementation_key(1986)) IBackImagePtr IWall::GetPicture ( );
__declspec(implementation_key(1987)) IWallPtr IWalls::GetBottom ( );
__declspec(implementation_key(1988)) IWallPtr IWalls::GetLeft ( );
__declspec(implementation_key(1989)) VARIANT_BOOL IWalls::GetVisible ( );
__declspec(implementation_key(1990)) void IWalls::PutVisible ( VARIANT_BOOL Visible );
__declspec(implementation_key(1991)) OLE_COLOR IWalls::GetBackColor ( );
__declspec(implementation_key(1992)) void IWalls::PutBackColor ( OLE_COLOR BackColor );
__declspec(implementation_key(1993)) IWallPtr IWalls::GetBack ( );
__declspec(implementation_key(1994)) IWallPtr IWalls::GetRight ( );
__declspec(implementation_key(1995)) void IWalls::PutSize ( long _arg1 );
__declspec(implementation_key(1996)) enum EGradientDirection IGradient::GetDirection ( );
__declspec(implementation_key(1997)) void IGradient::PutDirection ( enum EGradientDirection Direction );
__declspec(implementation_key(1998)) OLE_COLOR IGradient::GetStartColor ( );
__declspec(implementation_key(1999)) void IGradient::PutStartColor ( OLE_COLOR StartColor );
__declspec(implementation_key(2000)) OLE_COLOR IGradient::GetEndColor ( );
__declspec(implementation_key(2001)) void IGradient::PutEndColor ( OLE_COLOR EndColor );
__declspec(implementation_key(2002)) VARIANT_BOOL IGradient::GetVisible ( );
__declspec(implementation_key(2003)) void IGradient::PutVisible ( VARIANT_BOOL Visible );
__declspec(implementation_key(2004)) OLE_COLOR IGradient::GetMidColor ( );
__declspec(implementation_key(2005)) void IGradient::PutMidColor ( OLE_COLOR Value );
__declspec(implementation_key(2006)) long IGradient::GetRadialX ( );
__declspec(implementation_key(2007)) void IGradient::PutRadialX ( long Value );
__declspec(implementation_key(2008)) long IGradient::GetRadialY ( );
__declspec(implementation_key(2009)) void IGradient::PutRadialY ( long Value );
__declspec(implementation_key(2010)) long IGradient::GetBalance ( );
__declspec(implementation_key(2011)) void IGradient::PutBalance ( long Value );
__declspec(implementation_key(2012)) HRESULT IGradient::ShowEditor ( VARIANT_BOOL OnlyStartColor );
__declspec(implementation_key(2013)) long IGradient::GetAngle ( );
__declspec(implementation_key(2014)) void IGradient::PutAngle ( long Value );
__declspec(implementation_key(2015)) ISubGradientPtr IGradient::GetSubGradient ( );
__declspec(implementation_key(2016)) VARIANT_BOOL IPanel::GetBackImageInside ( );
__declspec(implementation_key(2017)) void IPanel::PutBackImageInside ( VARIANT_BOOL BackImageInside );
__declspec(implementation_key(2018)) enum EBackImageMode IPanel::GetBackImageMode ( );
__declspec(implementation_key(2019)) void IPanel::PutBackImageMode ( enum EBackImageMode BackImageMode );
__declspec(implementation_key(2020)) enum EPanelBevel IPanel::GetBevelInner ( );
__declspec(implementation_key(2021)) void IPanel::PutBevelInner ( enum EPanelBevel BevelInner );
__declspec(implementation_key(2022)) enum EPanelBevel IPanel::GetBevelOuter ( );
__declspec(implementation_key(2023)) void IPanel::PutBevelOuter ( enum EPanelBevel BevelOuter );
__declspec(implementation_key(2024)) long IPanel::GetBevelWidth ( );
__declspec(implementation_key(2025)) void IPanel::PutBevelWidth ( long BevelWidth );
__declspec(implementation_key(2026)) long IPanel::GetBevelOffset ( );
__declspec(implementation_key(2027)) void IPanel::PutBevelOffset ( long BevelOffset );
__declspec(implementation_key(2028)) enum EBorderStyle IPanel::GetBorderStyle ( );
__declspec(implementation_key(2029)) void IPanel::PutBorderStyle ( enum EBorderStyle BorderStyle );
__declspec(implementation_key(2030)) OLE_COLOR IPanel::GetColor ( );
__declspec(implementation_key(2031)) void IPanel::PutColor ( OLE_COLOR Color );
__declspec(implementation_key(2032)) IGradientPtr IPanel::GetGradient ( );
__declspec(implementation_key(2033)) long IPanel::GetMarginLeft ( );
__declspec(implementation_key(2034)) void IPanel::PutMarginLeft ( long MarginLeft );
__declspec(implementation_key(2035)) long IPanel::GetMarginTop ( );
__declspec(implementation_key(2036)) void IPanel::PutMarginTop ( long MarginTop );
__declspec(implementation_key(2037)) long IPanel::GetMarginRight ( );
__declspec(implementation_key(2038)) void IPanel::PutMarginRight ( long MarginRight );
__declspec(implementation_key(2039)) long IPanel::GetMarginBottom ( );
__declspec(implementation_key(2040)) void IPanel::PutMarginBottom ( long MarginBottom );
__declspec(implementation_key(2041)) HRESULT IPanel::BackImageClear ( );
__declspec(implementation_key(2042)) HRESULT IPanel::BackImageLoad ( _bstr_t FileName );
__declspec(implementation_key(2043)) enum EMarginUnits IPanel::GetMarginUnits ( );
__declspec(implementation_key(2044)) void IPanel::PutMarginUnits ( enum EMarginUnits Value );
__declspec(implementation_key(2045)) ITeeShadowPtr IPanel::GetShadow ( );
__declspec(implementation_key(2046)) long IPanel::GetBorderRound ( );
__declspec(implementation_key(2047)) void IPanel::PutBorderRound ( long Value );
__declspec(implementation_key(2048)) IPenPtr IPanel::GetBorder ( );
__declspec(implementation_key(2049)) VARIANT_BOOL IPanel::GetBackImageTransparent ( );
__declspec(implementation_key(2050)) void IPanel::PutBackImageTransparent ( VARIANT_BOOL Value );
__declspec(implementation_key(2051)) IBackImagePtr IPanel::GetBackImage ( );
__declspec(implementation_key(2052)) IBrushPtr IPointer::GetBrush ( );
__declspec(implementation_key(2053)) VARIANT_BOOL IPointer::GetDraw3D ( );
__declspec(implementation_key(2054)) void IPointer::PutDraw3D ( VARIANT_BOOL Draw3D );
__declspec(implementation_key(2055)) long IPointer::GetHorizontalSize ( );
__declspec(implementation_key(2056)) void IPointer::PutHorizontalSize ( long HorizontalSize );
__declspec(implementation_key(2057)) long IPointer::GetVerticalSize ( );
__declspec(implementation_key(2058)) void IPointer::PutVerticalSize ( long VerticalSize );
__declspec(implementation_key(2059)) VARIANT_BOOL IPointer::GetInflateMargins ( );
__declspec(implementation_key(2060)) void IPointer::PutInflateMargins ( VARIANT_BOOL InflateMargins );
__declspec(implementation_key(2061)) IPenPtr IPointer::GetPen ( );
__declspec(implementation_key(2062)) enum EPointerStyle IPointer::GetStyle ( );
__declspec(implementation_key(2063)) void IPointer::PutStyle ( enum EPointerStyle Style );
__declspec(implementation_key(2064)) VARIANT_BOOL IPointer::GetVisible ( );
__declspec(implementation_key(2065)) void IPointer::PutVisible ( VARIANT_BOOL Visible );
__declspec(implementation_key(2066)) VARIANT_BOOL IPointer::GetDark3D ( );
__declspec(implementation_key(2067)) void IPointer::PutDark3D ( VARIANT_BOOL Value );
__declspec(implementation_key(2068)) HRESULT IPointer::DrawPointer ( long DC, VARIANT_BOOL Is3D, long px, long py, long tmpHoriz, long tmpVert, OLE_COLOR AColor, enum EPointerStyle AStyle );
__declspec(implementation_key(2069)) IGradientPtr IPointer::GetGradient ( );
__declspec(implementation_key(2070)) long IPointer::GetTransparency ( );
__declspec(implementation_key(2071)) void IPointer::PutTransparency ( long Value );
__declspec(implementation_key(2072)) ITeeShadowPtr IPointer::GetShadow ( );
__declspec(implementation_key(2073)) IPointerPtr ICustomSeries::GetPointer ( );
__declspec(implementation_key(2074)) VARIANT_BOOL ICustomSeries::GetStairs ( );
__declspec(implementation_key(2075)) void ICustomSeries::PutStairs ( VARIANT_BOOL Stairs );
__declspec(implementation_key(2076)) VARIANT_BOOL ICustomSeries::GetInvertedStairs ( );
__declspec(implementation_key(2077)) void ICustomSeries::PutInvertedStairs ( VARIANT_BOOL InvertedStairs );
__declspec(implementation_key(2078)) IPenPtr ICustomSeries::GetLinePen ( );
__declspec(implementation_key(2079)) enum EBrushStyle ICustomSeries::GetLineBrush ( );
__declspec(implementation_key(2080)) void ICustomSeries::PutLineBrush ( enum EBrushStyle LineBrush );
__declspec(implementation_key(2081)) VARIANT_BOOL ICustomSeries::GetClickableLine ( );
__declspec(implementation_key(2082)) void ICustomSeries::PutClickableLine ( VARIANT_BOOL ClickableLine );
__declspec(implementation_key(2083)) long ICustomSeries::GetLineHeight ( );
__declspec(implementation_key(2084)) void ICustomSeries::PutLineHeight ( long Value );
__declspec(implementation_key(2085)) VARIANT_BOOL ICustomSeries::GetDark3D ( );
__declspec(implementation_key(2086)) void ICustomSeries::PutDark3D ( VARIANT_BOOL Value );
__declspec(implementation_key(2087)) IBrushPtr ICustomSeries::GetBrush ( );
__declspec(implementation_key(2088)) VARIANT_BOOL ICustomSeries::GetColorEachLine ( );
__declspec(implementation_key(2089)) void ICustomSeries::PutColorEachLine ( VARIANT_BOOL Value );
__declspec(implementation_key(2090)) IPenPtr ICustomSeries::GetOutline ( );
__declspec(implementation_key(2091)) long ICustomSeries::GetTransparency ( );
__declspec(implementation_key(2092)) void ICustomSeries::PutTransparency ( long Value );
__declspec(implementation_key(2093)) ITeeShadowPtr ICustomSeries::GetShadow ( );
__declspec(implementation_key(2094)) enum ETreatNullsStyle ICustomSeries::GetTreatNulls ( );
__declspec(implementation_key(2095)) void ICustomSeries::PutTreatNulls ( enum ETreatNullsStyle Value );
__declspec(implementation_key(2096)) enum EBrushStyle IAreaSeries::GetAreaBrush ( );
__declspec(implementation_key(2097)) void IAreaSeries::PutAreaBrush ( enum EBrushStyle AreaBrush );
__declspec(implementation_key(2098)) IPenPtr IAreaSeries::GetAreaPen ( );
__declspec(implementation_key(2099)) enum EMultiArea IAreaSeries::GetMultiArea ( );
__declspec(implementation_key(2100)) void IAreaSeries::PutMultiArea ( enum EMultiArea MultiArea );
__declspec(implementation_key(2101)) long IAreaSeries::GetOriginPos ( long AValueIndex );
__declspec(implementation_key(2102)) VARIANT_BOOL IAreaSeries::GetUseYOrigin ( );
__declspec(implementation_key(2103)) void IAreaSeries::PutUseYOrigin ( VARIANT_BOOL Value );
__declspec(implementation_key(2104)) double IAreaSeries::GetYOrigin ( );
__declspec(implementation_key(2105)) void IAreaSeries::PutYOrigin ( double Value );
__declspec(implementation_key(2106)) IGradientPtr IAreaSeries::GetGradient ( );
__declspec(implementation_key(2107)) OLE_COLOR IAreaSeries::GetAreaColor ( );
__declspec(implementation_key(2108)) void IAreaSeries::PutAreaColor ( OLE_COLOR Value );
__declspec(implementation_key(2109)) IBrushPtr IAreaSeries::GetAreaChartBrush ( );
__declspec(implementation_key(2110)) long IAreaSeries::GetStackGroup ( );
__declspec(implementation_key(2111)) void IAreaSeries::PutStackGroup ( long Value );
__declspec(implementation_key(2112)) IPointerPtr IPointSeries::GetPointer ( );
__declspec(implementation_key(2113)) VARIANT_BOOL IPointSeries::GetDark3D ( );
__declspec(implementation_key(2114)) void IPointSeries::PutDark3D ( VARIANT_BOOL Value );
__declspec(implementation_key(2115)) long IPointSeries::GetTransparency ( );
__declspec(implementation_key(2116)) void IPointSeries::PutTransparency ( long Value );
__declspec(implementation_key(2117)) VARIANT_BOOL IPointSeries::GetFastPoint ( );
__declspec(implementation_key(2118)) void IPointSeries::PutFastPoint ( VARIANT_BOOL Value );
__declspec(implementation_key(2119)) enum ETreatNullsStyle IPointSeries::GetTreatNulls ( );
__declspec(implementation_key(2120)) void IPointSeries::PutTreatNulls ( enum ETreatNullsStyle Value );
__declspec(implementation_key(2121)) enum ECustomSeriesStack ILineSeries::GetStacked ( );
__declspec(implementation_key(2122)) void ILineSeries::PutStacked ( enum ECustomSeriesStack Value );
__declspec(implementation_key(2123)) IGradientPtr ILineSeries::GetGradient ( );
__declspec(implementation_key(2124)) IValueListPtr IBubbleSeries::GetRadiusValues ( );
__declspec(implementation_key(2125)) VARIANT_BOOL IBubbleSeries::GetSquared ( );
__declspec(implementation_key(2126)) void IBubbleSeries::PutSquared ( VARIANT_BOOL Squared );
__declspec(implementation_key(2127)) long IBubbleSeries::AddBubble ( double AX, double AY, double ARadius, _bstr_t AXLabel, OLE_COLOR Value );
__declspec(implementation_key(2128)) IPenPtr IGanttSeries::GetConnectingPen ( );
__declspec(implementation_key(2129)) IValueListPtr IGanttSeries::GetEndValues ( );
__declspec(implementation_key(2130)) IValueListPtr IGanttSeries::GetStartValues ( );
__declspec(implementation_key(2131)) IValueListPtr IGanttSeries::GetNextTask ( );
__declspec(implementation_key(2132)) long IGanttSeries::AddGantt ( double AStart, double AEnd, double AY, _bstr_t SomeLabel );
__declspec(implementation_key(2133)) long IGanttSeries::AddGanttColor ( double AStart, double AEnd, double AY, _bstr_t AXLabel, OLE_COLOR Value );
__declspec(implementation_key(2134)) enum ETextAlignment IShapeSeries::GetAlignment ( );
__declspec(implementation_key(2135)) void IShapeSeries::PutAlignment ( enum ETextAlignment Alignment );
__declspec(implementation_key(2136)) IBrushPtr IShapeSeries::GetBrush ( );
__declspec(implementation_key(2137)) IChartFontPtr IShapeSeries::GetFont ( );
__declspec(implementation_key(2138)) IPenPtr IShapeSeries::GetPen ( );
__declspec(implementation_key(2139)) VARIANT_BOOL IShapeSeries::GetRoundRectangle ( );
__declspec(implementation_key(2140)) void IShapeSeries::PutRoundRectangle ( VARIANT_BOOL RoundRectangle );
__declspec(implementation_key(2141)) enum EShapeStyle IShapeSeries::GetStyle ( );
__declspec(implementation_key(2142)) void IShapeSeries::PutStyle ( enum EShapeStyle Style );
__declspec(implementation_key(2143)) IStringsPtr IShapeSeries::GetText ( );
__declspec(implementation_key(2144)) VARIANT_BOOL IShapeSeries::GetTransparent ( );
__declspec(implementation_key(2145)) void IShapeSeries::PutTransparent ( VARIANT_BOOL Transparent );
__declspec(implementation_key(2146)) double IShapeSeries::GetX0 ( );
__declspec(implementation_key(2147)) void IShapeSeries::PutX0 ( double X0 );
__declspec(implementation_key(2148)) double IShapeSeries::GetX1 ( );
__declspec(implementation_key(2149)) void IShapeSeries::PutX1 ( double X1 );
__declspec(implementation_key(2150)) enum EShapeXYStyle IShapeSeries::GetXYStyle ( );
__declspec(implementation_key(2151)) void IShapeSeries::PutXYStyle ( enum EShapeXYStyle XYStyle );
__declspec(implementation_key(2152)) double IShapeSeries::GetY0 ( );
__declspec(implementation_key(2153)) void IShapeSeries::PutY0 ( double Y0 );
__declspec(implementation_key(2154)) double IShapeSeries::GetY1 ( );
__declspec(implementation_key(2155)) void IShapeSeries::PutY1 ( double Y1 );
__declspec(implementation_key(2156)) HRESULT IShapeSeries::ShapeImageLoad ( _bstr_t FileName );
__declspec(implementation_key(2157)) HRESULT IShapeSeries::ShapeImageClear ( );
__declspec(implementation_key(2158)) enum ETeeVertAlign IShapeSeries::GetVertAlign ( );
__declspec(implementation_key(2159)) void IShapeSeries::PutVertAlign ( enum ETeeVertAlign Value );
__declspec(implementation_key(2160)) IGradientPtr IShapeSeries::GetGradient ( );
__declspec(implementation_key(2161)) long IShapeSeries::GetTransparency ( );
__declspec(implementation_key(2162)) void IShapeSeries::PutTransparency ( long Value );
__declspec(implementation_key(2163)) long IArrowSeries::GetArrowHeight ( );
__declspec(implementation_key(2164)) void IArrowSeries::PutArrowHeight ( long ArrowHeight );
__declspec(implementation_key(2165)) long IArrowSeries::GetArrowWidth ( );
__declspec(implementation_key(2166)) void IArrowSeries::PutArrowWidth ( long ArrowWidth );
__declspec(implementation_key(2167)) IValueListPtr IArrowSeries::GetEndXValues ( );
__declspec(implementation_key(2168)) IValueListPtr IArrowSeries::GetEndYValues ( );
__declspec(implementation_key(2169)) IValueListPtr IArrowSeries::GetStartXValues ( );
__declspec(implementation_key(2170)) IValueListPtr IArrowSeries::GetStartYValues ( );
__declspec(implementation_key(2171)) long IArrowSeries::AddArrow ( double X0, double Y0, double X1, double Y1, _bstr_t ALabel, OLE_COLOR Value );
__declspec(implementation_key(2172)) long IArrowSeries::GetArrowPercent ( );
__declspec(implementation_key(2173)) void IArrowSeries::PutArrowPercent ( long Value );
__declspec(implementation_key(2174)) enum EMultiBar ICustomBarSeries::GetMultiBar ( );
__declspec(implementation_key(2175)) void ICustomBarSeries::PutMultiBar ( enum EMultiBar MultiBar );
__declspec(implementation_key(2176)) VARIANT_BOOL ICustomBarSeries::GetAutoMarkPosition ( );
__declspec(implementation_key(2177)) void ICustomBarSeries::PutAutoMarkPosition ( VARIANT_BOOL AutoMarkPosition );
__declspec(implementation_key(2178)) IBrushPtr ICustomBarSeries::GetBarBrush ( );
__declspec(implementation_key(2179)) IPenPtr ICustomBarSeries::GetBarPen ( );
__declspec(implementation_key(2180)) enum EBarStyle ICustomBarSeries::GetBarStyle ( );
__declspec(implementation_key(2181)) void ICustomBarSeries::PutBarStyle ( enum EBarStyle BarStyle );
__declspec(implementation_key(2182)) long ICustomBarSeries::GetBarWidthPercent ( );
__declspec(implementation_key(2183)) void ICustomBarSeries::PutBarWidthPercent ( long BarWidthPercent );
__declspec(implementation_key(2184)) VARIANT_BOOL ICustomBarSeries::GetDark3D ( );
__declspec(implementation_key(2185)) void ICustomBarSeries::PutDark3D ( VARIANT_BOOL Dark3D );
__declspec(implementation_key(2186)) long ICustomBarSeries::GetOffsetPercent ( );
__declspec(implementation_key(2187)) void ICustomBarSeries::PutOffsetPercent ( long OffsetPercent );
__declspec(implementation_key(2188)) VARIANT_BOOL ICustomBarSeries::GetSideMargins ( );
__declspec(implementation_key(2189)) void ICustomBarSeries::PutSideMargins ( VARIANT_BOOL SideMargins );
__declspec(implementation_key(2190)) VARIANT_BOOL ICustomBarSeries::GetUseOrigin ( );
__declspec(implementation_key(2191)) void ICustomBarSeries::PutUseOrigin ( VARIANT_BOOL UseOrigin );
__declspec(implementation_key(2192)) double ICustomBarSeries::GetOrigin ( );
__declspec(implementation_key(2193)) void ICustomBarSeries::PutOrigin ( double Origin );
__declspec(implementation_key(2194)) long ICustomBarSeries::GetOriginPos ( long SomeValueIndex );
__declspec(implementation_key(2195)) VARIANT_BOOL ICustomBarSeries::GetAutoBarSize ( );
__declspec(implementation_key(2196)) void ICustomBarSeries::PutAutoBarSize ( VARIANT_BOOL Value );
__declspec(implementation_key(2197)) HRESULT ICustomBarSeries::BarImageLoad ( _bstr_t FileName );
__declspec(implementation_key(2198)) HRESULT ICustomBarSeries::BarImageClear ( );
__declspec(implementation_key(2199)) IGradientPtr ICustomBarSeries::GetGradient ( );
__declspec(implementation_key(2200)) long ICustomBarSeries::GetStackGroup ( );
__declspec(implementation_key(2201)) void ICustomBarSeries::PutStackGroup ( long Value );
__declspec(implementation_key(2202)) long ICustomBarSeries::GetConePercent ( );
__declspec(implementation_key(2203)) void ICustomBarSeries::PutConePercent ( long Value );
__declspec(implementation_key(2204)) IPenPtr ICustomBarSeries::GetTickLines ( );
__declspec(implementation_key(2205)) long ICustomBarSeries::GetDepthPercent ( );
__declspec(implementation_key(2206)) void ICustomBarSeries::PutDepthPercent ( long Value );
__declspec(implementation_key(2207)) ITeeShadowPtr ICustomBarSeries::GetShadow ( );
__declspec(implementation_key(2208)) long ICustomBarSeries::GetTransparency ( );
__declspec(implementation_key(2209)) void ICustomBarSeries::PutTransparency ( long Value );
__declspec(implementation_key(2210)) long ICustomBarSeries::GetBevelSize ( );
__declspec(implementation_key(2211)) void ICustomBarSeries::PutBevelSize ( long Value );
__declspec(implementation_key(2212)) long ICustomBarSeries::GetDarkPen ( );
__declspec(implementation_key(2213)) void ICustomBarSeries::PutDarkPen ( long Value );
__declspec(implementation_key(2214)) long IBarSeries::GetBarWidth ( );
__declspec(implementation_key(2215)) void IBarSeries::PutBarWidth ( long BarWidth );
__declspec(implementation_key(2216)) HRESULT IBarSeries::CalcBarBounds ( long ValueIndex );
__declspec(implementation_key(2217)) long IHorizBarSeries::GetBarHeight ( );
__declspec(implementation_key(2218)) void IHorizBarSeries::PutBarHeight ( long BarHeight );
__declspec(implementation_key(2219)) HRESULT IHorizBarSeries::CalcBarBounds ( long ValueIndex );
__declspec(implementation_key(2220)) enum ECandleStyle ICandleSeries::GetCandleStyle ( );
__declspec(implementation_key(2221)) void ICandleSeries::PutCandleStyle ( enum ECandleStyle CandleStyle );
__declspec(implementation_key(2222)) long ICandleSeries::GetCandleWidth ( );
__declspec(implementation_key(2223)) void ICandleSeries::PutCandleWidth ( long CandleWidth );
__declspec(implementation_key(2224)) IValueListPtr ICandleSeries::GetCloseValues ( );
__declspec(implementation_key(2225)) IValueListPtr ICandleSeries::GetDateValues ( );
__declspec(implementation_key(2226)) OLE_COLOR ICandleSeries::GetDownCloseColor ( );
__declspec(implementation_key(2227)) void ICandleSeries::PutDownCloseColor ( OLE_COLOR Value );
__declspec(implementation_key(2228)) IValueListPtr ICandleSeries::GetHighValues ( );
__declspec(implementation_key(2229)) IValueListPtr ICandleSeries::GetLowValues ( );
__declspec(implementation_key(2230)) IValueListPtr ICandleSeries::GetOpenValues ( );
__declspec(implementation_key(2231)) VARIANT_BOOL ICandleSeries::GetShowCloseTick ( );
__declspec(implementation_key(2232)) void ICandleSeries::PutShowCloseTick ( VARIANT_BOOL ShowCloseTick );
__declspec(implementation_key(2233)) VARIANT_BOOL ICandleSeries::GetShowOpenTick ( );
__declspec(implementation_key(2234)) void ICandleSeries::PutShowOpenTick ( VARIANT_BOOL ShowOpenTick );
__declspec(implementation_key(2235)) OLE_COLOR ICandleSeries::GetUpCloseColor ( );
__declspec(implementation_key(2236)) void ICandleSeries::PutUpCloseColor ( OLE_COLOR Value );
__declspec(implementation_key(2237)) long ICandleSeries::AddCandle ( double DateValue, double OpenValue, double HighValue, double LowValue, double CloseValue );
__declspec(implementation_key(2238)) IPenPtr ICandleSeries::GetHighLowPen ( );
__declspec(implementation_key(2239)) enum ECandleColorStyle ICandleSeries::GetColorStyle ( );
__declspec(implementation_key(2240)) void ICandleSeries::PutColorStyle ( enum ECandleColorStyle Value );
__declspec(implementation_key(2241)) IGradientPtr ICandleSeries::GetUpCloseGradient ( );
__declspec(implementation_key(2242)) IGradientPtr ICandleSeries::GetDownCloseGradient ( );
__declspec(implementation_key(2243)) double ICustomPolarSeries::GetAngleIncrement ( );
__declspec(implementation_key(2244)) void ICustomPolarSeries::PutAngleIncrement ( double AngleIncrement );
__declspec(implementation_key(2245)) VARIANT_BOOL ICustomPolarSeries::GetCloseCircle ( );
__declspec(implementation_key(2246)) void ICustomPolarSeries::PutCloseCircle ( VARIANT_BOOL CloseCircle );
__declspec(implementation_key(2247)) IPenPtr ICustomPolarSeries::GetPen ( );
__declspec(implementation_key(2248)) IPointerPtr ICustomPolarSeries::GetPointer ( );
__declspec(implementation_key(2249)) double ICustomPolarSeries::GetRadiusIncrement ( );
__declspec(implementation_key(2250)) void ICustomPolarSeries::PutRadiusIncrement ( double RadiusIncrement );
__declspec(implementation_key(2251)) IValueListPtr ICustomPolarSeries::GetAngleValues ( );
__declspec(implementation_key(2252)) IValueListPtr ICustomPolarSeries::GetRadiusValues ( );
__declspec(implementation_key(2253)) HRESULT ICustomPolarSeries::DrawRing ( double Value, long Z );
__declspec(implementation_key(2254)) IPenPtr ICustomPolarSeries::GetCirclePen ( );
__declspec(implementation_key(2255)) ICircleLabelsPtr ICustomPolarSeries::GetCircleLabels ( );
__declspec(implementation_key(2256)) IBrushPtr ICustomPolarSeries::GetBrush ( );
__declspec(implementation_key(2257)) HRESULT ICustomPolarSeries::LoadBackImage ( _bstr_t FileName );
__declspec(implementation_key(2258)) HRESULT ICustomPolarSeries::ClearBackImage ( );
__declspec(implementation_key(2259)) VARIANT_BOOL ICustomPolarSeries::GetClockWiseLabels ( );
__declspec(implementation_key(2260)) void ICustomPolarSeries::PutClockWiseLabels ( VARIANT_BOOL Value );
__declspec(implementation_key(2261)) VARIANT_BOOL ICustomPolarSeries::GetCircleLabelsInside ( );
__declspec(implementation_key(2262)) void ICustomPolarSeries::PutCircleLabelsInside ( VARIANT_BOOL Value );
__declspec(implementation_key(2263)) long ICustomPolarSeries::GetTransparency ( );
__declspec(implementation_key(2264)) void ICustomPolarSeries::PutTransparency ( long Value );
__declspec(implementation_key(2265)) IGradientPtr ICustomPolarSeries::GetCircleGradient ( );
__declspec(implementation_key(2266)) HRESULT ICustomPolarSeries::DrawZone ( double Min, double Max, long Z );
__declspec(implementation_key(2267)) long ICustomPolarSeries::GetLabelsMargin ( );
__declspec(implementation_key(2268)) void ICustomPolarSeries::PutLabelsMargin ( long Value );
__declspec(implementation_key(2269)) enum ETreatNullsStyle ICustomPolarSeries::GetTreatNulls ( );
__declspec(implementation_key(2270)) void ICustomPolarSeries::PutTreatNulls ( enum ETreatNullsStyle Value );
__declspec(implementation_key(2271)) IPenPtr IErrorBarSeries::GetErrorPen ( );
__declspec(implementation_key(2272)) IValueListPtr IErrorBarSeries::GetErrorValues ( );
__declspec(implementation_key(2273)) long IErrorBarSeries::GetErrorWidth ( );
__declspec(implementation_key(2274)) void IErrorBarSeries::PutErrorWidth ( long ErrorWidth );
__declspec(implementation_key(2275)) enum EErrorWidthUnits IErrorBarSeries::GetErrorWidthUnits ( );
__declspec(implementation_key(2276)) void IErrorBarSeries::PutErrorWidthUnits ( enum EErrorWidthUnits ErrorWidthUnits );
__declspec(implementation_key(2277)) long IErrorBarSeries::AddErrorBar ( double AX, double AY, double AError, _bstr_t AXLabel, OLE_COLOR Value );
__declspec(implementation_key(2278)) long IBezierSeries::GetNumBezierPoints ( );
__declspec(implementation_key(2279)) void IBezierSeries::PutNumBezierPoints ( long Value );
__declspec(implementation_key(2280)) enum EBezierStyle IBezierSeries::GetBezierStyle ( );
__declspec(implementation_key(2281)) void IBezierSeries::PutBezierStyle ( enum EBezierStyle Value );
__declspec(implementation_key(2282)) enum EErrorSeriesStyle IErrorSeries::GetErrorStyle ( );
__declspec(implementation_key(2283)) void IErrorSeries::PutErrorStyle ( enum EErrorSeriesStyle Value );
__declspec(implementation_key(2284)) double IPoint3DSeries::GetDepthSize ( );
__declspec(implementation_key(2285)) void IPoint3DSeries::PutDepthSize ( double Value );
__declspec(implementation_key(2286)) IPointerPtr IPoint3DSeries::GetPointer ( );
__declspec(implementation_key(2287)) IPenPtr IPoint3DSeries::GetLinePen ( );
__declspec(implementation_key(2288)) IPenPtr IPoint3DSeries::GetBaseLine ( );
__declspec(implementation_key(2289)) long IPolarSeries::AddPolar ( double Angle, double Value, _bstr_t ALabel, OLE_COLOR Valu );
__declspec(implementation_key(2290)) VARIANT_BOOL ITeeCommander::GetLabelValues ( );
__declspec(implementation_key(2291)) void ITeeCommander::PutLabelValues ( VARIANT_BOOL Value );
__declspec(implementation_key(2292)) OLE_COLOR ITeeCommander::GetColor ( );
__declspec(implementation_key(2293)) void ITeeCommander::PutColor ( OLE_COLOR Value );
__declspec(implementation_key(2294)) VARIANT_BOOL ITeeCommander::GetEnabled ( );
__declspec(implementation_key(2295)) void ITeeCommander::PutEnabled ( VARIANT_BOOL Value );
__declspec(implementation_key(2296)) void ITeeCommander::PutEditor ( struct ITeeEditor * _arg1 );
__declspec(implementation_key(2297)) void ITeeCommander::PutPreviewer ( struct ITeePreviewer * _arg1 );
__declspec(implementation_key(2298)) void ITeeCommander::PutEditorLink ( long _arg1 );
__declspec(implementation_key(2299)) void ITeeCommander::PutPreviewerLink ( long _arg1 );
__declspec(implementation_key(2300)) VARIANT_BOOL ITeeCommander::GetVertical ( );
__declspec(implementation_key(2301)) void ITeeCommander::PutVertical ( VARIANT_BOOL Value );
__declspec(implementation_key(2302)) _variant_t ITeeCommander::GetControls ( );
__declspec(implementation_key(2303)) void ITeeCommander::PutControls ( const _variant_t & Value );
__declspec(implementation_key(2304)) _variant_t ITeeCommander::GetButtons ( );
__declspec(implementation_key(2305)) void ITeeCommander::PutButtons ( const _variant_t & Value );
__declspec(implementation_key(2306)) enum EPanelBevel ITeeCommander::GetBevelInner ( );
__declspec(implementation_key(2307)) void ITeeCommander::PutBevelInner ( enum EPanelBevel Value );
__declspec(implementation_key(2308)) enum EPanelBevel ITeeCommander::GetBevelOuter ( );
__declspec(implementation_key(2309)) void ITeeCommander::PutBevelOuter ( enum EPanelBevel Value );
__declspec(implementation_key(2310)) long ITeeCommander::GetBevelWidth ( );
__declspec(implementation_key(2311)) void ITeeCommander::PutBevelWidth ( long Value );
__declspec(implementation_key(2312)) long ITeeCommander::GetBevelOffset ( );
__declspec(implementation_key(2313)) void ITeeCommander::PutBevelOffset ( long Value );
__declspec(implementation_key(2314)) enum EBorderStyle ITeeCommander::GetBorderStyle ( );
__declspec(implementation_key(2315)) void ITeeCommander::PutBorderStyle ( enum EBorderStyle Value );
__declspec(implementation_key(2316)) enum ETeeCommanderControls ITeeCommander::GetDefaultButton ( );
__declspec(implementation_key(2317)) void ITeeCommander::PutDefaultButton ( enum ETeeCommanderControls Value );
__declspec(implementation_key(2318)) ITeeCommanderButtonPtr ITeeCommander::GetButton3D ( );
__declspec(implementation_key(2319)) ITeeCommanderButtonPtr ITeeCommander::GetButtonCopy ( );
__declspec(implementation_key(2320)) ITeeCommanderButtonPtr ITeeCommander::GetButtonDepth ( );
__declspec(implementation_key(2321)) ITeeCommanderButtonPtr ITeeCommander::GetButtonEdit ( );
__declspec(implementation_key(2322)) ITeeCommanderButtonPtr ITeeCommander::GetButtonMove ( );
__declspec(implementation_key(2323)) ITeeCommanderButtonPtr ITeeCommander::GetButtonNormal ( );
__declspec(implementation_key(2324)) ITeeCommanderButtonPtr ITeeCommander::GetButtonPrint ( );
__declspec(implementation_key(2325)) ITeeCommanderButtonPtr ITeeCommander::GetButtonRotate ( );
__declspec(implementation_key(2326)) ITeeCommanderButtonPtr ITeeCommander::GetButtonSave ( );
__declspec(implementation_key(2327)) ITeeCommanderButtonPtr ITeeCommander::GetButtonZoom ( );
__declspec(implementation_key(2328)) HRESULT ITeeCommander::RepositionControls ( );
__declspec(implementation_key(2329)) IGradientPtr ITeeCommander::GetGradient ( );
__declspec(implementation_key(2330)) VARIANT_BOOL ITeeCommander::GetFullRotation ( );
__declspec(implementation_key(2331)) void ITeeCommander::PutFullRotation ( VARIANT_BOOL Value );
__declspec(implementation_key(2332)) VARIANT_BOOL IClockSeries::GetRomanNumbers ( );
__declspec(implementation_key(2333)) void IClockSeries::PutRomanNumbers ( VARIANT_BOOL Value );
__declspec(implementation_key(2334)) IPenPtr IClockSeries::GetPenHours ( );
__declspec(implementation_key(2335)) IPenPtr IClockSeries::GetPenMinutes ( );
__declspec(implementation_key(2336)) IPenPtr IClockSeries::GetPenSeconds ( );
__declspec(implementation_key(2337)) VARIANT_BOOL IWindRoseSeries::GetMirrorAngles ( );
__declspec(implementation_key(2338)) void IWindRoseSeries::PutMirrorAngles ( VARIANT_BOOL Value );
__declspec(implementation_key(2339)) VARIANT_BOOL IWindRoseSeries::GetMirrorLabels ( );
__declspec(implementation_key(2340)) void IWindRoseSeries::PutMirrorLabels ( VARIANT_BOOL Value );
__declspec(implementation_key(2341)) long IBar3DSeries::AddBar ( double AX, double AY, double AOffset, _bstr_t ALabel, OLE_COLOR AColor );
__declspec(implementation_key(2342)) IValueListPtr IBar3DSeries::GetOffsetValues ( );
__declspec(implementation_key(2343)) VARIANT_BOOL IImageBarSeries::LoadImage ( _bstr_t FileName );
__declspec(implementation_key(2344)) HRESULT IImageBarSeries::ClearImage ( );
__declspec(implementation_key(2345)) VARIANT_BOOL IImageBarSeries::GetImageTiled ( );
__declspec(implementation_key(2346)) void IImageBarSeries::PutImageTiled ( VARIANT_BOOL Value );
__declspec(implementation_key(2347)) IBrushPtr IColorBandTool::GetBrush ( );
__declspec(implementation_key(2348)) IPenPtr IColorBandTool::GetPen ( );
__declspec(implementation_key(2349)) double IColorBandTool::GetEndValue ( );
__declspec(implementation_key(2350)) void IColorBandTool::PutEndValue ( double Value );
__declspec(implementation_key(2351)) double IColorBandTool::GetStartValue ( );
__declspec(implementation_key(2352)) void IColorBandTool::PutStartValue ( double Value );
__declspec(implementation_key(2353)) VARIANT_BOOL IColorBandTool::GetDrawBehind ( );
__declspec(implementation_key(2354)) void IColorBandTool::PutDrawBehind ( VARIANT_BOOL Value );
__declspec(implementation_key(2355)) OLE_COLOR IColorBandTool::GetColor ( );
__declspec(implementation_key(2356)) void IColorBandTool::PutColor ( OLE_COLOR Value );
__declspec(implementation_key(2357)) IGradientPtr IColorBandTool::GetGradient ( );
__declspec(implementation_key(2358)) long IColorBandTool::GetTransparency ( );
__declspec(implementation_key(2359)) void IColorBandTool::PutTransparency ( long Value );
__declspec(implementation_key(2360)) VARIANT_BOOL IColorBandTool::Clicked ( long X, long Y );
__declspec(implementation_key(2361)) VARIANT_BOOL IColorBandTool::GetResizeStart ( );
__declspec(implementation_key(2362)) void IColorBandTool::PutResizeStart ( VARIANT_BOOL Value );
__declspec(implementation_key(2363)) VARIANT_BOOL IColorBandTool::GetResizeEnd ( );
__declspec(implementation_key(2364)) void IColorBandTool::PutResizeEnd ( VARIANT_BOOL Value );
__declspec(implementation_key(2365)) IPenPtr IColorBandTool::GetStartLinePen ( );
__declspec(implementation_key(2366)) IPenPtr IColorBandTool::GetEndLinePen ( );
__declspec(implementation_key(2367)) VARIANT_BOOL IColorBandTool::GetDrawBehindAxes ( );
__declspec(implementation_key(2368)) void IColorBandTool::PutDrawBehindAxes ( VARIANT_BOOL Value );
__declspec(implementation_key(2369)) short IColorBandTool::GetCursor ( );
__declspec(implementation_key(2370)) void IColorBandTool::PutCursor ( short Value );
__declspec(implementation_key(2371)) ITeePicturePtr IColorBandTool::GetPicture ( );
__declspec(implementation_key(2372)) VARIANT_BOOL ILegendSymbol::GetContinuous ( );
__declspec(implementation_key(2373)) void ILegendSymbol::PutContinuous ( VARIANT_BOOL Value );
__declspec(implementation_key(2374)) enum ELegendSymbolPosition ILegendSymbol::GetPosition ( );
__declspec(implementation_key(2375)) void ILegendSymbol::PutPosition ( enum ELegendSymbolPosition Value );
__declspec(implementation_key(2376)) long ILegendSymbol::GetWidth ( );
__declspec(implementation_key(2377)) void ILegendSymbol::PutWidth ( long Value );
__declspec(implementation_key(2378)) enum ELegendSymbolSize ILegendSymbol::GetWidthUnits ( );
__declspec(implementation_key(2379)) void ILegendSymbol::PutWidthUnits ( enum ELegendSymbolSize Value );
__declspec(implementation_key(2380)) VARIANT_BOOL ILegendSymbol::GetDefaultPen ( );
__declspec(implementation_key(2381)) void ILegendSymbol::PutDefaultPen ( VARIANT_BOOL Value );
__declspec(implementation_key(2382)) IPenPtr ILegendSymbol::GetPen ( );
__declspec(implementation_key(2383)) VARIANT_BOOL ILegendSymbol::GetSquared ( );
__declspec(implementation_key(2384)) void ILegendSymbol::PutSquared ( VARIANT_BOOL Value );
__declspec(implementation_key(2385)) VARIANT_BOOL ILegendSymbol::GetVisible ( );
__declspec(implementation_key(2386)) void ILegendSymbol::PutVisible ( VARIANT_BOOL Value );
__declspec(implementation_key(2387)) IGradientPtr ILegendSymbol::GetGradient ( );
__declspec(implementation_key(2388)) ITeeShadowPtr ILegendSymbol::GetShadow ( );
__declspec(implementation_key(2389)) long ITeeFont::GetInterCharSize ( );
__declspec(implementation_key(2390)) void ITeeFont::PutInterCharSize ( long Value );
__declspec(implementation_key(2391)) ITeeShadowPtr ITeeFont::GetShadow ( );
__declspec(implementation_key(2392)) IPenPtr ITeeFont::GetOutline ( );
__declspec(implementation_key(2393)) IGradientPtr ITeeFont::GetGradient ( );
__declspec(implementation_key(2394)) HRESULT ITeeFont::ShowEditor ( );
__declspec(implementation_key(2395)) ITeePicturePtr ITeeFont::GetPicture ( );
__declspec(implementation_key(2396)) VARIANT_BOOL ITeePreviewPanel::GetAllowResize ( );
__declspec(implementation_key(2397)) void ITeePreviewPanel::PutAllowResize ( VARIANT_BOOL Value );
__declspec(implementation_key(2398)) VARIANT_BOOL ITeePreviewPanel::GetAllowMove ( );
__declspec(implementation_key(2399)) void ITeePreviewPanel::PutAllowMove ( VARIANT_BOOL Value );
__declspec(implementation_key(2400)) VARIANT_BOOL ITeePreviewPanel::GetAsBitmap ( );
__declspec(implementation_key(2401)) void ITeePreviewPanel::PutAsBitmap ( VARIANT_BOOL Value );
__declspec(implementation_key(2402)) VARIANT_BOOL ITeePreviewPanel::GetDragImage ( );
__declspec(implementation_key(2403)) void ITeePreviewPanel::PutDragImage ( VARIANT_BOOL Value );
__declspec(implementation_key(2404)) enum ETeePreviewPanelOrientation ITeePreviewPanel::GetOrientation ( );
__declspec(implementation_key(2405)) void ITeePreviewPanel::PutOrientation ( enum ETeePreviewPanelOrientation Value );
__declspec(implementation_key(2406)) OLE_COLOR ITeePreviewPanel::GetPaperColor ( );
__declspec(implementation_key(2407)) void ITeePreviewPanel::PutPaperColor ( OLE_COLOR Value );
__declspec(implementation_key(2408)) OLE_COLOR ITeePreviewPanel::GetShadowColor ( );
__declspec(implementation_key(2409)) void ITeePreviewPanel::PutShadowColor ( OLE_COLOR Value );
__declspec(implementation_key(2410)) long ITeePreviewPanel::GetShadowSize ( );
__declspec(implementation_key(2411)) void ITeePreviewPanel::PutShadowSize ( long Value );
__declspec(implementation_key(2412)) VARIANT_BOOL ITeePreviewPanel::GetShowImage ( );
__declspec(implementation_key(2413)) void ITeePreviewPanel::PutShowImage ( VARIANT_BOOL Value );
__declspec(implementation_key(2414)) _bstr_t ITeePreviewPanel::GetTitle ( );
__declspec(implementation_key(2415)) void ITeePreviewPanel::PutTitle ( _bstr_t Value );
__declspec(implementation_key(2416)) HRESULT ITeePreviewPanel::Repaint ( );
__declspec(implementation_key(2417)) ITeePanelsListPtr ITeePreviewPanel::GetPanels ( );
__declspec(implementation_key(2418)) HRESULT ITeePreviewPanel::AddChart ( struct ITChart * Value );
__declspec(implementation_key(2419)) IGradientPtr ITeePreviewPanel::GetGradient ( );
__declspec(implementation_key(2420)) IPenPtr ITeePreviewPanel::GetMargins ( );
__declspec(implementation_key(2421)) HRESULT ITeePreviewPanel::PrintPage ( );
__declspec(implementation_key(2422)) HRESULT ITeePreviewPanel::AddChartLink ( long Value );
__declspec(implementation_key(2423)) ICanvasPtr ITeePreviewPanel::GetCanvas ( );
__declspec(implementation_key(2424)) ITeeRectPtr ITeePreviewPanel::GetPaperRect ( );
__declspec(implementation_key(2425)) IPointerPtr ICustomBoxSeries::GetExtrOut ( );
__declspec(implementation_key(2426)) IPenPtr ICustomBoxSeries::GetMedianPen ( );
__declspec(implementation_key(2427)) IPointerPtr ICustomBoxSeries::GetMildOut ( );
__declspec(implementation_key(2428)) double ICustomBoxSeries::GetPosition ( );
__declspec(implementation_key(2429)) void ICustomBoxSeries::PutPosition ( double Value );
__declspec(implementation_key(2430)) double ICustomBoxSeries::GetWhiskerLength ( );
__declspec(implementation_key(2431)) void ICustomBoxSeries::PutWhiskerLength ( double Value );
__declspec(implementation_key(2432)) IPenPtr ICustomBoxSeries::GetWhiskerPen ( );
__declspec(implementation_key(2433)) IPointerPtr ICustomBoxSeries::GetBox ( );
__declspec(implementation_key(2434)) double ICustomBoxSeries::GetMedian ( );
__declspec(implementation_key(2435)) void ICustomBoxSeries::PutMedian ( double Value );
__declspec(implementation_key(2436)) double ICustomBoxSeries::GetQuartile1 ( );
__declspec(implementation_key(2437)) void ICustomBoxSeries::PutQuartile1 ( double Value );
__declspec(implementation_key(2438)) double ICustomBoxSeries::GetQuartile3 ( );
__declspec(implementation_key(2439)) void ICustomBoxSeries::PutQuartile3 ( double Value );
__declspec(implementation_key(2440)) double ICustomBoxSeries::GetInnerFence1 ( );
__declspec(implementation_key(2441)) void ICustomBoxSeries::PutInnerFence1 ( double Value );
__declspec(implementation_key(2442)) double ICustomBoxSeries::GetInnerFence3 ( );
__declspec(implementation_key(2443)) void ICustomBoxSeries::PutInnerFence3 ( double Value );
__declspec(implementation_key(2444)) double ICustomBoxSeries::GetOuterFence1 ( );
__declspec(implementation_key(2445)) void ICustomBoxSeries::PutOuterFence1 ( double Value );
__declspec(implementation_key(2446)) double ICustomBoxSeries::GetOuterFence3 ( );
__declspec(implementation_key(2447)) void ICustomBoxSeries::PutOuterFence3 ( double Value );
__declspec(implementation_key(2448)) double ICustomBoxSeries::GetAdjacentPoint1 ( );
__declspec(implementation_key(2449)) void ICustomBoxSeries::PutAdjacentPoint1 ( double Value );
__declspec(implementation_key(2450)) double ICustomBoxSeries::GetAdjacentPoint3 ( );
__declspec(implementation_key(2451)) void ICustomBoxSeries::PutAdjacentPoint3 ( double Value );
__declspec(implementation_key(2452)) VARIANT_BOOL ICustomBoxSeries::GetUseCustomValues ( );
__declspec(implementation_key(2453)) void ICustomBoxSeries::PutUseCustomValues ( VARIANT_BOOL Value );
__declspec(implementation_key(2454)) double IHorizBoxPlotSeries::MaxYValue ( );
__declspec(implementation_key(2455)) double IHorizBoxPlotSeries::MinYValue ( );
__declspec(implementation_key(2456)) IPenPtr IBarJoinSeries::GetJoinPen ( );
__declspec(implementation_key(2457)) IPenPtr ISmithSeries::GetCCirclePen ( );
__declspec(implementation_key(2458)) IPenPtr ISmithSeries::GetCirclePen ( );
__declspec(implementation_key(2459)) VARIANT_BOOL ISmithSeries::GetCLabels ( );
__declspec(implementation_key(2460)) void ISmithSeries::PutCLabels ( VARIANT_BOOL Value );
__declspec(implementation_key(2461)) ITeeFontPtr ISmithSeries::GetCLabelsFont ( );
__declspec(implementation_key(2462)) IValueListPtr ISmithSeries::GetResistenceValues ( );
__declspec(implementation_key(2463)) IValueListPtr ISmithSeries::GetReactanceValues ( );
__declspec(implementation_key(2464)) IPointerPtr ISmithSeries::GetPointer ( );
__declspec(implementation_key(2465)) IPenPtr ISmithSeries::GetRCirclePen ( );
__declspec(implementation_key(2466)) VARIANT_BOOL ISmithSeries::GetRLabels ( );
__declspec(implementation_key(2467)) void ISmithSeries::PutRLabels ( VARIANT_BOOL Value );
__declspec(implementation_key(2468)) ITeeFontPtr ISmithSeries::GetRLabelsFont ( );
__declspec(implementation_key(2469)) _bstr_t ISmithSeries::GetImagSymbol ( );
__declspec(implementation_key(2470)) void ISmithSeries::PutImagSymbol ( _bstr_t Value );
__declspec(implementation_key(2471)) long IContourSeries::GetNumLevels ( );
__declspec(implementation_key(2472)) void IContourSeries::PutNumLevels ( long Value );
__declspec(implementation_key(2473)) VARIANT_BOOL IContourSeries::GetYPositionLevel ( );
__declspec(implementation_key(2474)) void IContourSeries::PutYPositionLevel ( VARIANT_BOOL Value );
__declspec(implementation_key(2475)) double IContourSeries::GetYPosition ( );
__declspec(implementation_key(2476)) void IContourSeries::PutYPosition ( double Value );
__declspec(implementation_key(2477)) IContourLevelsPtr IContourSeries::GetLevels ( );
__declspec(implementation_key(2478)) VARIANT_BOOL IContourSeries::GetAutomaticLevels ( );
__declspec(implementation_key(2479)) void IContourSeries::PutAutomaticLevels ( VARIANT_BOOL Value );
__declspec(implementation_key(2480)) HRESULT IContourSeries::CreateAutoLevels ( );
__declspec(implementation_key(2481)) ISmoothPointsPtr IContourSeries::GetSmoothing ( );
__declspec(implementation_key(2482)) IContourMarksPtr IContourSeries::GetContourMarks ( );
__declspec(implementation_key(2483)) IChartHiddenPenPtr IContourSeries::GetFrame ( );
__declspec(implementation_key(2484)) IPointerPtr IContourSeries::GetPointer ( );
__declspec(implementation_key(2485)) long IContourSeries::GetTransparency ( );
__declspec(implementation_key(2486)) void IContourSeries::PutTransparency ( long Value );
__declspec(implementation_key(2487)) VARIANT_BOOL IContourSeries::GetLegendLines ( );
__declspec(implementation_key(2488)) void IContourSeries::PutLegendLines ( VARIANT_BOOL Value );
__declspec(implementation_key(2489)) OLE_COLOR IContourSeries::GetLinesColor ( );
__declspec(implementation_key(2490)) void IContourSeries::PutLinesColor ( OLE_COLOR Value );
__declspec(implementation_key(2491)) double IBoxPlotSeries::MaxXValue ( );
__declspec(implementation_key(2492)) double IBoxPlotSeries::MinXValue ( );
__declspec(implementation_key(2493)) IBrushPtr IMapPolygon::GetBrush ( );
__declspec(implementation_key(2494)) OLE_COLOR IMapPolygon::GetColor ( );
__declspec(implementation_key(2495)) void IMapPolygon::PutColor ( OLE_COLOR Value );
__declspec(implementation_key(2496)) IGradientPtr IMapPolygon::GetGradient ( );
__declspec(implementation_key(2497)) VARIANT_BOOL IMapPolygon::GetParentBrush ( );
__declspec(implementation_key(2498)) void IMapPolygon::PutParentBrush ( VARIANT_BOOL Value );
__declspec(implementation_key(2499)) VARIANT_BOOL IMapPolygon::GetParentPen ( );
__declspec(implementation_key(2500)) void IMapPolygon::PutParentPen ( VARIANT_BOOL Value );
__declspec(implementation_key(2501)) IPenPtr IMapPolygon::GetPen ( );
__declspec(implementation_key(2502)) _bstr_t IMapPolygon::GetText ( );
__declspec(implementation_key(2503)) void IMapPolygon::PutText ( _bstr_t Value );
__declspec(implementation_key(2504)) double IMapPolygon::GetZ ( );
__declspec(implementation_key(2505)) void IMapPolygon::PutZ ( double Value );
__declspec(implementation_key(2506)) long IMapPolygon::AddXY ( double X, double Y );
__declspec(implementation_key(2507)) long IMapPolygon::GetTransparency ( );
__declspec(implementation_key(2508)) void IMapPolygon::PutTransparency ( long Value );
__declspec(implementation_key(2509)) VARIANT_BOOL IMapPolygon::Visible ( );
__declspec(implementation_key(2510)) VARIANT_BOOL IMapPolygon::GetClosed ( );
__declspec(implementation_key(2511)) void IMapPolygon::PutClosed ( VARIANT_BOOL Value );
__declspec(implementation_key(2512)) IPointArrayPtr IMapPolygon::GetGetPoints ( );
__declspec(implementation_key(2513)) long IMapPolygon::GetIndex ( );
__declspec(implementation_key(2514)) void IMapPolygon::PutIndex ( long Value );
__declspec(implementation_key(2515)) VARIANT_BOOL IMapPolygon::GetActive ( );
__declspec(implementation_key(2516)) void IMapPolygon::PutActive ( VARIANT_BOOL Value );
__declspec(implementation_key(2517)) long IMapPolygonList::Add ( );
__declspec(implementation_key(2518)) IMapPolygonPtr IMapPolygonList::GetPolygon ( long Index );
__declspec(implementation_key(2519)) long IMapPolygonList::GetCount ( );
__declspec(implementation_key(2520)) IMapPolygonListPtr IMapSeries::GetShapes ( );
__declspec(implementation_key(2521)) long IMapSeries::GetPointSize ( );
__declspec(implementation_key(2522)) void IMapSeries::PutPointSize ( long Value );
__declspec(implementation_key(2523)) ITeeShadowPtr IMapSeries::GetShadow ( );
__declspec(implementation_key(2524)) VARIANT_BOOL IMapSeries::GetTransparent ( );
__declspec(implementation_key(2525)) void IMapSeries::PutTransparent ( VARIANT_BOOL Value );
__declspec(implementation_key(2526)) long IMapSeries::GetTransparency ( );
__declspec(implementation_key(2527)) void IMapSeries::PutTransparency ( long Value );
__declspec(implementation_key(2528)) IPenPtr ICallout::GetArrow ( );
__declspec(implementation_key(2529)) enum EArrowHeadStyle ICallout::GetArrowHead ( );
__declspec(implementation_key(2530)) void ICallout::PutArrowHead ( enum EArrowHeadStyle Value );
__declspec(implementation_key(2531)) long ICallout::GetArrowHeadSize ( );
__declspec(implementation_key(2532)) void ICallout::PutArrowHeadSize ( long Value );
__declspec(implementation_key(2533)) long ICallout::GetDistance ( );
__declspec(implementation_key(2534)) void ICallout::PutDistance ( long Value );
__declspec(implementation_key(2535)) long IAnnotationCallout::GetXPosition ( );
__declspec(implementation_key(2536)) void IAnnotationCallout::PutXPosition ( long Value );
__declspec(implementation_key(2537)) long IAnnotationCallout::GetYPosition ( );
__declspec(implementation_key(2538)) void IAnnotationCallout::PutYPosition ( long Value );
__declspec(implementation_key(2539)) long IAnnotationCallout::GetZPosition ( );
__declspec(implementation_key(2540)) void IAnnotationCallout::PutZPosition ( long Value );
__declspec(implementation_key(2541)) enum EAnnotationPosition IAnnotationTool::GetPosition ( );
__declspec(implementation_key(2542)) void IAnnotationTool::PutPosition ( enum EAnnotationPosition Value );
__declspec(implementation_key(2543)) ITeeShapePanelPtr IAnnotationTool::GetShape ( );
__declspec(implementation_key(2544)) _bstr_t IAnnotationTool::GetText ( );
__declspec(implementation_key(2545)) void IAnnotationTool::PutText ( _bstr_t Value );
__declspec(implementation_key(2546)) IAnnotationCalloutPtr IAnnotationTool::GetCallout ( );
__declspec(implementation_key(2547)) enum ETextAlignment IAnnotationTool::GetTextAlignment ( );
__declspec(implementation_key(2548)) void IAnnotationTool::PutTextAlignment ( enum ETextAlignment Value );
__declspec(implementation_key(2549)) VARIANT_BOOL IAnnotationTool::Clicked ( long X, long Y );
__declspec(implementation_key(2550)) long IAnnotationTool::GetWidth ( );
__declspec(implementation_key(2551)) void IAnnotationTool::PutWidth ( long Value );
__declspec(implementation_key(2552)) long IAnnotationTool::GetHeight ( );
__declspec(implementation_key(2553)) void IAnnotationTool::PutHeight ( long Value );
__declspec(implementation_key(2554)) short IAnnotationTool::GetCursor ( );
__declspec(implementation_key(2555)) void IAnnotationTool::PutCursor ( short Value );
__declspec(implementation_key(2556)) long IAnnotationTool::GetLeft ( );
__declspec(implementation_key(2557)) void IAnnotationTool::PutLeft ( long Value );
__declspec(implementation_key(2558)) long IAnnotationTool::GetTop ( );
__declspec(implementation_key(2559)) void IAnnotationTool::PutTop ( long Value );
__declspec(implementation_key(2560)) VARIANT_BOOL IAnnotationTool::GetAutoSize ( );
__declspec(implementation_key(2561)) void IAnnotationTool::PutAutoSize ( VARIANT_BOOL Value );
__declspec(implementation_key(2562)) IBrushPtr IAnnotationTool::GetBrush ( );
__declspec(implementation_key(2563)) struct TeeRect IAnnotationTool::GetBounds ( );
__declspec(implementation_key(2564)) HRESULT IAnnotationTool::SetBounds ( long Left, long Top, long Right, long Bottom );
__declspec(implementation_key(2565)) enum EPositionUnits IAnnotationTool::GetPositionUnits ( );
__declspec(implementation_key(2566)) void IAnnotationTool::PutPositionUnits ( enum EPositionUnits Value );
__declspec(implementation_key(2567)) _bstr_t IPageNumTool::GetFormat ( );
__declspec(implementation_key(2568)) void IPageNumTool::PutFormat ( _bstr_t Value );
__declspec(implementation_key(2569)) VARIANT_BOOL IPageNumTool::GetShowButtons ( );
__declspec(implementation_key(2570)) void IPageNumTool::PutShowButtons ( VARIANT_BOOL Value );
__declspec(implementation_key(2571)) IPenPtr IPageNumTool::GetButtonPen ( );
__declspec(implementation_key(2572)) long IPageNumTool::GetButtonWidth ( );
__declspec(implementation_key(2573)) void IPageNumTool::PutButtonWidth ( long Value );
__declspec(implementation_key(2574)) IGradientPtr IPageNumTool::GetDisabledButton ( );
__declspec(implementation_key(2575)) IGradientPtr IPageNumTool::GetEnabledButton ( );
__declspec(implementation_key(2576)) long IMarksCallout::GetLength ( );
__declspec(implementation_key(2577)) void IMarksCallout::PutLength ( long Value );
__declspec(implementation_key(2578)) VARIANT_BOOL IGanttTool::GetAllowDrag ( );
__declspec(implementation_key(2579)) void IGanttTool::PutAllowDrag ( VARIANT_BOOL Value );
__declspec(implementation_key(2580)) VARIANT_BOOL IGanttTool::GetAllowResize ( );
__declspec(implementation_key(2581)) void IGanttTool::PutAllowResize ( VARIANT_BOOL Value );
__declspec(implementation_key(2582)) short IGanttTool::GetCursorDrag ( );
__declspec(implementation_key(2583)) void IGanttTool::PutCursorDrag ( short Value );
__declspec(implementation_key(2584)) short IGanttTool::GetCursorResize ( );
__declspec(implementation_key(2585)) void IGanttTool::PutCursorResize ( short Value );
__declspec(implementation_key(2586)) long IGanttTool::GetMinPixels ( );
__declspec(implementation_key(2587)) void IGanttTool::PutMinPixels ( long Value );
__declspec(implementation_key(2588)) IGanttSeriesPtr IGanttTool::GetGantt ( );
__declspec(implementation_key(2589)) IValueListPtr IPointFigureSeries::GetCloseValues ( );
__declspec(implementation_key(2590)) IValueListPtr IPointFigureSeries::GetDateValues ( );
__declspec(implementation_key(2591)) IValueListPtr IPointFigureSeries::GetHighValues ( );
__declspec(implementation_key(2592)) IValueListPtr IPointFigureSeries::GetLowValues ( );
__declspec(implementation_key(2593)) IValueListPtr IPointFigureSeries::GetOpenValues ( );
__declspec(implementation_key(2594)) long IPointFigureSeries::AddOHLC ( double DateValue, double OpenValue, double HighValue, double LowValue, double CloseValue );
__declspec(implementation_key(2595)) double IPointFigureSeries::GetBoxSize ( );
__declspec(implementation_key(2596)) void IPointFigureSeries::PutBoxSize ( double Value );
__declspec(implementation_key(2597)) double IPointFigureSeries::GetReversalAmount ( );
__declspec(implementation_key(2598)) void IPointFigureSeries::PutReversalAmount ( double Value );
__declspec(implementation_key(2599)) IPointerPtr IPointFigureSeries::GetDownSymbol ( );
__declspec(implementation_key(2600)) IPointerPtr IPointFigureSeries::GetUpSymbol ( );
__declspec(implementation_key(2601)) long IPointFigureSeries::GetInversionColumn ( long Index );
__declspec(implementation_key(2602)) IPointerPtr IGaugeSeries::GetCenter ( );
__declspec(implementation_key(2603)) IGradientPtr IGaugeSeries::GetCircleGradient ( );
__declspec(implementation_key(2604)) IPointerPtr IGaugeSeries::GetEndPoint ( );
__declspec(implementation_key(2605)) VARIANT_BOOL IGaugeSeries::GetFullRepaint ( );
__declspec(implementation_key(2606)) void IGaugeSeries::PutFullRepaint ( VARIANT_BOOL Value );
__declspec(implementation_key(2607)) double IGaugeSeries::GetMaximum ( );
__declspec(implementation_key(2608)) void IGaugeSeries::PutMaximum ( double Value );
__declspec(implementation_key(2609)) double IGaugeSeries::GetMinimum ( );
__declspec(implementation_key(2610)) void IGaugeSeries::PutMinimum ( double Value );
__declspec(implementation_key(2611)) long IGaugeSeries::GetMinorTickDistance ( );
__declspec(implementation_key(2612)) void IGaugeSeries::PutMinorTickDistance ( long Value );
__declspec(implementation_key(2613)) long IGaugeSeries::GetHandDistance ( );
__declspec(implementation_key(2614)) void IGaugeSeries::PutHandDistance ( long Value );
__declspec(implementation_key(2615)) enum EHandStyle IGaugeSeries::GetHandStyle ( );
__declspec(implementation_key(2616)) void IGaugeSeries::PutHandStyle ( enum EHandStyle Value );
__declspec(implementation_key(2617)) VARIANT_BOOL IGaugeSeries::GetLabelsInside ( );
__declspec(implementation_key(2618)) void IGaugeSeries::PutLabelsInside ( VARIANT_BOOL Value );
__declspec(implementation_key(2619)) double IGaugeSeries::GetTotalAngle ( );
__declspec(implementation_key(2620)) void IGaugeSeries::PutTotalAngle ( double Value );
__declspec(implementation_key(2621)) double IGaugeSeries::GetValue ( );
__declspec(implementation_key(2622)) void IGaugeSeries::PutValue ( double Value );
__declspec(implementation_key(2623)) long IGridBandBrush::GetTransparency ( );
__declspec(implementation_key(2624)) void IGridBandBrush::PutTransparency ( long Value );
__declspec(implementation_key(2625)) IGradientPtr IGridBandBrush::GetGradient ( );
__declspec(implementation_key(2626)) IGridBandBrushPtr IGridBandTool::GetBand1 ( );
__declspec(implementation_key(2627)) IGridBandBrushPtr IGridBandTool::GetBand2 ( );
__declspec(implementation_key(2628)) OLE_COLOR IGridBandTool::GetBandBackColor ( long ABand );
__declspec(implementation_key(2629)) long ITeeShape::GetTransparency ( );
__declspec(implementation_key(2630)) void ITeeShape::PutTransparency ( long Value );
__declspec(implementation_key(2631)) enum EPanelBevel ITeeShape::GetBevel ( );
__declspec(implementation_key(2632)) void ITeeShape::PutBevel ( enum EPanelBevel Value );
__declspec(implementation_key(2633)) long ITeeShape::GetBevelWidth ( );
__declspec(implementation_key(2634)) void ITeeShape::PutBevelWidth ( long Value );
__declspec(implementation_key(2635)) OLE_COLOR ITeeShape::GetColor ( );
__declspec(implementation_key(2636)) void ITeeShape::PutColor ( OLE_COLOR Value );
__declspec(implementation_key(2637)) IGradientPtr ITeeShape::GetGradient ( );
__declspec(implementation_key(2638)) IChartFontPtr ITeeShape::GetFont ( );
__declspec(implementation_key(2639)) ITeeShadowPtr ITeeShape::GetShadow ( );
__declspec(implementation_key(2640)) enum EChartObjectShapeStyle ITeeShape::GetShapeStyle ( );
__declspec(implementation_key(2641)) void ITeeShape::PutShapeStyle ( enum EChartObjectShapeStyle Value );
__declspec(implementation_key(2642)) IStringsPtr ILegendTitle::GetText ( );
__declspec(implementation_key(2643)) enum ETitleAlignment ILegendTitle::GetTextAlignment ( );
__declspec(implementation_key(2644)) void ILegendTitle::PutTextAlignment ( enum ETitleAlignment Value );
__declspec(implementation_key(2645)) VARIANT_BOOL ILegendTitle::GetVisible ( );
__declspec(implementation_key(2646)) void ILegendTitle::PutVisible ( VARIANT_BOOL Value );
__declspec(implementation_key(2647)) VARIANT_BOOL ILegendTitle::GetTransparent ( );
__declspec(implementation_key(2648)) void ILegendTitle::PutTransparent ( VARIANT_BOOL Value );
__declspec(implementation_key(2649)) _bstr_t ILegendTitle::GetCaption ( );
__declspec(implementation_key(2650)) void ILegendTitle::PutCaption ( _bstr_t Value );
__declspec(implementation_key(2651)) enum ELegendAlignment ILegend::GetAlignment ( );
__declspec(implementation_key(2652)) void ILegend::PutAlignment ( enum ELegendAlignment Alignment );
__declspec(implementation_key(2653)) long ILegend::GetColorWidth ( );
__declspec(implementation_key(2654)) void ILegend::PutColorWidth ( long ColorWidth );
__declspec(implementation_key(2655)) IPenPtr ILegend::GetDividingLines ( );
__declspec(implementation_key(2656)) long ILegend::GetFirstValue ( );
__declspec(implementation_key(2657)) void ILegend::PutFirstValue ( long FirstValue );
__declspec(implementation_key(2658)) IPenPtr ILegend::GetFrame ( );
__declspec(implementation_key(2659)) long ILegend::GetHorizMargin ( );
__declspec(implementation_key(2660)) void ILegend::PutHorizMargin ( long HorizMargin );
__declspec(implementation_key(2661)) VARIANT_BOOL ILegend::GetInverted ( );
__declspec(implementation_key(2662)) void ILegend::PutInverted ( VARIANT_BOOL Inverted );
__declspec(implementation_key(2663)) enum ELegendStyle ILegend::GetLegendStyle ( );
__declspec(implementation_key(2664)) void ILegend::PutLegendStyle ( enum ELegendStyle LegendStyle );
__declspec(implementation_key(2665)) VARIANT_BOOL ILegend::GetResizeChart ( );
__declspec(implementation_key(2666)) void ILegend::PutResizeChart ( VARIANT_BOOL ResizeChart );
__declspec(implementation_key(2667)) enum ELegendTextStyle ILegend::GetTextStyle ( );
__declspec(implementation_key(2668)) void ILegend::PutTextStyle ( enum ELegendTextStyle TextStyle );
__declspec(implementation_key(2669)) long ILegend::GetTopPos ( );
__declspec(implementation_key(2670)) void ILegend::PutTopPos ( long TopPos );
__declspec(implementation_key(2671)) long ILegend::GetVertMargin ( );
__declspec(implementation_key(2672)) void ILegend::PutVertMargin ( long VertMargin );
__declspec(implementation_key(2673)) VARIANT_BOOL ILegend::GetVisible ( );
__declspec(implementation_key(2674)) void ILegend::PutVisible ( VARIANT_BOOL Visible );
__declspec(implementation_key(2675)) _bstr_t ILegend::Formatted ( long SomeSeriesOrValueIndex );
__declspec(implementation_key(2676)) _bstr_t ILegend::FormattedValue ( long aSeries, long SomeValueIndex );
__declspec(implementation_key(2677)) long ILegend::Clicked ( long X, long Y );
__declspec(implementation_key(2678)) long ILegend::GetMaxNumRows ( );
__declspec(implementation_key(2679)) void ILegend::PutMaxNumRows ( long Value );
__declspec(implementation_key(2680)) HRESULT ILegend::BackImageLoad ( _bstr_t FileName );
__declspec(implementation_key(2681)) HRESULT ILegend::BackImageClear ( );
__declspec(implementation_key(2682)) IBrushPtr ILegend::GetBrush ( );
__declspec(implementation_key(2683)) _variant_t ILegend::GetSeries ( );
__declspec(implementation_key(2684)) void ILegend::PutSeries ( const _variant_t & Value );
__declspec(implementation_key(2685)) HRESULT ILegend::DrawLegend ( );
__declspec(implementation_key(2686)) VARIANT_BOOL ILegend::GetFontSeriesColor ( );
__declspec(implementation_key(2687)) void ILegend::PutFontSeriesColor ( VARIANT_BOOL Value );
__declspec(implementation_key(2688)) VARIANT_BOOL ILegend::GetCurrentPage ( );
__declspec(implementation_key(2689)) void ILegend::PutCurrentPage ( VARIANT_BOOL Value );
__declspec(implementation_key(2690)) ILegendSymbolPtr ILegend::GetSymbol ( );
__declspec(implementation_key(2691)) VARIANT_BOOL ILegend::GetCheckBoxes ( );
__declspec(implementation_key(2692)) void ILegend::PutCheckBoxes ( VARIANT_BOOL Value );
__declspec(implementation_key(2693)) VARIANT_BOOL ILegend::GetColumnWidthAuto ( );
__declspec(implementation_key(2694)) void ILegend::PutColumnWidthAuto ( VARIANT_BOOL Value );
__declspec(implementation_key(2695)) long ILegend::GetColumnWidths ( long Index );
__declspec(implementation_key(2696)) void ILegend::PutColumnWidths ( long Index, long Value );
__declspec(implementation_key(2697)) long ILegend::GetVertspacing ( );
__declspec(implementation_key(2698)) void ILegend::PutVertspacing ( long Value );
__declspec(implementation_key(2699)) VARIANT_BOOL ILegend::GetVertical ( );
__declspec(implementation_key(2700)) HRESULT ILegend::ShowEditorLegend ( );
__declspec(implementation_key(2701)) ILegendTitlePtr ILegend::GetTitle ( );
__declspec(implementation_key(2702)) enum ECheckBoxesStyle ILegend::GetCheckBoxesStyle ( );
__declspec(implementation_key(2703)) void ILegend::PutCheckBoxesStyle ( enum ECheckBoxesStyle Value );
__declspec(implementation_key(2704)) long ILegend::GetLastValue ( );
__declspec(implementation_key(2705)) enum EPositionUnits ILegend::GetPositionUnits ( );
__declspec(implementation_key(2706)) void ILegend::PutPositionUnits ( enum EPositionUnits Value );
__declspec(implementation_key(2707)) long ILegend::GetLeftPercent ( );
__declspec(implementation_key(2708)) void ILegend::PutLeftPercent ( long Value );
__declspec(implementation_key(2709)) long ILegend::GetTopPercent ( );
__declspec(implementation_key(2710)) void ILegend::PutTopPercent ( long Value );
__declspec(implementation_key(2711)) ILegendItemPtr ILegend::GetItem ( long Index );
__declspec(implementation_key(2712)) ILegendItemsPtr ILegend::GetItems ( );
__declspec(implementation_key(2713)) enum EPieOtherStyle IPieOtherSlice::GetStyle ( );
__declspec(implementation_key(2714)) void IPieOtherSlice::PutStyle ( enum EPieOtherStyle Value );
__declspec(implementation_key(2715)) _bstr_t IPieOtherSlice::GetText ( );
__declspec(implementation_key(2716)) void IPieOtherSlice::PutText ( _bstr_t Value );
__declspec(implementation_key(2717)) double IPieOtherSlice::GetValue ( );
__declspec(implementation_key(2718)) void IPieOtherSlice::PutValue ( double Value );
__declspec(implementation_key(2719)) ILegendPtr IPieOtherSlice::GetLegend ( );
__declspec(implementation_key(2720)) VARIANT_BOOL IPieSeries::GetUsePatterns ( );
__declspec(implementation_key(2721)) void IPieSeries::PutUsePatterns ( VARIANT_BOOL UsePatterns );
__declspec(implementation_key(2722)) IValueListPtr IPieSeries::GetPieValues ( );
__declspec(implementation_key(2723)) VARIANT_BOOL IPieSeries::GetDark3D ( );
__declspec(implementation_key(2724)) void IPieSeries::PutDark3D ( VARIANT_BOOL Dark3D );
__declspec(implementation_key(2725)) long IPieSeries::GetExplodeBiggest ( );
__declspec(implementation_key(2726)) void IPieSeries::PutExplodeBiggest ( long Value );
__declspec(implementation_key(2727)) IPieOtherSlicePtr IPieSeries::GetOtherSlice ( );
__declspec(implementation_key(2728)) IExplodedSlicesPtr IPieSeries::GetExplodedSlice ( );
__declspec(implementation_key(2729)) IPenPtr IPieSeries::GetPiePen ( );
__declspec(implementation_key(2730)) ITeeShadowPtr IPieSeries::GetShadow ( );
__declspec(implementation_key(2731)) long IPieSeries::GetAngleSize ( );
__declspec(implementation_key(2732)) void IPieSeries::PutAngleSize ( long Value );
__declspec(implementation_key(2733)) VARIANT_BOOL IPieSeries::GetAutoMarkPosition ( );
__declspec(implementation_key(2734)) void IPieSeries::PutAutoMarkPosition ( VARIANT_BOOL Value );
__declspec(implementation_key(2735)) IGradientPtr IPieSeries::GetGradient ( );
__declspec(implementation_key(2736)) long IPieSeries::GetSliceHeight ( long Index );
__declspec(implementation_key(2737)) void IPieSeries::PutSliceHeight ( long Index, long Value );
__declspec(implementation_key(2738)) long IPieSeries::GetDarkPen ( );
__declspec(implementation_key(2739)) void IPieSeries::PutDarkPen ( long Value );
__declspec(implementation_key(2740)) enum EMultiPie IPieSeries::GetMultiPie ( );
__declspec(implementation_key(2741)) void IPieSeries::PutMultiPie ( enum EMultiPie Value );
__declspec(implementation_key(2742)) IPieMarksPtr IPieSeries::GetPieMarks ( );
__declspec(implementation_key(2743)) long IPieSeries::GetGradientBright ( );
__declspec(implementation_key(2744)) void IPieSeries::PutGradientBright ( long Value );
__declspec(implementation_key(2745)) long IDonutSeries::GetDonutPercent ( );
__declspec(implementation_key(2746)) void IDonutSeries::PutDonutPercent ( long Value );
__declspec(implementation_key(2747)) ILegendPtr IExtraLegendTool::GetLegend ( );
__declspec(implementation_key(2748)) enum EPanelBevel IMarksSymbol::GetBevel ( );
__declspec(implementation_key(2749)) void IMarksSymbol::PutBevel ( enum EPanelBevel Value );
__declspec(implementation_key(2750)) long IMarksSymbol::GetBevelWidth ( );
__declspec(implementation_key(2751)) void IMarksSymbol::PutBevelWidth ( long Value );
__declspec(implementation_key(2752)) IPenPtr IMarksSymbol::GetFrame ( );
__declspec(implementation_key(2753)) IGradientPtr IMarksSymbol::GetGradient ( );
__declspec(implementation_key(2754)) ITeeShadowPtr IMarksSymbol::GetShadow ( );
__declspec(implementation_key(2755)) enum EChartObjectShapeStyle IMarksSymbol::GetShapeStyle ( );
__declspec(implementation_key(2756)) void IMarksSymbol::PutShapeStyle ( enum EChartObjectShapeStyle Value );
__declspec(implementation_key(2757)) long IMarksSymbol::GetTransparency ( );
__declspec(implementation_key(2758)) void IMarksSymbol::PutTransparency ( long Value );
__declspec(implementation_key(2759)) VARIANT_BOOL IMarksSymbol::GetVisible ( );
__declspec(implementation_key(2760)) void IMarksSymbol::PutVisible ( VARIANT_BOOL Value );
__declspec(implementation_key(2761)) IPenPtr IMarksSymbol::GetPen ( );
__declspec(implementation_key(2762)) IBrushPtr IMarksSymbol::GetBrush ( );
__declspec(implementation_key(2763)) IPenPtr IMarks::GetArrow ( );
__declspec(implementation_key(2764)) long IMarks::GetArrowLength ( );
__declspec(implementation_key(2765)) void IMarks::PutArrowLength ( long ArrowLength );
__declspec(implementation_key(2766)) OLE_COLOR IMarks::GetBackColor ( );
__declspec(implementation_key(2767)) void IMarks::PutBackColor ( OLE_COLOR BackColor );
__declspec(implementation_key(2768)) VARIANT_BOOL IMarks::GetClip ( );
__declspec(implementation_key(2769)) void IMarks::PutClip ( VARIANT_BOOL Clip );
__declspec(implementation_key(2770)) IPenPtr IMarks::GetFrame ( );
__declspec(implementation_key(2771)) enum EMarkStyle IMarks::GetStyle ( );
__declspec(implementation_key(2772)) void IMarks::PutStyle ( enum EMarkStyle Style );
__declspec(implementation_key(2773)) VARIANT_BOOL IMarks::GetVisible ( );
__declspec(implementation_key(2774)) void IMarks::PutVisible ( VARIANT_BOOL Visible );
__declspec(implementation_key(2775)) ISeriesMarksPositionsPtr IMarks::GetPositions ( );
__declspec(implementation_key(2776)) long IMarks::Clicked ( long X, long Y );
__declspec(implementation_key(2777)) long IMarks::GetZPosition ( );
__declspec(implementation_key(2778)) void IMarks::PutZPosition ( long Value );
__declspec(implementation_key(2779)) long IMarks::GetAngle ( );
__declspec(implementation_key(2780)) void IMarks::PutAngle ( long Value );
__declspec(implementation_key(2781)) long IMarks::GetDrawEvery ( );
__declspec(implementation_key(2782)) void IMarks::PutDrawEvery ( long Value );
__declspec(implementation_key(2783)) VARIANT_BOOL IMarks::GetMultiline ( );
__declspec(implementation_key(2784)) void IMarks::PutMultiline ( VARIANT_BOOL Value );
__declspec(implementation_key(2785)) HRESULT IMarks::ResetPositions ( );
__declspec(implementation_key(2786)) IMarksCalloutPtr IMarks::GetCallout ( );
__declspec(implementation_key(2787)) HRESULT IMarks::ShowEditorMarks ( );
__declspec(implementation_key(2788)) IMarksItemPtr IMarks::GetItem ( long Index );
__declspec(implementation_key(2789)) HRESULT IMarks::Clear ( );
__declspec(implementation_key(2790)) IMarksSymbolPtr IMarks::GetSymbol ( );
__declspec(implementation_key(2791)) enum ETextAlignment IMarks::GetTextAlign ( );
__declspec(implementation_key(2792)) void IMarks::PutTextAlign ( enum ETextAlignment Value );
__declspec(implementation_key(2793)) IMarginsPtr IMarks::GetMargins ( );
__declspec(implementation_key(2794)) long IBubble3DSeries::AddBubble ( double AX, double AY, double AZ, double ARadius, _bstr_t AXLabel, OLE_COLOR Value );
__declspec(implementation_key(2795)) IValueListPtr IBubble3DSeries::GetRadiusValues ( );
__declspec(implementation_key(2796)) IBrushPtr ISeriesBandTool::GetBrush ( );
__declspec(implementation_key(2797)) VARIANT_BOOL ISeriesBandTool::GetDrawBehindSeries ( );
__declspec(implementation_key(2798)) void ISeriesBandTool::PutDrawBehindSeries ( VARIANT_BOOL Value );
__declspec(implementation_key(2799)) IGradientPtr ISeriesBandTool::GetGradient ( );
__declspec(implementation_key(2800)) IPenPtr ISeriesBandTool::GetPen ( );
__declspec(implementation_key(2801)) _variant_t ISeriesBandTool::GetSeries2 ( );
__declspec(implementation_key(2802)) void ISeriesBandTool::PutSeries2 ( const _variant_t & Value );
__declspec(implementation_key(2803)) long ISeriesBandTool::GetTransparency ( );
__declspec(implementation_key(2804)) void ISeriesBandTool::PutTransparency ( long Value );
__declspec(implementation_key(2805)) VARIANT_BOOL IRectangleTool::GetDragging ( );
__declspec(implementation_key(2806)) VARIANT_BOOL IRectangleTool::GetResizing ( );
__declspec(implementation_key(2807)) long IRectangleTool::ClickedEdge ( long X, long Y );
__declspec(implementation_key(2808)) VARIANT_BOOL IRectangleTool::GetAllowDrag ( );
__declspec(implementation_key(2809)) void IRectangleTool::PutAllowDrag ( VARIANT_BOOL Value );
__declspec(implementation_key(2810)) VARIANT_BOOL IRectangleTool::GetAllowResize ( );
__declspec(implementation_key(2811)) void IRectangleTool::PutAllowResize ( VARIANT_BOOL Value );
__declspec(implementation_key(2812)) ILegendSymbolPtr ITableLegend::GetSymbol ( );
__declspec(implementation_key(2813)) VARIANT_BOOL ITableLegend::GetFontSeriesColor ( );
__declspec(implementation_key(2814)) void ITableLegend::PutFontSeriesColor ( VARIANT_BOOL Value );
__declspec(implementation_key(2815)) VARIANT_BOOL ITableLegend::GetOtherside ( );
__declspec(implementation_key(2816)) void ITableLegend::PutOtherside ( VARIANT_BOOL Value );
__declspec(implementation_key(2817)) VARIANT_BOOL IDataTableTool::GetAutoPosition ( );
__declspec(implementation_key(2818)) void IDataTableTool::PutAutoPosition ( VARIANT_BOOL Value );
__declspec(implementation_key(2819)) IBrushPtr IDataTableTool::GetBrush ( );
__declspec(implementation_key(2820)) VARIANT_BOOL IDataTableTool::GetClipText ( );
__declspec(implementation_key(2821)) void IDataTableTool::PutClipText ( VARIANT_BOOL Value );
__declspec(implementation_key(2822)) IPenPtr IDataTableTool::GetColumnPen ( );
__declspec(implementation_key(2823)) IChartFontPtr IDataTableTool::GetFont ( );
__declspec(implementation_key(2824)) VARIANT_BOOL IDataTableTool::GetInverted ( );
__declspec(implementation_key(2825)) void IDataTableTool::PutInverted ( VARIANT_BOOL Value );
__declspec(implementation_key(2826)) long IDataTableTool::GetLeft ( );
__declspec(implementation_key(2827)) void IDataTableTool::PutLeft ( long Value );
__declspec(implementation_key(2828)) ITableLegendPtr IDataTableTool::GetLegend ( );
__declspec(implementation_key(2829)) IPenPtr IDataTableTool::GetRowPen ( );
__declspec(implementation_key(2830)) long IDataTableTool::GetTop ( );
__declspec(implementation_key(2831)) void IDataTableTool::PutTop ( long Value );
__declspec(implementation_key(2832)) long IVolumePipeSeries::GetConePercent ( );
__declspec(implementation_key(2833)) void IVolumePipeSeries::PutConePercent ( long Value );
__declspec(implementation_key(2834)) IGradientPtr IVolumePipeSeries::GetGradient ( );
__declspec(implementation_key(2835)) IPenPtr IVolumePipeSeries::GetLinesPen ( );
__declspec(implementation_key(2836)) IBrushPtr IDarvasSeries::GetBoxBrush ( );
__declspec(implementation_key(2837)) IPenPtr IDarvasSeries::GetBoxPen ( );
__declspec(implementation_key(2838)) long IDarvasSeries::GetNumBoxes ( );
__declspec(implementation_key(2839)) long IDarvasSeries::ClickedBox ( long X, long Y );
__declspec(implementation_key(2840)) ITeeRectPtr IDarvasSeries::GetBoxesRect ( long Index );
__declspec(implementation_key(2841)) VARIANT_BOOL ISeriesRegionTool::GetDrawBehind ( );
__declspec(implementation_key(2842)) void ISeriesRegionTool::PutDrawBehind ( VARIANT_BOOL Value );
__declspec(implementation_key(2843)) IGradientPtr ISeriesRegionTool::GetGradient ( );
__declspec(implementation_key(2844)) double ISeriesRegionTool::GetLowerBound ( );
__declspec(implementation_key(2845)) void ISeriesRegionTool::PutLowerBound ( double Value );
__declspec(implementation_key(2846)) double ISeriesRegionTool::GetOrigin ( );
__declspec(implementation_key(2847)) void ISeriesRegionTool::PutOrigin ( double Value );
__declspec(implementation_key(2848)) long ISeriesRegionTool::GetTransparency ( );
__declspec(implementation_key(2849)) void ISeriesRegionTool::PutTransparency ( long Value );
__declspec(implementation_key(2850)) double ISeriesRegionTool::GetUpperBound ( );
__declspec(implementation_key(2851)) void ISeriesRegionTool::PutUpperBound ( double Value );
__declspec(implementation_key(2852)) VARIANT_BOOL ISeriesRegionTool::GetAutoBounds ( );
__declspec(implementation_key(2853)) void ISeriesRegionTool::PutAutoBounds ( VARIANT_BOOL Value );
__declspec(implementation_key(2854)) VARIANT_BOOL ISeriesRegionTool::GetUseOrigin ( );
__declspec(implementation_key(2855)) void ISeriesRegionTool::PutUseOrigin ( VARIANT_BOOL Value );
__declspec(implementation_key(2856)) IBrushPtr ISeriesRegionTool::GetBrush ( );
__declspec(implementation_key(2857)) OLE_COLOR ISeriesRegionTool::GetColor ( );
__declspec(implementation_key(2858)) void ISeriesRegionTool::PutColor ( OLE_COLOR Value );
__declspec(implementation_key(2859)) IPenPtr ISeriesRegionTool::GetPen ( );
__declspec(implementation_key(2860)) long ISubGradient::GetTransparency ( );
__declspec(implementation_key(2861)) void ISubGradient::PutTransparency ( long Value );
__declspec(implementation_key(2862)) VARIANT_BOOL IMagnifyTool::GetCircled ( );
__declspec(implementation_key(2863)) void IMagnifyTool::PutCircled ( VARIANT_BOOL Value );
__declspec(implementation_key(2864)) VARIANT_BOOL IMagnifyTool::GetFollowMouse ( );
__declspec(implementation_key(2865)) void IMagnifyTool::PutFollowMouse ( VARIANT_BOOL Value );
__declspec(implementation_key(2866)) double IMagnifyTool::GetPercent ( );
__declspec(implementation_key(2867)) void IMagnifyTool::PutPercent ( double Value );
__declspec(implementation_key(2868)) VARIANT_BOOL IMagnifyTool::GetSmooth ( );
__declspec(implementation_key(2869)) void IMagnifyTool::PutSmooth ( VARIANT_BOOL Value );
__declspec(implementation_key(2870)) IChartHiddenPenPtr ILegendPaletteTool::GetBorder ( );
__declspec(implementation_key(2871)) long ILegendPaletteTool::GetHeight ( );
__declspec(implementation_key(2872)) void ILegendPaletteTool::PutHeight ( long Value );
__declspec(implementation_key(2873)) VARIANT_BOOL ILegendPaletteTool::GetInverted ( );
__declspec(implementation_key(2874)) void ILegendPaletteTool::PutInverted ( VARIANT_BOOL Value );
__declspec(implementation_key(2875)) long ILegendPaletteTool::GetLeft ( );
__declspec(implementation_key(2876)) void ILegendPaletteTool::PutLeft ( long Value );
__declspec(implementation_key(2877)) VARIANT_BOOL ILegendPaletteTool::GetSmooth ( );
__declspec(implementation_key(2878)) void ILegendPaletteTool::PutSmooth ( VARIANT_BOOL Value );
__declspec(implementation_key(2879)) long ILegendPaletteTool::GetTop ( );
__declspec(implementation_key(2880)) void ILegendPaletteTool::PutTop ( long Value );
__declspec(implementation_key(2881)) VARIANT_BOOL ILegendPaletteTool::GetTransparent ( );
__declspec(implementation_key(2882)) void ILegendPaletteTool::PutTransparent ( VARIANT_BOOL Value );
__declspec(implementation_key(2883)) VARIANT_BOOL ILegendPaletteTool::GetVertical ( );
__declspec(implementation_key(2884)) void ILegendPaletteTool::PutVertical ( VARIANT_BOOL Value );
__declspec(implementation_key(2885)) long ILegendPaletteTool::GetWidth ( );
__declspec(implementation_key(2886)) void ILegendPaletteTool::PutWidth ( long Value );
__declspec(implementation_key(2887)) enum ELegendPaletteAxis ILegendPaletteTool::GetAxis ( );
__declspec(implementation_key(2888)) void ILegendPaletteTool::PutAxis ( enum ELegendPaletteAxis Value );
__declspec(implementation_key(2889)) enum EPositionUnits ILegendPaletteTool::GetPositionUnits ( );
__declspec(implementation_key(2890)) void ILegendPaletteTool::PutPositionUnits ( enum EPositionUnits Value );
__declspec(implementation_key(2891)) IPenPtr ILegendPaletteTool::GetPen ( );
__declspec(implementation_key(2892)) OLE_COLOR ILegendPaletteTool::GetColor ( );
__declspec(implementation_key(2893)) void ILegendPaletteTool::PutColor ( OLE_COLOR Value );
__declspec(implementation_key(2894)) IGradientPtr ILegendPaletteTool::GetGradient ( );
__declspec(implementation_key(2895)) ITeeShadowPtr ILegendPaletteTool::GetShadow ( );
__declspec(implementation_key(2896)) VARIANT_BOOL IBannerTool::GetBlink ( );
__declspec(implementation_key(2897)) void IBannerTool::PutBlink ( VARIANT_BOOL Value );
__declspec(implementation_key(2898)) long IBannerTool::GetBlinkDelayOff ( );
__declspec(implementation_key(2899)) void IBannerTool::PutBlinkDelayOff ( long Value );
__declspec(implementation_key(2900)) long IBannerTool::GetBlinkDelayOn ( );
__declspec(implementation_key(2901)) void IBannerTool::PutBlinkDelayOn ( long Value );
__declspec(implementation_key(2902)) long IBannerTool::GetScrollDelay ( );
__declspec(implementation_key(2903)) void IBannerTool::PutScrollDelay ( long Value );
__declspec(implementation_key(2904)) enum EScrollDirection IBannerTool::GetScrollDirection ( );
__declspec(implementation_key(2905)) void IBannerTool::PutScrollDirection ( enum EScrollDirection Value );
__declspec(implementation_key(2906)) VARIANT_BOOL IBannerTool::GetScroll ( );
__declspec(implementation_key(2907)) void IBannerTool::PutScroll ( VARIANT_BOOL Value );
__declspec(implementation_key(2908)) double IText3DTool::GetAngle ( );
__declspec(implementation_key(2909)) void IText3DTool::PutAngle ( double Value );
__declspec(implementation_key(2910)) ITeeFontPtr IText3DTool::GetFont ( );
__declspec(implementation_key(2911)) IFloatXYZPtr IText3DTool::GetPosition ( );
__declspec(implementation_key(2912)) IFloatXYZPtr IText3DTool::GetRotation ( );
__declspec(implementation_key(2913)) _bstr_t IText3DTool::GetText ( );
__declspec(implementation_key(2914)) void IText3DTool::PutText ( _bstr_t Value );
__declspec(implementation_key(2915)) IBrushPtr IScrollBarThumb::GetBrush ( );
__declspec(implementation_key(2916)) IGradientPtr IScrollBarThumb::GetGradient ( );
__declspec(implementation_key(2917)) ITeePicturePtr IScrollBarThumb::GetImage ( );
__declspec(implementation_key(2918)) long IScrollBarThumb::GetSize ( );
__declspec(implementation_key(2919)) void IScrollBarThumb::PutSize ( long Value );
__declspec(implementation_key(2920)) enum EScrollThumbStyle IScrollBarThumb::GetStyle ( );
__declspec(implementation_key(2921)) void IScrollBarThumb::PutStyle ( enum EScrollThumbStyle Value );
__declspec(implementation_key(2922)) VARIANT_BOOL ILegendScrollBarTool::GetHorizontal ( );
__declspec(implementation_key(2923)) void ILegendScrollBarTool::PutHorizontal ( VARIANT_BOOL Value );
__declspec(implementation_key(2924)) long ILegendScrollBarTool::GetPosition ( );
__declspec(implementation_key(2925)) void ILegendScrollBarTool::PutPosition ( long Value );
__declspec(implementation_key(2926)) IBrushPtr ILegendScrollBarTool::GetArrowBrush ( );
__declspec(implementation_key(2927)) VARIANT_BOOL ILegendScrollBarTool::GetAutoRepeat ( );
__declspec(implementation_key(2928)) void ILegendScrollBarTool::PutAutoRepeat ( VARIANT_BOOL Value );
__declspec(implementation_key(2929)) OLE_COLOR ILegendScrollBarTool::GetBackColor ( );
__declspec(implementation_key(2930)) void ILegendScrollBarTool::PutBackColor ( OLE_COLOR Value );
__declspec(implementation_key(2931)) enum EPanelBevel ILegendScrollBarTool::GetBevel ( );
__declspec(implementation_key(2932)) void ILegendScrollBarTool::PutBevel ( enum EPanelBevel Value );
__declspec(implementation_key(2933)) IBrushPtr ILegendScrollBarTool::GetBrush ( );
__declspec(implementation_key(2934)) long ILegendScrollBarTool::GetInitialDelay ( );
__declspec(implementation_key(2935)) void ILegendScrollBarTool::PutInitialDelay ( long Value );
__declspec(implementation_key(2936)) IPenPtr ILegendScrollBarTool::GetPen ( );
__declspec(implementation_key(2937)) long ILegendScrollBarTool::GetSize ( );
__declspec(implementation_key(2938)) void ILegendScrollBarTool::PutSize ( long Value );
__declspec(implementation_key(2939)) IBrushPtr ILegendScrollBarTool::GetThumbBrush ( );
__declspec(implementation_key(2940)) enum EScrollBarDrawStyle ILegendScrollBarTool::GetDrawStyle ( );
__declspec(implementation_key(2941)) void ILegendScrollBarTool::PutDrawStyle ( enum EScrollBarDrawStyle Value );
__declspec(implementation_key(2942)) IGradientPtr ILegendScrollBarTool::GetGradient ( );
__declspec(implementation_key(2943)) long ILegendScrollBarTool::GetMinThumbSize ( );
__declspec(implementation_key(2944)) void ILegendScrollBarTool::PutMinThumbSize ( long Value );
__declspec(implementation_key(2945)) long ILegendScrollBarTool::GetThumbSize ( );
__declspec(implementation_key(2946)) void ILegendScrollBarTool::PutThumbSize ( long Value );
__declspec(implementation_key(2947)) IScrollBarThumbPtr ILegendScrollBarTool::GetThumb ( );
__declspec(implementation_key(2948)) IPointerPtr IHighLowLineSeries::GetHighPointer ( );
__declspec(implementation_key(2949)) IPointerPtr IHighLowLineSeries::GetLowPointer ( );
__declspec(implementation_key(2950)) long IHighLowLineSeries::Clicked ( long X, long Y );
__declspec(implementation_key(2951)) IValueListPtr IPolarGridSeries::GetCellValues ( );
__declspec(implementation_key(2952)) VARIANT_BOOL IPolarGridSeries::GetCentered ( );
__declspec(implementation_key(2953)) void IPolarGridSeries::PutCentered ( VARIANT_BOOL Value );
__declspec(implementation_key(2954)) long IPolarGridSeries::GetNumSectors ( );
__declspec(implementation_key(2955)) void IPolarGridSeries::PutNumSectors ( long Value );
__declspec(implementation_key(2956)) long IPolarGridSeries::GetNumTracks ( );
__declspec(implementation_key(2957)) void IPolarGridSeries::PutNumTracks ( long Value );
__declspec(implementation_key(2958)) long IPolarGridSeries::AddCell ( long Sector, long Track, double Value );
__declspec(implementation_key(2959)) long IPolarGridSeries::CalcXPos ( long ValueIndex );
__declspec(implementation_key(2960)) long IPolarGridSeries::CalcYPos ( long ValueIndex );
__declspec(implementation_key(2961)) long IPolarGridSeries::Clicked ( long X, long Y );
__declspec(implementation_key(2962)) long IPolarGridSeries::CountLegendItems ( );
__declspec(implementation_key(2963)) OLE_COLOR IPolarGridSeries::GetCellColor ( double Value );
__declspec(implementation_key(2964)) OLE_COLOR IPolarGridSeries::LegendItemColor ( long LegendIndex );
__declspec(implementation_key(2965)) _bstr_t IPolarGridSeries::LegendString ( long LegendIndex, enum ELegendTextStyle LegendTextStyle );
__declspec(implementation_key(2966)) ICustom3DPaletteSeriesPtr IPolarGridSeries::GetPalette ( );
__declspec(implementation_key(2967)) ITeePicturePtr ICustomImagePointSeries::GetImagePoint ( );
__declspec(implementation_key(2968)) VARIANT_BOOL ICustomImagePointSeries::GetImageTransparent ( );
__declspec(implementation_key(2969)) void ICustomImagePointSeries::PutImageTransparent ( VARIANT_BOOL Value );
__declspec(implementation_key(2970)) ITeePicturePtr IDeltaPointSeries::GetEqualImage ( );
__declspec(implementation_key(2971)) ITeePicturePtr IDeltaPointSeries::GetGreaterImage ( );
__declspec(implementation_key(2972)) enum EDeltaImageStyle IDeltaPointSeries::GetImageStyle ( );
__declspec(implementation_key(2973)) void IDeltaPointSeries::PutImageStyle ( enum EDeltaImageStyle Value );
__declspec(implementation_key(2974)) ITeePicturePtr IDeltaPointSeries::GetLowerImage ( );
__declspec(implementation_key(2975)) enum EWorldMap IWorldSeries::GetMap ( );
__declspec(implementation_key(2976)) void IWorldSeries::PutMap ( enum EWorldMap Value );
__declspec(implementation_key(2977)) long ITagCloudSeries::AddTag ( _bstr_t Text, double Value );
__declspec(implementation_key(2978)) long ITagCloudSeries::GetTagFontSize ( long ValueIndex );
__declspec(implementation_key(2979)) HRESULT ITagCloudSeries::Sort ( enum ETagCloudOrder SortBy, enum EValueListOrder Order );
__declspec(implementation_key(2980)) _bstr_t ITagCloudSeries::GetFilter ( );
__declspec(implementation_key(2981)) void ITagCloudSeries::PutFilter ( _bstr_t Value );
__declspec(implementation_key(2982)) ITeeFontPtr ITagCloudSeries::GetFont ( );
__declspec(implementation_key(2983)) IGradientPtr ITagCloudSeries::GetGradient ( );
__declspec(implementation_key(2984)) long ITagCloudSeries::GetTagSeparation ( );
__declspec(implementation_key(2985)) void ITagCloudSeries::PutTagSeparation ( long Value );
__declspec(implementation_key(2986)) IValueListPtr IKagiSeries::GetCloseValues ( );
__declspec(implementation_key(2987)) VARIANT_BOOL IKagiSeries::GetAbsoluteReversal ( );
__declspec(implementation_key(2988)) void IKagiSeries::PutAbsoluteReversal ( VARIANT_BOOL Value );
__declspec(implementation_key(2989)) IPointerPtr IKagiSeries::GetBuySymbol ( );
__declspec(implementation_key(2990)) IPenPtr IKagiSeries::GetDownSwing ( );
__declspec(implementation_key(2991)) double IKagiSeries::GetReversalAmount ( );
__declspec(implementation_key(2992)) void IKagiSeries::PutReversalAmount ( double Value );
__declspec(implementation_key(2993)) IPointerPtr IKagiSeries::GetSellSymbol ( );
__declspec(implementation_key(2994)) IPenPtr IKagiSeries::GetUpSwing ( );
__declspec(implementation_key(2995)) _bstr_t ILinkTool::GetHint ( );
__declspec(implementation_key(2996)) void ILinkTool::PutHint ( _bstr_t Value );
__declspec(implementation_key(2997)) _bstr_t ILinkTool::GetURL ( );
__declspec(implementation_key(2998)) void ILinkTool::PutURL ( _bstr_t Value );
__declspec(implementation_key(2999)) IGradientPtr IFrameBrush::GetGradient ( );
__declspec(implementation_key(3000)) IBrushPtr IFramedBorder::GetBrush ( );
__declspec(implementation_key(3001)) VARIANT_BOOL IFramedBorder::GetCircled ( );
__declspec(implementation_key(3002)) void IFramedBorder::PutCircled ( VARIANT_BOOL Value );
__declspec(implementation_key(3003)) IFrameBrushPtr IFramedBorder::GetInnerBrush ( );
__declspec(implementation_key(3004)) IFrameBrushPtr IFramedBorder::GetMiddleBrush ( );
__declspec(implementation_key(3005)) IFrameBrushPtr IFramedBorder::GetOuterBrush ( );
__declspec(implementation_key(3006)) ITeeShadowPtr IFramedBorder::GetShadow ( );
__declspec(implementation_key(3007)) VARIANT_BOOL IFramedBorder::GetVisible ( );
__declspec(implementation_key(3008)) void IFramedBorder::PutVisible ( VARIANT_BOOL Value );
__declspec(implementation_key(3009)) long IFramedBorder::GetWidth ( );
__declspec(implementation_key(3010)) void IFramedBorder::PutWidth ( long Value );
__declspec(implementation_key(3011)) ITeeShapePtr ICustomGauge::GetFace ( );
__declspec(implementation_key(3012)) IFramedBorderPtr ICustomGauge::GetFrame ( );
__declspec(implementation_key(3013)) double ICustomGauge::GetValue ( );
__declspec(implementation_key(3014)) void ICustomGauge::PutValue ( double Value );
__declspec(implementation_key(3015)) enum EGaugePointerStyles IGaugeSeriesPointer::GetGaugeStyle ( );
__declspec(implementation_key(3016)) void IGaugeSeriesPointer::PutGaugeStyle ( enum EGaugePointerStyles Value );
__declspec(implementation_key(3017)) double IGaugePointerRange::GetEndValue ( );
__declspec(implementation_key(3018)) void IGaugePointerRange::PutEndValue ( double Value );
__declspec(implementation_key(3019)) double IGaugePointerRange::GetStartValue ( );
__declspec(implementation_key(3020)) void IGaugePointerRange::PutStartValue ( double Value );
__declspec(implementation_key(3021)) IGaugePointerRangePtr ICustomGaugeMinMax::GetGreenLine ( );
__declspec(implementation_key(3022)) VARIANT_BOOL ICustomGaugeMinMax::GetHorizontal ( );
__declspec(implementation_key(3023)) void ICustomGaugeMinMax::PutHorizontal ( VARIANT_BOOL Value );
__declspec(implementation_key(3024)) double ICustomGaugeMinMax::GetMaximum ( );
__declspec(implementation_key(3025)) void ICustomGaugeMinMax::PutMaximum ( double Value );
__declspec(implementation_key(3026)) double ICustomGaugeMinMax::GetMinimum ( );
__declspec(implementation_key(3027)) void ICustomGaugeMinMax::PutMinimum ( double Value );
__declspec(implementation_key(3028)) long ICustomGaugeMinMax::GetMinorTickDistance ( );
__declspec(implementation_key(3029)) void ICustomGaugeMinMax::PutMinorTickDistance ( long Value );
__declspec(implementation_key(3030)) IGaugeSeriesPointerPtr ICustomGaugeMinMax::GetMinorTicks ( );
__declspec(implementation_key(3031)) IGaugePointerRangePtr ICustomGaugeMinMax::GetRedLine ( );
__declspec(implementation_key(3032)) IGaugeSeriesPointerPtr ICustomGaugeMinMax::GetTicks ( );
__declspec(implementation_key(3033)) IGaugeSeriesPointerPtr ILinearGauge::GetMaxValueIndicator ( );
__declspec(implementation_key(3034)) VARIANT_BOOL ILinearGauge::GetUseValueColorPalette ( );
__declspec(implementation_key(3035)) void ILinearGauge::PutUseValueColorPalette ( VARIANT_BOOL Value );
__declspec(implementation_key(3036)) ITeeShapePtr ILinearGauge::GetValueArea ( );
__declspec(implementation_key(3037)) IGaugeSeriesPointerPtr ICircularGauge::GetCenter ( );
__declspec(implementation_key(3038)) VARIANT_BOOL ICircularGauge::GetCircled ( );
__declspec(implementation_key(3039)) void ICircularGauge::PutCircled ( VARIANT_BOOL Value );
__declspec(implementation_key(3040)) IPointerPtr ICircularGauge::GetEndPoint ( );
__declspec(implementation_key(3041)) VARIANT_BOOL ICircularGauge::GetLabelsInside ( );
__declspec(implementation_key(3042)) void ICircularGauge::PutLabelsInside ( VARIANT_BOOL Value );
__declspec(implementation_key(3043)) VARIANT_BOOL ICircularGauge::GetRotateLabels ( );
__declspec(implementation_key(3044)) void ICircularGauge::PutRotateLabels ( VARIANT_BOOL Value );
__declspec(implementation_key(3045)) double ICircularGauge::GetRotationAngle ( );
__declspec(implementation_key(3046)) void ICircularGauge::PutRotationAngle ( double Value );
__declspec(implementation_key(3047)) double ICircularGauge::GetTotalAngle ( );
__declspec(implementation_key(3048)) void ICircularGauge::PutTotalAngle ( double Value );
__declspec(implementation_key(3049)) IGaugeSeriesPointerPtr ICircularGauge::GetHand ( );
__declspec(implementation_key(3050)) long IGaugeHand::GetDistance ( );
__declspec(implementation_key(3051)) void IGaugeHand::PutDistance ( long Value );
__declspec(implementation_key(3052)) long IGaugeHand::GetOffset ( );
__declspec(implementation_key(3053)) void IGaugeHand::PutOffset ( long Value );
__declspec(implementation_key(3054)) enum EFibonacciStyle IFibonacciTool::GetDrawStyle ( );
__declspec(implementation_key(3055)) void IFibonacciTool::PutDrawStyle ( enum EFibonacciStyle Value );
__declspec(implementation_key(3056)) double IFibonacciTool::GetEndX ( );
__declspec(implementation_key(3057)) void IFibonacciTool::PutEndX ( double Value );
__declspec(implementation_key(3058)) double IFibonacciTool::GetEndY ( );
__declspec(implementation_key(3059)) void IFibonacciTool::PutEndY ( double Value );
__declspec(implementation_key(3060)) long IFibonacciTool::GetLabelsAngle ( );
__declspec(implementation_key(3061)) void IFibonacciTool::PutLabelsAngle ( long Value );
__declspec(implementation_key(3062)) ITeeFontPtr IFibonacciTool::GetLabelsFont ( );
__declspec(implementation_key(3063)) IFibonacciLevelsPtr IFibonacciTool::GetLevels ( );
__declspec(implementation_key(3064)) VARIANT_BOOL IFibonacciTool::GetShowLabels ( );
__declspec(implementation_key(3065)) void IFibonacciTool::PutShowLabels ( VARIANT_BOOL Value );
__declspec(implementation_key(3066)) double IFibonacciTool::GetStartX ( );
__declspec(implementation_key(3067)) void IFibonacciTool::PutStartX ( double Value );
__declspec(implementation_key(3068)) double IFibonacciTool::GetStartY ( );
__declspec(implementation_key(3069)) void IFibonacciTool::PutStartY ( double Value );
__declspec(implementation_key(3070)) IPenPtr IFibonacciTool::GetTrendPen ( );
__declspec(implementation_key(3071)) ICursorToolPtr ITools::GetasTeeCursor ( );
__declspec(implementation_key(3072)) IDragMarksToolPtr ITools::GetasDragMarks ( );
__declspec(implementation_key(3073)) IAxisArrowToolPtr ITools::GetasAxisArrow ( );
__declspec(implementation_key(3074)) IDrawLineToolPtr ITools::GetasDrawLine ( );
__declspec(implementation_key(3075)) INearestToolPtr ITools::GetasNearest ( );
__declspec(implementation_key(3076)) IColorBandToolPtr ITools::GetasColorband ( );
__declspec(implementation_key(3077)) IColorLineToolPtr ITools::GetasColorLine ( );
__declspec(implementation_key(3078)) IRotateToolPtr ITools::GetasRotate ( );
__declspec(implementation_key(3079)) IMarksTipToolPtr ITools::GetasMarksTip ( );
__declspec(implementation_key(3080)) IChartImageToolPtr ITools::GetasChartImage ( );
__declspec(implementation_key(3081)) IAnnotationToolPtr ITools::GetasAnnotation ( );
__declspec(implementation_key(3082)) IPageNumToolPtr ITools::GetasPageNum ( );
__declspec(implementation_key(3083)) VARIANT_BOOL ITools::GetActive ( );
__declspec(implementation_key(3084)) void ITools::PutActive ( VARIANT_BOOL Value );
__declspec(implementation_key(3085)) _bstr_t ITools::GetDescription ( );
__declspec(implementation_key(3086)) enum EToolClass ITools::GetToolType ( );
__declspec(implementation_key(3087)) HRESULT ITools::ShowEditor ( );
__declspec(implementation_key(3088)) IGridTransposeToolPtr ITools::GetasGridTranspose ( );
__declspec(implementation_key(3089)) IExtraLegendToolPtr ITools::GetasExtraLegend ( );
__declspec(implementation_key(3090)) ISeriesAnimationToolPtr ITools::GetasSeriesAnimation ( );
__declspec(implementation_key(3091)) IGanttToolPtr ITools::GetasGantt ( );
__declspec(implementation_key(3092)) IGridBandToolPtr ITools::GetasGridBand ( );
__declspec(implementation_key(3093)) IPieToolPtr ITools::GetasPie ( );
__declspec(implementation_key(3094)) IDragPointToolPtr ITools::GetasDragPoint ( );
__declspec(implementation_key(3095)) ILegendScrollBarToolPtr ITools::GetasLegendScrollBar ( );
__declspec(implementation_key(3096)) ILightToolPtr ITools::GetasLight ( );
__declspec(implementation_key(3097)) ISurfaceNearestToolPtr ITools::GetasSurfaceNearest ( );
__declspec(implementation_key(3098)) IAxisScrollToolPtr ITools::GetasAxisScroll ( );
__declspec(implementation_key(3099)) ISeriesBandToolPtr ITools::GetasSeriesBand ( );
__declspec(implementation_key(3100)) ISelectorToolPtr ITools::GetasSelector ( );
__declspec(implementation_key(3101)) IRectangleToolPtr ITools::GetasRectangle ( );
__declspec(implementation_key(3102)) VARIANT_BOOL ITools::GetShowInEditor ( );
__declspec(implementation_key(3103)) void ITools::PutShowInEditor ( VARIANT_BOOL Value );
__declspec(implementation_key(3104)) IDataTableToolPtr ITools::GetasDataTable ( );
__declspec(implementation_key(3105)) IVideoToolPtr ITools::GetasVideo ( );
__declspec(implementation_key(3106)) IVideoPlayerToolPtr ITools::GetasVideoPlayer ( );
__declspec(implementation_key(3107)) ITransposeSeriesToolPtr ITools::GetasTransposeSeries ( );
__declspec(implementation_key(3108)) ISeriesRegionToolPtr ITools::GetasSeriesRegion ( );
__declspec(implementation_key(3109)) IAntiAliasToolPtr ITools::GetasAntiAlias ( );
__declspec(implementation_key(3110)) IClipSeriesToolPtr ITools::GetasClipSeries ( );
__declspec(implementation_key(3111)) IFaderToolPtr ITools::GetasFader ( );
__declspec(implementation_key(3112)) IFrameToolPtr ITools::GetasFrame ( );
__declspec(implementation_key(3113)) IMagnifyToolPtr ITools::GetasMagnify ( );
__declspec(implementation_key(3114)) ILegendPaletteToolPtr ITools::GetasLegendPalette ( );
__declspec(implementation_key(3115)) IBannerToolPtr ITools::GetasBanner ( );
__declspec(implementation_key(3116)) IText3DToolPtr ITools::GetasText3D ( );
__declspec(implementation_key(3117)) ISeriesStatsToolPtr ITools::GetasSeriesStats ( );
__declspec(implementation_key(3118)) ILinkToolPtr ITools::GetasLink ( );
__declspec(implementation_key(3119)) IFibonacciToolPtr ITools::GetasFibonacci ( );
__declspec(implementation_key(3120)) IFullScreenToolPtr ITools::GetasFullScreen ( );
__declspec(implementation_key(3121)) long IToolList::Add ( enum EToolClass ToolClass );
__declspec(implementation_key(3122)) IToolsPtr IToolList::GetItems ( long Index );
__declspec(implementation_key(3123)) _variant_t IToolList::GetControlDefault ( long Index );
__declspec(implementation_key(3124)) HRESULT IToolList::Clear ( );
__declspec(implementation_key(3125)) HRESULT IToolList::Delete ( long Index );
__declspec(implementation_key(3126)) long IToolList::GetCount ( );
__declspec(implementation_key(3127)) void IToolList::PutActive ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3128)) HRESULT IToolList::Exchange ( long Index1, long Index2 );
__declspec(implementation_key(3129)) HRESULT IToolList::ShowGallery ( );
__declspec(implementation_key(3130)) enum EDigitalFont INumericGauge::GetDigitalFont ( );
__declspec(implementation_key(3131)) void INumericGauge::PutDigitalFont ( enum EDigitalFont Value );
__declspec(implementation_key(3132)) INumericMarkerPtr INumericGauge::GetTextMarker ( );
__declspec(implementation_key(3133)) INumericMarkerPtr INumericGauge::GetUnitsMarker ( );
__declspec(implementation_key(3134)) INumericMarkerPtr INumericGauge::GetValueMarker ( );
__declspec(implementation_key(3135)) VARIANT_BOOL ISeries::GetActive ( );
__declspec(implementation_key(3136)) void ISeries::PutActive ( VARIANT_BOOL Active );
__declspec(implementation_key(3137)) IAreaSeriesPtr ISeries::GetasArea ( );
__declspec(implementation_key(3138)) IArrowSeriesPtr ISeries::GetasArrow ( );
__declspec(implementation_key(3139)) IBarSeriesPtr ISeries::GetasBar ( );
__declspec(implementation_key(3140)) IBubbleSeriesPtr ISeries::GetasBubble ( );
__declspec(implementation_key(3141)) ICandleSeriesPtr ISeries::GetasCandle ( );
__declspec(implementation_key(3142)) IErrorBarSeriesPtr ISeries::GetasErrorBar ( );
__declspec(implementation_key(3143)) IFastLineSeriesPtr ISeries::GetasFastLine ( );
__declspec(implementation_key(3144)) IGanttSeriesPtr ISeries::GetasGantt ( );
__declspec(implementation_key(3145)) IHorizBarSeriesPtr ISeries::GetasHorizBar ( );
__declspec(implementation_key(3146)) ILineSeriesPtr ISeries::GetasLine ( );
__declspec(implementation_key(3147)) IPieSeriesPtr ISeries::GetasPie ( );
__declspec(implementation_key(3148)) IPointSeriesPtr ISeries::GetasPoint ( );
__declspec(implementation_key(3149)) IPolarSeriesPtr ISeries::GetasPolar ( );
__declspec(implementation_key(3150)) IShapeSeriesPtr ISeries::GetasShape ( );
__declspec(implementation_key(3151)) ISurfaceSeriesPtr ISeries::GetasSurface ( );
__declspec(implementation_key(3152)) IVolumeSeriesPtr ISeries::GetasVolume ( );
__declspec(implementation_key(3153)) OLE_COLOR ISeries::GetColor ( );
__declspec(implementation_key(3154)) void ISeries::PutColor ( OLE_COLOR Color );
__declspec(implementation_key(3155)) VARIANT_BOOL ISeries::GetColorEachPoint ( );
__declspec(implementation_key(3156)) void ISeries::PutColorEachPoint ( VARIANT_BOOL ColorEachPoint );
__declspec(implementation_key(3157)) long ISeries::GetCount ( );
__declspec(implementation_key(3158)) short ISeries::GetCursor ( );
__declspec(implementation_key(3159)) void ISeries::PutCursor ( short Cursor );
__declspec(implementation_key(3160)) _variant_t ISeries::GetDataSource ( );
__declspec(implementation_key(3161)) void ISeries::PutDataSource ( const _variant_t & DataSource );
__declspec(implementation_key(3162)) long ISeries::GetFirstValueIndex ( );
__declspec(implementation_key(3163)) ITeeFunctionPtr ISeries::GetFunctionType ( );
__declspec(implementation_key(3164)) enum EHorizontalAxis ISeries::GetHorizontalAxis ( );
__declspec(implementation_key(3165)) void ISeries::PutHorizontalAxis ( enum EHorizontalAxis HorizontalAxis );
__declspec(implementation_key(3166)) _bstr_t ISeries::GetLabelsSource ( );
__declspec(implementation_key(3167)) void ISeries::PutLabelsSource ( _bstr_t LabelsSource );
__declspec(implementation_key(3168)) long ISeries::GetLastValueIndex ( );
__declspec(implementation_key(3169)) IMarksPtr ISeries::GetMarks ( );
__declspec(implementation_key(3170)) _bstr_t ISeries::GetName ( );
__declspec(implementation_key(3171)) void ISeries::PutName ( _bstr_t Name );
__declspec(implementation_key(3172)) _bstr_t ISeries::GetPercentFormat ( );
__declspec(implementation_key(3173)) void ISeries::PutPercentFormat ( _bstr_t PercentFormat );
__declspec(implementation_key(3174)) OLE_COLOR ISeries::GetPointColor ( long Index );
__declspec(implementation_key(3175)) void ISeries::PutPointColor ( long Index, OLE_COLOR Value );
__declspec(implementation_key(3176)) _bstr_t ISeries::GetPointLabel ( long Index );
__declspec(implementation_key(3177)) void ISeries::PutPointLabel ( long Index, _bstr_t Value );
__declspec(implementation_key(3178)) double ISeries::GetPointValue ( long Index );
__declspec(implementation_key(3179)) void ISeries::PutPointValue ( long Index, double Value );
__declspec(implementation_key(3180)) enum ESeriesClass ISeries::GetSeriesType ( );
__declspec(implementation_key(3181)) VARIANT_BOOL ISeries::GetShowInLegend ( );
__declspec(implementation_key(3182)) void ISeries::PutShowInLegend ( VARIANT_BOOL ShowInLegend );
__declspec(implementation_key(3183)) _bstr_t ISeries::GetTitle ( );
__declspec(implementation_key(3184)) void ISeries::PutTitle ( _bstr_t Title );
__declspec(implementation_key(3185)) _bstr_t ISeries::GetValueFormat ( );
__declspec(implementation_key(3186)) void ISeries::PutValueFormat ( _bstr_t ValueFormat );
__declspec(implementation_key(3187)) _bstr_t ISeries::GetValueMarkText ( long ValueIndex );
__declspec(implementation_key(3188)) enum EVerticalAxis ISeries::GetVerticalAxis ( );
__declspec(implementation_key(3189)) void ISeries::PutVerticalAxis ( enum EVerticalAxis VerticalAxis );
__declspec(implementation_key(3190)) IValueListPtr ISeries::GetXValues ( );
__declspec(implementation_key(3191)) IValueListPtr ISeries::GetYValues ( );
__declspec(implementation_key(3192)) long ISeries::Add ( double AValue, _bstr_t ALabel, OLE_COLOR Value );
__declspec(implementation_key(3193)) long ISeries::AddNull ( _bstr_t SomeLabel );
__declspec(implementation_key(3194)) long ISeries::AddXY ( double AX, double AY, _bstr_t ALabel, OLE_COLOR Value );
__declspec(implementation_key(3195)) long ISeries::CalcXPos ( long SomeValueIndex );
__declspec(implementation_key(3196)) long ISeries::CalcXPosValue ( double SomeValue );
__declspec(implementation_key(3197)) long ISeries::CalcXSizeValue ( double SomeValue );
__declspec(implementation_key(3198)) long ISeries::CalcYPos ( long SomeValueIndex );
__declspec(implementation_key(3199)) long ISeries::CalcYPosValue ( double SomeValue );
__declspec(implementation_key(3200)) long ISeries::CalcYSizeValue ( double SomeValue );
__declspec(implementation_key(3201)) HRESULT ISeries::CheckDataSource ( );
__declspec(implementation_key(3202)) HRESULT ISeries::Clear ( );
__declspec(implementation_key(3203)) long ISeries::Clicked ( long XCoord, long YCoord );
__declspec(implementation_key(3204)) HRESULT ISeries::Delete ( long Index );
__declspec(implementation_key(3205)) HRESULT ISeries::FillSampleValues ( long NumValues );
__declspec(implementation_key(3206)) long ISeries::GetMousePoint ( );
__declspec(implementation_key(3207)) VARIANT_BOOL ISeries::IsNull ( long ValueIndex );
__declspec(implementation_key(3208)) HRESULT ISeries::RefreshSeries ( );
__declspec(implementation_key(3209)) HRESULT ISeries::SetFunction ( enum EFunctionType AFunction );
__declspec(implementation_key(3210)) HRESULT ISeries::SwapValues ( long a, long b );
__declspec(implementation_key(3211)) double ISeries::XScreenToValue ( long ScreenCoord );
__declspec(implementation_key(3212)) _bstr_t ISeries::XValueToText ( double SomeValue );
__declspec(implementation_key(3213)) double ISeries::YScreenToValue ( long ScreenCoord );
__declspec(implementation_key(3214)) _bstr_t ISeries::YValueToText ( double SomeValue );
__declspec(implementation_key(3215)) IBezierSeriesPtr ISeries::GetasBezier ( );
__declspec(implementation_key(3216)) IContourSeriesPtr ISeries::GetasContour ( );
__declspec(implementation_key(3217)) IErrorSeriesPtr ISeries::GetasError ( );
__declspec(implementation_key(3218)) IPoint3DSeriesPtr ISeries::GetasPoint3D ( );
__declspec(implementation_key(3219)) IRadarSeriesPtr ISeries::GetasRadar ( );
__declspec(implementation_key(3220)) long ISeries::AddNullXY ( double X, double Y, _bstr_t ALabel );
__declspec(implementation_key(3221)) _bstr_t ISeries::LegendString ( long LegendIndex, enum ELegendTextStyle LegendTextStyle );
__declspec(implementation_key(3222)) OLE_COLOR ISeries::LegendItemColor ( long LegendIndex );
__declspec(implementation_key(3223)) long ISeries::CountLegendItems ( );
__declspec(implementation_key(3224)) long ISeries::LegendToValueIndex ( long LegendIndex );
__declspec(implementation_key(3225)) long ISeries::VisibleCount ( );
__declspec(implementation_key(3226)) HRESULT ISeries::AssignValues ( long SeriesIndex );
__declspec(implementation_key(3227)) long ISeries::GetHorizontalAxisCustom ( );
__declspec(implementation_key(3228)) void ISeries::PutHorizontalAxisCustom ( long Value );
__declspec(implementation_key(3229)) long ISeries::GetVerticalAxisCustom ( );
__declspec(implementation_key(3230)) void ISeries::PutVerticalAxisCustom ( long Value );
__declspec(implementation_key(3231)) IClockSeriesPtr ISeries::GetasClock ( );
__declspec(implementation_key(3232)) IWindRoseSeriesPtr ISeries::GetasWindRose ( );
__declspec(implementation_key(3233)) IBar3DSeriesPtr ISeries::GetasBar3D ( );
__declspec(implementation_key(3234)) IImageBarSeriesPtr ISeries::GetasImageBar ( );
__declspec(implementation_key(3235)) HRESULT ISeries::DisconnectAxisCustom ( VARIANT_BOOL IsHorizontal );
__declspec(implementation_key(3236)) ITeePoint2DPtr ISeries::GetMouseValues ( );
__declspec(implementation_key(3237)) HRESULT ISeries::AddArray ( long ArraySize, const _variant_t & YArray, const _variant_t & XArray );
__declspec(implementation_key(3238)) long ISeries::GetDepth ( );
__declspec(implementation_key(3239)) void ISeries::PutDepth ( long Value );
__declspec(implementation_key(3240)) IDonutSeriesPtr ISeries::GetasDonut ( );
__declspec(implementation_key(3241)) ITriSurfaceSeriesPtr ISeries::GetasTriSurface ( );
__declspec(implementation_key(3242)) IBoxPlotSeriesPtr ISeries::GetasBoxPlot ( );
__declspec(implementation_key(3243)) IHorizBoxPlotSeriesPtr ISeries::GetasHorizBoxPlot ( );
__declspec(implementation_key(3244)) IHistogramSeriesPtr ISeries::GetasHistogram ( );
__declspec(implementation_key(3245)) IColorGridSeriesPtr ISeries::GetasColorGrid ( );
__declspec(implementation_key(3246)) IHorizLineSeriesPtr ISeries::GetasHorizLine ( );
__declspec(implementation_key(3247)) IBarJoinSeriesPtr ISeries::GetasBarJoin ( );
__declspec(implementation_key(3248)) IHighLowSeriesPtr ISeries::GetasHighLow ( );
__declspec(implementation_key(3249)) IWaterfallSeriesPtr ISeries::GetasWaterfall ( );
__declspec(implementation_key(3250)) ISmithSeriesPtr ISeries::GetasSmith ( );
__declspec(implementation_key(3251)) IPyramidSeriesPtr ISeries::GetasPyramid ( );
__declspec(implementation_key(3252)) IMapSeriesPtr ISeries::GetasMap ( );
__declspec(implementation_key(3253)) IFunnelSeriesPtr ISeries::GetasFunnel ( );
__declspec(implementation_key(3254)) ICalendarSeriesPtr ISeries::GetasCalendar ( );
__declspec(implementation_key(3255)) HRESULT ISeries::FreeDatasource ( VARIANT_BOOL SurePrompt );
__declspec(implementation_key(3256)) long ISeries::GetSeriesLink ( );
__declspec(implementation_key(3257)) enum EDatasourceType ISeries::GetDatasourceType ( );
__declspec(implementation_key(3258)) void ISeries::PutDatasourceType ( enum EDatasourceType Value );
__declspec(implementation_key(3259)) IValueListsPtr ISeries::GetValueLists ( );
__declspec(implementation_key(3260)) VARIANT_BOOL ISeries::IsNan ( double Value );
__declspec(implementation_key(3261)) HRESULT ISeries::DeleteRange ( long Start, long Quantity );
__declspec(implementation_key(3262)) HRESULT ISeries::SortByLabels ( enum EValueListOrder Order );
__declspec(implementation_key(3263)) HRESULT ISeries::SetNull ( long ValueIndex );
__declspec(implementation_key(3264)) IHorizAreaSeriesPtr ISeries::GetasHorizArea ( );
__declspec(implementation_key(3265)) IPointFigureSeriesPtr ISeries::GetasPointFigure ( );
__declspec(implementation_key(3266)) IGaugeSeriesPtr ISeries::GetasGauge ( );
__declspec(implementation_key(3267)) IPenPtr ISeries::GetPen ( );
__declspec(implementation_key(3268)) IVector3DSeriesPtr ISeries::GetasVector3D ( );
__declspec(implementation_key(3269)) ITowerSeriesPtr ISeries::GetasTower ( );
__declspec(implementation_key(3270)) double ISeries::MaxVisibleValue ( long valueList );
__declspec(implementation_key(3271)) double ISeries::MinVisibleValue ( long valueList );
__declspec(implementation_key(3272)) IPolarBarSeriesPtr ISeries::GetasPolarBar ( );
__declspec(implementation_key(3273)) IBubble3DSeriesPtr ISeries::GetasBubble3D ( );
__declspec(implementation_key(3274)) IHorizHistogramSeriesPtr ISeries::GetasHorizHistogram ( );
__declspec(implementation_key(3275)) VARIANT_BOOL ISeries::GetShowInEditor ( );
__declspec(implementation_key(3276)) void ISeries::PutShowInEditor ( VARIANT_BOOL Value );
__declspec(implementation_key(3277)) IVolumePipeSeriesPtr ISeries::GetasVolumePipe ( );
__declspec(implementation_key(3278)) IIsoSurfaceSeriesPtr ISeries::GetasIsoSurface ( );
__declspec(implementation_key(3279)) IDarvasSeriesPtr ISeries::GetasDarvas ( );
__declspec(implementation_key(3280)) IHighLowLineSeriesPtr ISeries::GetasHighLowLine ( );
__declspec(implementation_key(3281)) IPolarGridSeriesPtr ISeries::GetasPolarGrid ( );
__declspec(implementation_key(3282)) VARIANT_BOOL ISeries::GetYMandatory ( );
__declspec(implementation_key(3283)) HRESULT ISeries::BeginUpdate ( );
__declspec(implementation_key(3284)) HRESULT ISeries::EndUpdate ( );
__declspec(implementation_key(3285)) IBrushPtr ISeries::GetBrush ( );
__declspec(implementation_key(3286)) IValueListPtr ISeries::GetMandatoryValueList ( );
__declspec(implementation_key(3287)) IValueListPtr ISeries::GetNotMandatoryValueList ( );
__declspec(implementation_key(3288)) IDeltaPointSeriesPtr ISeries::GetasDeltaPoint ( );
__declspec(implementation_key(3289)) IImagePointSeriesPtr ISeries::GetasImagePoint ( );
__declspec(implementation_key(3290)) IOrgSeriesPtr ISeries::GetasOrganizational ( );
__declspec(implementation_key(3291)) IWorldSeriesPtr ISeries::GetasWorld ( );
__declspec(implementation_key(3292)) ITagCloudSeriesPtr ISeries::GetasTagCloud ( );
__declspec(implementation_key(3293)) IKagiSeriesPtr ISeries::GetasKagi ( );
__declspec(implementation_key(3294)) IRenkoSeriesPtr ISeries::GetasRenko ( );
__declspec(implementation_key(3295)) VARIANT_BOOL ISeries::IsValidSourceOf ( long SeriesIndex );
__declspec(implementation_key(3296)) VARIANT_BOOL ISeries::IsValidSeriesSource ( long SeriesIndex );
__declspec(implementation_key(3297)) VARIANT_BOOL ISeries::UseAxis ( );
__declspec(implementation_key(3298)) _bstr_t ISeries::GetColorSource ( );
__declspec(implementation_key(3299)) void ISeries::PutColorSource ( _bstr_t Value );
__declspec(implementation_key(3300)) INumericGaugePtr ISeries::GetasNumericGauge ( );
__declspec(implementation_key(3301)) ILinearGaugePtr ISeries::GetasLinearGauge ( );
__declspec(implementation_key(3302)) ICircularGaugePtr ISeries::GetasCircularGauge ( );
__declspec(implementation_key(3303)) long ISeries::GetZOrder ( );
__declspec(implementation_key(3304)) void ISeries::PutZOrder ( long Value );
__declspec(implementation_key(3305)) double IMACDFunction::GetPeriod2 ( );
__declspec(implementation_key(3306)) void IMACDFunction::PutPeriod2 ( double Value );
__declspec(implementation_key(3307)) ISeriesPtr IMACDFunction::GetMACDExp ( );
__declspec(implementation_key(3308)) ISeriesPtr IMACDFunction::GetHistogram ( );
__declspec(implementation_key(3309)) long IMACDFunction::GetPeriod3 ( );
__declspec(implementation_key(3310)) void IMACDFunction::PutPeriod3 ( long Value );
__declspec(implementation_key(3311)) double IBollingerFunction::GetDeviation ( );
__declspec(implementation_key(3312)) void IBollingerFunction::PutDeviation ( double Value );
__declspec(implementation_key(3313)) VARIANT_BOOL IBollingerFunction::GetExponential ( );
__declspec(implementation_key(3314)) void IBollingerFunction::PutExponential ( VARIANT_BOOL Value );
__declspec(implementation_key(3315)) ISeriesPtr IBollingerFunction::GetLowBand ( );
__declspec(implementation_key(3316)) ISeriesPtr IADXFunction::GetDMDown ( );
__declspec(implementation_key(3317)) ISeriesPtr IADXFunction::GetDMUp ( );
__declspec(implementation_key(3318)) double ITeeFunction::GetPeriod ( );
__declspec(implementation_key(3319)) void ITeeFunction::PutPeriod ( double Period );
__declspec(implementation_key(3320)) ICurveFittingFunctionPtr ITeeFunction::GetasCurveFit ( );
__declspec(implementation_key(3321)) IExpAvgFunctionPtr ITeeFunction::GetasExpAvg ( );
__declspec(implementation_key(3322)) IMovingAvgFunctionPtr ITeeFunction::GetasMovAvg ( );
__declspec(implementation_key(3323)) enum EFunctionPeriodStyle ITeeFunction::GetPeriodStyle ( );
__declspec(implementation_key(3324)) void ITeeFunction::PutPeriodStyle ( enum EFunctionPeriodStyle Value );
__declspec(implementation_key(3325)) enum EFunctionPeriodAlign ITeeFunction::GetPeriodAlign ( );
__declspec(implementation_key(3326)) void ITeeFunction::PutPeriodAlign ( enum EFunctionPeriodAlign Value );
__declspec(implementation_key(3327)) IStdDeviationFunctionPtr ITeeFunction::GetasStdDeviation ( );
__declspec(implementation_key(3328)) HRESULT ITeeFunction::BeginUpdate ( );
__declspec(implementation_key(3329)) HRESULT ITeeFunction::EndUpdate ( );
__declspec(implementation_key(3330)) IRSIFunctionPtr ITeeFunction::GetasRSI ( );
__declspec(implementation_key(3331)) IBollingerFunctionPtr ITeeFunction::GetasBollinger ( );
__declspec(implementation_key(3332)) IADXFunctionPtr ITeeFunction::GetasADX ( );
__declspec(implementation_key(3333)) IMACDFunctionPtr ITeeFunction::GetasMACD ( );
__declspec(implementation_key(3334)) IRMSFunctionPtr ITeeFunction::GetasRMS ( );
__declspec(implementation_key(3335)) IAverageFunctionPtr ITeeFunction::GetasAverage ( );
__declspec(implementation_key(3336)) ISmoothingFunctionPtr ITeeFunction::GetasSmoothing ( );
__declspec(implementation_key(3337)) ICustomFunctionPtr ITeeFunction::GetasCustom ( );
__declspec(implementation_key(3338)) ICompressFunctionPtr ITeeFunction::GetasCompress ( );
__declspec(implementation_key(3339)) ICLVFunctionPtr ITeeFunction::GetasCLV ( );
__declspec(implementation_key(3340)) IOBVFunctionPtr ITeeFunction::GetasOBV ( );
__declspec(implementation_key(3341)) ICCIFunctionPtr ITeeFunction::GetasCCI ( );
__declspec(implementation_key(3342)) IPVOFunctionPtr ITeeFunction::GetasPVO ( );
__declspec(implementation_key(3343)) IPerformanceFunctionPtr ITeeFunction::GetasPerformance ( );
__declspec(implementation_key(3344)) IModeFunctionPtr ITeeFunction::GetasMode ( );
__declspec(implementation_key(3345)) IMedianFunctionPtr ITeeFunction::GetasMedian ( );
__declspec(implementation_key(3346)) HRESULT ITeeFunction::Recalculate ( );
__declspec(implementation_key(3347)) IDownSamplingFunctionPtr ITeeFunction::GetasDownSampling ( );
__declspec(implementation_key(3348)) ITrendFunctionPtr ITeeFunction::GetasTrend ( );
__declspec(implementation_key(3349)) ISubsetTeeFunctionPtr ITeeFunction::GetasSubset ( );
__declspec(implementation_key(3350)) IExpMovAvgFunctionPtr ITeeFunction::GetasExpMovAvg ( );
__declspec(implementation_key(3351)) ISARFunctionPtr ITeeFunction::GetasSAR ( );
__declspec(implementation_key(3352)) IHistogramFunctionPtr ITeeFunction::GetasHistogram ( );
__declspec(implementation_key(3353)) HRESULT ICustomSeriesList::ClearValues ( );
__declspec(implementation_key(3354)) long ICustomSeriesList::First ( );
__declspec(implementation_key(3355)) long ICustomSeriesList::Last ( );
__declspec(implementation_key(3356)) ISeriesPtr ICustomSeriesList::GetItems ( long Index );
__declspec(implementation_key(3357)) HRESULT ISeriesGroup::Add ( long SeriesIndex );
__declspec(implementation_key(3358)) HRESULT ISeriesGroup::Hide ( );
__declspec(implementation_key(3359)) HRESULT ISeriesGroup::Show ( );
__declspec(implementation_key(3360)) enum ESeriesGroupActive ISeriesGroup::GetActive ( );
__declspec(implementation_key(3361)) void ISeriesGroup::PutActive ( enum ESeriesGroupActive Value );
__declspec(implementation_key(3362)) _bstr_t ISeriesGroup::GetName ( );
__declspec(implementation_key(3363)) void ISeriesGroup::PutName ( _bstr_t Value );
__declspec(implementation_key(3364)) _variant_t ISeriesGroup::GetSeriesCount ( );
__declspec(implementation_key(3365)) long ISeriesGroup::GetGroupLink ( );
__declspec(implementation_key(3366)) HRESULT ISeriesGroup::Delete ( long Index );
__declspec(implementation_key(3367)) HRESULT ISeriesGroup::Insert ( long IndexInGroup, long SeriesIndex );
__declspec(implementation_key(3368)) ICustomSeriesListPtr ISeriesGroup::GetSeries ( );
__declspec(implementation_key(3369)) OLE_COLOR ITeeListBox::GetColor ( );
__declspec(implementation_key(3370)) void ITeeListBox::PutColor ( OLE_COLOR Value );
__declspec(implementation_key(3371)) HRESULT ITeeListBox::UpdateSeries ( );
__declspec(implementation_key(3372)) long ITeeListBox::GetSelectedSeries ( );
__declspec(implementation_key(3373)) void ITeeListBox::PutSelectedSeries ( long Value );
__declspec(implementation_key(3374)) VARIANT_BOOL ITeeListBox::GetShowActive ( );
__declspec(implementation_key(3375)) void ITeeListBox::PutShowActive ( VARIANT_BOOL Value );
__declspec(implementation_key(3376)) VARIANT_BOOL ITeeListBox::GetShowColor ( );
__declspec(implementation_key(3377)) void ITeeListBox::PutShowColor ( VARIANT_BOOL Value );
__declspec(implementation_key(3378)) VARIANT_BOOL ITeeListBox::GetShowTitle ( );
__declspec(implementation_key(3379)) void ITeeListBox::PutShowTitle ( VARIANT_BOOL Value );
__declspec(implementation_key(3380)) VARIANT_BOOL ITeeListBox::GetShowIcon ( );
__declspec(implementation_key(3381)) void ITeeListBox::PutShowIcon ( VARIANT_BOOL Value );
__declspec(implementation_key(3382)) ISeriesGroupPtr ITeeListBox::GetSeriesGroup ( );
__declspec(implementation_key(3383)) void ITeeListBox::PutSeriesGroup ( struct ISeriesGroup * Value );
__declspec(implementation_key(3384)) enum ECheckBoxesStyle ITeeListBox::GetCheckStyle ( );
__declspec(implementation_key(3385)) void ITeeListBox::PutCheckStyle ( enum ECheckBoxesStyle Value );
__declspec(implementation_key(3386)) HRESULT ITeeListBox::ShowEditor ( );
__declspec(implementation_key(3387)) HRESULT ITeeListBox::HideEditor ( );
__declspec(implementation_key(3388)) long ITeeListBox::GetItemHeight ( );
__declspec(implementation_key(3389)) void ITeeListBox::PutItemHeight ( long Value );
__declspec(implementation_key(3390)) HRESULT ITeeListBox::ClearItems ( );
__declspec(implementation_key(3391)) HRESULT ITeeListBox::Repaint ( );
__declspec(implementation_key(3392)) VARIANT_BOOL ITeeListBox::GetSorted ( );
__declspec(implementation_key(3393)) void ITeeListBox::PutSorted ( VARIANT_BOOL Value );
__declspec(implementation_key(3394)) VARIANT_BOOL ITeeListBox::GetAskDelete ( );
__declspec(implementation_key(3395)) void ITeeListBox::PutAskDelete ( VARIANT_BOOL Value );
__declspec(implementation_key(3396)) VARIANT_BOOL ITeeListBox::GetAllowDeleteSeries ( );
__declspec(implementation_key(3397)) void ITeeListBox::PutAllowDeleteSeries ( VARIANT_BOOL Value );
__declspec(implementation_key(3398)) VARIANT_BOOL ITeeListBox::GetAllowAddSeries ( );
__declspec(implementation_key(3399)) void ITeeListBox::PutAllowAddSeries ( VARIANT_BOOL Value );
__declspec(implementation_key(3400)) ITeeListBoxSectionPtr ITeeListBox::GetSections ( long Index );
__declspec(implementation_key(3401)) VARIANT_BOOL ITeeListBox::GetFontSeriesColor ( );
__declspec(implementation_key(3402)) void ITeeListBox::PutFontSeriesColor ( VARIANT_BOOL Value );
__declspec(implementation_key(3403)) IStringsPtr ITeeListBox::GetItems ( );
__declspec(implementation_key(3404)) ISeriesGroupPtr ISeriesGroups::GetItems ( long Index );
__declspec(implementation_key(3405)) long ISeriesGroups::GetCount ( );
__declspec(implementation_key(3406)) HRESULT ISeriesGroups::Delete ( long Index );
__declspec(implementation_key(3407)) long ISeriesGroups::Contains ( long SeriesIndex );
__declspec(implementation_key(3408)) long ISeriesGroups::FindByName ( _bstr_t Name, VARIANT_BOOL CaseSensitive );
__declspec(implementation_key(3409)) HRESULT ISeriesList::AddGroup ( _bstr_t Name );
__declspec(implementation_key(3410)) VARIANT_BOOL ISeriesList::GetAllActive ( );
__declspec(implementation_key(3411)) void ISeriesList::PutAllActive ( VARIANT_BOOL Value );
__declspec(implementation_key(3412)) ISeriesGroupsPtr ISeriesList::GetGroups ( );
__declspec(implementation_key(3413)) HRESULT ISeriesList::ClearValues ( );
__declspec(implementation_key(3414)) long ISeriesList::First ( );
__declspec(implementation_key(3415)) long ISeriesList::Last ( );
__declspec(implementation_key(3416)) ISeriesPtr ISeriesList::GetItems ( long Index );
#pragma stop_map_region

#pragma pack(pop)
