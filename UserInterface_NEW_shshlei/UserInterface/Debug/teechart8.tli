// Created by Microsoft (R) C/C++ Compiler Version 12.00.31101.0 (52ee5ad7).
//
// d:\mine\课程\实时软件控制\homework\caffe\test\test\debug\teechart8.tli
//
// Wrapper implementations for Win32 type library C:\\Windows\\SysWow64\\TeeChart8.ocx
// compiler-generated file created 01/09/16 at 22:07:09 - DO NOT EDIT!


//
// dispinterface ITChartEvents wrapper method implementations
//

#pragma implementation_key(1)
inline HRESULT ITChartEvents::OnAfterDraw ( ) {
    return _com_dispatch_method(this, 0x1, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(2)
inline HRESULT ITChartEvents::OnBeforeDrawSeries ( ) {
    return _com_dispatch_method(this, 0x1d, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(3)
inline HRESULT ITChartEvents::OnBeforeDrawAxes ( ) {
    return _com_dispatch_method(this, 0x1e, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(4)
inline HRESULT ITChartEvents::OnClick ( ) {
    return _com_dispatch_method(this, 0x3, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(5)
inline HRESULT ITChartEvents::OnClickAxis ( long Axis, enum EMouseButton Button, enum EShiftState Shift, long X, long Y ) {
    return _com_dispatch_method(this, 0x4, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x0003\x0003\x0003", Axis, Button, Shift, X, Y);
}

#pragma implementation_key(6)
inline HRESULT ITChartEvents::OnClickBackground ( enum EMouseButton Button, enum EShiftState Shift, long X, long Y ) {
    return _com_dispatch_method(this, 0x5, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x0003\x0003", Button, Shift, X, Y);
}

#pragma implementation_key(7)
inline HRESULT ITChartEvents::OnClickLegend ( enum EMouseButton Button, enum EShiftState Shift, long X, long Y ) {
    return _com_dispatch_method(this, 0x6, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x0003\x0003", Button, Shift, X, Y);
}

#pragma implementation_key(8)
inline HRESULT ITChartEvents::OnClickSeries ( long SeriesIndex, long ValueIndex, enum EMouseButton Button, enum EShiftState Shift, long X, long Y ) {
    return _com_dispatch_method(this, 0x7, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x0003\x0003\x0003\x0003", SeriesIndex, ValueIndex, Button, Shift, X, Y);
}

#pragma implementation_key(9)
inline HRESULT ITChartEvents::OnDblClick ( ) {
    return _com_dispatch_method(this, 0x8, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(10)
inline HRESULT ITChartEvents::OnDragDrop ( long X, long Y ) {
    return _com_dispatch_method(this, 0x9, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003", X, Y);
}

#pragma implementation_key(11)
inline HRESULT ITChartEvents::OnDragOver ( long X, long Y, enum EDragState State, VARIANT_BOOL * Accept ) {
    return _com_dispatch_method(this, 0xa, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x0003\x400b", X, Y, State, Accept);
}

#pragma implementation_key(12)
inline HRESULT ITChartEvents::OnEndDrag ( long X, long Y ) {
    return _com_dispatch_method(this, 0xb, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003", X, Y);
}

#pragma implementation_key(13)
inline HRESULT ITChartEvents::OnEnter ( ) {
    return _com_dispatch_method(this, 0xc, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(14)
inline HRESULT ITChartEvents::OnExit ( ) {
    return _com_dispatch_method(this, 0xd, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(15)
inline HRESULT ITChartEvents::OnGetAxisLabel ( long Axis, long SeriesIndex, long ValueIndex, BSTR * LabelText ) {
    return _com_dispatch_method(this, 0xe, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x0003\x4008", Axis, SeriesIndex, ValueIndex, LabelText);
}

#pragma implementation_key(16)
inline HRESULT ITChartEvents::OnGetLegendRect ( long * Left, long * Top, long * Right, long * Bottom ) {
    return _com_dispatch_method(this, 0x10, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x4003\x4003\x4003\x4003", Left, Top, Right, Bottom);
}

#pragma implementation_key(17)
inline HRESULT ITChartEvents::OnGetNextAxisLabel ( long Axis, long LabelIndex, double * LabelValue, VARIANT_BOOL * MoreLabels ) {
    return _com_dispatch_method(this, 0x12, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x4005\x400b", Axis, LabelIndex, LabelValue, MoreLabels);
}

#pragma implementation_key(18)
inline HRESULT ITChartEvents::OnMouseDown ( enum EMouseButton Button, enum EShiftState Shift, long X, long Y ) {
    return _com_dispatch_method(this, 0x13, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x0003\x0003", Button, Shift, X, Y);
}

#pragma implementation_key(19)
inline HRESULT ITChartEvents::OnMouseMove ( enum EShiftState Shift, long X, long Y ) {
    return _com_dispatch_method(this, 0x14, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x0003", Shift, X, Y);
}

#pragma implementation_key(20)
inline HRESULT ITChartEvents::OnMouseUp ( enum EMouseButton Button, enum EShiftState Shift, long X, long Y ) {
    return _com_dispatch_method(this, 0x15, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x0003\x0003", Button, Shift, X, Y);
}

#pragma implementation_key(21)
inline HRESULT ITChartEvents::OnPageChange ( ) {
    return _com_dispatch_method(this, 0x16, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(22)
inline HRESULT ITChartEvents::OnResize ( ) {
    return _com_dispatch_method(this, 0x17, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(23)
inline HRESULT ITChartEvents::OnScroll ( ) {
    return _com_dispatch_method(this, 0x18, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(24)
inline HRESULT ITChartEvents::OnStartDrag ( ) {
    return _com_dispatch_method(this, 0x19, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(25)
inline HRESULT ITChartEvents::OnUndoZoom ( ) {
    return _com_dispatch_method(this, 0x1a, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(26)
inline HRESULT ITChartEvents::OnZoom ( ) {
    return _com_dispatch_method(this, 0x1b, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(27)
inline HRESULT ITChartEvents::OnAllowScroll ( enum EAxisType Axis, double * AMin, double * AMax, VARIANT_BOOL * AllowScroll ) {
    return _com_dispatch_method(this, 0x2, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x4005\x4005\x400b", Axis, AMin, AMax, AllowScroll);
}

#pragma implementation_key(28)
inline HRESULT ITChartEvents::OnGetLegendPos ( long ItemIndex, long * X, long * Y, long * XColor ) {
    return _com_dispatch_method(this, 0xf, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x4003\x4003\x4003", ItemIndex, X, Y, XColor);
}

#pragma implementation_key(29)
inline HRESULT ITChartEvents::OnGetLegendText ( long LegendStyle, long ValueIndex, BSTR * LegendText ) {
    return _com_dispatch_method(this, 0x11, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x4008", LegendStyle, ValueIndex, LegendText);
}

#pragma implementation_key(30)
inline HRESULT ITChartEvents::OnDatabaseRecord ( long SeriesIndex, long Index, VARIANT_BOOL * StopRetrieve ) {
    return _com_dispatch_method(this, 0x1c, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x400b", SeriesIndex, Index, StopRetrieve);
}

#pragma implementation_key(31)
inline HRESULT ITChartEvents::OnTimer ( ) {
    return _com_dispatch_method(this, 0x1f, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(32)
inline HRESULT ITChartEvents::OnGetSeriesMark ( long SeriesIndex, long ValueIndex, BSTR * MarkText ) {
    return _com_dispatch_method(this, 0x20, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x4008", SeriesIndex, ValueIndex, MarkText);
}

#pragma implementation_key(33)
inline HRESULT ITChartEvents::OnGetSeriesPointerStyle ( long SeriesIndex, long ValueIndex, enum EPointerStyle * AStyle ) {
    return _com_dispatch_method(this, 0x21, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x4003", SeriesIndex, ValueIndex, AStyle);
}

#pragma implementation_key(34)
inline HRESULT ITChartEvents::OnGetSeriesContourLevel ( long SeriesIndex, long LevelIndex, double * LevelValue, OLE_COLOR * LevelColor ) {
    return _com_dispatch_method(this, 0x22, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x4005\x4003", SeriesIndex, LevelIndex, LevelValue, LevelColor);
}

#pragma implementation_key(35)
inline HRESULT ITChartEvents::OnBeforeDrawChart ( ) {
    return _com_dispatch_method(this, 0x27, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(36)
inline HRESULT ITChartEvents::OnSeriesBeforeDrawValues ( long SeriesIndex ) {
    return _com_dispatch_method(this, 0x24, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003", SeriesIndex);
}

#pragma implementation_key(37)
inline HRESULT ITChartEvents::OnSeriesAfterDrawValues ( long SeriesIndex ) {
    return _com_dispatch_method(this, 0x23, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003", SeriesIndex);
}

#pragma implementation_key(38)
inline HRESULT ITChartEvents::OnMarkTipToolGetText ( long Tool, BSTR * Text ) {
    return _com_dispatch_method(this, 0x25, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x4008", Tool, Text);
}

#pragma implementation_key(39)
inline HRESULT ITChartEvents::OnCursorToolChange ( long Tool, long X, long Y, double XVal, double YVal, long Series, long ValueIndex ) {
    return _com_dispatch_method(this, 0x28, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x0003\x0005\x0005\x0003\x0003", Tool, X, Y, XVal, YVal, Series, ValueIndex);
}

#pragma implementation_key(40)
inline HRESULT ITChartEvents::OnDrawLineToolLineDrag ( ) {
    return _com_dispatch_method(this, 0x29, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(41)
inline HRESULT ITChartEvents::OnDrawLineToolNewLine ( ) {
    return _com_dispatch_method(this, 0x2a, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(42)
inline HRESULT ITChartEvents::OnDrawLineToolDraggedLine ( ) {
    return _com_dispatch_method(this, 0x2b, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(43)
inline HRESULT ITChartEvents::OnDrawLineToolSelectLine ( ) {
    return _com_dispatch_method(this, 0x2c, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(44)
inline HRESULT ITChartEvents::OnCalendarSeriesChange ( long Series, double Value ) {
    return _com_dispatch_method(this, 0x26, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0005", Series, Value);
}

#pragma implementation_key(45)
inline HRESULT ITChartEvents::OnSeriesBeforeAdd ( long SeriesIndex, VARIANT_BOOL * MoreValues ) {
    return _com_dispatch_method(this, 0x2d, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x400b", SeriesIndex, MoreValues);
}

#pragma implementation_key(46)
inline HRESULT ITChartEvents::OnMouseEnterSeries ( long SeriesIndex ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0xc9, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x0003", SeriesIndex);
    return _result;
}

#pragma implementation_key(47)
inline HRESULT ITChartEvents::OnMouseLeaveSeries ( long SeriesIndex ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0xca, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x0003", SeriesIndex);
    return _result;
}

#pragma implementation_key(48)
inline HRESULT ITChartEvents::OnSeriesContourBeforeDrawLevel ( long SeriesIndex, long LevelIndex ) {
    return _com_dispatch_method(this, 0xcb, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003", SeriesIndex, LevelIndex);
}

#pragma implementation_key(49)
inline HRESULT ITChartEvents::OnSeriesAnimationToolStep ( long Tool, long Step ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0xcc, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x0003\x0003", Tool, Step);
    return _result;
}

#pragma implementation_key(50)
inline HRESULT ITChartEvents::OnGanttToolDragBar ( long Tool, long GanttBar ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0xcd, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x0003\x0003", Tool, GanttBar);
    return _result;
}

#pragma implementation_key(51)
inline HRESULT ITChartEvents::OnGanttToolResizeBar ( long Tool, long GanttBar, enum EGanttToolPartBar BarPart ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0xce, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x0003\x0003\x0003", Tool, GanttBar, BarPart);
    return _result;
}

#pragma implementation_key(52)
inline HRESULT ITChartEvents::OnFunctionCalculate ( long SeriesIndex, double X, double * Y ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0xcf, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x0003\x0005\x4005", SeriesIndex, X, Y);
    return _result;
}

#pragma implementation_key(53)
inline HRESULT ITChartEvents::OnCompressFunctionGetDate ( long FunctionSeriesIndex, long SourceSeriesIndex, long ValueIndex, DATE * D ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0xd0, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x0003\x0003\x0003\x4007", FunctionSeriesIndex, SourceSeriesIndex, ValueIndex, D);
    return _result;
}

#pragma implementation_key(54)
inline HRESULT ITChartEvents::OnGaugeChange ( long SeriesIndex ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0xd1, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x0003", SeriesIndex);
    return _result;
}

#pragma implementation_key(55)
inline HRESULT ITChartEvents::OnNearestToolChange ( ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0xd2, DISPATCH_METHOD, VT_ERROR, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(56)
inline HRESULT ITChartEvents::OnBeforePrint ( ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0xd3, DISPATCH_METHOD, VT_ERROR, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(57)
inline HRESULT ITChartEvents::OnKeyDown ( long KeyCode, enum EShiftState Shift ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0xd4, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x0003\x0003", KeyCode, Shift);
    return _result;
}

#pragma implementation_key(58)
inline HRESULT ITChartEvents::OnKeyUp ( long KeyCode, enum EShiftState Shift ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0xd5, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x0003\x0003", KeyCode, Shift);
    return _result;
}

#pragma implementation_key(59)
inline HRESULT ITChartEvents::OnLegendScrollBarToolScrolled ( ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0xd6, DISPATCH_METHOD, VT_ERROR, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(60)
inline HRESULT ITChartEvents::OnSurfaceNearestToolSelectCell ( ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0xd7, DISPATCH_METHOD, VT_ERROR, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(61)
inline HRESULT ITChartEvents::OnDrawAxisLabel ( long Axis, long X, long Y, BSTR * LabelText ) {
    return _com_dispatch_method(this, 0xd8, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x0003\x4008", Axis, X, Y, LabelText);
}

#pragma implementation_key(62)
inline HRESULT ITChartEvents::OnLegendDrawSymbol ( long Series, long ValueIndex, long Left, long Top, long Right, long Bottom ) {
    return _com_dispatch_method(this, 0xd9, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x0003\x0003\x0003\x0003", Series, ValueIndex, Left, Top, Right, Bottom);
}

#pragma implementation_key(63)
inline HRESULT ITChartEvents::OnColorBandToolClick ( enum EMouseButton Button, enum EShiftState Shift, long X, long Y ) {
    return _com_dispatch_method(this, 0xda, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x0003\x0003", Button, Shift, X, Y);
}

#pragma implementation_key(64)
inline HRESULT ITChartEvents::OnRotateToolRotate ( ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0xdb, DISPATCH_METHOD, VT_ERROR, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(65)
inline HRESULT ITChartEvents::OnColorLineToolBeginDragLine ( ) {
    return _com_dispatch_method(this, 0xdc, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(66)
inline HRESULT ITChartEvents::OnColorLineToolDragLine ( ) {
    return _com_dispatch_method(this, 0xdd, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(67)
inline HRESULT ITChartEvents::OnColorLineToolEndDragLine ( ) {
    return _com_dispatch_method(this, 0xde, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(68)
inline HRESULT ITChartEvents::OnDragPointToolDragPoint ( long Index ) {
    return _com_dispatch_method(this, 0xdf, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003", Index);
}

#pragma implementation_key(69)
inline HRESULT ITChartEvents::OnDrawLineToolSelecting ( long Index, VARIANT_BOOL AllowSelect ) {
    return _com_dispatch_method(this, 0xe0, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x000b", Index, AllowSelect);
}

#pragma implementation_key(70)
inline HRESULT ITChartEvents::OnSelectorToolDragged ( ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0xe1, DISPATCH_METHOD, VT_ERROR, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(71)
inline HRESULT ITChartEvents::OnSelectorToolDragging ( ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0xe2, DISPATCH_METHOD, VT_ERROR, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(72)
inline HRESULT ITChartEvents::OnSelectorToolResized ( ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0xe3, DISPATCH_METHOD, VT_ERROR, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(73)
inline HRESULT ITChartEvents::OnSelectorToolResizing ( ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0xe4, DISPATCH_METHOD, VT_ERROR, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(74)
inline HRESULT ITChartEvents::OnSelectorToolSelected ( ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0xe5, DISPATCH_METHOD, VT_ERROR, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(75)
inline HRESULT ITChartEvents::OnAnnotationToolClick ( enum EMouseButton Button, enum EShiftState Shift, long X, long Y ) {
    return _com_dispatch_method(this, 0xe6, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x0003\x0003", Button, Shift, X, Y);
}

#pragma implementation_key(76)
inline HRESULT ITChartEvents::OnRectangleToolDragging ( ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0xe7, DISPATCH_METHOD, VT_ERROR, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(77)
inline HRESULT ITChartEvents::OnRectangleToolResizing ( ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0xe8, DISPATCH_METHOD, VT_ERROR, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(78)
inline HRESULT ITChartEvents::OnRectangleToolClick ( enum EMouseButton Button, enum EShiftState Shift, long X, long Y ) {
    return _com_dispatch_method(this, 0xe9, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x0003\x0003", Button, Shift, X, Y);
}

#pragma implementation_key(79)
inline HRESULT ITChartEvents::OnSeriesAfterAdd ( long SeriesIndex, long ValueIndex ) {
    return _com_dispatch_method(this, 0xea, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003", SeriesIndex, ValueIndex);
}

#pragma implementation_key(80)
inline HRESULT ITChartEvents::OnGetSeriesBarStyle ( long SeriesIndex, long ValueIndex, enum EBarStyle * BarStyle ) {
    return _com_dispatch_method(this, 0xeb, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x4003", SeriesIndex, ValueIndex, BarStyle);
}

#pragma implementation_key(81)
inline HRESULT ITChartEvents::OnVideoToolNewFrame ( ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0xec, DISPATCH_METHOD, VT_ERROR, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(82)
inline HRESULT ITChartEvents::OnVideoToolStart ( ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0xed, DISPATCH_METHOD, VT_ERROR, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(83)
inline HRESULT ITChartEvents::OnVideoToolStop ( ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0xee, DISPATCH_METHOD, VT_ERROR, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(84)
inline HRESULT ITChartEvents::OnVideoPlayerToolFrame ( ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0xef, DISPATCH_METHOD, VT_ERROR, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(85)
inline HRESULT ITChartEvents::OnOpenGLInit ( ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0xf0, DISPATCH_METHOD, VT_ERROR, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(86)
inline HRESULT ITChartEvents::OnOpenGLRepaint ( ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0xf1, DISPATCH_METHOD, VT_ERROR, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(87)
inline HRESULT ITChartEvents::OnCursorToolSnapChange ( long Tool, long X, long Y, double XVal, double YVal, long Series, long ValueIndex ) {
    return _com_dispatch_method(this, 0xf2, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x0003\x0005\x0005\x0003\x0003", Tool, X, Y, XVal, YVal, Series, ValueIndex);
}

#pragma implementation_key(88)
inline HRESULT ITChartEvents::OnDragMarksToolDraggedMark ( long Index, enum EMouseButton Button, enum EShiftState Shift, long X, long Y ) {
    return _com_dispatch_method(this, 0xf3, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x0003\x0003\x0003", Index, Button, Shift, X, Y);
}

#pragma implementation_key(89)
inline HRESULT ITChartEvents::OnDragMarksToolDraggingMark ( long Index, enum EMouseButton Button, enum EShiftState Shift, long X, long Y ) {
    return _com_dispatch_method(this, 0xf4, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x0003\x0003\x0003", Index, Button, Shift, X, Y);
}

#pragma implementation_key(90)
inline HRESULT ITChartEvents::OnRectangleToolDragged ( ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0xf5, DISPATCH_METHOD, VT_ERROR, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(91)
inline HRESULT ITChartEvents::OnRectangleToolResized ( ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0xf6, DISPATCH_METHOD, VT_ERROR, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(92)
inline HRESULT ITChartEvents::OnMarkTipToolCancelHint ( ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0xf7, DISPATCH_METHOD, VT_ERROR, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(93)
inline HRESULT ITChartEvents::OnSeriesClickPointer ( long SeriesIndex, long ValueIndex, long X, long Y ) {
    return _com_dispatch_method(this, 0xf8, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x0003\x0003", SeriesIndex, ValueIndex, X, Y);
}

#pragma implementation_key(94)
inline HRESULT ITChartEvents::OnSeriesClickPointer3D ( long SeriesIndex, long ValueIndex, long X, long Y ) {
    return _com_dispatch_method(this, 0xf9, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x0003\x0003", SeriesIndex, ValueIndex, X, Y);
}

#pragma implementation_key(95)
inline HRESULT ITChartEvents::OnFaderToolStop ( ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0xfa, DISPATCH_METHOD, VT_ERROR, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(96)
inline HRESULT ITChartEvents::OnAxisArrowToolClick ( long ToolIndex, VARIANT_BOOL AtStart ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0xfb, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x0003\x000b", ToolIndex, AtStart);
    return _result;
}

#pragma implementation_key(97)
inline HRESULT ITChartEvents::OnColorBandToolResized ( ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0xfc, DISPATCH_METHOD, VT_ERROR, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(98)
inline HRESULT ITChartEvents::OnAddSeries ( long SeriesIndex ) {
    return _com_dispatch_method(this, 0xfd, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003", SeriesIndex);
}

#pragma implementation_key(99)
inline HRESULT ITChartEvents::OnRemoveSeries ( long SeriesIndex ) {
    return _com_dispatch_method(this, 0xfe, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003", SeriesIndex);
}

#pragma implementation_key(100)
inline HRESULT ITChartEvents::OnLegendScrollBarToolChangeSize ( ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0xff, DISPATCH_METHOD, VT_ERROR, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(101)
inline HRESULT ITChartEvents::OnLegendScrollBarToolSetPosition ( long Value ) {
    return _com_dispatch_method(this, 0x100, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003", Value);
}

#pragma implementation_key(102)
inline HRESULT ITChartEvents::OnImageSeriesGetImage ( long SeriesIndex, long ValueIndex, struct ITeePicture * * Picture ) {
    return _com_dispatch_method(this, 0x101, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x4009", SeriesIndex, ValueIndex, Picture);
}

#pragma implementation_key(103)
inline HRESULT ITChartEvents::OnGetSeriesCircleLabel ( long SeriesIndex, double Angle, long Index, BSTR * Text ) {
    return _com_dispatch_method(this, 0x102, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0005\x0003\x4008", SeriesIndex, Angle, Index, Text);
}

#pragma implementation_key(104)
inline HRESULT ITChartEvents::OnTagCloudSeriesDrawTag ( long SeriesIndex, long ValueIndex ) {
    return _com_dispatch_method(this, 0x103, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003", SeriesIndex, ValueIndex);
}

#pragma implementation_key(105)
inline HRESULT ITChartEvents::OnSurfaceSeriesGetYValue ( long SeriesIndex, long X, long Z, double * Y ) {
    return _com_dispatch_method(this, 0x104, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x0003\x4005", SeriesIndex, X, Z, Y);
}

#pragma implementation_key(106)
inline HRESULT ITChartEvents::OnDataTableToolFilterSeries ( long SeriesIndex, VARIANT_BOOL * Accept ) {
    return _com_dispatch_method(this, 0x105, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x400b", SeriesIndex, Accept);
}

//
// interface IBrush wrapper method implementations
//

#pragma implementation_key(107)
inline OLE_COLOR IBrush::GetColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(108)
inline void IBrush::PutColor ( OLE_COLOR Color ) {
    HRESULT _hr = put_Color(Color);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(109)
inline enum EBrushStyle IBrush::GetStyle ( ) {
    enum EBrushStyle _result;
    HRESULT _hr = get_Style(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(110)
inline void IBrush::PutStyle ( enum EBrushStyle Style ) {
    HRESULT _hr = put_Style(Style);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(111)
inline HRESULT IBrush::LoadImage ( _bstr_t FileName ) {
    HRESULT _hr = raw_LoadImage(FileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(112)
inline HRESULT IBrush::AssignImage ( long ImageHandle ) {
    HRESULT _hr = raw_AssignImage(ImageHandle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(113)
inline HRESULT IBrush::ClearImage ( ) {
    HRESULT _hr = raw_ClearImage();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(114)
inline HRESULT IBrush::ShowEditor ( ) {
    HRESULT _hr = raw_ShowEditor();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(115)
inline long IBrush::GetHandle ( ) {
    long _result = 0;
    HRESULT _hr = get_Handle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(116)
inline OLE_COLOR IBrush::GetBackColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_BackColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(117)
inline void IBrush::PutBackColor ( OLE_COLOR Value ) {
    HRESULT _hr = put_BackColor(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(118)
inline long IBrush::GetBrushLink ( ) {
    long _result = 0;
    HRESULT _hr = get_BrushLink(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IStrings wrapper method implementations
//

#pragma implementation_key(119)
inline _variant_t IStrings::GetControlDefault ( long Index ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ControlDefault(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(120)
inline void IStrings::PutControlDefault ( long Index, const _variant_t & Value ) {
    HRESULT _hr = put_ControlDefault(Index, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(121)
inline long IStrings::Count ( ) {
    long _result = 0;
    HRESULT _hr = raw_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(122)
inline _variant_t IStrings::GetItem ( long Index ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(123)
inline void IStrings::PutItem ( long Index, const _variant_t & Value ) {
    HRESULT _hr = put_Item(Index, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(124)
inline HRESULT IStrings::Remove ( long Index ) {
    HRESULT _hr = raw_Remove(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(125)
inline HRESULT IStrings::Clear ( ) {
    HRESULT _hr = raw_Clear();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(126)
inline long IStrings::Add ( const _variant_t & AItem ) {
    long _result = 0;
    HRESULT _hr = raw_Add(AItem, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(127)
inline _bstr_t IStrings::GetText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(128)
inline void IStrings::PutText ( _bstr_t Value ) {
    HRESULT _hr = put_Text(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IImport wrapper method implementations
//

#pragma implementation_key(129)
inline HRESULT IImport::LoadFromFile ( _bstr_t FileName ) {
    HRESULT _hr = raw_LoadFromFile(FileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(130)
inline HRESULT IImport::LoadFromURL ( _bstr_t URL ) {
    HRESULT _hr = raw_LoadFromURL(URL);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(131)
inline HRESULT IImport::LoadFromStream ( const _variant_t & AStream ) {
    HRESULT _hr = raw_LoadFromStream(AStream);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(132)
inline HRESULT IImport::LoadFromBase64Stream ( const _variant_t & AStream ) {
    HRESULT _hr = raw_LoadFromBase64Stream(AStream);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(133)
inline VARIANT_BOOL IImport::GetV5TeeCompatible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_V5TeeCompatible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(134)
inline void IImport::PutV5TeeCompatible ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_V5TeeCompatible(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IScroll wrapper method implementations
//

#pragma implementation_key(135)
inline enum EChartScroll IScroll::GetEnable ( ) {
    enum EChartScroll _result;
    HRESULT _hr = get_Enable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(136)
inline void IScroll::PutEnable ( enum EChartScroll Enable ) {
    HRESULT _hr = put_Enable(Enable);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(137)
inline enum EMouseButton IScroll::GetMouseButton ( ) {
    enum EMouseButton _result;
    HRESULT _hr = get_MouseButton(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(138)
inline void IScroll::PutMouseButton ( enum EMouseButton Value ) {
    HRESULT _hr = put_MouseButton(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IPage wrapper method implementations
//

#pragma implementation_key(139)
inline HRESULT IPage::Next ( ) {
    HRESULT _hr = raw_Next();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(140)
inline HRESULT IPage::Previous ( ) {
    HRESULT _hr = raw_Previous();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(141)
inline long IPage::GetMaxPointsPerPage ( ) {
    long _result = 0;
    HRESULT _hr = get_MaxPointsPerPage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(142)
inline void IPage::PutMaxPointsPerPage ( long MaxPointsPerPage ) {
    HRESULT _hr = put_MaxPointsPerPage(MaxPointsPerPage);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(143)
inline long IPage::GetCurrent ( ) {
    long _result = 0;
    HRESULT _hr = get_Current(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(144)
inline void IPage::PutCurrent ( long Current ) {
    HRESULT _hr = put_Current(Current);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(145)
inline VARIANT_BOOL IPage::GetScaleLastPage ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ScaleLastPage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(146)
inline void IPage::PutScaleLastPage ( VARIANT_BOOL ScaleLastPage ) {
    HRESULT _hr = put_ScaleLastPage(ScaleLastPage);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(147)
inline long IPage::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(148)
inline long IPage::GetFirstValueIndex ( ) {
    long _result = 0;
    HRESULT _hr = get_FirstValueIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(149)
inline VARIANT_BOOL IPage::GetAutoScale ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoScale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(150)
inline void IPage::PutAutoScale ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_AutoScale(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IValueList wrapper method implementations
//

#pragma implementation_key(151)
inline long IValueList::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(152)
inline VARIANT_BOOL IValueList::GetDateTime ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DateTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(153)
inline void IValueList::PutDateTime ( VARIANT_BOOL DateTime ) {
    HRESULT _hr = put_DateTime(DateTime);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(154)
inline double IValueList::GetFirst ( ) {
    double _result = 0;
    HRESULT _hr = get_First(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(155)
inline double IValueList::GetLast ( ) {
    double _result = 0;
    HRESULT _hr = get_Last(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(156)
inline double IValueList::GetMaximum ( ) {
    double _result = 0;
    HRESULT _hr = get_Maximum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(157)
inline double IValueList::GetMinimum ( ) {
    double _result = 0;
    HRESULT _hr = get_Minimum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(158)
inline enum EValueListOrder IValueList::GetOrder ( ) {
    enum EValueListOrder _result;
    HRESULT _hr = get_Order(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(159)
inline void IValueList::PutOrder ( enum EValueListOrder Order ) {
    HRESULT _hr = put_Order(Order);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(160)
inline double IValueList::GetTotal ( ) {
    double _result = 0;
    HRESULT _hr = get_Total(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(161)
inline double IValueList::GetTotalABS ( ) {
    double _result = 0;
    HRESULT _hr = get_TotalABS(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(162)
inline double IValueList::GetValue ( long Index ) {
    double _result = 0;
    HRESULT _hr = get_Value(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(163)
inline void IValueList::PutValue ( long Index, double Value ) {
    HRESULT _hr = put_Value(Index, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(164)
inline _bstr_t IValueList::GetValueSource ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ValueSource(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(165)
inline void IValueList::PutValueSource ( _bstr_t ValueSource ) {
    HRESULT _hr = put_ValueSource(ValueSource);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(166)
inline HRESULT IValueList::Delete ( long Index ) {
    HRESULT _hr = raw_Delete(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(167)
inline HRESULT IValueList::FillSequence ( ) {
    HRESULT _hr = raw_FillSequence();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(168)
inline long IValueList::Locate ( double SomeValue ) {
    long _result = 0;
    HRESULT _hr = raw_Locate(SomeValue, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(169)
inline HRESULT IValueList::Sort ( ) {
    HRESULT _hr = raw_Sort();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(170)
inline VARIANT_BOOL IValueList::GetModified ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Modified(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(171)
inline void IValueList::PutModified ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Modified(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(172)
inline double IValueList::GetTempValue ( ) {
    double _result = 0;
    HRESULT _hr = get_TempValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(173)
inline void IValueList::PutTempValue ( double Value ) {
    HRESULT _hr = put_TempValue(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(174)
inline _bstr_t IValueList::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(175)
inline void IValueList::PutName ( _bstr_t Value ) {
    HRESULT _hr = put_Name(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAverageFunction wrapper method implementations
//

#pragma implementation_key(176)
inline VARIANT_BOOL IAverageFunction::GetIncludeNulls ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IncludeNulls(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(177)
inline void IAverageFunction::PutIncludeNulls ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_IncludeNulls(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ICurveFittingFunction wrapper method implementations
//

#pragma implementation_key(178)
inline long ICurveFittingFunction::GetPolyDegree ( ) {
    long _result = 0;
    HRESULT _hr = get_PolyDegree(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(179)
inline void ICurveFittingFunction::PutPolyDegree ( long PolyDegree ) {
    HRESULT _hr = put_PolyDegree(PolyDegree);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(180)
inline enum ETypeFitting ICurveFittingFunction::GetTypeFitting ( ) {
    enum ETypeFitting _result;
    HRESULT _hr = get_TypeFitting(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(181)
inline void ICurveFittingFunction::PutTypeFitting ( enum ETypeFitting TypeFitting ) {
    HRESULT _hr = put_TypeFitting(TypeFitting);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(182)
inline long ICurveFittingFunction::GetFirstPoint ( ) {
    long _result = 0;
    HRESULT _hr = get_FirstPoint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(183)
inline void ICurveFittingFunction::PutFirstPoint ( long FirstPoint ) {
    HRESULT _hr = put_FirstPoint(FirstPoint);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(184)
inline long ICurveFittingFunction::GetLastPoint ( ) {
    long _result = 0;
    HRESULT _hr = get_LastPoint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(185)
inline void ICurveFittingFunction::PutLastPoint ( long LastPoint ) {
    HRESULT _hr = put_LastPoint(LastPoint);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(186)
inline long ICurveFittingFunction::GetFirstCalcPoint ( ) {
    long _result = 0;
    HRESULT _hr = get_FirstCalcPoint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(187)
inline void ICurveFittingFunction::PutFirstCalcPoint ( long FirstCalcPoint ) {
    HRESULT _hr = put_FirstCalcPoint(FirstCalcPoint);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(188)
inline long ICurveFittingFunction::GetLastCalcPoint ( ) {
    long _result = 0;
    HRESULT _hr = get_LastCalcPoint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(189)
inline void ICurveFittingFunction::PutLastCalcPoint ( long LastCalcPoint ) {
    HRESULT _hr = put_LastCalcPoint(LastCalcPoint);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(190)
inline double ICurveFittingFunction::GetAnswerVector ( long Index ) {
    double _result = 0;
    HRESULT _hr = get_AnswerVector(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(191)
inline double ICurveFittingFunction::GetCurveYValue ( double X ) {
    double _result = 0;
    HRESULT _hr = raw_GetCurveYValue(X, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IExpAvgFunction wrapper method implementations
//

#pragma implementation_key(192)
inline double IExpAvgFunction::GetWeight ( ) {
    double _result = 0;
    HRESULT _hr = get_Weight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(193)
inline void IExpAvgFunction::PutWeight ( double Weight ) {
    HRESULT _hr = put_Weight(Weight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IMovingAvgFunction wrapper method implementations
//

#pragma implementation_key(194)
inline VARIANT_BOOL IMovingAvgFunction::GetWeighted ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Weighted(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(195)
inline void IMovingAvgFunction::PutWeighted ( VARIANT_BOOL Weighted ) {
    HRESULT _hr = put_Weighted(Weighted);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IChartFont wrapper method implementations
//

#pragma implementation_key(196)
inline _bstr_t IChartFont::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(197)
inline void IChartFont::PutName ( _bstr_t Name ) {
    HRESULT _hr = put_Name(Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(198)
inline long IChartFont::GetSize ( ) {
    long _result = 0;
    HRESULT _hr = get_Size(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(199)
inline void IChartFont::PutSize ( long Size ) {
    HRESULT _hr = put_Size(Size);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(200)
inline VARIANT_BOOL IChartFont::GetBold ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Bold(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(201)
inline void IChartFont::PutBold ( VARIANT_BOOL Bold ) {
    HRESULT _hr = put_Bold(Bold);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(202)
inline VARIANT_BOOL IChartFont::GetItalic ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Italic(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(203)
inline void IChartFont::PutItalic ( VARIANT_BOOL Italic ) {
    HRESULT _hr = put_Italic(Italic);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(204)
inline VARIANT_BOOL IChartFont::GetUnderline ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Underline(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(205)
inline void IChartFont::PutUnderline ( VARIANT_BOOL Underline ) {
    HRESULT _hr = put_Underline(Underline);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(206)
inline VARIANT_BOOL IChartFont::GetStrikethrough ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Strikethrough(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(207)
inline void IChartFont::PutStrikethrough ( VARIANT_BOOL Strikethrough ) {
    HRESULT _hr = put_Strikethrough(Strikethrough);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(208)
inline short IChartFont::GetCharset ( ) {
    short _result = 0;
    HRESULT _hr = get_Charset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(209)
inline void IChartFont::PutCharset ( short Charset ) {
    HRESULT _hr = put_Charset(Charset);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(210)
inline OLE_COLOR IChartFont::GetColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(211)
inline void IChartFont::PutColor ( OLE_COLOR Value ) {
    HRESULT _hr = put_Color(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(212)
inline long IChartFont::GetHeight ( ) {
    long _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(213)
inline void IChartFont::PutHeight ( long Value ) {
    HRESULT _hr = put_Height(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(214)
inline long IChartFont::GetPixelsPerInch ( ) {
    long _result = 0;
    HRESULT _hr = get_PixelsPerInch(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IExplodedSlices wrapper method implementations
//

#pragma implementation_key(215)
inline long IExplodedSlices::GetValue ( long Index ) {
    long _result = 0;
    HRESULT _hr = get_Value(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(216)
inline void IExplodedSlices::PutValue ( long Index, long Value ) {
    HRESULT _hr = put_Value(Index, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ICircleLabels wrapper method implementations
//

#pragma implementation_key(217)
inline VARIANT_BOOL ICircleLabels::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(218)
inline void ICircleLabels::PutVisible ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Visible(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(219)
inline IChartFontPtr ICircleLabels::GetFont ( ) {
    struct IChartFont * _result = 0;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IChartFontPtr(_result, false);
}

#pragma implementation_key(220)
inline VARIANT_BOOL ICircleLabels::GetRotated ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Rotated(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(221)
inline void ICircleLabels::PutRotated ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Rotated(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(222)
inline _bstr_t ICircleLabels::GetDegreeSymbol ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DegreeSymbol(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(223)
inline void ICircleLabels::PutDegreeSymbol ( _bstr_t Value ) {
    HRESULT _hr = put_DegreeSymbol(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ITrendFunction wrapper method implementations
//

#pragma implementation_key(224)
inline long ITrendFunction::CalculateTrend ( double * m, double * b, long SourceSeriesIndex, long FirstIndex, long LastIndex ) {
    long _result = 0;
    HRESULT _hr = raw_CalculateTrend(m, b, SourceSeriesIndex, FirstIndex, LastIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IStdDeviationFunction wrapper method implementations
//

#pragma implementation_key(225)
inline VARIANT_BOOL IStdDeviationFunction::GetComplete ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Complete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(226)
inline void IStdDeviationFunction::PutComplete ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Complete(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IEnvironment wrapper method implementations
//

#pragma implementation_key(227)
inline VARIANT_BOOL IEnvironment::GetNoPromptDBConnect ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_NoPromptDBConnect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(228)
inline void IEnvironment::PutNoPromptDBConnect ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_NoPromptDBConnect(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(229)
inline VARIANT_BOOL IEnvironment::GetIEPrintWithPage ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IEPrintWithPage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(230)
inline void IEnvironment::PutIEPrintWithPage ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_IEPrintWithPage(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(231)
inline HRESULT IEnvironment::InternalRepaint ( ) {
    HRESULT _hr = raw_InternalRepaint();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(232)
inline VARIANT_BOOL IEnvironment::GetMouseWheelScroll ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_MouseWheelScroll(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(233)
inline void IEnvironment::PutMouseWheelScroll ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_MouseWheelScroll(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(234)
inline _bstr_t IEnvironment::GetDecimalSeparator ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DecimalSeparator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(235)
inline VARIANT_BOOL IEnvironment::GetTeeClipWhenPrinting ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_TeeClipWhenPrinting(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(236)
inline void IEnvironment::PutTeeClipWhenPrinting ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_TeeClipWhenPrinting(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(237)
inline VARIANT_BOOL IEnvironment::GetTeeClipWhenMetafiling ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_TeeClipWhenMetafiling(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(238)
inline void IEnvironment::PutTeeClipWhenMetafiling ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_TeeClipWhenMetafiling(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(239)
inline _bstr_t IEnvironment::DecodeUTF8String ( _bstr_t aString ) {
    BSTR _result = 0;
    HRESULT _hr = raw_DecodeUTF8String(aString, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(240)
inline _bstr_t IEnvironment::CodeUTF8String ( _bstr_t aString, VARIANT_BOOL addPrefix ) {
    BSTR _result = 0;
    HRESULT _hr = raw_CodeUTF8String(aString, addPrefix, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(241)
inline VARIANT_BOOL IEnvironment::GetChartVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ChartVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(242)
inline void IEnvironment::PutChartVisible ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_ChartVisible(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// dispinterface ITeeCommanderEvents wrapper method implementations
//

#pragma implementation_key(243)
inline HRESULT ITeeCommanderEvents::OnEditedChart ( ) {
    return _com_dispatch_method(this, 0x1, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

//
// dispinterface ITeeListBoxEvents wrapper method implementations
//

#pragma implementation_key(244)
inline HRESULT ITeeListBoxEvents::OnDblClickSeries ( long SeriesIndex ) {
    return _com_dispatch_method(this, 0x1, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003", SeriesIndex);
}

#pragma implementation_key(245)
inline HRESULT ITeeListBoxEvents::OnClick ( ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0xc9, DISPATCH_METHOD, VT_ERROR, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(246)
inline HRESULT ITeeListBoxEvents::OnChangeActive ( long SeriesIndex ) {
    return _com_dispatch_method(this, 0xca, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003", SeriesIndex);
}

#pragma implementation_key(247)
inline HRESULT ITeeListBoxEvents::OnMouseUp ( enum EMouseButton Button, enum EShiftState Shift, long X, long Y ) {
    return _com_dispatch_method(this, 0xcb, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x0003\x0003", Button, Shift, X, Y);
}

#pragma implementation_key(248)
inline HRESULT ITeeListBoxEvents::OnMouseDown ( enum EMouseButton Button, enum EShiftState Shift, long X, long Y ) {
    return _com_dispatch_method(this, 0xcc, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x0003\x0003", Button, Shift, X, Y);
}

#pragma implementation_key(249)
inline HRESULT ITeeListBoxEvents::OnMouseMove ( enum EShiftState Shift, long X, long Y ) {
    return _com_dispatch_method(this, 0xcd, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x0003", Shift, X, Y);
}

#pragma implementation_key(250)
inline HRESULT ITeeListBoxEvents::OnChangeColor ( long SeriesIndex ) {
    return _com_dispatch_method(this, 0xce, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003", SeriesIndex);
}

#pragma implementation_key(251)
inline HRESULT ITeeListBoxEvents::OnChangeOrder ( long SeriesIndex1, long SeriesIndex2 ) {
    return _com_dispatch_method(this, 0xcf, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003", SeriesIndex1, SeriesIndex2);
}

#pragma implementation_key(252)
inline HRESULT ITeeListBoxEvents::OnOtherItemsChange ( ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0xd0, DISPATCH_METHOD, VT_ERROR, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(253)
inline HRESULT ITeeListBoxEvents::OnRefresh ( ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0xd1, DISPATCH_METHOD, VT_ERROR, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(254)
inline HRESULT ITeeListBoxEvents::OnRemovedSeries ( long SeriesIndex ) {
    return _com_dispatch_method(this, 0xd2, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003", SeriesIndex);
}

//
// interface ITeePoint2D wrapper method implementations
//

#pragma implementation_key(255)
inline double ITeePoint2D::GetX ( ) {
    double _result = 0;
    HRESULT _hr = get_X(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(256)
inline void ITeePoint2D::PutX ( double Value ) {
    HRESULT _hr = put_X(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(257)
inline double ITeePoint2D::GetY ( ) {
    double _result = 0;
    HRESULT _hr = get_Y(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(258)
inline void ITeePoint2D::PutY ( double Value ) {
    HRESULT _hr = put_Y(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ICircledSeries wrapper method implementations
//

#pragma implementation_key(259)
inline long ICircledSeries::GetXRadius ( ) {
    long _result = 0;
    HRESULT _hr = get_XRadius(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(260)
inline void ICircledSeries::PutXRadius ( long XRadius ) {
    HRESULT _hr = put_XRadius(XRadius);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(261)
inline long ICircledSeries::GetYRadius ( ) {
    long _result = 0;
    HRESULT _hr = get_YRadius(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(262)
inline void ICircledSeries::PutYRadius ( long YRadius ) {
    HRESULT _hr = put_YRadius(YRadius);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(263)
inline long ICircledSeries::GetXCenter ( ) {
    long _result = 0;
    HRESULT _hr = get_XCenter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(264)
inline long ICircledSeries::GetYCenter ( ) {
    long _result = 0;
    HRESULT _hr = get_YCenter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(265)
inline long ICircledSeries::GetCircleWidth ( ) {
    long _result = 0;
    HRESULT _hr = get_CircleWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(266)
inline long ICircledSeries::GetCircleHeight ( ) {
    long _result = 0;
    HRESULT _hr = get_CircleHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(267)
inline OLE_COLOR ICircledSeries::GetCircleBackColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_CircleBackColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(268)
inline void ICircledSeries::PutCircleBackColor ( OLE_COLOR CircleBackColor ) {
    HRESULT _hr = put_CircleBackColor(CircleBackColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(269)
inline VARIANT_BOOL ICircledSeries::GetCircled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Circled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(270)
inline void ICircledSeries::PutCircled ( VARIANT_BOOL Circled ) {
    HRESULT _hr = put_Circled(Circled);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(271)
inline long ICircledSeries::GetRotationAngle ( ) {
    long _result = 0;
    HRESULT _hr = get_RotationAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(272)
inline void ICircledSeries::PutRotationAngle ( long RotationAngle ) {
    HRESULT _hr = put_RotationAngle(RotationAngle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(273)
inline ITeePoint2DPtr ICircledSeries::AngleToPoint ( double Angle, double AXRadius, double AYRadius ) {
    struct ITeePoint2D * _result = 0;
    HRESULT _hr = raw_AngleToPoint(Angle, AXRadius, AYRadius, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITeePoint2DPtr(_result, false);
}

#pragma implementation_key(274)
inline double ICircledSeries::PointToAngle ( long XCoord, long YCoord ) {
    double _result = 0;
    HRESULT _hr = raw_PointToAngle(XCoord, YCoord, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(275)
inline double ICircledSeries::PointToRadius ( long XCoord, long YCoord ) {
    double _result = 0;
    HRESULT _hr = raw_PointToRadius(XCoord, YCoord, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ISeriesMarkPosition wrapper method implementations
//

#pragma implementation_key(276)
inline ITeePoint2DPtr ISeriesMarkPosition::GetArrowFrom ( ) {
    struct ITeePoint2D * _result = 0;
    HRESULT _hr = get_ArrowFrom(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITeePoint2DPtr(_result, false);
}

#pragma implementation_key(277)
inline ITeePoint2DPtr ISeriesMarkPosition::GetArrowTo ( ) {
    struct ITeePoint2D * _result = 0;
    HRESULT _hr = get_ArrowTo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITeePoint2DPtr(_result, false);
}

#pragma implementation_key(278)
inline VARIANT_BOOL ISeriesMarkPosition::GetCustom ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Custom(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(279)
inline void ISeriesMarkPosition::PutCustom ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Custom(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(280)
inline long ISeriesMarkPosition::GetHeight ( ) {
    long _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(281)
inline void ISeriesMarkPosition::PutHeight ( long Value ) {
    HRESULT _hr = put_Height(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(282)
inline ITeePoint2DPtr ISeriesMarkPosition::GetLeftTop ( ) {
    struct ITeePoint2D * _result = 0;
    HRESULT _hr = get_LeftTop(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITeePoint2DPtr(_result, false);
}

#pragma implementation_key(283)
inline long ISeriesMarkPosition::GetWidth ( ) {
    long _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(284)
inline void ISeriesMarkPosition::PutWidth ( long Value ) {
    HRESULT _hr = put_Width(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ISeriesMarksPositions wrapper method implementations
//

#pragma implementation_key(285)
inline ISeriesMarkPositionPtr ISeriesMarksPositions::GetPosition ( long Index ) {
    struct ISeriesMarkPosition * _result = 0;
    HRESULT _hr = get_Position(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISeriesMarkPositionPtr(_result, false);
}

#pragma implementation_key(286)
inline HRESULT ISeriesMarksPositions::Automatic ( long Index ) {
    HRESULT _hr = raw_Automatic(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface ITeePoint3D wrapper method implementations
//

#pragma implementation_key(287)
inline double ITeePoint3D::GetZ ( ) {
    double _result = 0;
    HRESULT _hr = get_Z(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(288)
inline void ITeePoint3D::PutZ ( double Value ) {
    HRESULT _hr = put_Z(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ITeeEditorShowPages wrapper method implementations
//

#pragma implementation_key(289)
inline VARIANT_BOOL ITeeEditorShowPages::GetMain ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Main(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(290)
inline void ITeeEditorShowPages::PutMain ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Main(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(291)
inline VARIANT_BOOL ITeeEditorShowPages::GetGeneral ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_General(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(292)
inline void ITeeEditorShowPages::PutGeneral ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_General(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(293)
inline VARIANT_BOOL ITeeEditorShowPages::GetAxis ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Axis(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(294)
inline void ITeeEditorShowPages::PutAxis ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Axis(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(295)
inline VARIANT_BOOL ITeeEditorShowPages::GetTitles ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Titles(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(296)
inline void ITeeEditorShowPages::PutTitles ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Titles(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(297)
inline VARIANT_BOOL ITeeEditorShowPages::GetLegend ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Legend(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(298)
inline void ITeeEditorShowPages::PutLegend ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Legend(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(299)
inline VARIANT_BOOL ITeeEditorShowPages::GetPanel ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Panel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(300)
inline void ITeeEditorShowPages::PutPanel ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Panel(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(301)
inline VARIANT_BOOL ITeeEditorShowPages::GetPaging ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Paging(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(302)
inline void ITeeEditorShowPages::PutPaging ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Paging(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(303)
inline VARIANT_BOOL ITeeEditorShowPages::GetWalls ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Walls(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(304)
inline void ITeeEditorShowPages::PutWalls ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Walls(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(305)
inline VARIANT_BOOL ITeeEditorShowPages::GetAspect ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Aspect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(306)
inline void ITeeEditorShowPages::PutAspect ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Aspect(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(307)
inline VARIANT_BOOL ITeeEditorShowPages::GetSeriesGeneral ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SeriesGeneral(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(308)
inline void ITeeEditorShowPages::PutSeriesGeneral ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_SeriesGeneral(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(309)
inline VARIANT_BOOL ITeeEditorShowPages::GetSeriesMarks ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SeriesMarks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(310)
inline void ITeeEditorShowPages::PutSeriesMarks ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_SeriesMarks(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(311)
inline VARIANT_BOOL ITeeEditorShowPages::GetTools ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Tools(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(312)
inline void ITeeEditorShowPages::PutTools ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Tools(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(313)
inline VARIANT_BOOL ITeeEditorShowPages::GetSeriesData ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SeriesData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(314)
inline void ITeeEditorShowPages::PutSeriesData ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_SeriesData(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(315)
inline VARIANT_BOOL ITeeEditorShowPages::GetExportDialog ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ExportDialog(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(316)
inline void ITeeEditorShowPages::PutExportDialog ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_ExportDialog(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(317)
inline VARIANT_BOOL ITeeEditorShowPages::GetPrintPreview ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PrintPreview(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(318)
inline void ITeeEditorShowPages::PutPrintPreview ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_PrintPreview(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(319)
inline VARIANT_BOOL ITeeEditorShowPages::GetOpenGL ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_OpenGL(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(320)
inline void ITeeEditorShowPages::PutOpenGL ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_OpenGL(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(321)
inline void ITeeEditorShowPages::PutThemes ( VARIANT_BOOL _arg1 ) {
    HRESULT _hr = put_Themes(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(322)
inline VARIANT_BOOL ITeeEditorShowPages::GetExportNative ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ExportNative(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(323)
inline void ITeeEditorShowPages::PutExportNative ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_ExportNative(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(324)
inline VARIANT_BOOL ITeeEditorShowPages::GetAllSeries ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AllSeries(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(325)
inline void ITeeEditorShowPages::PutAllSeries ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_AllSeries(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ITeeEditorOptions wrapper method implementations
//

#pragma implementation_key(326)
inline VARIANT_BOOL ITeeEditorOptions::GetAdd ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(327)
inline void ITeeEditorOptions::PutAdd ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Add(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(328)
inline VARIANT_BOOL ITeeEditorOptions::GetDelete ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(329)
inline void ITeeEditorOptions::PutDelete ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Delete(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(330)
inline VARIANT_BOOL ITeeEditorOptions::GetChange ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Change(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(331)
inline void ITeeEditorOptions::PutChange ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Change(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(332)
inline VARIANT_BOOL ITeeEditorOptions::GetClone ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Clone(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(333)
inline void ITeeEditorOptions::PutClone ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Clone(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(334)
inline VARIANT_BOOL ITeeEditorOptions::GetDataSource ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DataSource(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(335)
inline void ITeeEditorOptions::PutDataSource ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_DataSource(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(336)
inline VARIANT_BOOL ITeeEditorOptions::GetTitle ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Title(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(337)
inline void ITeeEditorOptions::PutTitle ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Title(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(338)
inline VARIANT_BOOL ITeeEditorOptions::GetHelp ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Help(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(339)
inline void ITeeEditorOptions::PutHelp ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Help(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(340)
inline VARIANT_BOOL ITeeEditorOptions::GetGroups ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Groups(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(341)
inline void ITeeEditorOptions::PutGroups ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Groups(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(342)
inline VARIANT_BOOL ITeeEditorOptions::GetAllGroups ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AllGroups(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(343)
inline void ITeeEditorOptions::PutAllGroups ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_AllGroups(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(344)
inline VARIANT_BOOL ITeeEditorOptions::GetOrderSeries ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_OrderSeries(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(345)
inline void ITeeEditorOptions::PutOrderSeries ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_OrderSeries(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ITeePreviewerOptions wrapper method implementations
//

#pragma implementation_key(346)
inline VARIANT_BOOL ITeePreviewerOptions::GetChangePrinter ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ChangePrinter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(347)
inline void ITeePreviewerOptions::PutChangePrinter ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_ChangePrinter(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(348)
inline VARIANT_BOOL ITeePreviewerOptions::GetSetupPrinter ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SetupPrinter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(349)
inline void ITeePreviewerOptions::PutSetupPrinter ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_SetupPrinter(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(350)
inline VARIANT_BOOL ITeePreviewerOptions::GetResizeImage ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ResizeImage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(351)
inline void ITeePreviewerOptions::PutResizeImage ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_ResizeImage(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(352)
inline VARIANT_BOOL ITeePreviewerOptions::GetMoveImage ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_MoveImage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(353)
inline void ITeePreviewerOptions::PutMoveImage ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_MoveImage(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(354)
inline VARIANT_BOOL ITeePreviewerOptions::GetChangeDetail ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ChangeDetail(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(355)
inline void ITeePreviewerOptions::PutChangeDetail ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_ChangeDetail(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(356)
inline VARIANT_BOOL ITeePreviewerOptions::GetChangePaperOrientation ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ChangePaperOrientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(357)
inline void ITeePreviewerOptions::PutChangePaperOrientation ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_ChangePaperOrientation(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(358)
inline VARIANT_BOOL ITeePreviewerOptions::GetChangeMargins ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ChangeMargins(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(359)
inline void ITeePreviewerOptions::PutChangeMargins ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_ChangeMargins(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(360)
inline VARIANT_BOOL ITeePreviewerOptions::GetDragImage ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DragImage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(361)
inline void ITeePreviewerOptions::PutDragImage ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_DragImage(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(362)
inline VARIANT_BOOL ITeePreviewerOptions::GetPrintPanel ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PrintPanel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(363)
inline void ITeePreviewerOptions::PutPrintPanel ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_PrintPanel(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(364)
inline VARIANT_BOOL ITeePreviewerOptions::GetAsBitmap ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AsBitmap(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(365)
inline void ITeePreviewerOptions::PutAsBitmap ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_AsBitmap(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ICustomToolSeries wrapper method implementations
//

#pragma implementation_key(366)
inline _variant_t ICustomToolSeries::GetSeries ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Series(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(367)
inline void ICustomToolSeries::PutSeries ( const _variant_t & Value ) {
    HRESULT _hr = put_Series(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ICustomToolAxis wrapper method implementations
//

#pragma implementation_key(368)
inline _variant_t ICustomToolAxis::GetAxis ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Axis(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(369)
inline void ICustomToolAxis::PutAxis ( const _variant_t & Value ) {
    HRESULT _hr = put_Axis(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IBaseHighLowSeries wrapper method implementations
//

#pragma implementation_key(370)
inline long IBaseHighLowSeries::AddHighLow ( double AX, double AHigh, double ALow, _bstr_t AXLabel, OLE_COLOR AColor ) {
    long _result = 0;
    HRESULT _hr = raw_AddHighLow(AX, AHigh, ALow, AXLabel, AColor, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(371)
inline IValueListPtr IBaseHighLowSeries::GetHighValues ( ) {
    struct IValueList * _result = 0;
    HRESULT _hr = get_HighValues(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IValueListPtr(_result, false);
}

#pragma implementation_key(372)
inline IValueListPtr IBaseHighLowSeries::GetLowValues ( ) {
    struct IValueList * _result = 0;
    HRESULT _hr = get_LowValues(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IValueListPtr(_result, false);
}

#pragma implementation_key(373)
inline double IBaseHighLowSeries::MaxYValue ( ) {
    double _result = 0;
    HRESULT _hr = raw_MaxYValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(374)
inline double IBaseHighLowSeries::MinYValue ( ) {
    double _result = 0;
    HRESULT _hr = raw_MinYValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ITeeShadow wrapper method implementations
//

#pragma implementation_key(375)
inline long ITeeShadow::GetHorizSize ( ) {
    long _result = 0;
    HRESULT _hr = get_HorizSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(376)
inline void ITeeShadow::PutHorizSize ( long Value ) {
    HRESULT _hr = put_HorizSize(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(377)
inline long ITeeShadow::GetVertSize ( ) {
    long _result = 0;
    HRESULT _hr = get_VertSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(378)
inline void ITeeShadow::PutVertSize ( long Value ) {
    HRESULT _hr = put_VertSize(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(379)
inline OLE_COLOR ITeeShadow::GetColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(380)
inline void ITeeShadow::PutColor ( OLE_COLOR Value ) {
    HRESULT _hr = put_Color(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(381)
inline long ITeeShadow::GetTransparency ( ) {
    long _result = 0;
    HRESULT _hr = get_Transparency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(382)
inline void ITeeShadow::PutTransparency ( long Value ) {
    HRESULT _hr = put_Transparency(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(383)
inline HRESULT ITeeShadow::ShowEditor ( ) {
    HRESULT _hr = raw_ShowEditor();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(384)
inline VARIANT_BOOL ITeeShadow::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(385)
inline void ITeeShadow::PutVisible ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Visible(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(386)
inline VARIANT_BOOL ITeeShadow::GetSmooth ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Smooth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(387)
inline void ITeeShadow::PutSmooth ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Smooth(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(388)
inline long ITeeShadow::GetSmoothBlur ( ) {
    long _result = 0;
    HRESULT _hr = get_SmoothBlur(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(389)
inline void ITeeShadow::PutSmoothBlur ( long Value ) {
    HRESULT _hr = put_SmoothBlur(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(390)
inline VARIANT_BOOL ITeeShadow::GetClip ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Clip(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(391)
inline void ITeeShadow::PutClip ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Clip(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// dispinterface ITeePreviewPanelEvents wrapper method implementations
//

#pragma implementation_key(392)
inline HRESULT ITeePreviewPanelEvents::OnChangeMargins ( VARIANT_BOOL DisableProportional, long Left, long Top, long Right, long Bottom ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0x1, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x000b\x0003\x0003\x0003\x0003", DisableProportional, Left, Top, Right, Bottom);
    return _result;
}

#pragma implementation_key(393)
inline HRESULT ITeePreviewPanelEvents::OnAfterDraw ( ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0xc9, DISPATCH_METHOD, VT_ERROR, (void*)&_result, NULL);
    return _result;
}

//
// dispinterface IChartGridEvents wrapper method implementations
//

#pragma implementation_key(394)
inline HRESULT IChartGridEvents::OnClick ( ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0x1, DISPATCH_METHOD, VT_ERROR, (void*)&_result, NULL);
    return _result;
}

//
// interface IRSIFunction wrapper method implementations
//

#pragma implementation_key(395)
inline enum ERSIStyle IRSIFunction::GetStyle ( ) {
    enum ERSIStyle _result;
    HRESULT _hr = get_Style(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(396)
inline void IRSIFunction::PutStyle ( enum ERSIStyle Value ) {
    HRESULT _hr = put_Style(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IPyramidSeries wrapper method implementations
//

#pragma implementation_key(397)
inline long IPyramidSeries::GetSizePercent ( ) {
    long _result = 0;
    HRESULT _hr = get_SizePercent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(398)
inline void IPyramidSeries::PutSizePercent ( long Value ) {
    HRESULT _hr = put_SizePercent(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ITeePanelsList wrapper method implementations
//

#pragma implementation_key(399)
inline HRESULT ITeePanelsList::Delete ( long Index ) {
    HRESULT _hr = raw_Delete(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(400)
inline HRESULT ITeePanelsList::Clear ( ) {
    HRESULT _hr = raw_Clear();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(401)
inline long ITeePanelsList::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IExportFormat wrapper method implementations
//

#pragma implementation_key(402)
inline long IExportFormat::GetWidth ( ) {
    long _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(403)
inline void IExportFormat::PutWidth ( long Value ) {
    HRESULT _hr = put_Width(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(404)
inline long IExportFormat::GetHeight ( ) {
    long _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(405)
inline void IExportFormat::PutHeight ( long Value ) {
    HRESULT _hr = put_Height(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(406)
inline HRESULT IExportFormat::SaveToFile ( _bstr_t FileName ) {
    HRESULT _hr = raw_SaveToFile(FileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(407)
inline _variant_t IExportFormat::SaveToStream ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_SaveToStream(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

//
// interface IJPEGExport wrapper method implementations
//

#pragma implementation_key(408)
inline VARIANT_BOOL IJPEGExport::GetGrayScale ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_GrayScale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(409)
inline void IJPEGExport::PutGrayScale ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_GrayScale(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(410)
inline long IJPEGExport::GetCompressionQuality ( ) {
    long _result = 0;
    HRESULT _hr = get_CompressionQuality(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(411)
inline void IJPEGExport::PutCompressionQuality ( long Value ) {
    HRESULT _hr = put_CompressionQuality(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IPNGExport wrapper method implementations
//

#pragma implementation_key(412)
inline long IPNGExport::GetCompressionLevel ( ) {
    long _result = 0;
    HRESULT _hr = get_CompressionLevel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(413)
inline void IPNGExport::PutCompressionLevel ( long Value ) {
    HRESULT _hr = put_CompressionLevel(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IGIFExport wrapper method implementations
//

#pragma implementation_key(414)
inline enum EGIFCompression IGIFExport::GetCompression ( ) {
    enum EGIFCompression _result;
    HRESULT _hr = get_Compression(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(415)
inline void IGIFExport::PutCompression ( enum EGIFCompression Value ) {
    HRESULT _hr = put_Compression(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(416)
inline enum EGIFDitherMode IGIFExport::GetDitherMode ( ) {
    enum EGIFDitherMode _result;
    HRESULT _hr = get_DitherMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(417)
inline void IGIFExport::PutDitherMode ( enum EGIFDitherMode Value ) {
    HRESULT _hr = put_DitherMode(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(418)
inline enum EGIFColorReduction IGIFExport::GetColorReduction ( ) {
    enum EGIFColorReduction _result;
    HRESULT _hr = get_ColorReduction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(419)
inline void IGIFExport::PutColorReduction ( enum EGIFColorReduction Value ) {
    HRESULT _hr = put_ColorReduction(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IMetafileExport wrapper method implementations
//

#pragma implementation_key(420)
inline VARIANT_BOOL IMetafileExport::GetEnhanced ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enhanced(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(421)
inline void IMetafileExport::PutEnhanced ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Enhanced(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IBMPExport wrapper method implementations
//

#pragma implementation_key(422)
inline enum EPixelFormat IBMPExport::GetColors ( ) {
    enum EPixelFormat _result;
    HRESULT _hr = get_Colors(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(423)
inline void IBMPExport::PutColors ( enum EPixelFormat Value ) {
    HRESULT _hr = put_Colors(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(424)
inline VARIANT_BOOL IBMPExport::GetMonochrome ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Monochrome(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(425)
inline void IBMPExport::PutMonochrome ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Monochrome(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IMarksTipTool wrapper method implementations
//

#pragma implementation_key(426)
inline enum EMarkToolMouseAction IMarksTipTool::GetMouseAction ( ) {
    enum EMarkToolMouseAction _result;
    HRESULT _hr = get_MouseAction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(427)
inline void IMarksTipTool::PutMouseAction ( enum EMarkToolMouseAction Value ) {
    HRESULT _hr = put_MouseAction(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(428)
inline enum EMarkStyle IMarksTipTool::GetStyle ( ) {
    enum EMarkStyle _result;
    HRESULT _hr = get_Style(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(429)
inline void IMarksTipTool::PutStyle ( enum EMarkStyle Value ) {
    HRESULT _hr = put_Style(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(430)
inline long IMarksTipTool::GetDelay ( ) {
    long _result = 0;
    HRESULT _hr = get_Delay(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(431)
inline void IMarksTipTool::PutDelay ( long Value ) {
    HRESULT _hr = put_Delay(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(432)
inline long IMarksTipTool::GetHideDelay ( ) {
    long _result = 0;
    HRESULT _hr = get_HideDelay(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(433)
inline void IMarksTipTool::PutHideDelay ( long Value ) {
    HRESULT _hr = put_HideDelay(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IExpMovAvgFunction wrapper method implementations
//

#pragma implementation_key(434)
inline VARIANT_BOOL IExpMovAvgFunction::GetIgnoreNulls ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IgnoreNulls(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(435)
inline void IExpMovAvgFunction::PutIgnoreNulls ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_IgnoreNulls(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IRMSFunction wrapper method implementations
//

#pragma implementation_key(436)
inline VARIANT_BOOL IRMSFunction::GetComplete ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Complete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(437)
inline void IRMSFunction::PutComplete ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Complete(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface INativeExport wrapper method implementations
//

#pragma implementation_key(438)
inline HRESULT INativeExport::SaveToFile ( _bstr_t FileName, VARIANT_BOOL IncludeData ) {
    HRESULT _hr = raw_SaveToFile(FileName, IncludeData);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(439)
inline _variant_t INativeExport::SaveToStream ( VARIANT_BOOL IncludeData ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_SaveToStream(IncludeData, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(440)
inline _variant_t INativeExport::SaveToBase64Stream ( VARIANT_BOOL IncludeData ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_SaveToBase64Stream(IncludeData, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

//
// interface IDataExport wrapper method implementations
//

#pragma implementation_key(441)
inline VARIANT_BOOL IDataExport::GetIncludeHeader ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IncludeHeader(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(442)
inline void IDataExport::PutIncludeHeader ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_IncludeHeader(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(443)
inline VARIANT_BOOL IDataExport::GetIncludeLabels ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IncludeLabels(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(444)
inline void IDataExport::PutIncludeLabels ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_IncludeLabels(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(445)
inline VARIANT_BOOL IDataExport::GetIncludeIndex ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IncludeIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(446)
inline void IDataExport::PutIncludeIndex ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_IncludeIndex(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(447)
inline _variant_t IDataExport::GetSeries ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Series(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(448)
inline void IDataExport::PutSeries ( const _variant_t & Value ) {
    HRESULT _hr = put_Series(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(449)
inline HRESULT IDataExport::SaveToFile ( _bstr_t FileName ) {
    HRESULT _hr = raw_SaveToFile(FileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(450)
inline _variant_t IDataExport::SaveToStream ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_SaveToStream(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(451)
inline _bstr_t IDataExport::AsString ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_AsString(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(452)
inline VARIANT_BOOL IDataExport::GetIncludeColors ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IncludeColors(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(453)
inline void IDataExport::PutIncludeColors ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_IncludeColors(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(454)
inline VARIANT_BOOL IDataExport::GetUseSeriesFormat ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseSeriesFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(455)
inline void IDataExport::PutUseSeriesFormat ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_UseSeriesFormat(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(456)
inline _bstr_t IDataExport::GetValueFormat ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ValueFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(457)
inline void IDataExport::PutValueFormat ( _bstr_t Value ) {
    HRESULT _hr = put_ValueFormat(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ITextExport wrapper method implementations
//

#pragma implementation_key(458)
inline _bstr_t ITextExport::GetTextDelimiter ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TextDelimiter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(459)
inline void ITextExport::PutTextDelimiter ( _bstr_t Value ) {
    HRESULT _hr = put_TextDelimiter(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ISeriesTextField wrapper method implementations
//

#pragma implementation_key(460)
inline long ISeriesTextField::GetFieldIndex ( ) {
    long _result = 0;
    HRESULT _hr = get_FieldIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(461)
inline void ISeriesTextField::PutFieldIndex ( long Value ) {
    HRESULT _hr = put_FieldIndex(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(462)
inline _bstr_t ISeriesTextField::GetFieldName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FieldName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(463)
inline void ISeriesTextField::PutFieldName ( _bstr_t Value ) {
    HRESULT _hr = put_FieldName(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ISeriesTextFields wrapper method implementations
//

#pragma implementation_key(464)
inline ISeriesTextFieldPtr ISeriesTextFields::GetItems ( long Index ) {
    struct ISeriesTextField * _result = 0;
    HRESULT _hr = get_Items(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISeriesTextFieldPtr(_result, false);
}

#pragma implementation_key(465)
inline HRESULT ISeriesTextFields::Clear ( ) {
    HRESULT _hr = raw_Clear();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(466)
inline HRESULT ISeriesTextFields::Delete ( long Index ) {
    HRESULT _hr = raw_Delete(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(467)
inline long ISeriesTextFields::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IValueLists wrapper method implementations
//

#pragma implementation_key(468)
inline long IValueLists::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(469)
inline IValueListPtr IValueLists::GetItems ( long Index ) {
    struct IValueList * _result = 0;
    HRESULT _hr = get_Items(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IValueListPtr(_result, false);
}

//
// interface IChartGridRows wrapper method implementations
//

#pragma implementation_key(470)
inline long IChartGridRows::GetRow ( ) {
    long _result = 0;
    HRESULT _hr = get_Row(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(471)
inline void IChartGridRows::PutRow ( long Value ) {
    HRESULT _hr = put_Row(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(472)
inline long IChartGridRows::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(473)
inline long IChartGridRows::GetHeights ( long Index ) {
    long _result = 0;
    HRESULT _hr = get_Heights(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(474)
inline void IChartGridRows::PutHeights ( long Index, long Value ) {
    HRESULT _hr = put_Heights(Index, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IChartGridCols wrapper method implementations
//

#pragma implementation_key(475)
inline long IChartGridCols::GetCol ( ) {
    long _result = 0;
    HRESULT _hr = get_Col(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(476)
inline void IChartGridCols::PutCol ( long Value ) {
    HRESULT _hr = put_Col(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(477)
inline long IChartGridCols::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(478)
inline long IChartGridCols::GetWidths ( long Index ) {
    long _result = 0;
    HRESULT _hr = get_Widths(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(479)
inline void IChartGridCols::PutWidths ( long Index, long Value ) {
    HRESULT _hr = put_Widths(Index, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ISmoothPoints wrapper method implementations
//

#pragma implementation_key(480)
inline VARIANT_BOOL ISmoothPoints::GetActive ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Active(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(481)
inline void ISmoothPoints::PutActive ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Active(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(482)
inline VARIANT_BOOL ISmoothPoints::GetInterpolate ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Interpolate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(483)
inline void ISmoothPoints::PutInterpolate ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Interpolate(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(484)
inline long ISmoothPoints::GetFactor ( ) {
    long _result = 0;
    HRESULT _hr = get_Factor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(485)
inline void ISmoothPoints::PutFactor ( long Value ) {
    HRESULT _hr = put_Factor(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ILevelSegment wrapper method implementations
//

#pragma implementation_key(486)
inline long ILevelSegment::GetNumPoints ( ) {
    long _result = 0;
    HRESULT _hr = get_NumPoints(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(487)
inline ITeePoint2DPtr ILevelSegment::GetPoints ( long Index ) {
    struct ITeePoint2D * _result = 0;
    HRESULT _hr = get_Points(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITeePoint2DPtr(_result, false);
}

//
// interface IGridTransposeTool wrapper method implementations
//

#pragma implementation_key(488)
inline HRESULT IGridTransposeTool::Transpose ( ) {
    HRESULT _hr = raw_Transpose();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(489)
inline _variant_t IGridTransposeTool::GetSeries ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Series(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(490)
inline void IGridTransposeTool::PutSeries ( const _variant_t & Value ) {
    HRESULT _hr = put_Series(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ISmoothingFunction wrapper method implementations
//

#pragma implementation_key(491)
inline VARIANT_BOOL ISmoothingFunction::GetInterpolate ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Interpolate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(492)
inline void ISmoothingFunction::PutInterpolate ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Interpolate(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(493)
inline long ISmoothingFunction::GetFactor ( ) {
    long _result = 0;
    HRESULT _hr = get_Factor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(494)
inline void ISmoothingFunction::PutFactor ( long Value ) {
    HRESULT _hr = put_Factor(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ICustomFunction wrapper method implementations
//

#pragma implementation_key(495)
inline long ICustomFunction::GetNumPoints ( ) {
    long _result = 0;
    HRESULT _hr = get_NumPoints(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(496)
inline void ICustomFunction::PutNumPoints ( long Value ) {
    HRESULT _hr = put_NumPoints(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(497)
inline double ICustomFunction::GetStartX ( ) {
    double _result = 0;
    HRESULT _hr = get_StartX(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(498)
inline void ICustomFunction::PutStartX ( double Value ) {
    HRESULT _hr = put_StartX(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(499)
inline double ICustomFunction::GetX ( ) {
    double _result = 0;
    HRESULT _hr = get_X(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(500)
inline void ICustomFunction::PutX ( double Value ) {
    HRESULT _hr = put_X(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ICompressFunction wrapper method implementations
//

#pragma implementation_key(501)
inline enum ECompressionPeriod ICompressFunction::GetCompress ( ) {
    enum ECompressionPeriod _result;
    HRESULT _hr = get_Compress(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(502)
inline void ICompressFunction::PutCompress ( enum ECompressionPeriod Value ) {
    HRESULT _hr = put_Compress(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ICLVFunction wrapper method implementations
//

#pragma implementation_key(503)
inline VARIANT_BOOL ICLVFunction::GetAccumulate ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Accumulate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(504)
inline void ICLVFunction::PutAccumulate ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Accumulate(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(505)
inline _variant_t ICLVFunction::GetVolume ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Volume(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(506)
inline void ICLVFunction::PutVolume ( const _variant_t & Value ) {
    HRESULT _hr = put_Volume(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IOBVFunction wrapper method implementations
//

#pragma implementation_key(507)
inline _variant_t IOBVFunction::GetVolume ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Volume(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(508)
inline void IOBVFunction::PutVolume ( const _variant_t & Value ) {
    HRESULT _hr = put_Volume(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ICCIFunction wrapper method implementations
//

#pragma implementation_key(509)
inline double ICCIFunction::GetConstant ( ) {
    double _result = 0;
    HRESULT _hr = get_Constant(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(510)
inline void ICCIFunction::PutConstant ( double Value ) {
    HRESULT _hr = put_Constant(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IPVOFunction wrapper method implementations
//

#pragma implementation_key(511)
inline VARIANT_BOOL IPVOFunction::GetPercentage ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Percentage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(512)
inline void IPVOFunction::PutPercentage ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Percentage(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(513)
inline long IPVOFunction::GetPeriod2 ( ) {
    long _result = 0;
    HRESULT _hr = get_Period2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(514)
inline void IPVOFunction::PutPeriod2 ( long Value ) {
    HRESULT _hr = put_Period2(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IPerformanceFunction wrapper method implementations
//

#pragma implementation_key(515)
inline double IPerformanceFunction::Calculate ( long SourceSeriesIndex, long FirstIndex, long LastIndex ) {
    double _result = 0;
    HRESULT _hr = raw_Calculate(SourceSeriesIndex, FirstIndex, LastIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ITeeRect wrapper method implementations
//

#pragma implementation_key(516)
inline long ITeeRect::GetLeft ( ) {
    long _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(517)
inline long ITeeRect::GetTop ( ) {
    long _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(518)
inline long ITeeRect::GetRight ( ) {
    long _result = 0;
    HRESULT _hr = get_Right(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(519)
inline long ITeeRect::GetBottom ( ) {
    long _result = 0;
    HRESULT _hr = get_Bottom(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IDragPointTool wrapper method implementations
//

#pragma implementation_key(520)
inline enum EDragPointStyle IDragPointTool::GetDragStyle ( ) {
    enum EDragPointStyle _result;
    HRESULT _hr = get_DragStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(521)
inline void IDragPointTool::PutDragStyle ( enum EDragPointStyle Value ) {
    HRESULT _hr = put_DragStyle(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ILightTool wrapper method implementations
//

#pragma implementation_key(522)
inline long ILightTool::GetFactor ( ) {
    long _result = 0;
    HRESULT _hr = get_Factor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(523)
inline void ILightTool::PutFactor ( long Value ) {
    HRESULT _hr = put_Factor(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(524)
inline long ILightTool::GetLeft ( ) {
    long _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(525)
inline void ILightTool::PutLeft ( long Value ) {
    HRESULT _hr = put_Left(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(526)
inline enum ELightStyle ILightTool::GetStyle ( ) {
    enum ELightStyle _result;
    HRESULT _hr = get_Style(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(527)
inline void ILightTool::PutStyle ( enum ELightStyle Value ) {
    HRESULT _hr = put_Style(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(528)
inline long ILightTool::GetTop ( ) {
    long _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(529)
inline void ILightTool::PutTop ( long Value ) {
    HRESULT _hr = put_Top(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(530)
inline VARIANT_BOOL ILightTool::GetFollowMouse ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_FollowMouse(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(531)
inline void ILightTool::PutFollowMouse ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_FollowMouse(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ISurfaceNearestTool wrapper method implementations
//

#pragma implementation_key(532)
inline OLE_COLOR ISurfaceNearestTool::GetCellColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_CellColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(533)
inline void ISurfaceNearestTool::PutCellColor ( OLE_COLOR Value ) {
    HRESULT _hr = put_CellColor(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(534)
inline OLE_COLOR ISurfaceNearestTool::GetColumnColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_ColumnColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(535)
inline void ISurfaceNearestTool::PutColumnColor ( OLE_COLOR Value ) {
    HRESULT _hr = put_ColumnColor(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(536)
inline OLE_COLOR ISurfaceNearestTool::GetRowColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_RowColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(537)
inline void ISurfaceNearestTool::PutRowColor ( OLE_COLOR Value ) {
    HRESULT _hr = put_RowColor(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(538)
inline long ISurfaceNearestTool::GetSelectedCell ( ) {
    long _result = 0;
    HRESULT _hr = get_SelectedCell(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(539)
inline void ISurfaceNearestTool::PutSelectedCell ( long Value ) {
    HRESULT _hr = put_SelectedCell(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(540)
inline long ISurfaceNearestTool::GetRow ( ) {
    long _result = 0;
    HRESULT _hr = raw_GetRow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(541)
inline long ISurfaceNearestTool::GetCol ( ) {
    long _result = 0;
    HRESULT _hr = raw_GetCol(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAxisScrollTool wrapper method implementations
//

#pragma implementation_key(542)
inline VARIANT_BOOL IAxisScrollTool::GetScrollInverted ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ScrollInverted(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(543)
inline void IAxisScrollTool::PutScrollInverted ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_ScrollInverted(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ICustomSortedFunction wrapper method implementations
//

#pragma implementation_key(544)
inline VARIANT_BOOL ICustomSortedFunction::GetIncludeNulls ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IncludeNulls(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(545)
inline void ICustomSortedFunction::PutIncludeNulls ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_IncludeNulls(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IDownSamplingFunction wrapper method implementations
//

#pragma implementation_key(546)
inline enum EDownSampleMethod IDownSamplingFunction::GetDownSampleMethod ( ) {
    enum EDownSampleMethod _result;
    HRESULT _hr = get_DownSampleMethod(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(547)
inline void IDownSamplingFunction::PutDownSampleMethod ( enum EDownSampleMethod Value ) {
    HRESULT _hr = put_DownSampleMethod(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(548)
inline long IDownSamplingFunction::GetTolerance ( ) {
    long _result = 0;
    HRESULT _hr = get_Tolerance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(549)
inline void IDownSamplingFunction::PutTolerance ( long Value ) {
    HRESULT _hr = put_Tolerance(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(550)
inline long IDownSamplingFunction::GetReducedSize ( ) {
    long _result = 0;
    HRESULT _hr = get_ReducedSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ITeeCommanderButton wrapper method implementations
//

#pragma implementation_key(551)
inline HRESULT ITeeCommanderButton::Hide ( ) {
    HRESULT _hr = raw_Hide();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IPointArray wrapper method implementations
//

#pragma implementation_key(552)
inline long IPointArray::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(553)
inline ITeePoint2DPtr IPointArray::GetItem ( long Index ) {
    struct ITeePoint2D * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITeePoint2DPtr(_result, false);
}

//
// interface ILegendItem wrapper method implementations
//

#pragma implementation_key(554)
inline struct TeeRect ILegendItem::GetSymbolRect ( ) {
    struct TeeRect _result;
    HRESULT _hr = get_SymbolRect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(555)
inline void ILegendItem::PutSymbolRect ( struct TeeRect Value ) {
    HRESULT _hr = put_SymbolRect(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(556)
inline long ILegendItem::GetAlign ( ) {
    long _result = 0;
    HRESULT _hr = get_Align(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(557)
inline long ILegendItem::GetLeft ( ) {
    long _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(558)
inline _bstr_t ILegendItem::GetText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(559)
inline void ILegendItem::PutText ( _bstr_t Value ) {
    HRESULT _hr = put_Text(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(560)
inline long ILegendItem::GetTop ( ) {
    long _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ILegendItems wrapper method implementations
//

#pragma implementation_key(561)
inline HRESULT ILegendItems::Clear ( ) {
    HRESULT _hr = raw_Clear();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(562)
inline VARIANT_BOOL ILegendItems::GetCustom ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Custom(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(563)
inline void ILegendItems::PutCustom ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Custom(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(564)
inline ILegendItemPtr ILegendItems::GetItems ( long Index ) {
    struct ILegendItem * _result = 0;
    HRESULT _hr = get_Items(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ILegendItemPtr(_result, false);
}

//
// interface ISeriesStatsTool wrapper method implementations
//

#pragma implementation_key(565)
inline IStringsPtr ISeriesStatsTool::GetStatistics ( ) {
    struct IStrings * _result = 0;
    HRESULT _hr = get_Statistics(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IStringsPtr(_result, false);
}

//
// interface IVideoTool wrapper method implementations
//

#pragma implementation_key(566)
inline HRESULT IVideoTool::StartRecording ( _bstr_t FileName ) {
    HRESULT _hr = raw_StartRecording(FileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(567)
inline HRESULT IVideoTool::StopRecording ( ) {
    HRESULT _hr = raw_StopRecording();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(568)
inline long IVideoTool::GetFrameCount ( ) {
    long _result = 0;
    HRESULT _hr = get_FrameCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(569)
inline VARIANT_BOOL IVideoTool::GetIsRecording ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsRecording(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(570)
inline _bstr_t IVideoTool::GetCompression ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Compression(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(571)
inline void IVideoTool::PutCompression ( _bstr_t Value ) {
    HRESULT _hr = put_Compression(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(572)
inline long IVideoTool::GetCompressionQuality ( ) {
    long _result = 0;
    HRESULT _hr = get_CompressionQuality(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(573)
inline void IVideoTool::PutCompressionQuality ( long Value ) {
    HRESULT _hr = put_CompressionQuality(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(574)
inline _bstr_t IVideoTool::GetFileName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FileName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(575)
inline void IVideoTool::PutFileName ( _bstr_t Value ) {
    HRESULT _hr = put_FileName(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(576)
inline long IVideoTool::GetFrameDuration ( ) {
    long _result = 0;
    HRESULT _hr = get_FrameDuration(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(577)
inline void IVideoTool::PutFrameDuration ( long Value ) {
    HRESULT _hr = put_FrameDuration(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IFilterRegion wrapper method implementations
//

#pragma implementation_key(578)
inline HRESULT IFilterRegion::SetRectangle ( long Left, long Top, long Right, long Bottom ) {
    HRESULT _hr = raw_SetRectangle(Left, Top, Right, Bottom);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(579)
inline long IFilterRegion::GetHeight ( ) {
    long _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(580)
inline void IFilterRegion::PutHeight ( long Value ) {
    HRESULT _hr = put_Height(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(581)
inline long IFilterRegion::GetLeft ( ) {
    long _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(582)
inline void IFilterRegion::PutLeft ( long Value ) {
    HRESULT _hr = put_Left(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(583)
inline long IFilterRegion::GetTop ( ) {
    long _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(584)
inline void IFilterRegion::PutTop ( long Value ) {
    HRESULT _hr = put_Top(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(585)
inline long IFilterRegion::GetWidth ( ) {
    long _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(586)
inline void IFilterRegion::PutWidth ( long Value ) {
    HRESULT _hr = put_Width(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ITransposeSeriesTool wrapper method implementations
//

#pragma implementation_key(587)
inline HRESULT ITransposeSeriesTool::Transpose ( ) {
    HRESULT _hr = raw_Transpose();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface ISubsetTeeFunction wrapper method implementations
//

#pragma implementation_key(588)
inline double ISubsetTeeFunction::GetStartValue ( ) {
    double _result = 0;
    HRESULT _hr = get_StartValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(589)
inline void ISubsetTeeFunction::PutStartValue ( double Value ) {
    HRESULT _hr = put_StartValue(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(590)
inline double ISubsetTeeFunction::GetEndValue ( ) {
    double _result = 0;
    HRESULT _hr = get_EndValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(591)
inline void ISubsetTeeFunction::PutEndValue ( double Value ) {
    HRESULT _hr = put_EndValue(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IHistogramFunction wrapper method implementations
//

#pragma implementation_key(592)
inline VARIANT_BOOL IHistogramFunction::GetCumulative ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Cumulative(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(593)
inline void IHistogramFunction::PutCumulative ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Cumulative(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(594)
inline long IHistogramFunction::GetNumBins ( ) {
    long _result = 0;
    HRESULT _hr = get_NumBins(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(595)
inline void IHistogramFunction::PutNumBins ( long Value ) {
    HRESULT _hr = put_NumBins(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ISARFunction wrapper method implementations
//

#pragma implementation_key(596)
inline double ISARFunction::GetAccelerationFactor ( ) {
    double _result = 0;
    HRESULT _hr = get_AccelerationFactor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(597)
inline void ISARFunction::PutAccelerationFactor ( double Value ) {
    HRESULT _hr = put_AccelerationFactor(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(598)
inline double ISARFunction::GetMaxStep ( ) {
    double _result = 0;
    HRESULT _hr = get_MaxStep(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(599)
inline void ISARFunction::PutMaxStep ( double Value ) {
    HRESULT _hr = put_MaxStep(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IBlurFilter wrapper method implementations
//

#pragma implementation_key(600)
inline long IBlurFilter::GetAmount ( ) {
    long _result = 0;
    HRESULT _hr = get_Amount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(601)
inline void IBlurFilter::PutAmount ( long Value ) {
    HRESULT _hr = put_Amount(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(602)
inline long IBlurFilter::GetSteps ( ) {
    long _result = 0;
    HRESULT _hr = get_Steps(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(603)
inline void IBlurFilter::PutSteps ( long Value ) {
    HRESULT _hr = put_Steps(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IResizeFilter wrapper method implementations
//

#pragma implementation_key(604)
inline long IResizeFilter::GetWidth ( ) {
    long _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(605)
inline void IResizeFilter::PutWidth ( long Value ) {
    HRESULT _hr = put_Width(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(606)
inline long IResizeFilter::GetHeight ( ) {
    long _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(607)
inline void IResizeFilter::PutHeight ( long Value ) {
    HRESULT _hr = put_Height(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ICropFilter wrapper method implementations
//

#pragma implementation_key(608)
inline long ICropFilter::GetLeft ( ) {
    long _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(609)
inline void ICropFilter::PutLeft ( long Value ) {
    HRESULT _hr = put_Left(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(610)
inline long ICropFilter::GetTop ( ) {
    long _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(611)
inline void ICropFilter::PutTop ( long Value ) {
    HRESULT _hr = put_Top(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IGrayScaleFilter wrapper method implementations
//

#pragma implementation_key(612)
inline enum EGrayMethod IGrayScaleFilter::GetMethod ( ) {
    enum EGrayMethod _result;
    HRESULT _hr = get_Method(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(613)
inline void IGrayScaleFilter::PutMethod ( enum EGrayMethod Value ) {
    HRESULT _hr = put_Method(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAmountFilter wrapper method implementations
//

#pragma implementation_key(614)
inline VARIANT_BOOL IAmountFilter::GetPercent ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Percent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(615)
inline void IAmountFilter::PutPercent ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Percent(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(616)
inline long IAmountFilter::GetAmount ( ) {
    long _result = 0;
    HRESULT _hr = get_Amount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(617)
inline void IAmountFilter::PutAmount ( long Value ) {
    HRESULT _hr = put_Amount(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IColorFilter wrapper method implementations
//

#pragma implementation_key(618)
inline long IColorFilter::GetRed ( ) {
    long _result = 0;
    HRESULT _hr = get_Red(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(619)
inline void IColorFilter::PutRed ( long Value ) {
    HRESULT _hr = put_Red(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(620)
inline long IColorFilter::GetGreen ( ) {
    long _result = 0;
    HRESULT _hr = get_Green(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(621)
inline void IColorFilter::PutGreen ( long Value ) {
    HRESULT _hr = put_Green(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(622)
inline long IColorFilter::GetBlue ( ) {
    long _result = 0;
    HRESULT _hr = get_Blue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(623)
inline void IColorFilter::PutBlue ( long Value ) {
    HRESULT _hr = put_Blue(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IHueLumSatFilter wrapper method implementations
//

#pragma implementation_key(624)
inline long IHueLumSatFilter::GetHue ( ) {
    long _result = 0;
    HRESULT _hr = get_Hue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(625)
inline void IHueLumSatFilter::PutHue ( long Value ) {
    HRESULT _hr = put_Hue(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(626)
inline long IHueLumSatFilter::GetLuminance ( ) {
    long _result = 0;
    HRESULT _hr = get_Luminance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(627)
inline void IHueLumSatFilter::PutLuminance ( long Value ) {
    HRESULT _hr = put_Luminance(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(628)
inline long IHueLumSatFilter::GetSaturation ( ) {
    long _result = 0;
    HRESULT _hr = get_Saturation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(629)
inline void IHueLumSatFilter::PutSaturation ( long Value ) {
    HRESULT _hr = put_Saturation(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IRotateFilter wrapper method implementations
//

#pragma implementation_key(630)
inline double IRotateFilter::GetAngle ( ) {
    double _result = 0;
    HRESULT _hr = get_Angle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(631)
inline void IRotateFilter::PutAngle ( double Value ) {
    HRESULT _hr = put_Angle(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(632)
inline VARIANT_BOOL IRotateFilter::GetAutoSize ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(633)
inline void IRotateFilter::PutAutoSize ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_AutoSize(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(634)
inline OLE_COLOR IRotateFilter::GetBackColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_BackColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(635)
inline void IRotateFilter::PutBackColor ( OLE_COLOR Value ) {
    HRESULT _hr = put_BackColor(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IMirrorFilter wrapper method implementations
//

#pragma implementation_key(636)
inline enum EMirrorDirection IMirrorFilter::GetDirection ( ) {
    enum EMirrorDirection _result;
    HRESULT _hr = get_Direction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(637)
inline void IMirrorFilter::PutDirection ( enum EMirrorDirection Value ) {
    HRESULT _hr = put_Direction(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ITileFilter wrapper method implementations
//

#pragma implementation_key(638)
inline long ITileFilter::GetNumCols ( ) {
    long _result = 0;
    HRESULT _hr = get_NumCols(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(639)
inline void ITileFilter::PutNumCols ( long Value ) {
    HRESULT _hr = put_NumCols(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(640)
inline long ITileFilter::GetNumRows ( ) {
    long _result = 0;
    HRESULT _hr = get_NumRows(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(641)
inline void ITileFilter::PutNumRows ( long Value ) {
    HRESULT _hr = put_NumRows(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IBevelFilter wrapper method implementations
//

#pragma implementation_key(642)
inline long IBevelFilter::GetBright ( ) {
    long _result = 0;
    HRESULT _hr = get_Bright(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(643)
inline void IBevelFilter::PutBright ( long Value ) {
    HRESULT _hr = put_Bright(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(644)
inline long IBevelFilter::GetSize ( ) {
    long _result = 0;
    HRESULT _hr = get_Size(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(645)
inline void IBevelFilter::PutSize ( long Value ) {
    HRESULT _hr = put_Size(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IZoomFilter wrapper method implementations
//

#pragma implementation_key(646)
inline double IZoomFilter::GetPercent ( ) {
    double _result = 0;
    HRESULT _hr = get_Percent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(647)
inline void IZoomFilter::PutPercent ( double Value ) {
    HRESULT _hr = put_Percent(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(648)
inline VARIANT_BOOL IZoomFilter::GetSmooth ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Smooth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(649)
inline void IZoomFilter::PutSmooth ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Smooth(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ITeeFilter wrapper method implementations
//

#pragma implementation_key(650)
inline VARIANT_BOOL ITeeFilter::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(651)
inline void ITeeFilter::PutEnabled ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Enabled(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(652)
inline IFilterRegionPtr ITeeFilter::GetRegion ( ) {
    struct IFilterRegion * _result = 0;
    HRESULT _hr = get_Region(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IFilterRegionPtr(_result, false);
}

#pragma implementation_key(653)
inline IResizeFilterPtr ITeeFilter::GetasResize ( ) {
    struct IResizeFilter * _result = 0;
    HRESULT _hr = get_asResize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IResizeFilterPtr(_result, false);
}

#pragma implementation_key(654)
inline ICropFilterPtr ITeeFilter::GetasCrop ( ) {
    struct ICropFilter * _result = 0;
    HRESULT _hr = get_asCrop(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ICropFilterPtr(_result, false);
}

#pragma implementation_key(655)
inline IGrayScaleFilterPtr ITeeFilter::GetasGrayScale ( ) {
    struct IGrayScaleFilter * _result = 0;
    HRESULT _hr = get_asGrayScale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGrayScaleFilterPtr(_result, false);
}

#pragma implementation_key(656)
inline IMosaicFilterPtr ITeeFilter::GetasMosaic ( ) {
    struct IMosaicFilter * _result = 0;
    HRESULT _hr = get_asMosaic(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMosaicFilterPtr(_result, false);
}

#pragma implementation_key(657)
inline IColorFilterPtr ITeeFilter::GetasColor ( ) {
    struct IColorFilter * _result = 0;
    HRESULT _hr = get_asColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IColorFilterPtr(_result, false);
}

#pragma implementation_key(658)
inline IHueLumSatFilterPtr ITeeFilter::GetasHueLumSat ( ) {
    struct IHueLumSatFilter * _result = 0;
    HRESULT _hr = get_asHueLumSat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IHueLumSatFilterPtr(_result, false);
}

#pragma implementation_key(659)
inline IRotateFilterPtr ITeeFilter::GetasRotate ( ) {
    struct IRotateFilter * _result = 0;
    HRESULT _hr = get_asRotate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IRotateFilterPtr(_result, false);
}

#pragma implementation_key(660)
inline IMirrorFilterPtr ITeeFilter::GetasMirror ( ) {
    struct IMirrorFilter * _result = 0;
    HRESULT _hr = get_asMirror(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMirrorFilterPtr(_result, false);
}

#pragma implementation_key(661)
inline IBlurFilterPtr ITeeFilter::GetasBlur ( ) {
    struct IBlurFilter * _result = 0;
    HRESULT _hr = get_asBlur(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IBlurFilterPtr(_result, false);
}

#pragma implementation_key(662)
inline IBrightnessFilterPtr ITeeFilter::GetasBrightness ( ) {
    struct IBrightnessFilter * _result = 0;
    HRESULT _hr = get_asBrightness(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IBrightnessFilterPtr(_result, false);
}

#pragma implementation_key(663)
inline IContrastFilterPtr ITeeFilter::GetasContrast ( ) {
    struct IContrastFilter * _result = 0;
    HRESULT _hr = get_asContrast(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IContrastFilterPtr(_result, false);
}

#pragma implementation_key(664)
inline IGammaCorrectionFilterPtr ITeeFilter::GetasGammaCorrection ( ) {
    struct IGammaCorrectionFilter * _result = 0;
    HRESULT _hr = get_asGammaCorrection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGammaCorrectionFilterPtr(_result, false);
}

#pragma implementation_key(665)
inline IAmountFilterPtr ITeeFilter::GetasAmount ( ) {
    struct IAmountFilter * _result = 0;
    HRESULT _hr = get_asAmount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAmountFilterPtr(_result, false);
}

#pragma implementation_key(666)
inline ISharpenFilterPtr ITeeFilter::GetasSharpen ( ) {
    struct ISharpenFilter * _result = 0;
    HRESULT _hr = get_asSharpen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISharpenFilterPtr(_result, false);
}

#pragma implementation_key(667)
inline IEmbossFilterPtr ITeeFilter::GetasEmboss ( ) {
    struct IEmbossFilter * _result = 0;
    HRESULT _hr = get_asEmboss(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IEmbossFilterPtr(_result, false);
}

#pragma implementation_key(668)
inline ISoftenFilterPtr ITeeFilter::GetasSoften ( ) {
    struct ISoftenFilter * _result = 0;
    HRESULT _hr = get_asSoften(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISoftenFilterPtr(_result, false);
}

#pragma implementation_key(669)
inline ITileFilterPtr ITeeFilter::GetasTile ( ) {
    struct ITileFilter * _result = 0;
    HRESULT _hr = get_asTile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITileFilterPtr(_result, false);
}

#pragma implementation_key(670)
inline IBevelFilterPtr ITeeFilter::GetasBevel ( ) {
    struct IBevelFilter * _result = 0;
    HRESULT _hr = get_asBevel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IBevelFilterPtr(_result, false);
}

#pragma implementation_key(671)
inline IZoomFilterPtr ITeeFilter::GetasZoom ( ) {
    struct IZoomFilter * _result = 0;
    HRESULT _hr = get_asZoom(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IZoomFilterPtr(_result, false);
}

//
// interface IFilterItems wrapper method implementations
//

#pragma implementation_key(672)
inline long IFilterItems::Add ( enum EFilterClass FilterClass ) {
    long _result = 0;
    HRESULT _hr = raw_Add(FilterClass, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(673)
inline HRESULT IFilterItems::LoadImage ( _bstr_t FileName ) {
    HRESULT _hr = raw_LoadImage(FileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(674)
inline ITeeFilterPtr IFilterItems::GetItem ( long Index ) {
    struct ITeeFilter * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITeeFilterPtr(_result, false);
}

#pragma implementation_key(675)
inline HRESULT IFilterItems::AssignImage ( long ImageHandle ) {
    HRESULT _hr = raw_AssignImage(ImageHandle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IGLLight wrapper method implementations
//

#pragma implementation_key(676)
inline OLE_COLOR IGLLight::GetColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(677)
inline void IGLLight::PutColor ( OLE_COLOR Value ) {
    HRESULT _hr = put_Color(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(678)
inline VARIANT_BOOL IGLLight::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(679)
inline void IGLLight::PutVisible ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Visible(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IGLPosition wrapper method implementations
//

#pragma implementation_key(680)
inline double IGLPosition::GetX ( ) {
    double _result = 0;
    HRESULT _hr = get_X(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(681)
inline void IGLPosition::PutX ( double Value ) {
    HRESULT _hr = put_X(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(682)
inline double IGLPosition::GetY ( ) {
    double _result = 0;
    HRESULT _hr = get_Y(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(683)
inline void IGLPosition::PutY ( double Value ) {
    HRESULT _hr = put_Y(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(684)
inline double IGLPosition::GetZ ( ) {
    double _result = 0;
    HRESULT _hr = get_Z(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(685)
inline void IGLPosition::PutZ ( double Value ) {
    HRESULT _hr = put_Z(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IGLLightSource wrapper method implementations
//

#pragma implementation_key(686)
inline IGLPositionPtr IGLLightSource::GetDirection ( ) {
    struct IGLPosition * _result = 0;
    HRESULT _hr = get_Direction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGLPositionPtr(_result, false);
}

#pragma implementation_key(687)
inline VARIANT_BOOL IGLLightSource::GetFixedPosition ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_FixedPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(688)
inline void IGLLightSource::PutFixedPosition ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_FixedPosition(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(689)
inline IGLPositionPtr IGLLightSource::GetPosition ( ) {
    struct IGLPosition * _result = 0;
    HRESULT _hr = get_Position(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGLPositionPtr(_result, false);
}

#pragma implementation_key(690)
inline double IGLLightSource::GetSpotDegrees ( ) {
    double _result = 0;
    HRESULT _hr = get_SpotDegrees(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(691)
inline void IGLLightSource::PutSpotDegrees ( double Value ) {
    HRESULT _hr = put_SpotDegrees(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(692)
inline VARIANT_BOOL IGLLightSource::GetUseDirection ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseDirection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(693)
inline void IGLLightSource::PutUseDirection ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_UseDirection(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ITeeOpenGL wrapper method implementations
//

#pragma implementation_key(694)
inline VARIANT_BOOL ITeeOpenGL::GetActive ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Active(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(695)
inline void ITeeOpenGL::PutActive ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Active(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(696)
inline long ITeeOpenGL::GetAmbientLight ( ) {
    long _result = 0;
    HRESULT _hr = get_AmbientLight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(697)
inline void ITeeOpenGL::PutAmbientLight ( long Value ) {
    HRESULT _hr = put_AmbientLight(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(698)
inline ITeePoint3DPtr ITeeOpenGL::GetLightPosition ( ) {
    struct ITeePoint3D * _result = 0;
    HRESULT _hr = get_LightPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITeePoint3DPtr(_result, false);
}

#pragma implementation_key(699)
inline OLE_COLOR ITeeOpenGL::GetLightColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_LightColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(700)
inline void ITeeOpenGL::PutLightColor ( OLE_COLOR Value ) {
    HRESULT _hr = put_LightColor(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(701)
inline VARIANT_BOOL ITeeOpenGL::GetFontOutlines ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_FontOutlines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(702)
inline void ITeeOpenGL::PutFontOutlines ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_FontOutlines(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(703)
inline VARIANT_BOOL ITeeOpenGL::GetShadeQuality ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShadeQuality(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(704)
inline void ITeeOpenGL::PutShadeQuality ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_ShadeQuality(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(705)
inline VARIANT_BOOL ITeeOpenGL::GetAntialias ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Antialias(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(706)
inline void ITeeOpenGL::PutAntialias ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Antialias(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(707)
inline long ITeeOpenGL::GetFontExtrusion ( ) {
    long _result = 0;
    HRESULT _hr = get_FontExtrusion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(708)
inline void ITeeOpenGL::PutFontExtrusion ( long Value ) {
    HRESULT _hr = put_FontExtrusion(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(709)
inline IGLLightSourcePtr ITeeOpenGL::GetLight ( ) {
    struct IGLLightSource * _result = 0;
    HRESULT _hr = get_Light(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGLLightSourcePtr(_result, false);
}

#pragma implementation_key(710)
inline IGLLightSourcePtr ITeeOpenGL::GetLight1 ( ) {
    struct IGLLightSource * _result = 0;
    HRESULT _hr = get_Light1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGLLightSourcePtr(_result, false);
}

#pragma implementation_key(711)
inline IGLLightSourcePtr ITeeOpenGL::GetLight2 ( ) {
    struct IGLLightSource * _result = 0;
    HRESULT _hr = get_Light2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGLLightSourcePtr(_result, false);
}

#pragma implementation_key(712)
inline double ITeeOpenGL::GetShininess ( ) {
    double _result = 0;
    HRESULT _hr = get_Shininess(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(713)
inline void ITeeOpenGL::PutShininess ( double Value ) {
    HRESULT _hr = put_Shininess(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(714)
inline HRESULT ITeeOpenGL::ShowEditor ( ) {
    HRESULT _hr = raw_ShowEditor();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IAspect wrapper method implementations
//

#pragma implementation_key(715)
inline VARIANT_BOOL IAspect::GetApplyZOrder ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ApplyZOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(716)
inline void IAspect::PutApplyZOrder ( VARIANT_BOOL ApplyZOrder ) {
    HRESULT _hr = put_ApplyZOrder(ApplyZOrder);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(717)
inline long IAspect::GetChart3DPercent ( ) {
    long _result = 0;
    HRESULT _hr = get_Chart3DPercent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(718)
inline void IAspect::PutChart3DPercent ( long Chart3DPercent ) {
    HRESULT _hr = put_Chart3DPercent(Chart3DPercent);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(719)
inline long IAspect::GetHeight3D ( ) {
    long _result = 0;
    HRESULT _hr = get_Height3D(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(720)
inline VARIANT_BOOL IAspect::GetView3D ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_View3D(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(721)
inline void IAspect::PutView3D ( VARIANT_BOOL View3D ) {
    HRESULT _hr = put_View3D(View3D);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(722)
inline long IAspect::GetWidth3D ( ) {
    long _result = 0;
    HRESULT _hr = get_Width3D(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(723)
inline long IAspect::GetRotation ( ) {
    long _result = 0;
    HRESULT _hr = get_Rotation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(724)
inline void IAspect::PutRotation ( long RotationX ) {
    HRESULT _hr = put_Rotation(RotationX);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(725)
inline long IAspect::GetElevation ( ) {
    long _result = 0;
    HRESULT _hr = get_Elevation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(726)
inline void IAspect::PutElevation ( long RotationY ) {
    HRESULT _hr = put_Elevation(RotationY);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(727)
inline long IAspect::GetZoom ( ) {
    long _result = 0;
    HRESULT _hr = get_Zoom(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(728)
inline void IAspect::PutZoom ( long Zoom ) {
    HRESULT _hr = put_Zoom(Zoom);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(729)
inline VARIANT_BOOL IAspect::GetZoomText ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ZoomText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(730)
inline void IAspect::PutZoomText ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_ZoomText(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(731)
inline long IAspect::GetHorizOffset ( ) {
    long _result = 0;
    HRESULT _hr = get_HorizOffset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(732)
inline void IAspect::PutHorizOffset ( long Value ) {
    HRESULT _hr = put_HorizOffset(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(733)
inline long IAspect::GetVertOffset ( ) {
    long _result = 0;
    HRESULT _hr = get_VertOffset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(734)
inline void IAspect::PutVertOffset ( long Value ) {
    HRESULT _hr = put_VertOffset(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(735)
inline long IAspect::GetTilt ( ) {
    long _result = 0;
    HRESULT _hr = get_Tilt(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(736)
inline void IAspect::PutTilt ( long Value ) {
    HRESULT _hr = put_Tilt(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(737)
inline VARIANT_BOOL IAspect::GetOrthogonal ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Orthogonal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(738)
inline void IAspect::PutOrthogonal ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Orthogonal(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(739)
inline long IAspect::GetPerspective ( ) {
    long _result = 0;
    HRESULT _hr = get_Perspective(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(740)
inline void IAspect::PutPerspective ( long Value ) {
    HRESULT _hr = put_Perspective(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(741)
inline ITeeOpenGLPtr IAspect::GetOpenGL ( ) {
    struct ITeeOpenGL * _result = 0;
    HRESULT _hr = get_OpenGL(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITeeOpenGLPtr(_result, false);
}

#pragma implementation_key(742)
inline long IAspect::GetOrthoAngle ( ) {
    long _result = 0;
    HRESULT _hr = get_OrthoAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(743)
inline void IAspect::PutOrthoAngle ( long Value ) {
    HRESULT _hr = put_OrthoAngle(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(744)
inline double IAspect::GetElevationFloat ( ) {
    double _result = 0;
    HRESULT _hr = get_ElevationFloat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(745)
inline void IAspect::PutElevationFloat ( double Value ) {
    HRESULT _hr = put_ElevationFloat(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(746)
inline double IAspect::GetRotationFloat ( ) {
    double _result = 0;
    HRESULT _hr = get_RotationFloat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(747)
inline void IAspect::PutRotationFloat ( double Value ) {
    HRESULT _hr = put_RotationFloat(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(748)
inline long IAspect::GetFontZoom ( ) {
    long _result = 0;
    HRESULT _hr = get_FontZoom(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(749)
inline void IAspect::PutFontZoom ( long Value ) {
    HRESULT _hr = put_FontZoom(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAxisGridPen wrapper method implementations
//

#pragma implementation_key(750)
inline long IAxisGridPen::GetDrawEvery ( ) {
    long _result = 0;
    HRESULT _hr = get_DrawEvery(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(751)
inline void IAxisGridPen::PutDrawEvery ( long Value ) {
    HRESULT _hr = put_DrawEvery(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(752)
inline double IAxisGridPen::GetZPosition ( ) {
    double _result = 0;
    HRESULT _hr = get_ZPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(753)
inline void IAxisGridPen::PutZPosition ( double Value ) {
    HRESULT _hr = put_ZPosition(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IPen wrapper method implementations
//

#pragma implementation_key(754)
inline OLE_COLOR IPen::GetColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(755)
inline void IPen::PutColor ( OLE_COLOR Color ) {
    HRESULT _hr = put_Color(Color);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(756)
inline long IPen::GetWidth ( ) {
    long _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(757)
inline void IPen::PutWidth ( long Width ) {
    HRESULT _hr = put_Width(Width);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(758)
inline enum EChartPenStyle IPen::GetStyle ( ) {
    enum EChartPenStyle _result;
    HRESULT _hr = get_Style(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(759)
inline void IPen::PutStyle ( enum EChartPenStyle Style ) {
    HRESULT _hr = put_Style(Style);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(760)
inline VARIANT_BOOL IPen::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(761)
inline void IPen::PutVisible ( VARIANT_BOOL Visible ) {
    HRESULT _hr = put_Visible(Visible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(762)
inline enum EPenEndStyle IPen::GetEndStyle ( ) {
    enum EPenEndStyle _result;
    HRESULT _hr = get_EndStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(763)
inline void IPen::PutEndStyle ( enum EPenEndStyle Value ) {
    HRESULT _hr = put_EndStyle(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(764)
inline HRESULT IPen::ShowEditor ( VARIANT_BOOL HideColor, _bstr_t Title ) {
    HRESULT _hr = raw_ShowEditor(HideColor, Title);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(765)
inline long IPen::GetSmallSpace ( ) {
    long _result = 0;
    HRESULT _hr = get_SmallSpace(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(766)
inline void IPen::PutSmallSpace ( long Value ) {
    HRESULT _hr = put_SmallSpace(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(767)
inline enum EPenMode IPen::GetMode ( ) {
    enum EPenMode _result;
    HRESULT _hr = get_Mode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(768)
inline void IPen::PutMode ( enum EPenMode Value ) {
    HRESULT _hr = put_Mode(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(769)
inline HRESULT IPen::Show ( ) {
    HRESULT _hr = raw_Show();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(770)
inline HRESULT IPen::Hide ( ) {
    HRESULT _hr = raw_Hide();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface ICanvas wrapper method implementations
//

#pragma implementation_key(771)
inline IBrushPtr ICanvas::GetBrush ( ) {
    struct IBrush * _result = 0;
    HRESULT _hr = get_Brush(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IBrushPtr(_result, false);
}

#pragma implementation_key(772)
inline IPenPtr ICanvas::GetPen ( ) {
    struct IPen * _result = 0;
    HRESULT _hr = get_Pen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPenPtr(_result, false);
}

#pragma implementation_key(773)
inline HRESULT ICanvas::LineTo ( long X, long Y ) {
    HRESULT _hr = raw_LineTo(X, Y);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(774)
inline HRESULT ICanvas::MoveTo ( long X, long Y ) {
    HRESULT _hr = raw_MoveTo(X, Y);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(775)
inline HRESULT ICanvas::Rectangle ( long Left, long Top, long Right, long Bottom ) {
    HRESULT _hr = raw_Rectangle(Left, Top, Right, Bottom);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(776)
inline IChartFontPtr ICanvas::GetFont ( ) {
    struct IChartFont * _result = 0;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IChartFontPtr(_result, false);
}

#pragma implementation_key(777)
inline HRESULT ICanvas::Arc ( long X1, long Y1, long X2, long Y2, long X3, long Y3, long X4, long Y4 ) {
    HRESULT _hr = raw_Arc(X1, Y1, X2, Y2, X3, Y3, X4, Y4);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(778)
inline HRESULT ICanvas::Ellipse ( long X1, long Y1, long X2, long Y2 ) {
    HRESULT _hr = raw_Ellipse(X1, Y1, X2, Y2);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(779)
inline HRESULT ICanvas::TextOut ( long X, long Y, _bstr_t Text ) {
    HRESULT _hr = raw_TextOut(X, Y, Text);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(780)
inline long ICanvas::TextHeight ( _bstr_t SomeText ) {
    long _result = 0;
    HRESULT _hr = raw_TextHeight(SomeText, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(781)
inline long ICanvas::TextWidth ( _bstr_t SomeText ) {
    long _result = 0;
    HRESULT _hr = raw_TextWidth(SomeText, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(782)
inline HRESULT ICanvas::ClipRectangle ( long Left, long Top, long Right, long Bottom ) {
    HRESULT _hr = raw_ClipRectangle(Left, Top, Right, Bottom);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(783)
inline HRESULT ICanvas::UnClipRectangle ( ) {
    HRESULT _hr = raw_UnClipRectangle();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(784)
inline HRESULT ICanvas::RotateLabel ( long X, long Y, _bstr_t St, long RotDegree ) {
    HRESULT _hr = raw_RotateLabel(X, Y, St, RotDegree);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(785)
inline VARIANT_BOOL ICanvas::IsScreenHighColor ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsScreenHighColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(786)
inline long ICanvas::GetTop ( ) {
    long _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(787)
inline long ICanvas::GetLeft ( ) {
    long _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(788)
inline long ICanvas::GetWidth ( ) {
    long _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(789)
inline long ICanvas::GetHeight ( ) {
    long _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(790)
inline enum ECanvasBackMode ICanvas::GetBackMode ( ) {
    enum ECanvasBackMode _result;
    HRESULT _hr = get_BackMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(791)
inline void ICanvas::PutBackMode ( enum ECanvasBackMode Value ) {
    HRESULT _hr = put_BackMode(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(792)
inline OLE_COLOR ICanvas::GetBackColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_BackColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(793)
inline void ICanvas::PutBackColor ( OLE_COLOR Value ) {
    HRESULT _hr = put_BackColor(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(794)
inline VARIANT_BOOL ICanvas::GetSupportsFullRotation ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SupportsFullRotation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(795)
inline VARIANT_BOOL ICanvas::GetUseBuffer ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseBuffer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(796)
inline void ICanvas::PutUseBuffer ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_UseBuffer(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(797)
inline HRESULT ICanvas::Pie3D ( long XCenter, long YCenter, long XRadius, long YRadius, long Z0, long Z1, double StartAngle, double EndAngle, VARIANT_BOOL DarkSides, VARIANT_BOOL DrawSides ) {
    HRESULT _hr = raw_Pie3D(XCenter, YCenter, XRadius, YRadius, Z0, Z1, StartAngle, EndAngle, DarkSides, DrawSides);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(798)
inline HRESULT ICanvas::LineWithZ ( long X0, long Y0, long X1, long Y1, long Z ) {
    HRESULT _hr = raw_LineWithZ(X0, Y0, X1, Y1, Z);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(799)
inline HRESULT ICanvas::MoveTo3D ( long X, long Y, long Z ) {
    HRESULT _hr = raw_MoveTo3D(X, Y, Z);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(800)
inline HRESULT ICanvas::LineTo3D ( long X, long Y, long Z ) {
    HRESULT _hr = raw_LineTo3D(X, Y, Z);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(801)
inline HRESULT ICanvas::Plane3D ( long X0, long Y0, long X1, long Y1, long Z0, long Z1 ) {
    HRESULT _hr = raw_Plane3D(X0, Y0, X1, Y1, Z0, Z1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(802)
inline HRESULT ICanvas::ZLine3D ( long X, long Y, long Z0, long Z1 ) {
    HRESULT _hr = raw_ZLine3D(X, Y, Z0, Z1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(803)
inline HRESULT ICanvas::RotateLabel3D ( long X, long Y, long Z, _bstr_t St, long RotDegree ) {
    HRESULT _hr = raw_RotateLabel3D(X, Y, Z, St, RotDegree);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(804)
inline enum ECanvasTextAlign ICanvas::GetTextAlign ( ) {
    enum ECanvasTextAlign _result;
    HRESULT _hr = get_TextAlign(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(805)
inline void ICanvas::PutTextAlign ( enum ECanvasTextAlign Value ) {
    HRESULT _hr = put_TextAlign(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(806)
inline HRESULT ICanvas::VertLine3D ( long X, long Top, long Bottom, long Z ) {
    HRESULT _hr = raw_VertLine3D(X, Top, Bottom, Z);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(807)
inline HRESULT ICanvas::HorizLine3D ( long Left, long Right, long Y, long Z ) {
    HRESULT _hr = raw_HorizLine3D(Left, Right, Y, Z);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(808)
inline HRESULT ICanvas::Cylinder ( VARIANT_BOOL Vertical, long Left, long Top, long Right, long Bottom, long Z0, long Z1, VARIANT_BOOL DarkCover ) {
    HRESULT _hr = raw_Cylinder(Vertical, Left, Top, Right, Bottom, Z0, Z1, DarkCover);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(809)
inline HRESULT ICanvas::Cube ( long Left, long Right, long Top, long Bottom, long Z0, long Z1, VARIANT_BOOL DarkSides ) {
    HRESULT _hr = raw_Cube(Left, Right, Top, Bottom, Z0, Z1, DarkSides);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(810)
inline HRESULT ICanvas::EllipseWithZ ( long X1, long Y1, long X2, long Y2, long Z ) {
    HRESULT _hr = raw_EllipseWithZ(X1, Y1, X2, Y2, Z);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(811)
inline HRESULT ICanvas::PlaneWithZ ( long X1, long Y1, long X2, long Y2, long X3, long Y3, long X4, long Y4, long Z ) {
    HRESULT _hr = raw_PlaneWithZ(X1, Y1, X2, Y2, X3, Y3, X4, Y4, Z);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(812)
inline HRESULT ICanvas::PlaneFour3D ( long X1, long Y1, long X2, long Y2, long X3, long Y3, long X4, long Y4, long Z0, long Z1 ) {
    HRESULT _hr = raw_PlaneFour3D(X1, Y1, X2, Y2, X3, Y3, X4, Y4, Z0, Z1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(813)
inline HRESULT ICanvas::RectangleWithZ ( long Left, long Top, long Right, long Bottom, long Z ) {
    HRESULT _hr = raw_RectangleWithZ(Left, Top, Right, Bottom, Z);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(814)
inline HRESULT ICanvas::RectangleZ ( long Left, long Top, long Bottom, long Z0, long Z1 ) {
    HRESULT _hr = raw_RectangleZ(Left, Top, Bottom, Z0, Z1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(815)
inline HRESULT ICanvas::TextOut3D ( long X, long Y, long Z, _bstr_t Text ) {
    HRESULT _hr = raw_TextOut3D(X, Y, Z, Text);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(816)
inline HRESULT ICanvas::TriangleWithZ ( long X1, long Y1, long X2, long Y2, long X3, long Y3, long Z ) {
    HRESULT _hr = raw_TriangleWithZ(X1, Y1, X2, Y2, X3, Y3, Z);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(817)
inline HRESULT ICanvas::Frame3D ( long Left, long Top, long Right, long Bottom, OLE_COLOR TopColor, OLE_COLOR BottomColor, long Width ) {
    HRESULT _hr = raw_Frame3D(Left, Top, Right, Bottom, TopColor, BottomColor, Width);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(818)
inline HRESULT ICanvas::EraseBackground ( long Left, long Top, long Right, long Bottom ) {
    HRESULT _hr = raw_EraseBackground(Left, Top, Right, Bottom);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(819)
inline HRESULT ICanvas::GradientFill ( long Left, long Top, long Right, long Bottom, OLE_COLOR StartColor, OLE_COLOR EndColor, enum EGradientDirection Direction ) {
    HRESULT _hr = raw_GradientFill(Left, Top, Right, Bottom, StartColor, EndColor, Direction);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(820)
inline HRESULT ICanvas::Line ( long X0, long Y0, long X1, long Y1 ) {
    HRESULT _hr = raw_Line(X0, Y0, X1, Y1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(821)
inline HRESULT ICanvas::RectangleY ( long Left, long Top, long Right, long Z0, long Z1 ) {
    HRESULT _hr = raw_RectangleY(Left, Top, Right, Z0, Z1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(822)
inline HRESULT ICanvas::Pixels3D ( long X, long Y, long Z, OLE_COLOR Value ) {
    HRESULT _hr = raw_Pixels3D(X, Y, Z, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(823)
inline _variant_t ICanvas::GetHandleDC ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_HandleDC(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(824)
inline HRESULT ICanvas::Cone ( VARIANT_BOOL Vertical, long Left, long Top, long Right, long Bottom, long Z0, long Z1, VARIANT_BOOL Dark3D, long ConePercent ) {
    HRESULT _hr = raw_Cone(Vertical, Left, Top, Right, Bottom, Z0, Z1, Dark3D, ConePercent);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(825)
inline HRESULT ICanvas::Sphere ( long X, long Y, long Z, double Radius ) {
    HRESULT _hr = raw_Sphere(X, Y, Z, Radius);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(826)
inline HRESULT ICanvas::Arrow ( VARIANT_BOOL Filled, long X0, long Y0, long X1, long Y1, long HeadWidth, long HeadHeight, long Z ) {
    HRESULT _hr = raw_Arrow(Filled, X0, Y0, X1, Y1, HeadWidth, HeadHeight, Z);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(827)
inline HRESULT ICanvas::Draw ( long X, long Y, struct IPicture * Image ) {
    HRESULT _hr = raw_Draw(X, Y, Image);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(828)
inline ITeePoint3DPtr ICanvas::GetRotationCenter ( ) {
    struct ITeePoint3D * _result = 0;
    HRESULT _hr = get_RotationCenter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITeePoint3DPtr(_result, false);
}

#pragma implementation_key(829)
inline long ICanvas::GetChartXCenter ( ) {
    long _result = 0;
    HRESULT _hr = get_ChartXCenter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(830)
inline long ICanvas::GetChartYCenter ( ) {
    long _result = 0;
    HRESULT _hr = get_ChartYCenter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(831)
inline HRESULT ICanvas::GrayScale ( VARIANT_BOOL Inverted ) {
    HRESULT _hr = raw_GrayScale(Inverted);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(832)
inline HRESULT ICanvas::Polyline ( long ArraySize, const _variant_t & XArray, const _variant_t & YArray, long Z ) {
    HRESULT _hr = raw_Polyline(ArraySize, XArray, YArray, Z);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(833)
inline HRESULT ICanvas::RotatedEllipse ( long Left, long Top, long Right, long Bottom, long Z, double Angle ) {
    HRESULT _hr = raw_RotatedEllipse(Left, Top, Right, Bottom, Z, Angle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(834)
inline HRESULT ICanvas::StretchDraw ( long Left, long Top, long Right, long Bottom, struct IPicture * Image ) {
    HRESULT _hr = raw_StretchDraw(Left, Top, Right, Bottom, Image);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(835)
inline HRESULT ICanvas::StretchDrawZ ( long Left, long Top, long Right, long Bottom, struct IPicture * Image, long Z ) {
    HRESULT _hr = raw_StretchDrawZ(Left, Top, Right, Bottom, Image, Z);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(836)
inline HRESULT ICanvas::Pie ( long X1, long Y1, long X2, long Y2, long X3, long Y3, long X4, long Y4 ) {
    HRESULT _hr = raw_Pie(X1, Y1, X2, Y2, X3, Y3, X4, Y4);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(837)
inline HRESULT ICanvas::PolygonWithZ ( long ArraySize, const _variant_t & XArray, const _variant_t & YArray, long Z ) {
    HRESULT _hr = raw_PolygonWithZ(ArraySize, XArray, YArray, Z);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(838)
inline VARIANT_BOOL ICanvas::GetUseAntiAlias ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseAntiAlias(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(839)
inline void ICanvas::PutUseAntiAlias ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_UseAntiAlias(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(840)
inline HRESULT ICanvas::Polygon ( long NumPoints, const _variant_t & Points ) {
    HRESULT _hr = raw_Polygon(NumPoints, Points);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(841)
inline HRESULT ICanvas::DrawBevel ( enum EPanelBevel Value, long Left, long Top, long Right, long Bottom, long Size ) {
    HRESULT _hr = raw_DrawBevel(Value, Left, Top, Right, Bottom, Size);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(842)
inline OLE_COLOR ICanvas::ApplyDark ( OLE_COLOR Color, long HowMuch ) {
    OLE_COLOR _result;
    HRESULT _hr = raw_ApplyDark(Color, HowMuch, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(843)
inline HRESULT ICanvas::DrawLine ( long X0, long Y0, long X1, long Y1 ) {
    HRESULT _hr = raw_DrawLine(X0, Y0, X1, Y1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(844)
inline VARIANT_BOOL ICanvas::GetTeeCheckPenWidth ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_TeeCheckPenWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(845)
inline VARIANT_BOOL ICanvas::GetMetafiling ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Metafiling(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(846)
inline void ICanvas::PutMetafiling ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Metafiling(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(847)
inline VARIANT_BOOL ICanvas::GetMonochrome ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Monochrome(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(848)
inline void ICanvas::PutMonochrome ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Monochrome(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(849)
inline HRESULT ICanvas::AssignBrush ( long ABrush ) {
    HRESULT _hr = raw_AssignBrush(ABrush);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(850)
inline long ICanvas::GetFontHeight ( ) {
    long _result = 0;
    HRESULT _hr = get_FontHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(851)
inline OLE_COLOR ICanvas::GetGetPixels3D ( long X, long Y, long Z ) {
    OLE_COLOR _result;
    HRESULT _hr = get_GetPixels3D(X, Y, Z, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(852)
inline HRESULT ICanvas::Pixels ( long X, long Y, OLE_COLOR Value ) {
    HRESULT _hr = raw_Pixels(X, Y, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(853)
inline OLE_COLOR ICanvas::GetGetPixels ( long X, long Y ) {
    OLE_COLOR _result;
    HRESULT _hr = get_GetPixels(X, Y, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(854)
inline VARIANT_BOOL ICanvas::GetSupports3DText ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Supports3DText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(855)
inline HRESULT ICanvas::ClipRoundRectangle ( long Left, long Top, long Right, long Bottom, long RoundSize ) {
    HRESULT _hr = raw_ClipRoundRectangle(Left, Top, Right, Bottom, RoundSize);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(856)
inline HRESULT ICanvas::ClipEllipse ( long Left, long Top, long Right, long Bottom ) {
    HRESULT _hr = raw_ClipEllipse(Left, Top, Right, Bottom);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(857)
inline HRESULT ICanvas::ClipPolygon ( VARIANT * Points, long NumPoints ) {
    HRESULT _hr = raw_ClipPolygon(Points, NumPoints);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(858)
inline HRESULT ICanvas::PolygonGradient ( long ArraySize, VARIANT * Points, OLE_COLOR StartColor, OLE_COLOR MiddleColor, OLE_COLOR EndColor, enum EGradientDirection Direction ) {
    HRESULT _hr = raw_PolygonGradient(ArraySize, Points, StartColor, MiddleColor, EndColor, Direction);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IZoom wrapper method implementations
//

#pragma implementation_key(859)
inline VARIANT_BOOL IZoom::GetEnable ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(860)
inline void IZoom::PutEnable ( VARIANT_BOOL Enable ) {
    HRESULT _hr = put_Enable(Enable);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(861)
inline VARIANT_BOOL IZoom::GetAnimated ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Animated(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(862)
inline void IZoom::PutAnimated ( VARIANT_BOOL Animated ) {
    HRESULT _hr = put_Animated(Animated);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(863)
inline long IZoom::GetAnimatedSteps ( ) {
    long _result = 0;
    HRESULT _hr = get_AnimatedSteps(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(864)
inline void IZoom::PutAnimatedSteps ( long AnimatedSteps ) {
    HRESULT _hr = put_AnimatedSteps(AnimatedSteps);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(865)
inline HRESULT IZoom::Undo ( ) {
    HRESULT _hr = raw_Undo();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(866)
inline HRESULT IZoom::ZoomRect ( long Left, long Top, long Right, long Bottom ) {
    HRESULT _hr = raw_ZoomRect(Left, Top, Right, Bottom);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(867)
inline VARIANT_BOOL IZoom::GetZoomed ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Zoomed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(868)
inline IPenPtr IZoom::GetPen ( ) {
    struct IPen * _result = 0;
    HRESULT _hr = get_Pen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPenPtr(_result, false);
}

#pragma implementation_key(869)
inline long IZoom::GetMinimumPixels ( ) {
    long _result = 0;
    HRESULT _hr = get_MinimumPixels(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(870)
inline void IZoom::PutMinimumPixels ( long Value ) {
    HRESULT _hr = put_MinimumPixels(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(871)
inline enum EMouseButton IZoom::GetMouseButton ( ) {
    enum EMouseButton _result;
    HRESULT _hr = get_MouseButton(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(872)
inline void IZoom::PutMouseButton ( enum EMouseButton Value ) {
    HRESULT _hr = put_MouseButton(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(873)
inline enum ETeeZoomDirection IZoom::GetDirection ( ) {
    enum ETeeZoomDirection _result;
    HRESULT _hr = get_Direction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(874)
inline void IZoom::PutDirection ( enum ETeeZoomDirection Value ) {
    HRESULT _hr = put_Direction(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(875)
inline IBrushPtr IZoom::GetBrush ( ) {
    struct IBrush * _result = 0;
    HRESULT _hr = get_Brush(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IBrushPtr(_result, false);
}

#pragma implementation_key(876)
inline HRESULT IZoom::ZoomPercent ( double PercentZoom ) {
    HRESULT _hr = raw_ZoomPercent(PercentZoom);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(877)
inline VARIANT_BOOL IZoom::GetUpLeftZooms ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UpLeftZooms(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(878)
inline void IZoom::PutUpLeftZooms ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_UpLeftZooms(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ICustom3DSeries wrapper method implementations
//

#pragma implementation_key(879)
inline long ICustom3DSeries::AddXYZ ( double AX, double AY, double AZ, _bstr_t AXLabel, OLE_COLOR Value ) {
    long _result = 0;
    HRESULT _hr = raw_AddXYZ(AX, AY, AZ, AXLabel, Value, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(880)
inline double ICustom3DSeries::MaxZValue ( ) {
    double _result = 0;
    HRESULT _hr = raw_MaxZValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(881)
inline double ICustom3DSeries::MinZValue ( ) {
    double _result = 0;
    HRESULT _hr = raw_MinZValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(882)
inline long ICustom3DSeries::GetTimesZOrder ( ) {
    long _result = 0;
    HRESULT _hr = get_TimesZOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(883)
inline void ICustom3DSeries::PutTimesZOrder ( long TimesZOrder ) {
    HRESULT _hr = put_TimesZOrder(TimesZOrder);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(884)
inline IValueListPtr ICustom3DSeries::GetZValues ( ) {
    struct IValueList * _result = 0;
    HRESULT _hr = get_ZValues(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IValueListPtr(_result, false);
}

#pragma implementation_key(885)
inline double ICustom3DSeries::GetZValue ( long Index ) {
    double _result = 0;
    HRESULT _hr = get_ZValue(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(886)
inline void ICustom3DSeries::PutZValue ( long Index, double Value ) {
    HRESULT _hr = put_ZValue(Index, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(887)
inline IBrushPtr ICustom3DSeries::GetBrush ( ) {
    struct IBrush * _result = 0;
    HRESULT _hr = get_Brush(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IBrushPtr(_result, false);
}

#pragma implementation_key(888)
inline IPenPtr ICustom3DSeries::GetPen ( ) {
    struct IPen * _result = 0;
    HRESULT _hr = get_Pen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPenPtr(_result, false);
}

#pragma implementation_key(889)
inline HRESULT ICustom3DSeries::AddArrayXYZ ( const _variant_t & XArray, const _variant_t & YArray, const _variant_t & ZArray ) {
    HRESULT _hr = raw_AddArrayXYZ(XArray, YArray, ZArray);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(890)
inline HRESULT ICustom3DSeries::AddArrayGrid ( long NumX, long NumZ, const _variant_t & XZArray ) {
    HRESULT _hr = raw_AddArrayGrid(NumX, NumZ, XZArray);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(891)
inline long ICustom3DSeries::CalcZPos ( long ValueIndex ) {
    long _result = 0;
    HRESULT _hr = raw_CalcZPos(ValueIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IVolumeSeries wrapper method implementations
//

#pragma implementation_key(892)
inline IValueListPtr IVolumeSeries::GetVolumeValues ( ) {
    struct IValueList * _result = 0;
    HRESULT _hr = get_VolumeValues(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IValueListPtr(_result, false);
}

#pragma implementation_key(893)
inline IPenPtr IVolumeSeries::GetLinePen ( ) {
    struct IPen * _result = 0;
    HRESULT _hr = get_LinePen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPenPtr(_result, false);
}

#pragma implementation_key(894)
inline VARIANT_BOOL IVolumeSeries::GetUseYOrigin ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseYOrigin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(895)
inline void IVolumeSeries::PutUseYOrigin ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_UseYOrigin(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(896)
inline double IVolumeSeries::GetYOrigin ( ) {
    double _result = 0;
    HRESULT _hr = get_YOrigin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(897)
inline void IVolumeSeries::PutYOrigin ( double Value ) {
    HRESULT _hr = put_YOrigin(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ICustom3DPaletteSeries wrapper method implementations
//

#pragma implementation_key(898)
inline long ICustom3DPaletteSeries::AddPalette ( double Value, OLE_COLOR Color ) {
    long _result = 0;
    HRESULT _hr = raw_AddPalette(Value, Color, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(899)
inline OLE_COLOR ICustom3DPaletteSeries::GetStartColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_StartColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(900)
inline void ICustom3DPaletteSeries::PutStartColor ( OLE_COLOR Value ) {
    HRESULT _hr = put_StartColor(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(901)
inline OLE_COLOR ICustom3DPaletteSeries::GetEndColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_EndColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(902)
inline void ICustom3DPaletteSeries::PutEndColor ( OLE_COLOR Value ) {
    HRESULT _hr = put_EndColor(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(903)
inline long ICustom3DPaletteSeries::GetPaletteSteps ( ) {
    long _result = 0;
    HRESULT _hr = get_PaletteSteps(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(904)
inline void ICustom3DPaletteSeries::PutPaletteSteps ( long Value ) {
    HRESULT _hr = put_PaletteSteps(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(905)
inline VARIANT_BOOL ICustom3DPaletteSeries::GetUsePalette ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UsePalette(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(906)
inline void ICustom3DPaletteSeries::PutUsePalette ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_UsePalette(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(907)
inline VARIANT_BOOL ICustom3DPaletteSeries::GetUseColorRange ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseColorRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(908)
inline void ICustom3DPaletteSeries::PutUseColorRange ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_UseColorRange(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(909)
inline HRESULT ICustom3DPaletteSeries::ClearPalette ( ) {
    HRESULT _hr = raw_ClearPalette();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(910)
inline HRESULT ICustom3DPaletteSeries::CreateDefaultPalette ( long NumSteps ) {
    HRESULT _hr = raw_CreateDefaultPalette(NumSteps);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(911)
inline OLE_COLOR ICustom3DPaletteSeries::GetSurfacePaletteColor ( double Y ) {
    OLE_COLOR _result;
    HRESULT _hr = raw_GetSurfacePaletteColor(Y, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(912)
inline OLE_COLOR ICustom3DPaletteSeries::GetMidColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_MidColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(913)
inline void ICustom3DPaletteSeries::PutMidColor ( OLE_COLOR Value ) {
    HRESULT _hr = put_MidColor(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(914)
inline HRESULT ICustom3DPaletteSeries::CreateRangePalette ( ) {
    HRESULT _hr = raw_CreateRangePalette();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(915)
inline enum EPaletteStyle ICustom3DPaletteSeries::GetPaletteStyle ( ) {
    enum EPaletteStyle _result;
    HRESULT _hr = get_PaletteStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(916)
inline void ICustom3DPaletteSeries::PutPaletteStyle ( enum EPaletteStyle Value ) {
    HRESULT _hr = put_PaletteStyle(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(917)
inline VARIANT_BOOL ICustom3DPaletteSeries::GetUsePaletteMin ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UsePaletteMin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(918)
inline void ICustom3DPaletteSeries::PutUsePaletteMin ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_UsePaletteMin(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(919)
inline double ICustom3DPaletteSeries::GetPaletteMin ( ) {
    double _result = 0;
    HRESULT _hr = get_PaletteMin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(920)
inline void ICustom3DPaletteSeries::PutPaletteMin ( double Value ) {
    HRESULT _hr = put_PaletteMin(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(921)
inline double ICustom3DPaletteSeries::GetPaletteStep ( ) {
    double _result = 0;
    HRESULT _hr = get_PaletteStep(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(922)
inline void ICustom3DPaletteSeries::PutPaletteStep ( double Value ) {
    HRESULT _hr = put_PaletteStep(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(923)
inline HRESULT ICustom3DPaletteSeries::InvertPalette ( ) {
    HRESULT _hr = raw_InvertPalette();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(924)
inline HRESULT ICustom3DPaletteSeries::AddCustomPalette ( const _variant_t & colorArray ) {
    HRESULT _hr = raw_AddCustomPalette(colorArray);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface ICustom3DGridSeries wrapper method implementations
//

#pragma implementation_key(925)
inline long ICustom3DGridSeries::GetNumXValues ( ) {
    long _result = 0;
    HRESULT _hr = get_NumXValues(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(926)
inline void ICustom3DGridSeries::PutNumXValues ( long Value ) {
    HRESULT _hr = put_NumXValues(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(927)
inline long ICustom3DGridSeries::GetNumZValues ( ) {
    long _result = 0;
    HRESULT _hr = get_NumZValues(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(928)
inline void ICustom3DGridSeries::PutNumZValues ( long Value ) {
    HRESULT _hr = put_NumZValues(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(929)
inline double ICustom3DGridSeries::GetXZValue ( long X, long Z ) {
    double _result = 0;
    HRESULT _hr = raw_GetXZValue(X, Z, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(930)
inline VARIANT_BOOL ICustom3DGridSeries::GetIrregularGrid ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IrregularGrid(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(931)
inline void ICustom3DGridSeries::PutIrregularGrid ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_IrregularGrid(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(932)
inline HRESULT ICustom3DGridSeries::SmoothGrid3D ( ) {
    HRESULT _hr = raw_SmoothGrid3D();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(933)
inline VARIANT_BOOL ICustom3DGridSeries::GetReuseGridIndex ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ReuseGridIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(934)
inline void ICustom3DGridSeries::PutReuseGridIndex ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_ReuseGridIndex(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(935)
inline HRESULT ICustom3DGridSeries::FillGridIndex ( long StartIndex ) {
    HRESULT _hr = raw_FillGridIndex(StartIndex);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface INearestTool wrapper method implementations
//

#pragma implementation_key(936)
inline IBrushPtr INearestTool::GetBrush ( ) {
    struct IBrush * _result = 0;
    HRESULT _hr = get_Brush(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IBrushPtr(_result, false);
}

#pragma implementation_key(937)
inline VARIANT_BOOL INearestTool::GetDrawLine ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DrawLine(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(938)
inline void INearestTool::PutDrawLine ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_DrawLine(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(939)
inline VARIANT_BOOL INearestTool::GetFullRepaint ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_FullRepaint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(940)
inline void INearestTool::PutFullRepaint ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_FullRepaint(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(941)
inline IPenPtr INearestTool::GetPen ( ) {
    struct IPen * _result = 0;
    HRESULT _hr = get_Pen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPenPtr(_result, false);
}

#pragma implementation_key(942)
inline long INearestTool::GetSize ( ) {
    long _result = 0;
    HRESULT _hr = get_Size(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(943)
inline void INearestTool::PutSize ( long Value ) {
    HRESULT _hr = put_Size(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(944)
inline enum ENearestToolStyle INearestTool::GetStyle ( ) {
    enum ENearestToolStyle _result;
    HRESULT _hr = get_Style(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(945)
inline void INearestTool::PutStyle ( enum ENearestToolStyle Value ) {
    HRESULT _hr = put_Style(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(946)
inline long INearestTool::GetPoint ( ) {
    long _result = 0;
    HRESULT _hr = get_Point(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(947)
inline void INearestTool::PutPoint ( long Value ) {
    HRESULT _hr = put_Point(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IColorLineTool wrapper method implementations
//

#pragma implementation_key(948)
inline IPenPtr IColorLineTool::GetPen ( ) {
    struct IPen * _result = 0;
    HRESULT _hr = get_Pen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPenPtr(_result, false);
}

#pragma implementation_key(949)
inline double IColorLineTool::GetValue ( ) {
    double _result = 0;
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(950)
inline void IColorLineTool::PutValue ( double Value ) {
    HRESULT _hr = put_Value(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(951)
inline VARIANT_BOOL IColorLineTool::GetAllowDrag ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AllowDrag(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(952)
inline void IColorLineTool::PutAllowDrag ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_AllowDrag(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(953)
inline VARIANT_BOOL IColorLineTool::Clicked ( long X, long Y ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Clicked(X, Y, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(954)
inline VARIANT_BOOL IColorLineTool::GetDragRepaint ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DragRepaint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(955)
inline void IColorLineTool::PutDragRepaint ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_DragRepaint(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(956)
inline VARIANT_BOOL IColorLineTool::GetNoLimitDrag ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_NoLimitDrag(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(957)
inline void IColorLineTool::PutNoLimitDrag ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_NoLimitDrag(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(958)
inline VARIANT_BOOL IColorLineTool::GetDraw3D ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Draw3D(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(959)
inline void IColorLineTool::PutDraw3D ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Draw3D(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(960)
inline enum EColorLineStyle IColorLineTool::GetStyle ( ) {
    enum EColorLineStyle _result;
    HRESULT _hr = get_Style(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(961)
inline void IColorLineTool::PutStyle ( enum EColorLineStyle Value ) {
    HRESULT _hr = put_Style(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(962)
inline VARIANT_BOOL IColorLineTool::GetDrawBehind ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DrawBehind(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(963)
inline void IColorLineTool::PutDrawBehind ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_DrawBehind(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IContourLevel wrapper method implementations
//

#pragma implementation_key(964)
inline OLE_COLOR IContourLevel::GetColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(965)
inline void IContourLevel::PutColor ( OLE_COLOR Value ) {
    HRESULT _hr = put_Color(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(966)
inline double IContourLevel::GetUpToValue ( ) {
    double _result = 0;
    HRESULT _hr = get_UpToValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(967)
inline void IContourLevel::PutUpToValue ( double Value ) {
    HRESULT _hr = put_UpToValue(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(968)
inline ILevelSegmentPtr IContourLevel::GetSegments ( long Index ) {
    struct ILevelSegment * _result = 0;
    HRESULT _hr = get_Segments(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ILevelSegmentPtr(_result, false);
}

#pragma implementation_key(969)
inline long IContourLevel::GetNumSegments ( ) {
    long _result = 0;
    HRESULT _hr = get_NumSegments(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(970)
inline IPenPtr IContourLevel::GetPen ( ) {
    struct IPen * _result = 0;
    HRESULT _hr = get_Pen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPenPtr(_result, false);
}

#pragma implementation_key(971)
inline HRESULT IContourLevel::ClearSegments ( ) {
    HRESULT _hr = raw_ClearSegments();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(972)
inline VARIANT_BOOL IContourLevel::Clicked ( long XCoord, long YCoord, long * SegmentIndex, long * PointIndex ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Clicked(XCoord, YCoord, SegmentIndex, PointIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(973)
inline VARIANT_BOOL IContourLevel::ClickedSegment ( long XCoord, long YCoord, long SegmentIndex, long * PointIndex ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_ClickedSegment(XCoord, YCoord, SegmentIndex, PointIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(974)
inline VARIANT_BOOL IContourLevel::GetDefaultPen ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DefaultPen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IContourLevels wrapper method implementations
//

#pragma implementation_key(975)
inline IContourLevelPtr IContourLevels::GetItems ( long Index ) {
    struct IContourLevel * _result = 0;
    HRESULT _hr = get_Items(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IContourLevelPtr(_result, false);
}

#pragma implementation_key(976)
inline long IContourLevels::Clicked ( long XCoord, long YCoord, long * SegmentIndex, long * PointIndex ) {
    long _result = 0;
    HRESULT _hr = raw_Clicked(XCoord, YCoord, SegmentIndex, PointIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(977)
inline long IContourLevels::AddLevel ( double LevelValue, OLE_COLOR Color ) {
    long _result = 0;
    HRESULT _hr = raw_AddLevel(LevelValue, Color, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ITriSurfaceSeries wrapper method implementations
//

#pragma implementation_key(978)
inline IPenPtr ITriSurfaceSeries::GetBorder ( ) {
    struct IPen * _result = 0;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPenPtr(_result, false);
}

#pragma implementation_key(979)
inline VARIANT_BOOL ITriSurfaceSeries::GetHideTriangles ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HideTriangles(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(980)
inline void ITriSurfaceSeries::PutHideTriangles ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_HideTriangles(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(981)
inline VARIANT_BOOL ITriSurfaceSeries::GetCacheTriangles ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CacheTriangles(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(982)
inline void ITriSurfaceSeries::PutCacheTriangles ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_CacheTriangles(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IHistogramSeries wrapper method implementations
//

#pragma implementation_key(983)
inline IPenPtr IHistogramSeries::GetLinesPen ( ) {
    struct IPen * _result = 0;
    HRESULT _hr = get_LinesPen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPenPtr(_result, false);
}

#pragma implementation_key(984)
inline long IHistogramSeries::GetTransparency ( ) {
    long _result = 0;
    HRESULT _hr = get_Transparency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(985)
inline void IHistogramSeries::PutTransparency ( long Value ) {
    HRESULT _hr = put_Transparency(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(986)
inline IPenPtr IHistogramSeries::GetLinePen ( ) {
    struct IPen * _result = 0;
    HRESULT _hr = get_LinePen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPenPtr(_result, false);
}

#pragma implementation_key(987)
inline IBrushPtr IHistogramSeries::GetBrush ( ) {
    struct IBrush * _result = 0;
    HRESULT _hr = get_Brush(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IBrushPtr(_result, false);
}

//
// interface ICursorTool wrapper method implementations
//

#pragma implementation_key(988)
inline VARIANT_BOOL ICursorTool::GetFollowMouse ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_FollowMouse(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(989)
inline void ICursorTool::PutFollowMouse ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_FollowMouse(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(990)
inline IPenPtr ICursorTool::GetPen ( ) {
    struct IPen * _result = 0;
    HRESULT _hr = get_Pen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPenPtr(_result, false);
}

#pragma implementation_key(991)
inline VARIANT_BOOL ICursorTool::GetSnap ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Snap(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(992)
inline void ICursorTool::PutSnap ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Snap(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(993)
inline enum ECursorToolStyle ICursorTool::GetStyle ( ) {
    enum ECursorToolStyle _result;
    HRESULT _hr = get_Style(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(994)
inline void ICursorTool::PutStyle ( enum ECursorToolStyle Value ) {
    HRESULT _hr = put_Style(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(995)
inline double ICursorTool::GetXVal ( ) {
    double _result = 0;
    HRESULT _hr = get_XVal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(996)
inline void ICursorTool::PutXVal ( double Value ) {
    HRESULT _hr = put_XVal(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(997)
inline double ICursorTool::GetYVal ( ) {
    double _result = 0;
    HRESULT _hr = get_YVal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(998)
inline void ICursorTool::PutYVal ( double Value ) {
    HRESULT _hr = put_YVal(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(999)
inline long ICursorTool::GetClickTolerance ( ) {
    long _result = 0;
    HRESULT _hr = get_ClickTolerance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1000)
inline void ICursorTool::PutClickTolerance ( long Value ) {
    HRESULT _hr = put_ClickTolerance(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1001)
inline long ICursorTool::GetHorizSize ( ) {
    long _result = 0;
    HRESULT _hr = get_HorizSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1002)
inline void ICursorTool::PutHorizSize ( long Value ) {
    HRESULT _hr = put_HorizSize(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1003)
inline long ICursorTool::GetScopeSize ( ) {
    long _result = 0;
    HRESULT _hr = get_ScopeSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1004)
inline void ICursorTool::PutScopeSize ( long Value ) {
    HRESULT _hr = put_ScopeSize(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1005)
inline enum EScopeCursorStyle ICursorTool::GetScopeStyle ( ) {
    enum EScopeCursorStyle _result;
    HRESULT _hr = get_ScopeStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1006)
inline void ICursorTool::PutScopeStyle ( enum EScopeCursorStyle Value ) {
    HRESULT _hr = put_ScopeStyle(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1007)
inline enum ESnapStyle ICursorTool::GetSnapStyle ( ) {
    enum ESnapStyle _result;
    HRESULT _hr = get_SnapStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1008)
inline void ICursorTool::PutSnapStyle ( enum ESnapStyle Value ) {
    HRESULT _hr = put_SnapStyle(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1009)
inline VARIANT_BOOL ICursorTool::GetUseSeriesZ ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseSeriesZ(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1010)
inline void ICursorTool::PutUseSeriesZ ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_UseSeriesZ(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1011)
inline long ICursorTool::GetVertSize ( ) {
    long _result = 0;
    HRESULT _hr = get_VertSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1012)
inline void ICursorTool::PutVertSize ( long Value ) {
    HRESULT _hr = put_VertSize(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1013)
inline VARIANT_BOOL ICursorTool::GetUseChartRect ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseChartRect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1014)
inline void ICursorTool::PutUseChartRect ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_UseChartRect(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IDrawLine wrapper method implementations
//

#pragma implementation_key(1015)
inline ITeePoint2DPtr IDrawLine::GetEndPos ( ) {
    struct ITeePoint2D * _result = 0;
    HRESULT _hr = get_EndPos(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITeePoint2DPtr(_result, false);
}

#pragma implementation_key(1016)
inline ITeePoint2DPtr IDrawLine::GetStartPos ( ) {
    struct ITeePoint2D * _result = 0;
    HRESULT _hr = get_StartPos(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITeePoint2DPtr(_result, false);
}

#pragma implementation_key(1017)
inline IPenPtr IDrawLine::GetPen ( ) {
    struct IPen * _result = 0;
    HRESULT _hr = get_Pen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPenPtr(_result, false);
}

#pragma implementation_key(1018)
inline HRESULT IDrawLine::DrawHandles ( ) {
    HRESULT _hr = raw_DrawHandles();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1019)
inline struct TeeRect IDrawLine::EndHandle ( ) {
    struct TeeRect _result;
    HRESULT _hr = raw_EndHandle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1020)
inline struct TeeRect IDrawLine::StartHandle ( ) {
    struct TeeRect _result;
    HRESULT _hr = raw_StartHandle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1021)
inline enum EDrawLineStyle IDrawLine::GetStyle ( ) {
    enum EDrawLineStyle _result;
    HRESULT _hr = get_Style(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1022)
inline void IDrawLine::PutStyle ( enum EDrawLineStyle Value ) {
    HRESULT _hr = put_Style(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IDrawLineList wrapper method implementations
//

#pragma implementation_key(1023)
inline IDrawLinePtr IDrawLineList::GetItems ( long Index ) {
    struct IDrawLine * _result = 0;
    HRESULT _hr = get_Items(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDrawLinePtr(_result, false);
}

#pragma implementation_key(1024)
inline _variant_t IDrawLineList::GetControlDefault ( long Index ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ControlDefault(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1025)
inline HRESULT IDrawLineList::Clear ( ) {
    HRESULT _hr = raw_Clear();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1026)
inline HRESULT IDrawLineList::Delete ( long Index ) {
    HRESULT _hr = raw_Delete(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1027)
inline long IDrawLineList::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IDrawLineTool wrapper method implementations
//

#pragma implementation_key(1028)
inline ITeePoint2DPtr IDrawLineTool::GetFromPoint ( ) {
    struct ITeePoint2D * _result = 0;
    HRESULT _hr = get_FromPoint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITeePoint2DPtr(_result, false);
}

#pragma implementation_key(1029)
inline ITeePoint2DPtr IDrawLineTool::GetToPoint ( ) {
    struct ITeePoint2D * _result = 0;
    HRESULT _hr = get_ToPoint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITeePoint2DPtr(_result, false);
}

#pragma implementation_key(1030)
inline ITeePoint2DPtr IDrawLineTool::AxisPoint ( double X, double Y ) {
    struct ITeePoint2D * _result = 0;
    HRESULT _hr = raw_AxisPoint(X, Y, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITeePoint2DPtr(_result, false);
}

#pragma implementation_key(1031)
inline long IDrawLineTool::Clicked ( long X, long Y ) {
    long _result = 0;
    HRESULT _hr = raw_Clicked(X, Y, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1032)
inline HRESULT IDrawLineTool::DeleteSelected ( ) {
    HRESULT _hr = raw_DeleteSelected();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1033)
inline ITeePoint2DPtr IDrawLineTool::ScreenPoint ( long X, long Y ) {
    struct ITeePoint2D * _result = 0;
    HRESULT _hr = raw_ScreenPoint(X, Y, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITeePoint2DPtr(_result, false);
}

#pragma implementation_key(1034)
inline IDrawLineListPtr IDrawLineTool::GetLines ( ) {
    struct IDrawLineList * _result = 0;
    HRESULT _hr = get_Lines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDrawLineListPtr(_result, false);
}

#pragma implementation_key(1035)
inline long IDrawLineTool::GetSelected ( ) {
    long _result = 0;
    HRESULT _hr = get_Selected(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1036)
inline void IDrawLineTool::PutSelected ( long Index ) {
    HRESULT _hr = put_Selected(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1037)
inline enum EMouseButton IDrawLineTool::GetButton ( ) {
    enum EMouseButton _result;
    HRESULT _hr = get_Button(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1038)
inline void IDrawLineTool::PutButton ( enum EMouseButton Value ) {
    HRESULT _hr = put_Button(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1039)
inline VARIANT_BOOL IDrawLineTool::GetEnableDraw ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnableDraw(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1040)
inline void IDrawLineTool::PutEnableDraw ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_EnableDraw(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1041)
inline VARIANT_BOOL IDrawLineTool::GetEnableSelect ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnableSelect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1042)
inline void IDrawLineTool::PutEnableSelect ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_EnableSelect(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1043)
inline IPenPtr IDrawLineTool::GetPen ( ) {
    struct IPen * _result = 0;
    HRESULT _hr = get_Pen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPenPtr(_result, false);
}

#pragma implementation_key(1044)
inline long IDrawLineTool::AddLine ( double FromX, double FromY, double ToX, double ToY ) {
    long _result = 0;
    HRESULT _hr = raw_AddLine(FromX, FromY, ToX, ToY, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1045)
inline long IDrawLineTool::GetClickTolerance ( ) {
    long _result = 0;
    HRESULT _hr = get_ClickTolerance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1046)
inline void IDrawLineTool::PutClickTolerance ( long Value ) {
    HRESULT _hr = put_ClickTolerance(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1047)
inline VARIANT_BOOL IDrawLineTool::GetSelectNewLines ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SelectNewLines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1048)
inline void IDrawLineTool::PutSelectNewLines ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_SelectNewLines(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1049)
inline enum EDrawLineStyle IDrawLineTool::GetStyle ( ) {
    enum EDrawLineStyle _result;
    HRESULT _hr = get_Style(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1050)
inline void IDrawLineTool::PutStyle ( enum EDrawLineStyle Value ) {
    HRESULT _hr = put_Style(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1051)
inline long IDrawLineTool::ClickedTolerance ( long X, long Y, long ClickTolerance ) {
    long _result = 0;
    HRESULT _hr = raw_ClickedTolerance(X, Y, ClickTolerance, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAxisArrowTool wrapper method implementations
//

#pragma implementation_key(1052)
inline enum EAxisArrowToolPosition IAxisArrowTool::GetPosition ( ) {
    enum EAxisArrowToolPosition _result;
    HRESULT _hr = get_Position(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1053)
inline void IAxisArrowTool::PutPosition ( enum EAxisArrowToolPosition Value ) {
    HRESULT _hr = put_Position(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1054)
inline IBrushPtr IAxisArrowTool::GetBrush ( ) {
    struct IBrush * _result = 0;
    HRESULT _hr = get_Brush(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IBrushPtr(_result, false);
}

#pragma implementation_key(1055)
inline long IAxisArrowTool::GetLength ( ) {
    long _result = 0;
    HRESULT _hr = get_Length(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1056)
inline void IAxisArrowTool::PutLength ( long Value ) {
    HRESULT _hr = put_Length(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1057)
inline IPenPtr IAxisArrowTool::GetPen ( ) {
    struct IPen * _result = 0;
    HRESULT _hr = get_Pen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPenPtr(_result, false);
}

#pragma implementation_key(1058)
inline long IAxisArrowTool::GetScrollPercent ( ) {
    long _result = 0;
    HRESULT _hr = get_ScrollPercent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1059)
inline void IAxisArrowTool::PutScrollPercent ( long Value ) {
    HRESULT _hr = put_ScrollPercent(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1060)
inline VARIANT_BOOL IAxisArrowTool::GetScrollInverted ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ScrollInverted(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1061)
inline void IAxisArrowTool::PutScrollInverted ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_ScrollInverted(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1062)
inline long IAxisArrowTool::GetHeadWidth ( ) {
    long _result = 0;
    HRESULT _hr = get_HeadWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1063)
inline void IAxisArrowTool::PutHeadWidth ( long Value ) {
    HRESULT _hr = put_HeadWidth(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1064)
inline long IAxisArrowTool::GetSizePercent ( ) {
    long _result = 0;
    HRESULT _hr = get_SizePercent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1065)
inline void IAxisArrowTool::PutSizePercent ( long Value ) {
    HRESULT _hr = put_SizePercent(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IChartImageTool wrapper method implementations
//

#pragma implementation_key(1066)
inline HRESULT IChartImageTool::ImageLoad ( _bstr_t FileName ) {
    HRESULT _hr = raw_ImageLoad(FileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1067)
inline HRESULT IChartImageTool::ImageClear ( ) {
    HRESULT _hr = raw_ImageClear();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1068)
inline IPenPtr IChartImageTool::GetPen ( ) {
    struct IPen * _result = 0;
    HRESULT _hr = get_Pen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPenPtr(_result, false);
}

//
// interface IFunnelSeries wrapper method implementations
//

#pragma implementation_key(1069)
inline long IFunnelSeries::AddSegment ( double AQuote, double AOpportunity, _bstr_t ALabel, OLE_COLOR AColor ) {
    long _result = 0;
    HRESULT _hr = raw_AddSegment(AQuote, AOpportunity, ALabel, AColor, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1070)
inline HRESULT IFunnelSeries::Recalc ( ) {
    HRESULT _hr = raw_Recalc();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1071)
inline IBrushPtr IFunnelSeries::GetBrush ( ) {
    struct IBrush * _result = 0;
    HRESULT _hr = get_Brush(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IBrushPtr(_result, false);
}

#pragma implementation_key(1072)
inline IPenPtr IFunnelSeries::GetPen ( ) {
    struct IPen * _result = 0;
    HRESULT _hr = get_Pen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPenPtr(_result, false);
}

#pragma implementation_key(1073)
inline IPenPtr IFunnelSeries::GetLinesPen ( ) {
    struct IPen * _result = 0;
    HRESULT _hr = get_LinesPen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPenPtr(_result, false);
}

#pragma implementation_key(1074)
inline VARIANT_BOOL IFunnelSeries::GetAutoUpdate ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoUpdate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1075)
inline void IFunnelSeries::PutAutoUpdate ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_AutoUpdate(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1076)
inline VARIANT_BOOL IFunnelSeries::GetQuotesSorted ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_QuotesSorted(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1077)
inline void IFunnelSeries::PutQuotesSorted ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_QuotesSorted(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1078)
inline double IFunnelSeries::GetDifferenceLimit ( ) {
    double _result = 0;
    HRESULT _hr = get_DifferenceLimit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1079)
inline void IFunnelSeries::PutDifferenceLimit ( double Value ) {
    HRESULT _hr = put_DifferenceLimit(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1080)
inline OLE_COLOR IFunnelSeries::GetAboveColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_AboveColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1081)
inline void IFunnelSeries::PutAboveColor ( OLE_COLOR Value ) {
    HRESULT _hr = put_AboveColor(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1082)
inline OLE_COLOR IFunnelSeries::GetWithinColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_WithinColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1083)
inline void IFunnelSeries::PutWithinColor ( OLE_COLOR Value ) {
    HRESULT _hr = put_WithinColor(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1084)
inline OLE_COLOR IFunnelSeries::GetBelowColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_BelowColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1085)
inline void IFunnelSeries::PutBelowColor ( OLE_COLOR Value ) {
    HRESULT _hr = put_BelowColor(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1086)
inline IValueListPtr IFunnelSeries::GetOpportunityValues ( ) {
    struct IValueList * _result = 0;
    HRESULT _hr = get_OpportunityValues(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IValueListPtr(_result, false);
}

#pragma implementation_key(1087)
inline IValueListPtr IFunnelSeries::GetQuoteValues ( ) {
    struct IValueList * _result = 0;
    HRESULT _hr = get_QuoteValues(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IValueListPtr(_result, false);
}

//
// interface IPieTool wrapper method implementations
//

#pragma implementation_key(1088)
inline IPenPtr IPieTool::GetPen ( ) {
    struct IPen * _result = 0;
    HRESULT _hr = get_Pen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPenPtr(_result, false);
}

#pragma implementation_key(1089)
inline enum EPieToolStyle IPieTool::GetStyle ( ) {
    enum EPieToolStyle _result;
    HRESULT _hr = get_Style(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1090)
inline void IPieTool::PutStyle ( enum EPieToolStyle Value ) {
    HRESULT _hr = put_Style(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1091)
inline long IPieTool::GetSlice ( ) {
    long _result = 0;
    HRESULT _hr = get_Slice(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IVector3DSeries wrapper method implementations
//

#pragma implementation_key(1092)
inline long IVector3DSeries::AddVector ( double X0, double Y0, double Z0, double X1, double Y1, double Z1, _bstr_t ALabel, OLE_COLOR AColor ) {
    long _result = 0;
    HRESULT _hr = raw_AddVector(X0, Y0, Z0, X1, Y1, Z1, ALabel, AColor, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1093)
inline long IVector3DSeries::GetArrowHeight ( ) {
    long _result = 0;
    HRESULT _hr = get_ArrowHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1094)
inline void IVector3DSeries::PutArrowHeight ( long Value ) {
    HRESULT _hr = put_ArrowHeight(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1095)
inline long IVector3DSeries::GetArrowWidth ( ) {
    long _result = 0;
    HRESULT _hr = get_ArrowWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1096)
inline void IVector3DSeries::PutArrowWidth ( long Value ) {
    HRESULT _hr = put_ArrowWidth(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1097)
inline IPenPtr IVector3DSeries::GetEndArrow ( ) {
    struct IPen * _result = 0;
    HRESULT _hr = get_EndArrow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPenPtr(_result, false);
}

#pragma implementation_key(1098)
inline IValueListPtr IVector3DSeries::GetEndXValues ( ) {
    struct IValueList * _result = 0;
    HRESULT _hr = get_EndXValues(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IValueListPtr(_result, false);
}

#pragma implementation_key(1099)
inline IValueListPtr IVector3DSeries::GetEndYValues ( ) {
    struct IValueList * _result = 0;
    HRESULT _hr = get_EndYValues(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IValueListPtr(_result, false);
}

#pragma implementation_key(1100)
inline IValueListPtr IVector3DSeries::GetEndZValues ( ) {
    struct IValueList * _result = 0;
    HRESULT _hr = get_EndZValues(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IValueListPtr(_result, false);
}

#pragma implementation_key(1101)
inline double IVector3DSeries::MinXValueVector ( ) {
    double _result = 0;
    HRESULT _hr = raw_MinXValueVector(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1102)
inline double IVector3DSeries::MaxXValueVector ( ) {
    double _result = 0;
    HRESULT _hr = raw_MaxXValueVector(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1103)
inline double IVector3DSeries::MinYValueVector ( ) {
    double _result = 0;
    HRESULT _hr = raw_MinYValueVector(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1104)
inline double IVector3DSeries::MaxYValueVector ( ) {
    double _result = 0;
    HRESULT _hr = raw_MaxYValueVector(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1105)
inline double IVector3DSeries::MinZValueVector ( ) {
    double _result = 0;
    HRESULT _hr = raw_MinZValueVector(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1106)
inline double IVector3DSeries::MaxZValueVector ( ) {
    double _result = 0;
    HRESULT _hr = raw_MaxZValueVector(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1107)
inline IPenPtr IVector3DSeries::GetStartArrow ( ) {
    struct IPen * _result = 0;
    HRESULT _hr = get_StartArrow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPenPtr(_result, false);
}

//
// interface ITowerSeries wrapper method implementations
//

#pragma implementation_key(1108)
inline long ITowerSeries::Clicked ( long X, long Y ) {
    long _result = 0;
    HRESULT _hr = raw_Clicked(X, Y, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1109)
inline VARIANT_BOOL ITowerSeries::GetDark3D ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Dark3D(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1110)
inline void ITowerSeries::PutDark3D ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Dark3D(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1111)
inline long ITowerSeries::GetPercentDepth ( ) {
    long _result = 0;
    HRESULT _hr = get_PercentDepth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1112)
inline void ITowerSeries::PutPercentDepth ( long Value ) {
    HRESULT _hr = put_PercentDepth(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1113)
inline double ITowerSeries::GetOrigin ( ) {
    double _result = 0;
    HRESULT _hr = get_Origin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1114)
inline void ITowerSeries::PutOrigin ( double Value ) {
    HRESULT _hr = put_Origin(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1115)
inline enum ETowerStyle ITowerSeries::GetTowerStyle ( ) {
    enum ETowerStyle _result;
    HRESULT _hr = get_TowerStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1116)
inline void ITowerSeries::PutTowerStyle ( enum ETowerStyle Value ) {
    HRESULT _hr = put_TowerStyle(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1117)
inline long ITowerSeries::GetTransparency ( ) {
    long _result = 0;
    HRESULT _hr = get_Transparency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1118)
inline void ITowerSeries::PutTransparency ( long Value ) {
    HRESULT _hr = put_Transparency(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1119)
inline long ITowerSeries::GetPercentWidth ( ) {
    long _result = 0;
    HRESULT _hr = get_PercentWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1120)
inline void ITowerSeries::PutPercentWidth ( long Value ) {
    HRESULT _hr = put_PercentWidth(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1121)
inline VARIANT_BOOL ITowerSeries::GetUseOrigin ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseOrigin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1122)
inline void ITowerSeries::PutUseOrigin ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_UseOrigin(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1123)
inline double ITowerSeries::MinXValueTower ( ) {
    double _result = 0;
    HRESULT _hr = raw_MinXValueTower(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1124)
inline double ITowerSeries::MaxXValueTower ( ) {
    double _result = 0;
    HRESULT _hr = raw_MaxXValueTower(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1125)
inline double ITowerSeries::MinZValueTower ( ) {
    double _result = 0;
    HRESULT _hr = raw_MinZValueTower(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1126)
inline double ITowerSeries::MaxZValueTower ( ) {
    double _result = 0;
    HRESULT _hr = raw_MaxZValueTower(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ISelectorTool wrapper method implementations
//

#pragma implementation_key(1127)
inline VARIANT_BOOL ISelectorTool::GetAllowDrag ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AllowDrag(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1128)
inline void ISelectorTool::PutAllowDrag ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_AllowDrag(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1129)
inline VARIANT_BOOL ISelectorTool::GetAllowResizeChart ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AllowResizeChart(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1130)
inline void ISelectorTool::PutAllowResizeChart ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_AllowResizeChart(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1131)
inline IBrushPtr ISelectorTool::GetBrush ( ) {
    struct IBrush * _result = 0;
    HRESULT _hr = get_Brush(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IBrushPtr(_result, false);
}

#pragma implementation_key(1132)
inline long ISelectorTool::GetHandleSize ( ) {
    long _result = 0;
    HRESULT _hr = get_HandleSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1133)
inline void ISelectorTool::PutHandleSize ( long Value ) {
    HRESULT _hr = put_HandleSize(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1134)
inline IPenPtr ISelectorTool::GetPen ( ) {
    struct IPen * _result = 0;
    HRESULT _hr = get_Pen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPenPtr(_result, false);
}

//
// interface ISurfaceSides wrapper method implementations
//

#pragma implementation_key(1135)
inline IBrushPtr ISurfaceSides::GetBrush ( ) {
    struct IBrush * _result = 0;
    HRESULT _hr = get_Brush(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IBrushPtr(_result, false);
}

#pragma implementation_key(1136)
inline VARIANT_BOOL ISurfaceSides::GetLevels ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Levels(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1137)
inline void ISurfaceSides::PutLevels ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Levels(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1138)
inline IPenPtr ISurfaceSides::GetPen ( ) {
    struct IPen * _result = 0;
    HRESULT _hr = get_Pen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPenPtr(_result, false);
}

//
// interface IChartAxisPen wrapper method implementations
//

#pragma implementation_key(1139)
inline enum EPenLineMode IChartAxisPen::GetLineMode ( ) {
    enum EPenLineMode _result;
    HRESULT _hr = get_LineMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1140)
inline void IChartAxisPen::PutLineMode ( enum EPenLineMode Value ) {
    HRESULT _hr = put_LineMode(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ITeeListBoxSection wrapper method implementations
//

#pragma implementation_key(1141)
inline long ITeeListBoxSection::GetWidth ( ) {
    long _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1142)
inline void ITeeListBoxSection::PutWidth ( long Value ) {
    HRESULT _hr = put_Width(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1143)
inline VARIANT_BOOL ITeeListBoxSection::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1144)
inline void ITeeListBoxSection::PutVisible ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Visible(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IFaderTool wrapper method implementations
//

#pragma implementation_key(1145)
inline HRESULT IFaderTool::Start ( ) {
    HRESULT _hr = raw_Start();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1146)
inline HRESULT IFaderTool::Stop ( ) {
    HRESULT _hr = raw_Stop();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1147)
inline OLE_COLOR IFaderTool::GetColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1148)
inline void IFaderTool::PutColor ( OLE_COLOR Value ) {
    HRESULT _hr = put_Color(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1149)
inline long IFaderTool::GetInitialDelay ( ) {
    long _result = 0;
    HRESULT _hr = get_InitialDelay(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1150)
inline void IFaderTool::PutInitialDelay ( long Value ) {
    HRESULT _hr = put_InitialDelay(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1151)
inline double IFaderTool::GetSpeed ( ) {
    double _result = 0;
    HRESULT _hr = get_Speed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1152)
inline void IFaderTool::PutSpeed ( double Value ) {
    HRESULT _hr = put_Speed(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1153)
inline enum EFaderStyle IFaderTool::GetStyle ( ) {
    enum EFaderStyle _result;
    HRESULT _hr = get_Style(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1154)
inline void IFaderTool::PutStyle ( enum EFaderStyle Value ) {
    HRESULT _hr = put_Style(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ISurfaceSeries wrapper method implementations
//

#pragma implementation_key(1155)
inline VARIANT_BOOL ISurfaceSeries::GetDotFrame ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DotFrame(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1156)
inline void ISurfaceSeries::PutDotFrame ( VARIANT_BOOL DotFrame ) {
    HRESULT _hr = put_DotFrame(DotFrame);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1157)
inline VARIANT_BOOL ISurfaceSeries::GetWireFrame ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_WireFrame(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1158)
inline void ISurfaceSeries::PutWireFrame ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_WireFrame(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1159)
inline IBrushPtr ISurfaceSeries::GetSideBrush ( ) {
    struct IBrush * _result = 0;
    HRESULT _hr = get_SideBrush(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IBrushPtr(_result, false);
}

#pragma implementation_key(1160)
inline VARIANT_BOOL ISurfaceSeries::GetSmoothPalette ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SmoothPalette(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1161)
inline void ISurfaceSeries::PutSmoothPalette ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_SmoothPalette(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1162)
inline long ISurfaceSeries::GetTransparency ( ) {
    long _result = 0;
    HRESULT _hr = get_Transparency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1163)
inline void ISurfaceSeries::PutTransparency ( long Value ) {
    HRESULT _hr = put_Transparency(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1164)
inline VARIANT_BOOL ISurfaceSeries::GetFastBrush ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_FastBrush(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1165)
inline void ISurfaceSeries::PutFastBrush ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_FastBrush(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1166)
inline VARIANT_BOOL ISurfaceSeries::GetHideCells ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HideCells(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1167)
inline void ISurfaceSeries::PutHideCells ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_HideCells(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1168)
inline IChartHiddenPenPtr ISurfaceSeries::GetSideLines ( ) {
    struct IChartHiddenPen * _result = 0;
    HRESULT _hr = get_SideLines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IChartHiddenPenPtr(_result, false);
}

//
// interface IWaterfallSeries wrapper method implementations
//

#pragma implementation_key(1169)
inline VARIANT_BOOL IWaterfallSeries::GetWaterfall ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Waterfall(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1170)
inline void IWaterfallSeries::PutWaterfall ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Waterfall(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1171)
inline IPenPtr IWaterfallSeries::GetWaterLines ( ) {
    struct IPen * _result = 0;
    HRESULT _hr = get_WaterLines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPenPtr(_result, false);
}

//
// interface IIsoSurfaceSeries wrapper method implementations
//

#pragma implementation_key(1172)
inline VARIANT_BOOL IIsoSurfaceSeries::GetUseYPosition ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseYPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1173)
inline void IIsoSurfaceSeries::PutUseYPosition ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_UseYPosition(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1174)
inline double IIsoSurfaceSeries::GetYPosition ( ) {
    double _result = 0;
    HRESULT _hr = get_YPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1175)
inline void IIsoSurfaceSeries::PutYPosition ( double Value ) {
    HRESULT _hr = put_YPosition(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1176)
inline IPenPtr IIsoSurfaceSeries::GetBandPen ( ) {
    struct IPen * _result = 0;
    HRESULT _hr = get_BandPen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPenPtr(_result, false);
}

#pragma implementation_key(1177)
inline ISurfaceSidesPtr IIsoSurfaceSeries::GetSides ( ) {
    struct ISurfaceSides * _result = 0;
    HRESULT _hr = get_Sides(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISurfaceSidesPtr(_result, false);
}

//
// interface IFloatXYZ wrapper method implementations
//

#pragma implementation_key(1178)
inline double IFloatXYZ::GetX ( ) {
    double _result = 0;
    HRESULT _hr = get_X(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1179)
inline void IFloatXYZ::PutX ( double Value ) {
    HRESULT _hr = put_X(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1180)
inline double IFloatXYZ::GetY ( ) {
    double _result = 0;
    HRESULT _hr = get_Y(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1181)
inline void IFloatXYZ::PutY ( double Value ) {
    HRESULT _hr = put_Y(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1182)
inline double IFloatXYZ::GetZ ( ) {
    double _result = 0;
    HRESULT _hr = get_Z(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1183)
inline void IFloatXYZ::PutZ ( double Value ) {
    HRESULT _hr = put_Z(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IColorGridSeries wrapper method implementations
//

#pragma implementation_key(1184)
inline double IColorGridSeries::MaxXValue ( ) {
    double _result = 0;
    HRESULT _hr = raw_MaxXValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1185)
inline double IColorGridSeries::MaxYValue ( ) {
    double _result = 0;
    HRESULT _hr = raw_MaxYValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1186)
inline double IColorGridSeries::MinYValue ( ) {
    double _result = 0;
    HRESULT _hr = raw_MinYValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1187)
inline VARIANT_BOOL IColorGridSeries::GetCenteredPoints ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CenteredPoints(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1188)
inline void IColorGridSeries::PutCenteredPoints ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_CenteredPoints(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1189)
inline void IColorGridSeries::PutBitmap ( long _arg1 ) {
    HRESULT _hr = put_Bitmap(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1190)
inline VARIANT_BOOL IColorGridSeries::GetSmoothBitmap ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SmoothBitmap(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1191)
inline void IColorGridSeries::PutSmoothBitmap ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_SmoothBitmap(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1192)
inline long IColorGridSeries::GetTransparency ( ) {
    long _result = 0;
    HRESULT _hr = get_Transparency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1193)
inline void IColorGridSeries::PutTransparency ( long Value ) {
    HRESULT _hr = put_Transparency(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1194)
inline enum ECanvas3DPlane IColorGridSeries::GetDrawPlane3D ( ) {
    enum ECanvas3DPlane _result;
    HRESULT _hr = get_DrawPlane3D(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1195)
inline void IColorGridSeries::PutDrawPlane3D ( enum ECanvas3DPlane Value ) {
    HRESULT _hr = put_DrawPlane3D(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1196)
inline long IColorGridSeries::GetDrawPosition ( ) {
    long _result = 0;
    HRESULT _hr = get_DrawPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1197)
inline void IColorGridSeries::PutDrawPosition ( long Value ) {
    HRESULT _hr = put_DrawPosition(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1198)
inline IChartHiddenPenPtr IColorGridSeries::GetFrame ( ) {
    struct IChartHiddenPen * _result = 0;
    HRESULT _hr = get_Frame(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IChartHiddenPenPtr(_result, false);
}

#pragma implementation_key(1199)
inline long IColorGridSeries::GetXGridEvery ( ) {
    long _result = 0;
    HRESULT _hr = get_XGridEvery(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1200)
inline void IColorGridSeries::PutXGridEvery ( long Value ) {
    HRESULT _hr = put_XGridEvery(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1201)
inline long IColorGridSeries::GetZGridEvery ( ) {
    long _result = 0;
    HRESULT _hr = get_ZGridEvery(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1202)
inline void IColorGridSeries::PutZGridEvery ( long Value ) {
    HRESULT _hr = put_ZGridEvery(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IRotateTool wrapper method implementations
//

#pragma implementation_key(1203)
inline VARIANT_BOOL IRotateTool::GetActive ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Active(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1204)
inline void IRotateTool::PutActive ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Active(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1205)
inline enum EMouseButton IRotateTool::GetButton ( ) {
    enum EMouseButton _result;
    HRESULT _hr = get_Button(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1206)
inline void IRotateTool::PutButton ( enum EMouseButton Value ) {
    HRESULT _hr = put_Button(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1207)
inline _bstr_t IRotateTool::Description ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1208)
inline IPenPtr IRotateTool::GetOutline ( ) {
    struct IPen * _result = 0;
    HRESULT _hr = get_Outline(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPenPtr(_result, false);
}

#pragma implementation_key(1209)
inline short IRotateTool::GetCursor ( ) {
    short _result = 0;
    HRESULT _hr = get_Cursor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1210)
inline void IRotateTool::PutCursor ( short Value ) {
    HRESULT _hr = put_Cursor(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1211)
inline long IRotateTool::GetInertia ( ) {
    long _result = 0;
    HRESULT _hr = get_Inertia(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1212)
inline void IRotateTool::PutInertia ( long Value ) {
    HRESULT _hr = put_Inertia(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1213)
inline VARIANT_BOOL IRotateTool::GetInverted ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Inverted(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1214)
inline void IRotateTool::PutInverted ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Inverted(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1215)
inline long IRotateTool::GetSpeed ( ) {
    long _result = 0;
    HRESULT _hr = get_Speed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1216)
inline void IRotateTool::PutSpeed ( long Value ) {
    HRESULT _hr = put_Speed(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1217)
inline enum ERotateToolStyle IRotateTool::GetStyle ( ) {
    enum ERotateToolStyle _result;
    HRESULT _hr = get_Style(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1218)
inline void IRotateTool::PutStyle ( enum ERotateToolStyle Value ) {
    HRESULT _hr = put_Style(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ITeePicture wrapper method implementations
//

#pragma implementation_key(1219)
inline IFilterItemsPtr ITeePicture::GetFilters ( ) {
    struct IFilterItems * _result = 0;
    HRESULT _hr = get_Filters(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IFilterItemsPtr(_result, false);
}

#pragma implementation_key(1220)
inline HRESULT ITeePicture::LoadImage ( _bstr_t FileName ) {
    HRESULT _hr = raw_LoadImage(FileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1221)
inline HRESULT ITeePicture::AssignImage ( long ImageHandle ) {
    HRESULT _hr = raw_AssignImage(ImageHandle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1222)
inline HRESULT ITeePicture::ClearImage ( ) {
    HRESULT _hr = raw_ClearImage();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1223)
inline VARIANT_BOOL ITeePicture::ShowFiltersEditor ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_ShowFiltersEditor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1224)
inline long ITeePicture::GetHandle ( ) {
    long _result = 0;
    HRESULT _hr = get_Handle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1225)
inline HRESULT ITeePicture::SaveToFile ( _bstr_t FileName ) {
    HRESULT _hr = raw_SaveToFile(FileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IVideoPlayerTool wrapper method implementations
//

#pragma implementation_key(1226)
inline VARIANT_BOOL IVideoPlayerTool::GetPaused ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Paused(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1227)
inline ITeePicturePtr IVideoPlayerTool::GetImage ( ) {
    struct ITeePicture * _result = 0;
    HRESULT _hr = get_Image(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITeePicturePtr(_result, false);
}

#pragma implementation_key(1228)
inline VARIANT_BOOL IVideoPlayerTool::GetPlaying ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Playing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1229)
inline long IVideoPlayerTool::GetPosition ( ) {
    long _result = 0;
    HRESULT _hr = get_Position(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1230)
inline void IVideoPlayerTool::PutPosition ( long Value ) {
    HRESULT _hr = put_Position(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1231)
inline long IVideoPlayerTool::GetStartFrame ( ) {
    long _result = 0;
    HRESULT _hr = get_StartFrame(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1232)
inline long IVideoPlayerTool::GetEndFrame ( ) {
    long _result = 0;
    HRESULT _hr = get_EndFrame(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1233)
inline long IVideoPlayerTool::GetDelay ( ) {
    long _result = 0;
    HRESULT _hr = get_Delay(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1234)
inline void IVideoPlayerTool::PutDelay ( long Value ) {
    HRESULT _hr = put_Delay(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1235)
inline _bstr_t IVideoPlayerTool::GetFileName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FileName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1236)
inline void IVideoPlayerTool::PutFileName ( _bstr_t Value ) {
    HRESULT _hr = put_FileName(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1237)
inline VARIANT_BOOL IVideoPlayerTool::GetLoop ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Loop(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1238)
inline void IVideoPlayerTool::PutLoop ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Loop(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1239)
inline IFilterItemsPtr IVideoPlayerTool::GetFilters ( ) {
    struct IFilterItems * _result = 0;
    HRESULT _hr = get_Filters(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IFilterItemsPtr(_result, false);
}

#pragma implementation_key(1240)
inline HRESULT IVideoPlayerTool::Pause ( ) {
    HRESULT _hr = raw_Pause();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1241)
inline HRESULT IVideoPlayerTool::Play ( ) {
    HRESULT _hr = raw_Play();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1242)
inline HRESULT IVideoPlayerTool::Stop ( ) {
    HRESULT _hr = raw_Stop();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IAntiAliasTool wrapper method implementations
//

#pragma implementation_key(1243)
inline ITeePicturePtr IAntiAliasTool::GetBitmap ( ) {
    struct ITeePicture * _result = 0;
    HRESULT _hr = get_Bitmap(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITeePicturePtr(_result, false);
}

#pragma implementation_key(1244)
inline IFilterItemsPtr IAntiAliasTool::GetFilters ( ) {
    struct IFilterItems * _result = 0;
    HRESULT _hr = get_Filters(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IFilterItemsPtr(_result, false);
}

#pragma implementation_key(1245)
inline VARIANT_BOOL IAntiAliasTool::GetAntialias ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Antialias(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1246)
inline void IAntiAliasTool::PutAntialias ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Antialias(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IFrameTool wrapper method implementations
//

#pragma implementation_key(1247)
inline VARIANT_BOOL IFrameTool::GetResizeChart ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ResizeChart(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1248)
inline void IFrameTool::PutResizeChart ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_ResizeChart(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1249)
inline long IFrameTool::GetSize ( ) {
    long _result = 0;
    HRESULT _hr = get_Size(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1250)
inline void IFrameTool::PutSize ( long Value ) {
    HRESULT _hr = put_Size(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1251)
inline long IFrameTool::GetStyle ( ) {
    long _result = 0;
    HRESULT _hr = get_Style(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1252)
inline void IFrameTool::PutStyle ( long Value ) {
    HRESULT _hr = put_Style(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1253)
inline IPenPtr IFrameTool::GetPen ( ) {
    struct IPen * _result = 0;
    HRESULT _hr = get_Pen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPenPtr(_result, false);
}

#pragma implementation_key(1254)
inline long IFrameTool::GetPaspartou ( ) {
    long _result = 0;
    HRESULT _hr = get_Paspartou(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1255)
inline void IFrameTool::PutPaspartou ( long Value ) {
    HRESULT _hr = put_Paspartou(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1256)
inline ITeePicturePtr IFrameTool::GetFrame ( ) {
    struct ITeePicture * _result = 0;
    HRESULT _hr = get_Frame(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITeePicturePtr(_result, false);
}

#pragma implementation_key(1257)
inline IBrushPtr IFrameTool::GetBrush ( ) {
    struct IBrush * _result = 0;
    HRESULT _hr = get_Brush(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IBrushPtr(_result, false);
}

//
// interface IBackImage wrapper method implementations
//

#pragma implementation_key(1258)
inline VARIANT_BOOL IBackImage::GetInside ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Inside(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1259)
inline void IBackImage::PutInside ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Inside(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1260)
inline long IBackImage::GetLeft ( ) {
    long _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1261)
inline void IBackImage::PutLeft ( long Value ) {
    HRESULT _hr = put_Left(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1262)
inline long IBackImage::GetTop ( ) {
    long _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1263)
inline void IBackImage::PutTop ( long Value ) {
    HRESULT _hr = put_Top(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1264)
inline enum EBackImageMode IBackImage::GetMode ( ) {
    enum EBackImageMode _result;
    HRESULT _hr = get_Mode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1265)
inline void IBackImage::PutMode ( enum EBackImageMode Value ) {
    HRESULT _hr = put_Mode(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IPrinterSettings wrapper method implementations
//

#pragma implementation_key(1266)
inline short IPrinterSettings::GetOrientation ( ) {
    short _result = 0;
    HRESULT _hr = get_Orientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1267)
inline void IPrinterSettings::PutOrientation ( short Value ) {
    HRESULT _hr = put_Orientation(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1268)
inline short IPrinterSettings::GetPaperSize ( ) {
    short _result = 0;
    HRESULT _hr = get_PaperSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1269)
inline void IPrinterSettings::PutPaperSize ( short Value ) {
    HRESULT _hr = put_PaperSize(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1270)
inline short IPrinterSettings::GetPaperLength ( ) {
    short _result = 0;
    HRESULT _hr = get_PaperLength(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1271)
inline void IPrinterSettings::PutPaperLength ( short Value ) {
    HRESULT _hr = put_PaperLength(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1272)
inline short IPrinterSettings::GetPaperWidth ( ) {
    short _result = 0;
    HRESULT _hr = get_PaperWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1273)
inline void IPrinterSettings::PutPaperWidth ( short Value ) {
    HRESULT _hr = put_PaperWidth(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1274)
inline short IPrinterSettings::GetCopies ( ) {
    short _result = 0;
    HRESULT _hr = get_Copies(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1275)
inline void IPrinterSettings::PutCopies ( short Value ) {
    HRESULT _hr = put_Copies(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1276)
inline short IPrinterSettings::GetPrintQuality ( ) {
    short _result = 0;
    HRESULT _hr = get_PrintQuality(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1277)
inline void IPrinterSettings::PutPrintQuality ( short Value ) {
    HRESULT _hr = put_PrintQuality(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1278)
inline short IPrinterSettings::GetColor ( ) {
    short _result = 0;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1279)
inline void IPrinterSettings::PutColor ( short Value ) {
    HRESULT _hr = put_Color(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1280)
inline short IPrinterSettings::GetDuplex ( ) {
    short _result = 0;
    HRESULT _hr = get_Duplex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1281)
inline void IPrinterSettings::PutDuplex ( short Value ) {
    HRESULT _hr = put_Duplex(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1282)
inline short IPrinterSettings::GetScale ( ) {
    short _result = 0;
    HRESULT _hr = get_Scale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1283)
inline void IPrinterSettings::PutScale ( short Value ) {
    HRESULT _hr = put_Scale(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1284)
inline short IPrinterSettings::GetDefaultSource ( ) {
    short _result = 0;
    HRESULT _hr = get_DefaultSource(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1285)
inline void IPrinterSettings::PutDefaultSource ( short Value ) {
    HRESULT _hr = put_DefaultSource(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1286)
inline short IPrinterSettings::GetTTOption ( ) {
    short _result = 0;
    HRESULT _hr = get_TTOption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1287)
inline void IPrinterSettings::PutTTOption ( short Value ) {
    HRESULT _hr = put_TTOption(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1288)
inline short IPrinterSettings::GetCollate ( ) {
    short _result = 0;
    HRESULT _hr = get_Collate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1289)
inline void IPrinterSettings::PutCollate ( short Value ) {
    HRESULT _hr = put_Collate(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1290)
inline long IPrinterSettings::GetSpecVersion ( ) {
    long _result = 0;
    HRESULT _hr = get_SpecVersion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1291)
inline void IPrinterSettings::PutSpecVersion ( long Value ) {
    HRESULT _hr = put_SpecVersion(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1292)
inline long IPrinterSettings::GetDriverVersion ( ) {
    long _result = 0;
    HRESULT _hr = get_DriverVersion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1293)
inline void IPrinterSettings::PutDriverVersion ( long Value ) {
    HRESULT _hr = put_DriverVersion(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1294)
inline long IPrinterSettings::GetSize ( ) {
    long _result = 0;
    HRESULT _hr = get_Size(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1295)
inline void IPrinterSettings::PutSize ( long Value ) {
    HRESULT _hr = put_Size(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1296)
inline long IPrinterSettings::GetDriverExtra ( ) {
    long _result = 0;
    HRESULT _hr = get_DriverExtra(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1297)
inline void IPrinterSettings::PutDriverExtra ( long Value ) {
    HRESULT _hr = put_DriverExtra(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1298)
inline long IPrinterSettings::GetLogPixels ( ) {
    long _result = 0;
    HRESULT _hr = get_LogPixels(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1299)
inline void IPrinterSettings::PutLogPixels ( long Value ) {
    HRESULT _hr = put_LogPixels(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1300)
inline long IPrinterSettings::GetFields ( ) {
    long _result = 0;
    HRESULT _hr = get_Fields(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1301)
inline void IPrinterSettings::PutFields ( long Value ) {
    HRESULT _hr = put_Fields(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1302)
inline long IPrinterSettings::GetBitsPerPel ( ) {
    long _result = 0;
    HRESULT _hr = get_BitsPerPel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1303)
inline void IPrinterSettings::PutBitsPerPel ( long Value ) {
    HRESULT _hr = put_BitsPerPel(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1304)
inline long IPrinterSettings::GetPelsWidth ( ) {
    long _result = 0;
    HRESULT _hr = get_PelsWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1305)
inline void IPrinterSettings::PutPelsWidth ( long Value ) {
    HRESULT _hr = put_PelsWidth(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1306)
inline long IPrinterSettings::GetPelsHeight ( ) {
    long _result = 0;
    HRESULT _hr = get_PelsHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1307)
inline void IPrinterSettings::PutPelsHeight ( long Value ) {
    HRESULT _hr = put_PelsHeight(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1308)
inline long IPrinterSettings::GetDisplayFlags ( ) {
    long _result = 0;
    HRESULT _hr = get_DisplayFlags(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1309)
inline void IPrinterSettings::PutDisplayFlags ( long Value ) {
    HRESULT _hr = put_DisplayFlags(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1310)
inline long IPrinterSettings::GetDisplayFrequency ( ) {
    long _result = 0;
    HRESULT _hr = get_DisplayFrequency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1311)
inline void IPrinterSettings::PutDisplayFrequency ( long Value ) {
    HRESULT _hr = put_DisplayFrequency(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1312)
inline long IPrinterSettings::GetICMMethod ( ) {
    long _result = 0;
    HRESULT _hr = get_ICMMethod(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1313)
inline void IPrinterSettings::PutICMMethod ( long Value ) {
    HRESULT _hr = put_ICMMethod(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1314)
inline long IPrinterSettings::GetICMIntent ( ) {
    long _result = 0;
    HRESULT _hr = get_ICMIntent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1315)
inline void IPrinterSettings::PutICMIntent ( long Value ) {
    HRESULT _hr = put_ICMIntent(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1316)
inline short IPrinterSettings::GetYResolution ( ) {
    short _result = 0;
    HRESULT _hr = get_YResolution(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1317)
inline void IPrinterSettings::PutYResolution ( short Value ) {
    HRESULT _hr = put_YResolution(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1318)
inline _bstr_t IPrinterSettings::GetDeviceName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DeviceName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1319)
inline void IPrinterSettings::PutDeviceName ( _bstr_t Value ) {
    HRESULT _hr = put_DeviceName(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1320)
inline _bstr_t IPrinterSettings::GetFormName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FormName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1321)
inline void IPrinterSettings::PutFormName ( _bstr_t Value ) {
    HRESULT _hr = put_FormName(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IPrinter wrapper method implementations
//

#pragma implementation_key(1322)
inline long IPrinter::GetDetail ( ) {
    long _result = 0;
    HRESULT _hr = get_Detail(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1323)
inline void IPrinter::PutDetail ( long Value ) {
    HRESULT _hr = put_Detail(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1324)
inline long IPrinter::GetMarginBottom ( ) {
    long _result = 0;
    HRESULT _hr = get_MarginBottom(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1325)
inline void IPrinter::PutMarginBottom ( long Value ) {
    HRESULT _hr = put_MarginBottom(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1326)
inline long IPrinter::GetMarginLeft ( ) {
    long _result = 0;
    HRESULT _hr = get_MarginLeft(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1327)
inline void IPrinter::PutMarginLeft ( long Value ) {
    HRESULT _hr = put_MarginLeft(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1328)
inline long IPrinter::GetMarginTop ( ) {
    long _result = 0;
    HRESULT _hr = get_MarginTop(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1329)
inline void IPrinter::PutMarginTop ( long Value ) {
    HRESULT _hr = put_MarginTop(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1330)
inline long IPrinter::GetMarginRight ( ) {
    long _result = 0;
    HRESULT _hr = get_MarginRight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1331)
inline void IPrinter::PutMarginRight ( long Value ) {
    HRESULT _hr = put_MarginRight(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1332)
inline enum EPrinterOrientation IPrinter::GetOrientation ( ) {
    enum EPrinterOrientation _result;
    HRESULT _hr = get_Orientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1333)
inline void IPrinter::PutOrientation ( enum EPrinterOrientation Value ) {
    HRESULT _hr = put_Orientation(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1334)
inline HRESULT IPrinter::Print ( ) {
    HRESULT _hr = raw_Print();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1335)
inline HRESULT IPrinter::PrintLandscape ( ) {
    HRESULT _hr = raw_PrintLandscape();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1336)
inline HRESULT IPrinter::PrintPortrait ( ) {
    HRESULT _hr = raw_PrintPortrait();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1337)
inline HRESULT IPrinter::ShowPreview ( ) {
    HRESULT _hr = raw_ShowPreview();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1338)
inline HRESULT IPrinter::PrintPartial ( long Left, long Top, long Right, long Bottom ) {
    HRESULT _hr = raw_PrintPartial(Left, Top, Right, Bottom);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1339)
inline HRESULT IPrinter::BeginDoc ( ) {
    HRESULT _hr = raw_BeginDoc();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1340)
inline HRESULT IPrinter::EndDoc ( ) {
    HRESULT _hr = raw_EndDoc();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1341)
inline long IPrinter::GetPrinterIndex ( ) {
    long _result = 0;
    HRESULT _hr = get_PrinterIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1342)
inline void IPrinter::PutPrinterIndex ( long Value ) {
    HRESULT _hr = put_PrinterIndex(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1343)
inline long IPrinter::GetPrinterCount ( ) {
    long _result = 0;
    HRESULT _hr = get_PrinterCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1344)
inline _bstr_t IPrinter::GetPrinterDescription ( long Index ) {
    BSTR _result = 0;
    HRESULT _hr = get_PrinterDescription(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1345)
inline HRESULT IPrinter::PrintChart ( ) {
    HRESULT _hr = raw_PrintChart();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1346)
inline long IPrinter::GetPageHeight ( ) {
    long _result = 0;
    HRESULT _hr = get_PageHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1347)
inline long IPrinter::GetPageWidth ( ) {
    long _result = 0;
    HRESULT _hr = get_PageWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1348)
inline _bstr_t IPrinter::GetJobTitle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_JobTitle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1349)
inline void IPrinter::PutJobTitle ( _bstr_t Value ) {
    HRESULT _hr = put_JobTitle(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1350)
inline VARIANT_BOOL IPrinter::GetPrintProportional ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PrintProportional(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1351)
inline void IPrinter::PutPrintProportional ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_PrintProportional(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1352)
inline HRESULT IPrinter::PrintPartialHandle ( const _variant_t & DC, long Left, long Top, long Right, long Bottom ) {
    HRESULT _hr = raw_PrintPartialHandle(DC, Left, Top, Right, Bottom);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1353)
inline HRESULT IPrinter::PrintPages ( long FromPage, long ToPage ) {
    HRESULT _hr = raw_PrintPages(FromPage, ToPage);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1354)
inline HRESULT IPrinter::ShowSetupDlg ( ) {
    HRESULT _hr = raw_ShowSetupDlg();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1355)
inline IPrinterSettingsPtr IPrinter::GetPrinterSettings ( ) {
    struct IPrinterSettings * _result = 0;
    HRESULT _hr = get_PrinterSettings(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPrinterSettingsPtr(_result, false);
}

//
// interface IHighLowSeries wrapper method implementations
//

#pragma implementation_key(1356)
inline IBrushPtr IHighLowSeries::GetHighBrush ( ) {
    struct IBrush * _result = 0;
    HRESULT _hr = get_HighBrush(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IBrushPtr(_result, false);
}

#pragma implementation_key(1357)
inline IPenPtr IHighLowSeries::GetHighPen ( ) {
    struct IPen * _result = 0;
    HRESULT _hr = get_HighPen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPenPtr(_result, false);
}

#pragma implementation_key(1358)
inline IBrushPtr IHighLowSeries::GetLowBrush ( ) {
    struct IBrush * _result = 0;
    HRESULT _hr = get_LowBrush(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IBrushPtr(_result, false);
}

#pragma implementation_key(1359)
inline IPenPtr IHighLowSeries::GetLowPen ( ) {
    struct IPen * _result = 0;
    HRESULT _hr = get_LowPen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPenPtr(_result, false);
}

#pragma implementation_key(1360)
inline IPenPtr IHighLowSeries::GetPen ( ) {
    struct IPen * _result = 0;
    HRESULT _hr = get_Pen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPenPtr(_result, false);
}

#pragma implementation_key(1361)
inline long IHighLowSeries::GetTransparency ( ) {
    long _result = 0;
    HRESULT _hr = get_Transparency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1362)
inline void IHighLowSeries::PutTransparency ( long Value ) {
    HRESULT _hr = put_Transparency(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ITeeRectArray wrapper method implementations
//

#pragma implementation_key(1363)
inline long ITeeRectArray::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1364)
inline ITeeRectPtr ITeeRectArray::GetItem ( long Index ) {
    struct ITeeRect * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITeeRectPtr(_result, false);
}

//
// interface ISeriesAnimationTool wrapper method implementations
//

#pragma implementation_key(1365)
inline long ISeriesAnimationTool::GetDrawEvery ( ) {
    long _result = 0;
    HRESULT _hr = get_DrawEvery(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1366)
inline void ISeriesAnimationTool::PutDrawEvery ( long Value ) {
    HRESULT _hr = put_DrawEvery(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1367)
inline VARIANT_BOOL ISeriesAnimationTool::GetStartAtMin ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_StartAtMin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1368)
inline void ISeriesAnimationTool::PutStartAtMin ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_StartAtMin(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1369)
inline double ISeriesAnimationTool::GetStartValue ( ) {
    double _result = 0;
    HRESULT _hr = get_StartValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1370)
inline void ISeriesAnimationTool::PutStartValue ( double Value ) {
    HRESULT _hr = put_StartValue(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1371)
inline long ISeriesAnimationTool::GetSteps ( ) {
    long _result = 0;
    HRESULT _hr = get_Steps(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1372)
inline void ISeriesAnimationTool::PutSteps ( long Value ) {
    HRESULT _hr = put_Steps(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1373)
inline HRESULT ISeriesAnimationTool::Execute ( ) {
    HRESULT _hr = raw_Execute();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1374)
inline VARIANT_BOOL ISeriesAnimationTool::GetRunning ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Running(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1375)
inline HRESULT ISeriesAnimationTool::Stop ( ) {
    HRESULT _hr = raw_Stop();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1376)
inline long ISeriesAnimationTool::GetDelay ( ) {
    long _result = 0;
    HRESULT _hr = get_Delay(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1377)
inline void ISeriesAnimationTool::PutDelay ( long Value ) {
    HRESULT _hr = put_Delay(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1378)
inline enum ESeriesAnimationLoop ISeriesAnimationTool::GetLoop ( ) {
    enum ESeriesAnimationLoop _result;
    HRESULT _hr = get_Loop(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1379)
inline void ISeriesAnimationTool::PutLoop ( enum ESeriesAnimationLoop Value ) {
    HRESULT _hr = put_Loop(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ISpacing wrapper method implementations
//

#pragma implementation_key(1380)
inline long ISpacing::GetHorizontal ( ) {
    long _result = 0;
    HRESULT _hr = get_Horizontal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1381)
inline void ISpacing::PutHorizontal ( long Value ) {
    HRESULT _hr = put_Horizontal(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1382)
inline long ISpacing::GetVertical ( ) {
    long _result = 0;
    HRESULT _hr = get_Vertical(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1383)
inline void ISpacing::PutVertical ( long Value ) {
    HRESULT _hr = put_Vertical(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IContourMarks wrapper method implementations
//

#pragma implementation_key(1384)
inline VARIANT_BOOL IContourMarks::GetAntiOverlap ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AntiOverlap(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1385)
inline void IContourMarks::PutAntiOverlap ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_AntiOverlap(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1386)
inline VARIANT_BOOL IContourMarks::GetAtSegments ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AtSegments(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1387)
inline void IContourMarks::PutAtSegments ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_AtSegments(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1388)
inline VARIANT_BOOL IContourMarks::GetColorLevel ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ColorLevel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1389)
inline void IContourMarks::PutColorLevel ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_ColorLevel(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1390)
inline long IContourMarks::GetMargin ( ) {
    long _result = 0;
    HRESULT _hr = get_Margin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1391)
inline void IContourMarks::PutMargin ( long Value ) {
    HRESULT _hr = put_Margin(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1392)
inline long IContourMarks::GetDensity ( ) {
    long _result = 0;
    HRESULT _hr = get_Density(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1393)
inline void IContourMarks::PutDensity ( long Value ) {
    HRESULT _hr = put_Density(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1394)
inline VARIANT_BOOL IContourMarks::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1395)
inline void IContourMarks::PutVisible ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Visible(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IRenkoSeries wrapper method implementations
//

#pragma implementation_key(1396)
inline IValueListPtr IRenkoSeries::GetCloseValues ( ) {
    struct IValueList * _result = 0;
    HRESULT _hr = get_CloseValues(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IValueListPtr(_result, false);
}

#pragma implementation_key(1397)
inline double IRenkoSeries::GetBoxSize ( ) {
    double _result = 0;
    HRESULT _hr = get_BoxSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1398)
inline void IRenkoSeries::PutBoxSize ( double Value ) {
    HRESULT _hr = put_BoxSize(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1399)
inline OLE_COLOR IRenkoSeries::GetDownSwingColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_DownSwingColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1400)
inline void IRenkoSeries::PutDownSwingColor ( OLE_COLOR Value ) {
    HRESULT _hr = put_DownSwingColor(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1401)
inline VARIANT_BOOL IRenkoSeries::GetDraw3D ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Draw3D(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1402)
inline void IRenkoSeries::PutDraw3D ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Draw3D(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1403)
inline long IRenkoSeries::GetTransparency ( ) {
    long _result = 0;
    HRESULT _hr = get_Transparency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1404)
inline void IRenkoSeries::PutTransparency ( long Value ) {
    HRESULT _hr = put_Transparency(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1405)
inline OLE_COLOR IRenkoSeries::GetUpSwingColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_UpSwingColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1406)
inline void IRenkoSeries::PutUpSwingColor ( OLE_COLOR Value ) {
    HRESULT _hr = put_UpSwingColor(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IFastLineSeries wrapper method implementations
//

#pragma implementation_key(1407)
inline IPenPtr IFastLineSeries::GetLinePen ( ) {
    struct IPen * _result = 0;
    HRESULT _hr = get_LinePen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPenPtr(_result, false);
}

#pragma implementation_key(1408)
inline long IFastLineSeries::AddRealTime ( double X, double Y, _bstr_t SomeLabel, OLE_COLOR SomeColor ) {
    long _result = 0;
    HRESULT _hr = raw_AddRealTime(X, Y, SomeLabel, SomeColor, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1409)
inline VARIANT_BOOL IFastLineSeries::GetDrawAllPoints ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DrawAllPoints(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1410)
inline void IFastLineSeries::PutDrawAllPoints ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_DrawAllPoints(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1411)
inline VARIANT_BOOL IFastLineSeries::GetAutoSizeVertAxis ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoSizeVertAxis(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1412)
inline void IFastLineSeries::PutAutoSizeVertAxis ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_AutoSizeVertAxis(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1413)
inline VARIANT_BOOL IFastLineSeries::GetStairs ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Stairs(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1414)
inline void IFastLineSeries::PutStairs ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Stairs(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1415)
inline VARIANT_BOOL IFastLineSeries::GetInvertedStairs ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_InvertedStairs(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1416)
inline void IFastLineSeries::PutInvertedStairs ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_InvertedStairs(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1417)
inline VARIANT_BOOL IFastLineSeries::GetIgnoreNulls ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IgnoreNulls(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1418)
inline void IFastLineSeries::PutIgnoreNulls ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_IgnoreNulls(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1419)
inline VARIANT_BOOL IFastLineSeries::GetFastPen ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_FastPen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1420)
inline void IFastLineSeries::PutFastPen ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_FastPen(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1421)
inline VARIANT_BOOL IFastLineSeries::GetAutoRepaint ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoRepaint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1422)
inline void IFastLineSeries::PutAutoRepaint ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_AutoRepaint(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1423)
inline enum ETreatNullsStyle IFastLineSeries::GetTreatNulls ( ) {
    enum ETreatNullsStyle _result;
    HRESULT _hr = get_TreatNulls(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1424)
inline void IFastLineSeries::PutTreatNulls ( enum ETreatNullsStyle Value ) {
    HRESULT _hr = put_TreatNulls(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IPieMarks wrapper method implementations
//

#pragma implementation_key(1425)
inline VARIANT_BOOL IPieMarks::GetVertCenter ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_VertCenter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1426)
inline void IPieMarks::PutVertCenter ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_VertCenter(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1427)
inline long IPieMarks::GetLegSize ( ) {
    long _result = 0;
    HRESULT _hr = get_LegSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1428)
inline void IPieMarks::PutLegSize ( long Value ) {
    HRESULT _hr = put_LegSize(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IExport wrapper method implementations
//

#pragma implementation_key(1429)
inline HRESULT IExport::CopyToClipboardBitmap ( ) {
    HRESULT _hr = raw_CopyToClipboardBitmap();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1430)
inline HRESULT IExport::CopyToClipboardMetafile ( VARIANT_BOOL Enhanced ) {
    HRESULT _hr = raw_CopyToClipboardMetafile(Enhanced);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1431)
inline HRESULT IExport::SaveToBitmapFile ( _bstr_t FileName ) {
    HRESULT _hr = raw_SaveToBitmapFile(FileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1432)
inline HRESULT IExport::SaveToFile ( _bstr_t FileName ) {
    HRESULT _hr = raw_SaveToFile(FileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1433)
inline HRESULT IExport::SaveToJPEGFile ( _bstr_t FileName, VARIANT_BOOL Gray, enum EJPEGPerformance Performance, long Quality, long Width, long Height ) {
    HRESULT _hr = raw_SaveToJPEGFile(FileName, Gray, Performance, Quality, Width, Height);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1434)
inline HRESULT IExport::SaveToMetafile ( _bstr_t FileName ) {
    HRESULT _hr = raw_SaveToMetafile(FileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1435)
inline HRESULT IExport::SaveToMetafileEnh ( _bstr_t FileName ) {
    HRESULT _hr = raw_SaveToMetafileEnh(FileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1436)
inline HRESULT IExport::ShowExport ( ) {
    HRESULT _hr = raw_ShowExport();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1437)
inline _bstr_t IExport::SaveChartDialog ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_SaveChartDialog(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1438)
inline HRESULT IExport::ConvertTeeFileToText ( _bstr_t InputFile, _bstr_t OutputFile ) {
    HRESULT _hr = raw_ConvertTeeFileToText(InputFile, OutputFile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1439)
inline _variant_t IExport::Stream ( enum EStreamType StreamType ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Stream(StreamType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1440)
inline IJPEGExportPtr IExport::GetasJPEG ( ) {
    struct IJPEGExport * _result = 0;
    HRESULT _hr = get_asJPEG(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IJPEGExportPtr(_result, false);
}

#pragma implementation_key(1441)
inline IPNGExportPtr IExport::GetasPNG ( ) {
    struct IPNGExport * _result = 0;
    HRESULT _hr = get_asPNG(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPNGExportPtr(_result, false);
}

#pragma implementation_key(1442)
inline IGIFExportPtr IExport::GetasGIF ( ) {
    struct IGIFExport * _result = 0;
    HRESULT _hr = get_asGIF(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGIFExportPtr(_result, false);
}

#pragma implementation_key(1443)
inline IBMPExportPtr IExport::GetasBMP ( ) {
    struct IBMPExport * _result = 0;
    HRESULT _hr = get_asBMP(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IBMPExportPtr(_result, false);
}

#pragma implementation_key(1444)
inline IPCXExportPtr IExport::GetasPCX ( ) {
    struct IPCXExport * _result = 0;
    HRESULT _hr = get_asPCX(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPCXExportPtr(_result, false);
}

#pragma implementation_key(1445)
inline IMetafileExportPtr IExport::GetasMetafile ( ) {
    struct IMetafileExport * _result = 0;
    HRESULT _hr = get_asMetafile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMetafileExportPtr(_result, false);
}

#pragma implementation_key(1446)
inline INativeExportPtr IExport::GetasNative ( ) {
    struct INativeExport * _result = 0;
    HRESULT _hr = get_asNative(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return INativeExportPtr(_result, false);
}

#pragma implementation_key(1447)
inline IXMLExportPtr IExport::GetasXML ( ) {
    struct IXMLExport * _result = 0;
    HRESULT _hr = get_asXML(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IXMLExportPtr(_result, false);
}

#pragma implementation_key(1448)
inline IXLSExportPtr IExport::GetasXLS ( ) {
    struct IXLSExport * _result = 0;
    HRESULT _hr = get_asXLS(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IXLSExportPtr(_result, false);
}

#pragma implementation_key(1449)
inline IHTMLExportPtr IExport::GetasHTML ( ) {
    struct IHTMLExport * _result = 0;
    HRESULT _hr = get_asHTML(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IHTMLExportPtr(_result, false);
}

#pragma implementation_key(1450)
inline ITextExportPtr IExport::GetasText ( ) {
    struct ITextExport * _result = 0;
    HRESULT _hr = get_asText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITextExportPtr(_result, false);
}

#pragma implementation_key(1451)
inline HRESULT IExport::EmailFile ( _bstr_t FileName, _bstr_t Subject ) {
    HRESULT _hr = raw_EmailFile(FileName, Subject);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1452)
inline IPDFExportPtr IExport::GetasPDF ( ) {
    struct IPDFExport * _result = 0;
    HRESULT _hr = get_asPDF(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPDFExportPtr(_result, false);
}

#pragma implementation_key(1453)
inline IEPSExportPtr IExport::GetasEPS ( ) {
    struct IEPSExport * _result = 0;
    HRESULT _hr = get_asEPS(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IEPSExportPtr(_result, false);
}

#pragma implementation_key(1454)
inline ISVGExportPtr IExport::GetasSVG ( ) {
    struct ISVGExport * _result = 0;
    HRESULT _hr = get_asSVG(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISVGExportPtr(_result, false);
}

#pragma implementation_key(1455)
inline _bstr_t IExport::GetLabelHeader ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LabelHeader(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1456)
inline void IExport::PutLabelHeader ( _bstr_t Value ) {
    HRESULT _hr = put_LabelHeader(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1457)
inline IXAMLExportPtr IExport::GetasXAML ( ) {
    struct IXAMLExport * _result = 0;
    HRESULT _hr = get_asXAML(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IXAMLExportPtr(_result, false);
}

#pragma implementation_key(1458)
inline HRESULT IExport::SaveToXMLFile ( _bstr_t FileName, VARIANT_BOOL IncludeData, VARIANT_BOOL XMLHeader ) {
    HRESULT _hr = raw_SaveToXMLFile(FileName, IncludeData, XMLHeader);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1459)
inline _variant_t IExport::SaveToXMLStream ( VARIANT_BOOL IncludeData, VARIANT_BOOL XMLHeader ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_SaveToXMLStream(IncludeData, XMLHeader, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

//
// interface IFibonacciItem wrapper method implementations
//

#pragma implementation_key(1460)
inline IPenPtr IFibonacciItem::GetPen ( ) {
    struct IPen * _result = 0;
    HRESULT _hr = get_Pen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPenPtr(_result, false);
}

#pragma implementation_key(1461)
inline double IFibonacciItem::GetValue ( ) {
    double _result = 0;
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1462)
inline void IFibonacciItem::PutValue ( double Value ) {
    HRESULT _hr = put_Value(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IFibonacciLevels wrapper method implementations
//

#pragma implementation_key(1463)
inline IFibonacciItemPtr IFibonacciLevels::GetLevel ( long Index ) {
    struct IFibonacciItem * _result = 0;
    HRESULT _hr = get_Level(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IFibonacciItemPtr(_result, false);
}

//
// interface IMargins wrapper method implementations
//

#pragma implementation_key(1464)
inline long IMargins::GetLeft ( ) {
    long _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1465)
inline void IMargins::PutLeft ( long Value ) {
    HRESULT _hr = put_Left(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1466)
inline long IMargins::GetTop ( ) {
    long _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1467)
inline void IMargins::PutTop ( long Value ) {
    HRESULT _hr = put_Top(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1468)
inline long IMargins::GetRight ( ) {
    long _result = 0;
    HRESULT _hr = get_Right(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1469)
inline void IMargins::PutRight ( long Value ) {
    HRESULT _hr = put_Right(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1470)
inline long IMargins::GetBottom ( ) {
    long _result = 0;
    HRESULT _hr = get_Bottom(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1471)
inline void IMargins::PutBottom ( long Value ) {
    HRESULT _hr = put_Bottom(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1472)
inline enum EMarginUnits IMargins::GetUnits ( ) {
    enum EMarginUnits _result;
    HRESULT _hr = get_Units(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1473)
inline void IMargins::PutUnits ( enum EMarginUnits Value ) {
    HRESULT _hr = put_Units(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IFullScreenTool wrapper method implementations
//

#pragma implementation_key(1474)
inline long IFullScreenTool::GetReleaseKey ( ) {
    long _result = 0;
    HRESULT _hr = get_ReleaseKey(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1475)
inline void IFullScreenTool::PutReleaseKey ( long Value ) {
    HRESULT _hr = put_ReleaseKey(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ITChart wrapper method implementations
//

#pragma implementation_key(1476)
inline IAspectPtr ITChart::GetAspect ( ) {
    struct IAspect * _result = 0;
    HRESULT _hr = get_Aspect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAspectPtr(_result, false);
}

#pragma implementation_key(1477)
inline IAxesPtr ITChart::GetAxis ( ) {
    struct IAxes * _result = 0;
    HRESULT _hr = get_Axis(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAxesPtr(_result, false);
}

#pragma implementation_key(1478)
inline ICanvasPtr ITChart::GetCanvas ( ) {
    struct ICanvas * _result = 0;
    HRESULT _hr = get_Canvas(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ICanvasPtr(_result, false);
}

#pragma implementation_key(1479)
inline VARIANT_BOOL ITChart::GetClipPoints ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ClipPoints(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1480)
inline void ITChart::PutClipPoints ( VARIANT_BOOL ClipPoints ) {
    HRESULT _hr = put_ClipPoints(ClipPoints);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1481)
inline short ITChart::GetCursor ( ) {
    short _result = 0;
    HRESULT _hr = get_Cursor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1482)
inline void ITChart::PutCursor ( short Cursor ) {
    HRESULT _hr = put_Cursor(Cursor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1483)
inline short ITChart::GetDragCursor ( ) {
    short _result = 0;
    HRESULT _hr = get_DragCursor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1484)
inline void ITChart::PutDragCursor ( short DragCursor ) {
    HRESULT _hr = put_DragCursor(DragCursor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1485)
inline enum EDragMode ITChart::GetDragMode ( ) {
    enum EDragMode _result;
    HRESULT _hr = get_DragMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1486)
inline void ITChart::PutDragMode ( enum EDragMode DragMode ) {
    HRESULT _hr = put_DragMode(DragMode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1487)
inline VARIANT_BOOL ITChart::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1488)
inline void ITChart::PutEnabled ( VARIANT_BOOL Enabled ) {
    HRESULT _hr = put_Enabled(Enabled);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1489)
inline IExportPtr ITChart::GetExport ( ) {
    struct IExport * _result = 0;
    HRESULT _hr = get_Export(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IExportPtr(_result, false);
}

#pragma implementation_key(1490)
inline ITitlesPtr ITChart::GetFooter ( ) {
    struct ITitles * _result = 0;
    HRESULT _hr = get_Footer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITitlesPtr(_result, false);
}

#pragma implementation_key(1491)
inline IPenPtr ITChart::GetFrame ( ) {
    struct IPen * _result = 0;
    HRESULT _hr = get_Frame(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPenPtr(_result, false);
}

#pragma implementation_key(1492)
inline ITitlesPtr ITChart::GetHeader ( ) {
    struct ITitles * _result = 0;
    HRESULT _hr = get_Header(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITitlesPtr(_result, false);
}

#pragma implementation_key(1493)
inline long ITChart::GetHeight ( ) {
    long _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1494)
inline void ITChart::PutHeight ( long Height ) {
    HRESULT _hr = put_Height(Height);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1495)
inline IImportPtr ITChart::GetImport ( ) {
    struct IImport * _result = 0;
    HRESULT _hr = get_Import(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IImportPtr(_result, false);
}

#pragma implementation_key(1496)
inline long ITChart::GetLeft ( ) {
    long _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1497)
inline void ITChart::PutLeft ( long Left ) {
    HRESULT _hr = put_Left(Left);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1498)
inline ILegendPtr ITChart::GetLegend ( ) {
    struct ILegend * _result = 0;
    HRESULT _hr = get_Legend(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ILegendPtr(_result, false);
}

#pragma implementation_key(1499)
inline IPagePtr ITChart::GetPage ( ) {
    struct IPage * _result = 0;
    HRESULT _hr = get_Page(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPagePtr(_result, false);
}

#pragma implementation_key(1500)
inline IPanelPtr ITChart::GetPanel ( ) {
    struct IPanel * _result = 0;
    HRESULT _hr = get_Panel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPanelPtr(_result, false);
}

#pragma implementation_key(1501)
inline IPrinterPtr ITChart::GetPrinter ( ) {
    struct IPrinter * _result = 0;
    HRESULT _hr = get_Printer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPrinterPtr(_result, false);
}

#pragma implementation_key(1502)
inline IScrollPtr ITChart::GetScroll ( ) {
    struct IScroll * _result = 0;
    HRESULT _hr = get_Scroll(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IScrollPtr(_result, false);
}

#pragma implementation_key(1503)
inline ISeriesPtr ITChart::GetaSeries ( long SeriesIndex ) {
    struct ISeries * _result = 0;
    HRESULT _hr = get_aSeries(SeriesIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISeriesPtr(_result, false);
}

#pragma implementation_key(1504)
inline long ITChart::GetSeriesCount ( ) {
    long _result = 0;
    HRESULT _hr = get_SeriesCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1505)
inline long ITChart::GetTop ( ) {
    long _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1506)
inline void ITChart::PutTop ( long Top ) {
    HRESULT _hr = put_Top(Top);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1507)
inline VARIANT_BOOL ITChart::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1508)
inline void ITChart::PutVisible ( VARIANT_BOOL Visible ) {
    HRESULT _hr = put_Visible(Visible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1509)
inline IWallsPtr ITChart::GetWalls ( ) {
    struct IWalls * _result = 0;
    HRESULT _hr = get_Walls(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IWallsPtr(_result, false);
}

#pragma implementation_key(1510)
inline long ITChart::GetWidth ( ) {
    long _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1511)
inline void ITChart::PutWidth ( long Width ) {
    HRESULT _hr = put_Width(Width);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1512)
inline IZoomPtr ITChart::GetZoom ( ) {
    struct IZoom * _result = 0;
    HRESULT _hr = get_Zoom(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IZoomPtr(_result, false);
}

#pragma implementation_key(1513)
inline HRESULT ITChart::AboutBox ( ) {
    HRESULT _hr = raw_AboutBox();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1514)
inline long ITChart::AddSeries ( enum ESeriesClass SeriesClass ) {
    long _result = 0;
    HRESULT _hr = raw_AddSeries(SeriesClass, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1515)
inline HRESULT ITChart::ChangeSeriesType ( long SeriesIndex, enum ESeriesClass NewSeriesType ) {
    HRESULT _hr = raw_ChangeSeriesType(SeriesIndex, NewSeriesType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1516)
inline long ITChart::CloneSeries ( long SourceSeriesIndex ) {
    long _result = 0;
    HRESULT _hr = raw_CloneSeries(SourceSeriesIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1517)
inline HRESULT ITChart::Draw ( long DC, long Left, long Top, long Right, long Bottom ) {
    HRESULT _hr = raw_Draw(DC, Left, Top, Right, Bottom);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1518)
inline HRESULT ITChart::ExchangeSeries ( long Series1, long Series2 ) {
    HRESULT _hr = raw_ExchangeSeries(Series1, Series2);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1519)
inline double ITChart::GetDateTimeStep ( enum EDateTimeStep DateTimeStep ) {
    double _result = 0;
    HRESULT _hr = raw_GetDateTimeStep(DateTimeStep, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1520)
inline OLE_COLOR ITChart::GetFreeSeriesColor ( VARIANT_BOOL CheckBackgroundColor ) {
    OLE_COLOR _result;
    HRESULT _hr = raw_GetFreeSeriesColor(CheckBackgroundColor, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1521)
inline ISeriesPtr ITChart::GetLabelsSeries ( enum EAxisType DestAxis ) {
    struct ISeries * _result = 0;
    HRESULT _hr = raw_GetLabelsSeries(DestAxis, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISeriesPtr(_result, false);
}

#pragma implementation_key(1522)
inline VARIANT_BOOL ITChart::IsFreeSeriesColor ( OLE_COLOR AColor, VARIANT_BOOL CheckBackgroundColor ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsFreeSeriesColor(AColor, CheckBackgroundColor, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1523)
inline HRESULT ITChart::RemoveAllSeries ( ) {
    HRESULT _hr = raw_RemoveAllSeries();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1524)
inline HRESULT ITChart::RemoveSeries ( long SeriesIndex ) {
    HRESULT _hr = raw_RemoveSeries(SeriesIndex);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1525)
inline HRESULT ITChart::Repaint ( ) {
    HRESULT _hr = raw_Repaint();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1526)
inline _bstr_t ITChart::SeriesTitleLegend ( long ASeriesIndex ) {
    BSTR _result = 0;
    HRESULT _hr = raw_SeriesTitleLegend(ASeriesIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1527)
inline HRESULT ITChart::ShowEditor ( long SeriesIndex ) {
    HRESULT _hr = raw_ShowEditor(SeriesIndex);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1528)
inline HRESULT ITChart::StopMouse ( ) {
    HRESULT _hr = raw_StopMouse();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1529)
inline VARIANT_BOOL ITChart::GetTimerEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_TimerEnabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1530)
inline void ITChart::PutTimerEnabled ( VARIANT_BOOL TimerEnabled ) {
    HRESULT _hr = put_TimerEnabled(TimerEnabled);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1531)
inline long ITChart::GetTimerInterval ( ) {
    long _result = 0;
    HRESULT _hr = get_TimerInterval(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1532)
inline void ITChart::PutTimerInterval ( long TimerInterval ) {
    HRESULT _hr = put_TimerInterval(TimerInterval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1533)
inline VARIANT_BOOL ITChart::GetAutoRepaint ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoRepaint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1534)
inline void ITChart::PutAutoRepaint ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_AutoRepaint(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1535)
inline HRESULT ITChart::EditOneSeries ( long SeriesIndex ) {
    HRESULT _hr = raw_EditOneSeries(SeriesIndex);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1536)
inline IEnvironmentPtr ITChart::GetEnvironment ( ) {
    struct IEnvironment * _result = 0;
    HRESULT _hr = get_Environment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IEnvironmentPtr(_result, false);
}

#pragma implementation_key(1537)
inline long ITChart::GetChartLink ( ) {
    long _result = 0;
    HRESULT _hr = get_ChartLink(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1538)
inline ITeePoint2DPtr ITChart::GetMousePosition ( ) {
    struct ITeePoint2D * _result = 0;
    HRESULT _hr = get_MousePosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITeePoint2DPtr(_result, false);
}

#pragma implementation_key(1539)
inline HRESULT ITChart::ChartRect ( long Left, long Top, long Right, long Bottom ) {
    HRESULT _hr = raw_ChartRect(Left, Top, Right, Bottom);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1540)
inline IToolListPtr ITChart::GetTools ( ) {
    struct IToolList * _result = 0;
    HRESULT _hr = get_Tools(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IToolListPtr(_result, false);
}

#pragma implementation_key(1541)
inline ITitlesPtr ITChart::GetSubHeader ( ) {
    struct ITitles * _result = 0;
    HRESULT _hr = get_SubHeader(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITitlesPtr(_result, false);
}

#pragma implementation_key(1542)
inline ITitlesPtr ITChart::GetSubFooter ( ) {
    struct ITitles * _result = 0;
    HRESULT _hr = get_SubFooter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITitlesPtr(_result, false);
}

#pragma implementation_key(1543)
inline HRESULT ITChart::ClearChart ( ) {
    HRESULT _hr = raw_ClearChart();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1544)
inline HRESULT ITChart::RefreshData ( ) {
    HRESULT _hr = raw_RefreshData();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1545)
inline ISeriesPtr ITChart::Series ( long SeriesIndex ) {
    struct ISeries * _result = 0;
    HRESULT _hr = raw_Series(SeriesIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISeriesPtr(_result, false);
}

#pragma implementation_key(1546)
inline HRESULT ITChart::ShowThemesEditor ( ) {
    HRESULT _hr = raw_ShowThemesEditor();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1547)
inline HRESULT ITChart::SetTheme ( enum EChartTheme aTheme, enum EColorPalette aPalette ) {
    HRESULT _hr = raw_SetTheme(aTheme, aPalette);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1548)
inline HRESULT ITChart::ApplyPalette ( enum EColorPalette paletteIndex ) {
    HRESULT _hr = raw_ApplyPalette(paletteIndex);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1549)
inline HRESULT ITChart::ApplyCustomPalette ( const _variant_t & colorArray ) {
    HRESULT _hr = raw_ApplyCustomPalette(colorArray);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1550)
inline ISeriesListPtr ITChart::GetSeriesList ( ) {
    struct ISeriesList * _result = 0;
    HRESULT _hr = get_SeriesList(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISeriesListPtr(_result, false);
}

#pragma implementation_key(1551)
inline _bstr_t ITChart::GetHint ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Hint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1552)
inline void ITChart::PutHint ( _bstr_t Value ) {
    HRESULT _hr = put_Hint(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1553)
inline VARIANT_BOOL ITChart::GetShowHint ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowHint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1554)
inline void ITChart::PutShowHint ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_ShowHint(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1555)
inline _bstr_t ITChart::GetVersion ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Version(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1556)
inline VARIANT_BOOL ITChart::GetCustomChartRect ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CustomChartRect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1557)
inline void ITChart::PutCustomChartRect ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_CustomChartRect(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1558)
inline VARIANT_BOOL ITChart::GetMonochrome ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Monochrome(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1559)
inline void ITChart::PutMonochrome ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Monochrome(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1560)
inline short ITChart::GetOriginalCursor ( ) {
    short _result = 0;
    HRESULT _hr = get_OriginalCursor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1561)
inline void ITChart::PutOriginalCursor ( short Value ) {
    HRESULT _hr = put_OriginalCursor(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1562)
inline VARIANT_BOOL ITChart::GetPrinting ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Printing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1563)
inline long ITChart::GetChartHeight ( ) {
    long _result = 0;
    HRESULT _hr = get_ChartHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1564)
inline long ITChart::GetChartWidth ( ) {
    long _result = 0;
    HRESULT _hr = get_ChartWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1565)
inline ITeeRectPtr ITChart::GetChartBounds ( ) {
    struct ITeeRect * _result = 0;
    HRESULT _hr = get_ChartBounds(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITeeRectPtr(_result, false);
}

#pragma implementation_key(1566)
inline VARIANT_BOOL ITChart::GetBufferedDisplay ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_BufferedDisplay(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1567)
inline void ITChart::PutBufferedDisplay ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_BufferedDisplay(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1568)
inline VARIANT_BOOL ITChart::GetCanClip ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CanClip(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1569)
inline ITeeRectPtr ITChart::GetGetChartRect ( ) {
    struct ITeeRect * _result = 0;
    HRESULT _hr = get_GetChartRect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITeeRectPtr(_result, false);
}

#pragma implementation_key(1570)
inline VARIANT_BOOL ITChart::EditStrings ( BSTR * Strings, VARIANT_BOOL ReadOnly ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_EditStrings(Strings, ReadOnly, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ITeeLinked wrapper method implementations
//

#pragma implementation_key(1571)
inline void ITeeLinked::PutChart ( struct ITChart * _arg1 ) {
    HRESULT _hr = put_Chart(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1572)
inline void ITeeLinked::PutChartLink ( long _arg1 ) {
    HRESULT _hr = put_ChartLink(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1573)
inline HRESULT ITeeLinked::AboutBox ( ) {
    HRESULT _hr = raw_AboutBox();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface ITeeEditor wrapper method implementations
//

#pragma implementation_key(1574)
inline _bstr_t ITeeEditor::GetEditorTitle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_EditorTitle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1575)
inline void ITeeEditor::PutEditorTitle ( _bstr_t Value ) {
    HRESULT _hr = put_EditorTitle(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1576)
inline enum ETeeEditorPage ITeeEditor::GetDefaultPage ( ) {
    enum ETeeEditorPage _result;
    HRESULT _hr = get_DefaultPage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1577)
inline void ITeeEditor::PutDefaultPage ( enum ETeeEditorPage Value ) {
    HRESULT _hr = put_DefaultPage(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1578)
inline HRESULT ITeeEditor::ShowEditor ( ) {
    HRESULT _hr = raw_ShowEditor();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1579)
inline VARIANT_BOOL ITeeEditor::GetAutoRepaint ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoRepaint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1580)
inline void ITeeEditor::PutAutoRepaint ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_AutoRepaint(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1581)
inline ITeeEditorShowPagesPtr ITeeEditor::GetShowPages ( ) {
    struct ITeeEditorShowPages * _result = 0;
    HRESULT _hr = get_ShowPages(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITeeEditorShowPagesPtr(_result, false);
}

#pragma implementation_key(1582)
inline long ITeeEditor::GetEditorLink ( ) {
    long _result = 0;
    HRESULT _hr = get_EditorLink(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1583)
inline ITeeEditorOptionsPtr ITeeEditor::GetOptions ( ) {
    struct ITeeEditorOptions * _result = 0;
    HRESULT _hr = get_Options(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITeeEditorOptionsPtr(_result, false);
}

#pragma implementation_key(1584)
inline VARIANT_BOOL ITeeEditor::GetTreeView ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_TreeView(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1585)
inline void ITeeEditor::PutTreeView ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_TreeView(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1586)
inline VARIANT_BOOL ITeeEditor::GetHighLightTabs ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HighLightTabs(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1587)
inline void ITeeEditor::PutHighLightTabs ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_HighLightTabs(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1588)
inline long ITeeEditor::GetPixelsPerInch ( ) {
    long _result = 0;
    HRESULT _hr = get_PixelsPerInch(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1589)
inline void ITeeEditor::PutPixelsPerInch ( long Value ) {
    HRESULT _hr = put_PixelsPerInch(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1590)
inline VARIANT_BOOL ITeeEditor::GetRememberPosition ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_RememberPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1591)
inline void ITeeEditor::PutRememberPosition ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_RememberPosition(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ITeePreviewer wrapper method implementations
//

#pragma implementation_key(1592)
inline _bstr_t ITeePreviewer::GetPreviewTitle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PreviewTitle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1593)
inline void ITeePreviewer::PutPreviewTitle ( _bstr_t Value ) {
    HRESULT _hr = put_PreviewTitle(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1594)
inline HRESULT ITeePreviewer::ShowPreview ( ) {
    HRESULT _hr = raw_ShowPreview();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1595)
inline OLE_COLOR ITeePreviewer::GetPaperColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_PaperColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1596)
inline void ITeePreviewer::PutPaperColor ( OLE_COLOR Value ) {
    HRESULT _hr = put_PaperColor(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1597)
inline long ITeePreviewer::GetPreviewerLink ( ) {
    long _result = 0;
    HRESULT _hr = get_PreviewerLink(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1598)
inline VARIANT_BOOL ITeePreviewer::GetMaximized ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Maximized(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1599)
inline void ITeePreviewer::PutMaximized ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Maximized(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1600)
inline ITeePreviewerOptionsPtr ITeePreviewer::GetOptions ( ) {
    struct ITeePreviewerOptions * _result = 0;
    HRESULT _hr = get_Options(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITeePreviewerOptionsPtr(_result, false);
}

//
// interface IChartGrid wrapper method implementations
//

#pragma implementation_key(1601)
inline long IChartGrid::GetCol ( ) {
    long _result = 0;
    HRESULT _hr = get_Col(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1602)
inline void IChartGrid::PutCol ( long Value ) {
    HRESULT _hr = put_Col(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1603)
inline long IChartGrid::GetColCount ( ) {
    long _result = 0;
    HRESULT _hr = get_ColCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1604)
inline long IChartGrid::GetColwidths ( long Index ) {
    long _result = 0;
    HRESULT _hr = get_Colwidths(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1605)
inline void IChartGrid::PutColwidths ( long Index, long Value ) {
    HRESULT _hr = put_Colwidths(Index, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1606)
inline VARIANT_BOOL IChartGrid::GetEditorMode ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EditorMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1607)
inline void IChartGrid::PutEditorMode ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_EditorMode(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1608)
inline long IChartGrid::GetGridHeight ( ) {
    long _result = 0;
    HRESULT _hr = get_GridHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1609)
inline long IChartGrid::GetGridWidth ( ) {
    long _result = 0;
    HRESULT _hr = get_GridWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1610)
inline long IChartGrid::GetLeftCol ( ) {
    long _result = 0;
    HRESULT _hr = get_LeftCol(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1611)
inline void IChartGrid::PutLeftCol ( long Value ) {
    HRESULT _hr = put_LeftCol(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1612)
inline long IChartGrid::GetGridLink ( ) {
    long _result = 0;
    HRESULT _hr = get_GridLink(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1613)
inline HRESULT IChartGrid::RecalcDimensions ( ) {
    HRESULT _hr = raw_RecalcDimensions();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1614)
inline VARIANT_BOOL IChartGrid::GetShowLabels ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowLabels(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1615)
inline void IChartGrid::PutShowLabels ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_ShowLabels(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1616)
inline VARIANT_BOOL IChartGrid::GetShowColors ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowColors(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1617)
inline void IChartGrid::PutShowColors ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_ShowColors(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1618)
inline VARIANT_BOOL IChartGrid::GetShowFields ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowFields(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1619)
inline void IChartGrid::PutShowFields ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_ShowFields(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1620)
inline IChartGridColsPtr IChartGrid::Cols ( ) {
    struct IChartGridCols * _result = 0;
    HRESULT _hr = raw_Cols(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IChartGridColsPtr(_result, false);
}

#pragma implementation_key(1621)
inline IChartGridRowsPtr IChartGrid::Rows ( ) {
    struct IChartGridRows * _result = 0;
    HRESULT _hr = raw_Rows(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IChartGridRowsPtr(_result, false);
}

#pragma implementation_key(1622)
inline long IChartGrid::GetDefaultColWidth ( ) {
    long _result = 0;
    HRESULT _hr = get_DefaultColWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1623)
inline void IChartGrid::PutDefaultColWidth ( long Value ) {
    HRESULT _hr = put_DefaultColWidth(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1624)
inline VARIANT_BOOL IChartGrid::GetGrid3DMode ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Grid3DMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1625)
inline void IChartGrid::PutGrid3DMode ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Grid3DMode(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1626)
inline _bstr_t IChartGrid::GetLabelHeader ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LabelHeader(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1627)
inline void IChartGrid::PutLabelHeader ( _bstr_t Value ) {
    HRESULT _hr = put_LabelHeader(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1628)
inline VARIANT_BOOL IChartGrid::GetAllowAppend ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AllowAppend(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1629)
inline void IChartGrid::PutAllowAppend ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_AllowAppend(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1630)
inline VARIANT_BOOL IChartGrid::GetReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1631)
inline void IChartGrid::PutReadOnly ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_ReadOnly(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1632)
inline VARIANT_BOOL IChartGrid::GetAllowInsertSeries ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AllowInsertSeries(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1633)
inline void IChartGrid::PutAllowInsertSeries ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_AllowInsertSeries(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1634)
inline long IChartGrid::GetColorsColumn ( ) {
    long _result = 0;
    HRESULT _hr = get_ColorsColumn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1635)
inline long IChartGrid::GetFirstRowNum ( ) {
    long _result = 0;
    HRESULT _hr = get_FirstRowNum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1636)
inline long IChartGrid::GetLabelsColumn ( ) {
    long _result = 0;
    HRESULT _hr = get_LabelsColumn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1637)
inline VARIANT_BOOL IChartGrid::GetSeriesSymbolClickable ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SeriesSymbolClickable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1638)
inline void IChartGrid::PutSeriesSymbolClickable ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_SeriesSymbolClickable(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1639)
inline enum EChartGridShow IChartGrid::GetShowXValues ( ) {
    enum EChartGridShow _result;
    HRESULT _hr = get_ShowXValues(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1640)
inline void IChartGrid::PutShowXValues ( enum EChartGridShow Value ) {
    HRESULT _hr = put_ShowXValues(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IChartGridNavigator wrapper method implementations
//

#pragma implementation_key(1641)
inline void IChartGridNavigator::PutGrid ( struct IChartGrid * _arg1 ) {
    HRESULT _hr = put_Grid(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1642)
inline void IChartGridNavigator::PutGridLink ( long _arg1 ) {
    HRESULT _hr = put_GridLink(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1643)
inline HRESULT IChartGridNavigator::EnableButtons ( ) {
    HRESULT _hr = raw_EnableButtons();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1644)
inline OLE_COLOR IChartGridNavigator::GetColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1645)
inline void IChartGridNavigator::PutColor ( OLE_COLOR Value ) {
    HRESULT _hr = put_Color(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IChartPageNavigator wrapper method implementations
//

#pragma implementation_key(1646)
inline HRESULT IChartPageNavigator::EnableButtons ( ) {
    HRESULT _hr = raw_EnableButtons();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1647)
inline OLE_COLOR IChartPageNavigator::GetColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1648)
inline void IChartPageNavigator::PutColor ( OLE_COLOR Value ) {
    HRESULT _hr = put_Color(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IChartEditorPanel wrapper method implementations
//

#pragma implementation_key(1649)
inline HRESULT IChartEditorPanel::SelectUnderMouse ( ) {
    HRESULT _hr = raw_SelectUnderMouse();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1650)
inline enum EPanelBevel IChartEditorPanel::GetBevelOuter ( ) {
    enum EPanelBevel _result;
    HRESULT _hr = get_BevelOuter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1651)
inline void IChartEditorPanel::PutBevelOuter ( enum EPanelBevel Value ) {
    HRESULT _hr = put_BevelOuter(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1652)
inline void IChartEditorPanel::PutEditor ( struct ITeeEditor * _arg1 ) {
    HRESULT _hr = put_Editor(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1653)
inline void IChartEditorPanel::PutEditorLink ( long _arg1 ) {
    HRESULT _hr = put_EditorLink(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ISeriesSource wrapper method implementations
//

#pragma implementation_key(1654)
inline HRESULT ISeriesSource::Open ( ) {
    HRESULT _hr = raw_Open();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1655)
inline HRESULT ISeriesSource::Close ( ) {
    HRESULT _hr = raw_Close();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1656)
inline VARIANT_BOOL ISeriesSource::GetActive ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Active(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1657)
inline void ISeriesSource::PutActive ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Active(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1658)
inline _variant_t ISeriesSource::GetSeries ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Series(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1659)
inline void ISeriesSource::PutSeries ( const _variant_t & Value ) {
    HRESULT _hr = put_Series(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ISeriesSourceFile wrapper method implementations
//

#pragma implementation_key(1660)
inline HRESULT ISeriesSourceFile::Load ( ) {
    HRESULT _hr = raw_Load();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1661)
inline HRESULT ISeriesSourceFile::LoadFromFile ( _bstr_t FileName ) {
    HRESULT _hr = raw_LoadFromFile(FileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1662)
inline HRESULT ISeriesSourceFile::LoadFromURL ( _bstr_t URL ) {
    HRESULT _hr = raw_LoadFromURL(URL);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1663)
inline _bstr_t ISeriesSourceFile::GetFileName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FileName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1664)
inline void ISeriesSourceFile::PutFileName ( _bstr_t Value ) {
    HRESULT _hr = put_FileName(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1665)
inline enum ELoadMode ISeriesSourceFile::GetLoadMode ( ) {
    enum ELoadMode _result;
    HRESULT _hr = get_LoadMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1666)
inline void ISeriesSourceFile::PutLoadMode ( enum ELoadMode Value ) {
    HRESULT _hr = put_LoadMode(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ISeriesXMLSource wrapper method implementations
//

#pragma implementation_key(1667)
inline _bstr_t ISeriesXMLSource::GetSeriesNode ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SeriesNode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1668)
inline void ISeriesXMLSource::PutSeriesNode ( _bstr_t Value ) {
    HRESULT _hr = put_SeriesNode(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1669)
inline _bstr_t ISeriesXMLSource::GetValueSource ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ValueSource(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1670)
inline void ISeriesXMLSource::PutValueSource ( _bstr_t Value ) {
    HRESULT _hr = put_ValueSource(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1671)
inline IStringsPtr ISeriesXMLSource::GetXML ( ) {
    struct IStrings * _result = 0;
    HRESULT _hr = get_XML(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IStringsPtr(_result, false);
}

//
// interface ISeriesTextSource wrapper method implementations
//

#pragma implementation_key(1672)
inline HRESULT ISeriesTextSource::LoadAsStream ( const _variant_t & AStream ) {
    HRESULT _hr = raw_LoadAsStream(AStream);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1673)
inline long ISeriesTextSource::GetHeaderLines ( ) {
    long _result = 0;
    HRESULT _hr = get_HeaderLines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1674)
inline void ISeriesTextSource::PutHeaderLines ( long Value ) {
    HRESULT _hr = put_HeaderLines(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1675)
inline ISeriesTextFieldsPtr ISeriesTextSource::GetFields ( ) {
    struct ISeriesTextFields * _result = 0;
    HRESULT _hr = get_Fields(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISeriesTextFieldsPtr(_result, false);
}

#pragma implementation_key(1676)
inline _bstr_t ISeriesTextSource::GetFieldSeparator ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FieldSeparator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1677)
inline void ISeriesTextSource::PutFieldSeparator ( _bstr_t Value ) {
    HRESULT _hr = put_FieldSeparator(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1678)
inline ISeriesTextFieldPtr ISeriesTextSource::AddField ( _bstr_t AName, long AIndex ) {
    struct ISeriesTextField * _result = 0;
    HRESULT _hr = raw_AddField(AName, AIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISeriesTextFieldPtr(_result, false);
}

#pragma implementation_key(1679)
inline HRESULT ISeriesTextSource::LoadFromStrings ( _bstr_t AStrings ) {
    HRESULT _hr = raw_LoadFromStrings(AStrings);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface ICrossTabSource wrapper method implementations
//

#pragma implementation_key(1680)
inline HRESULT ICrossTabSource::Load ( ) {
    HRESULT _hr = raw_Load();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1681)
inline VARIANT_BOOL ICrossTabSource::GetCaseSensitive ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CaseSensitive(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1682)
inline void ICrossTabSource::PutCaseSensitive ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_CaseSensitive(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1683)
inline _variant_t ICrossTabSource::GetDataSet ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_DataSet(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1684)
inline void ICrossTabSource::PutDataSet ( const _variant_t & Value ) {
    HRESULT _hr = put_DataSet(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1685)
inline enum EGroupFormula ICrossTabSource::GetFormula ( ) {
    enum EGroupFormula _result;
    HRESULT _hr = get_Formula(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1686)
inline void ICrossTabSource::PutFormula ( enum EGroupFormula Value ) {
    HRESULT _hr = put_Formula(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1687)
inline _bstr_t ICrossTabSource::GetGroupField ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_GroupField(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1688)
inline void ICrossTabSource::PutGroupField ( _bstr_t Value ) {
    HRESULT _hr = put_GroupField(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1689)
inline _bstr_t ICrossTabSource::GetLabelField ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LabelField(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1690)
inline void ICrossTabSource::PutLabelField ( _bstr_t Value ) {
    HRESULT _hr = put_LabelField(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1691)
inline _bstr_t ICrossTabSource::GetValueField ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ValueField(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1692)
inline void ICrossTabSource::PutValueField ( _bstr_t Value ) {
    HRESULT _hr = put_ValueField(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1693)
inline VARIANT_BOOL ICrossTabSource::GetHideSeries ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HideSeries(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1694)
inline void ICrossTabSource::PutHideSeries ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_HideSeries(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAxes wrapper method implementations
//

#pragma implementation_key(1695)
inline IAxisPtr IAxes::GetLeft ( ) {
    struct IAxis * _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAxisPtr(_result, false);
}

#pragma implementation_key(1696)
inline IAxisPtr IAxes::GetRight ( ) {
    struct IAxis * _result = 0;
    HRESULT _hr = get_Right(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAxisPtr(_result, false);
}

#pragma implementation_key(1697)
inline IAxisPtr IAxes::GetTop ( ) {
    struct IAxis * _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAxisPtr(_result, false);
}

#pragma implementation_key(1698)
inline IAxisPtr IAxes::GetBottom ( ) {
    struct IAxis * _result = 0;
    HRESULT _hr = get_Bottom(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAxisPtr(_result, false);
}

#pragma implementation_key(1699)
inline VARIANT_BOOL IAxes::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1700)
inline void IAxes::PutVisible ( VARIANT_BOOL Visible ) {
    HRESULT _hr = put_Visible(Visible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1701)
inline IAxisPtr IAxes::GetDepth ( ) {
    struct IAxis * _result = 0;
    HRESULT _hr = get_Depth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAxisPtr(_result, false);
}

#pragma implementation_key(1702)
inline VARIANT_BOOL IAxes::GetDrawAxesBeforeSeries ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DrawAxesBeforeSeries(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1703)
inline void IAxes::PutDrawAxesBeforeSeries ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_DrawAxesBeforeSeries(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1704)
inline long IAxes::AddCustom ( VARIANT_BOOL IsHorizontal ) {
    long _result = 0;
    HRESULT _hr = raw_AddCustom(IsHorizontal, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1705)
inline IAxisPtr IAxes::GetCustom ( long CustomAxisIndex ) {
    struct IAxis * _result = 0;
    HRESULT _hr = get_Custom(CustomAxisIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAxisPtr(_result, false);
}

#pragma implementation_key(1706)
inline long IAxes::GetCustomCount ( ) {
    long _result = 0;
    HRESULT _hr = get_CustomCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1707)
inline HRESULT IAxes::RemoveCustom ( long CustomAxisIndex ) {
    HRESULT _hr = raw_RemoveCustom(CustomAxisIndex);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1708)
inline HRESULT IAxes::RemoveAllCustom ( ) {
    HRESULT _hr = raw_RemoveAllCustom();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1709)
inline IAxisPtr IAxes::GetDepthTop ( ) {
    struct IAxis * _result = 0;
    HRESULT _hr = get_DepthTop(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAxisPtr(_result, false);
}

#pragma implementation_key(1710)
inline VARIANT_BOOL IAxes::GetFastCalc ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_FastCalc(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1711)
inline void IAxes::PutFastCalc ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_FastCalc(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1712)
inline HRESULT IAxes::SetIsometric ( long aVertical, long aHorizontal ) {
    HRESULT _hr = raw_SetIsometric(aVertical, aHorizontal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1713)
inline HRESULT IAxes::Hide ( ) {
    HRESULT _hr = raw_Hide();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1714)
inline VARIANT_BOOL IAxes::GetBehind ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Behind(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1715)
inline void IAxes::PutBehind ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Behind(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAxis wrapper method implementations
//

#pragma implementation_key(1716)
inline VARIANT_BOOL IAxis::GetAutomatic ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Automatic(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1717)
inline void IAxis::PutAutomatic ( VARIANT_BOOL Automatic ) {
    HRESULT _hr = put_Automatic(Automatic);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1718)
inline VARIANT_BOOL IAxis::GetAutomaticMaximum ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutomaticMaximum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1719)
inline void IAxis::PutAutomaticMaximum ( VARIANT_BOOL AutomaticMaximum ) {
    HRESULT _hr = put_AutomaticMaximum(AutomaticMaximum);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1720)
inline VARIANT_BOOL IAxis::GetAutomaticMinimum ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutomaticMinimum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1721)
inline void IAxis::PutAutomaticMinimum ( VARIANT_BOOL AutomaticMinimum ) {
    HRESULT _hr = put_AutomaticMinimum(AutomaticMinimum);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1722)
inline IChartAxisPenPtr IAxis::GetAxisPen ( ) {
    struct IChartAxisPen * _result = 0;
    HRESULT _hr = get_AxisPen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IChartAxisPenPtr(_result, false);
}

#pragma implementation_key(1723)
inline enum EAxisType IAxis::GetAxisType ( ) {
    enum EAxisType _result;
    HRESULT _hr = get_AxisType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1724)
inline VARIANT_BOOL IAxis::GetExactDateTime ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ExactDateTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1725)
inline void IAxis::PutExactDateTime ( VARIANT_BOOL ExactDateTime ) {
    HRESULT _hr = put_ExactDateTime(ExactDateTime);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1726)
inline IPenPtr IAxis::GetGridPen ( ) {
    struct IPen * _result = 0;
    HRESULT _hr = get_GridPen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPenPtr(_result, false);
}

#pragma implementation_key(1727)
inline double IAxis::GetIncrement ( ) {
    double _result = 0;
    HRESULT _hr = get_Increment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1728)
inline void IAxis::PutIncrement ( double Increment ) {
    HRESULT _hr = put_Increment(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1729)
inline VARIANT_BOOL IAxis::GetInverted ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Inverted(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1730)
inline void IAxis::PutInverted ( VARIANT_BOOL Inverted ) {
    HRESULT _hr = put_Inverted(Inverted);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1731)
inline IAxisLabelsPtr IAxis::GetLabels ( ) {
    struct IAxisLabels * _result = 0;
    HRESULT _hr = get_Labels(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAxisLabelsPtr(_result, false);
}

#pragma implementation_key(1732)
inline VARIANT_BOOL IAxis::GetLogarithmic ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Logarithmic(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1733)
inline void IAxis::PutLogarithmic ( VARIANT_BOOL Logarithmic ) {
    HRESULT _hr = put_Logarithmic(Logarithmic);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1734)
inline double IAxis::GetMaximum ( ) {
    double _result = 0;
    HRESULT _hr = get_Maximum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1735)
inline void IAxis::PutMaximum ( double Maximum ) {
    HRESULT _hr = put_Maximum(Maximum);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1736)
inline double IAxis::GetMinimum ( ) {
    double _result = 0;
    HRESULT _hr = get_Minimum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1737)
inline void IAxis::PutMinimum ( double Minimum ) {
    HRESULT _hr = put_Minimum(Minimum);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1738)
inline long IAxis::GetMinorTickCount ( ) {
    long _result = 0;
    HRESULT _hr = get_MinorTickCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1739)
inline void IAxis::PutMinorTickCount ( long MinorTickCount ) {
    HRESULT _hr = put_MinorTickCount(MinorTickCount);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1740)
inline long IAxis::GetMinorTickLength ( ) {
    long _result = 0;
    HRESULT _hr = get_MinorTickLength(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1741)
inline void IAxis::PutMinorTickLength ( long MinorTickLength ) {
    HRESULT _hr = put_MinorTickLength(MinorTickLength);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1742)
inline IPenPtr IAxis::GetMinorTicks ( ) {
    struct IPen * _result = 0;
    HRESULT _hr = get_MinorTicks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPenPtr(_result, false);
}

#pragma implementation_key(1743)
inline long IAxis::GetPosition ( ) {
    long _result = 0;
    HRESULT _hr = get_Position(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1744)
inline long IAxis::GetTickInnerLength ( ) {
    long _result = 0;
    HRESULT _hr = get_TickInnerLength(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1745)
inline void IAxis::PutTickInnerLength ( long TickInnerLength ) {
    HRESULT _hr = put_TickInnerLength(TickInnerLength);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1746)
inline long IAxis::GetTickLength ( ) {
    long _result = 0;
    HRESULT _hr = get_TickLength(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1747)
inline void IAxis::PutTickLength ( long TickLength ) {
    HRESULT _hr = put_TickLength(TickLength);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1748)
inline VARIANT_BOOL IAxis::GetTickOnLabelsOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_TickOnLabelsOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1749)
inline void IAxis::PutTickOnLabelsOnly ( VARIANT_BOOL TickOnLabelsOnly ) {
    HRESULT _hr = put_TickOnLabelsOnly(TickOnLabelsOnly);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1750)
inline IPenPtr IAxis::GetTicks ( ) {
    struct IPen * _result = 0;
    HRESULT _hr = get_Ticks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPenPtr(_result, false);
}

#pragma implementation_key(1751)
inline IPenPtr IAxis::GetTicksInner ( ) {
    struct IPen * _result = 0;
    HRESULT _hr = get_TicksInner(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPenPtr(_result, false);
}

#pragma implementation_key(1752)
inline IAxisTitlePtr IAxis::GetTitle ( ) {
    struct IAxisTitle * _result = 0;
    HRESULT _hr = get_Title(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAxisTitlePtr(_result, false);
}

#pragma implementation_key(1753)
inline long IAxis::GetTitleSize ( ) {
    long _result = 0;
    HRESULT _hr = get_TitleSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1754)
inline void IAxis::PutTitleSize ( long TitleSize ) {
    HRESULT _hr = put_TitleSize(TitleSize);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1755)
inline VARIANT_BOOL IAxis::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1756)
inline void IAxis::PutVisible ( VARIANT_BOOL Visible ) {
    HRESULT _hr = put_Visible(Visible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1757)
inline HRESULT IAxis::AdjustMaxMin ( ) {
    HRESULT _hr = raw_AdjustMaxMin();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1758)
inline long IAxis::CalcXPosValue ( double SomeValue ) {
    long _result = 0;
    HRESULT _hr = raw_CalcXPosValue(SomeValue, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1759)
inline long IAxis::CalcYPosValue ( double SomeValue ) {
    long _result = 0;
    HRESULT _hr = raw_CalcYPosValue(SomeValue, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1760)
inline long IAxis::CalcXSizeValue ( double SomeValue ) {
    long _result = 0;
    HRESULT _hr = raw_CalcXSizeValue(SomeValue, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1761)
inline long IAxis::CalcYSizeValue ( double SomeValue ) {
    long _result = 0;
    HRESULT _hr = raw_CalcYSizeValue(SomeValue, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1762)
inline double IAxis::CalcPosPoint ( long SomeValue ) {
    double _result = 0;
    HRESULT _hr = raw_CalcPosPoint(SomeValue, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1763)
inline VARIANT_BOOL IAxis::Clicked ( long XCoord, long YCoord ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Clicked(XCoord, YCoord, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1764)
inline HRESULT IAxis::CustomDraw ( long APosLabels, long APosTitle, long APosAxis, VARIANT_BOOL GridVisible ) {
    HRESULT _hr = raw_CustomDraw(APosLabels, APosTitle, APosAxis, GridVisible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1765)
inline VARIANT_BOOL IAxis::IsDateTime ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsDateTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1766)
inline double IAxis::MaxXValue ( ) {
    double _result = 0;
    HRESULT _hr = raw_MaxXValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1767)
inline double IAxis::MaxYValue ( ) {
    double _result = 0;
    HRESULT _hr = raw_MaxYValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1768)
inline double IAxis::MinXValue ( ) {
    double _result = 0;
    HRESULT _hr = raw_MinXValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1769)
inline double IAxis::MinYValue ( ) {
    double _result = 0;
    HRESULT _hr = raw_MinYValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1770)
inline HRESULT IAxis::Scroll ( double Offset, VARIANT_BOOL CheckLimits ) {
    HRESULT _hr = raw_Scroll(Offset, CheckLimits);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1771)
inline HRESULT IAxis::SetMinMax ( double AMin, double AMax ) {
    HRESULT _hr = raw_SetMinMax(AMin, AMax);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1772)
inline VARIANT_BOOL IAxis::GetGridCentered ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_GridCentered(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1773)
inline void IAxis::PutGridCentered ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_GridCentered(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1774)
inline double IAxis::GetPositionPercent ( ) {
    double _result = 0;
    HRESULT _hr = get_PositionPercent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1775)
inline void IAxis::PutPositionPercent ( double Value ) {
    HRESULT _hr = put_PositionPercent(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1776)
inline double IAxis::GetStartPosition ( ) {
    double _result = 0;
    HRESULT _hr = get_StartPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1777)
inline void IAxis::PutStartPosition ( double Value ) {
    HRESULT _hr = put_StartPosition(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1778)
inline double IAxis::GetEndPosition ( ) {
    double _result = 0;
    HRESULT _hr = get_EndPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1779)
inline void IAxis::PutEndPosition ( double Value ) {
    HRESULT _hr = put_EndPosition(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1780)
inline double IAxis::GetLogarithmicBase ( ) {
    double _result = 0;
    HRESULT _hr = get_LogarithmicBase(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1781)
inline void IAxis::PutLogarithmicBase ( double Value ) {
    HRESULT _hr = put_LogarithmicBase(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1782)
inline HRESULT IAxis::CustomDrawMinMax ( long APosLabels, long APosTitle, long APosAxis, VARIANT_BOOL GridVisible, double AMinimum, double AMaximum, long AStartPosition, long AEndPosition ) {
    HRESULT _hr = raw_CustomDrawMinMax(APosLabels, APosTitle, APosAxis, GridVisible, AMinimum, AMaximum, AStartPosition, AEndPosition);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1783)
inline IPenPtr IAxis::GetMinorGrid ( ) {
    struct IPen * _result = 0;
    HRESULT _hr = get_MinorGrid(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPenPtr(_result, false);
}

#pragma implementation_key(1784)
inline VARIANT_BOOL IAxis::GetOtherside ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Otherside(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1785)
inline void IAxis::PutOtherside ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Otherside(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1786)
inline long IAxis::GetAxisLink ( ) {
    long _result = 0;
    HRESULT _hr = get_AxisLink(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1787)
inline double IAxis::MaxVisibleSeriesValue ( VARIANT_BOOL AllSeries, long SeriesIndex ) {
    double _result = 0;
    HRESULT _hr = raw_MaxVisibleSeriesValue(AllSeries, SeriesIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1788)
inline double IAxis::MinVisibleSeriesValue ( VARIANT_BOOL AllSeries, long SeriesIndex ) {
    double _result = 0;
    HRESULT _hr = raw_MinVisibleSeriesValue(AllSeries, SeriesIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1789)
inline double IAxis::CalcIncrement ( ) {
    double _result = 0;
    HRESULT _hr = raw_CalcIncrement(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1790)
inline double IAxis::GetZPosition ( ) {
    double _result = 0;
    HRESULT _hr = get_ZPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1791)
inline void IAxis::PutZPosition ( double Value ) {
    HRESULT _hr = put_ZPosition(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1792)
inline long IAxis::GetMaximumOffset ( ) {
    long _result = 0;
    HRESULT _hr = get_MaximumOffset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1793)
inline void IAxis::PutMaximumOffset ( long Value ) {
    HRESULT _hr = put_MaximumOffset(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1794)
inline long IAxis::GetMinimumOffset ( ) {
    long _result = 0;
    HRESULT _hr = get_MinimumOffset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1795)
inline void IAxis::PutMinimumOffset ( long Value ) {
    HRESULT _hr = put_MinimumOffset(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1796)
inline double IAxis::GetGridZPosition ( ) {
    double _result = 0;
    HRESULT _hr = get_GridZPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1797)
inline void IAxis::PutGridZPosition ( double Value ) {
    HRESULT _hr = put_GridZPosition(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1798)
inline enum EPositionUnits IAxis::GetPositionUnits ( ) {
    enum EPositionUnits _result;
    HRESULT _hr = get_PositionUnits(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1799)
inline void IAxis::PutPositionUnits ( enum EPositionUnits Value ) {
    HRESULT _hr = put_PositionUnits(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1800)
inline long IAxis::GetIndex ( ) {
    long _result = 0;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1801)
inline long IAxis::GetIStartPos ( ) {
    long _result = 0;
    HRESULT _hr = get_IStartPos(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1802)
inline long IAxis::GetIEndPos ( ) {
    long _result = 0;
    HRESULT _hr = get_IEndPos(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1803)
inline long IAxis::GetIAxisSize ( ) {
    long _result = 0;
    HRESULT _hr = get_IAxisSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1804)
inline IAxisGridPenPtr IAxis::GetGrid ( ) {
    struct IAxisGridPen * _result = 0;
    HRESULT _hr = get_Grid(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAxisGridPenPtr(_result, false);
}

#pragma implementation_key(1805)
inline VARIANT_BOOL IAxis::GetMaximumRound ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_MaximumRound(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1806)
inline void IAxis::PutMaximumRound ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_MaximumRound(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1807)
inline VARIANT_BOOL IAxis::GetMinimumRound ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_MinimumRound(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1808)
inline void IAxis::PutMinimumRound ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_MinimumRound(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAxisLabels wrapper method implementations
//

#pragma implementation_key(1809)
inline long IAxisLabels::GetAngle ( ) {
    long _result = 0;
    HRESULT _hr = get_Angle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1810)
inline void IAxisLabels::PutAngle ( long Angle ) {
    HRESULT _hr = put_Angle(Angle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1811)
inline VARIANT_BOOL IAxisLabels::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1812)
inline void IAxisLabels::PutVisible ( VARIANT_BOOL Visible ) {
    HRESULT _hr = put_Visible(Visible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1813)
inline _bstr_t IAxisLabels::GetDateTimeFormat ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DateTimeFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1814)
inline void IAxisLabels::PutDateTimeFormat ( _bstr_t DateTimeFormat ) {
    HRESULT _hr = put_DateTimeFormat(DateTimeFormat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1815)
inline ITeeFontPtr IAxisLabels::GetFont ( ) {
    struct ITeeFont * _result = 0;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITeeFontPtr(_result, false);
}

#pragma implementation_key(1816)
inline _bstr_t IAxisLabels::FormattedValue ( double SomeValue ) {
    BSTR _result = 0;
    HRESULT _hr = raw_FormattedValue(SomeValue, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1817)
inline long IAxisLabels::GetPos ( ) {
    long _result = 0;
    HRESULT _hr = raw_GetPos(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1818)
inline long IAxisLabels::Height ( double SomeValue ) {
    long _result = 0;
    HRESULT _hr = raw_Height(SomeValue, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1819)
inline long IAxisLabels::MaxWidth ( ) {
    long _result = 0;
    HRESULT _hr = raw_MaxWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1820)
inline VARIANT_BOOL IAxisLabels::GetOnAxis ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_OnAxis(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1821)
inline void IAxisLabels::PutOnAxis ( VARIANT_BOOL OnAxis ) {
    HRESULT _hr = put_OnAxis(OnAxis);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1822)
inline VARIANT_BOOL IAxisLabels::GetRoundFirstLabel ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_RoundFirstLabel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1823)
inline void IAxisLabels::PutRoundFirstLabel ( VARIANT_BOOL RoundFirstLabel ) {
    HRESULT _hr = put_RoundFirstLabel(RoundFirstLabel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1824)
inline long IAxisLabels::GetSeparation ( ) {
    long _result = 0;
    HRESULT _hr = get_Separation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1825)
inline void IAxisLabels::PutSeparation ( long Separation ) {
    HRESULT _hr = put_Separation(Separation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1826)
inline long IAxisLabels::GetSize ( ) {
    long _result = 0;
    HRESULT _hr = get_Size(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1827)
inline void IAxisLabels::PutSize ( long Size ) {
    HRESULT _hr = put_Size(Size);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1828)
inline enum EAxisLabelStyle IAxisLabels::GetStyle ( ) {
    enum EAxisLabelStyle _result;
    HRESULT _hr = get_Style(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1829)
inline void IAxisLabels::PutStyle ( enum EAxisLabelStyle Style ) {
    HRESULT _hr = put_Style(Style);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1830)
inline _bstr_t IAxisLabels::GetValueFormat ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ValueFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1831)
inline void IAxisLabels::PutValueFormat ( _bstr_t ValueFormat ) {
    HRESULT _hr = put_ValueFormat(ValueFormat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1832)
inline long IAxisLabels::Width ( double SomeValue ) {
    long _result = 0;
    HRESULT _hr = raw_Width(SomeValue, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1833)
inline VARIANT_BOOL IAxisLabels::GetMultiline ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Multiline(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1834)
inline void IAxisLabels::PutMultiline ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Multiline(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1835)
inline HRESULT IAxisLabels::TeeSplitInLines ( BSTR * St, _bstr_t Separator ) {
    HRESULT _hr = raw_TeeSplitInLines(St, Separator);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1836)
inline VARIANT_BOOL IAxisLabels::GetExponent ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Exponent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1837)
inline void IAxisLabels::PutExponent ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Exponent(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1838)
inline enum EAxisLabelAlign IAxisLabels::GetAlign ( ) {
    enum EAxisLabelAlign _result;
    HRESULT _hr = get_Align(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1839)
inline void IAxisLabels::PutAlign ( enum EAxisLabelAlign Value ) {
    HRESULT _hr = put_Align(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1840)
inline ITeeCustomShapePtr IAxisLabels::GetFormat ( ) {
    struct ITeeCustomShape * _result = 0;
    HRESULT _hr = get_Format(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITeeCustomShapePtr(_result, false);
}

#pragma implementation_key(1841)
inline long IAxisLabels::Add ( double Value, _bstr_t Text ) {
    long _result = 0;
    HRESULT _hr = raw_Add(Value, Text, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1842)
inline IAxisLabelsItemPtr IAxisLabels::GetItem ( long Index ) {
    struct IAxisLabelsItem * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAxisLabelsItemPtr(_result, false);
}

#pragma implementation_key(1843)
inline HRESULT IAxisLabels::Clear ( ) {
    HRESULT _hr = raw_Clear();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1844)
inline long IAxisLabels::Count ( ) {
    long _result = 0;
    HRESULT _hr = raw_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1845)
inline VARIANT_BOOL IAxisLabels::GetAlternate ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Alternate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1846)
inline void IAxisLabels::PutAlternate ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Alternate(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1847)
inline VARIANT_BOOL IAxisLabels::GetAutomatic ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Automatic(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1848)
inline void IAxisLabels::PutAutomatic ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Automatic(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAxisTitle wrapper method implementations
//

#pragma implementation_key(1849)
inline long IAxisTitle::GetAngle ( ) {
    long _result = 0;
    HRESULT _hr = get_Angle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1850)
inline void IAxisTitle::PutAngle ( long Angle ) {
    HRESULT _hr = put_Angle(Angle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1851)
inline _bstr_t IAxisTitle::GetCaption ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1852)
inline void IAxisTitle::PutCaption ( _bstr_t Caption ) {
    HRESULT _hr = put_Caption(Caption);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1853)
inline ITeeFontPtr IAxisTitle::GetFont ( ) {
    struct ITeeFont * _result = 0;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITeeFontPtr(_result, false);
}

#pragma implementation_key(1854)
inline VARIANT_BOOL IAxisTitle::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1855)
inline void IAxisTitle::PutVisible ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Visible(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1856)
inline VARIANT_BOOL IAxisTitle::Clicked ( long X, long Y ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Clicked(X, Y, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ITeeCustomShape wrapper method implementations
//

#pragma implementation_key(1857)
inline OLE_COLOR ITeeCustomShape::GetColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1858)
inline void ITeeCustomShape::PutColor ( OLE_COLOR Value ) {
    HRESULT _hr = put_Color(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1859)
inline ITeeFontPtr ITeeCustomShape::GetFont ( ) {
    struct ITeeFont * _result = 0;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITeeFontPtr(_result, false);
}

#pragma implementation_key(1860)
inline IGradientPtr ITeeCustomShape::GetGradient ( ) {
    struct IGradient * _result = 0;
    HRESULT _hr = get_Gradient(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGradientPtr(_result, false);
}

#pragma implementation_key(1861)
inline long ITeeCustomShape::GetShadowSize ( ) {
    long _result = 0;
    HRESULT _hr = get_ShadowSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1862)
inline void ITeeCustomShape::PutShadowSize ( long Value ) {
    HRESULT _hr = put_ShadowSize(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1863)
inline OLE_COLOR ITeeCustomShape::GetShadowColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_ShadowColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1864)
inline void ITeeCustomShape::PutShadowColor ( OLE_COLOR Value ) {
    HRESULT _hr = put_ShadowColor(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1865)
inline VARIANT_BOOL ITeeCustomShape::GetTransparent ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Transparent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1866)
inline void ITeeCustomShape::PutTransparent ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Transparent(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1867)
inline enum EChartObjectShapeStyle ITeeCustomShape::GetShapeStyle ( ) {
    enum EChartObjectShapeStyle _result;
    HRESULT _hr = get_ShapeStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1868)
inline void ITeeCustomShape::PutShapeStyle ( enum EChartObjectShapeStyle Value ) {
    HRESULT _hr = put_ShapeStyle(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1869)
inline long ITeeCustomShape::GetTransparency ( ) {
    long _result = 0;
    HRESULT _hr = get_Transparency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1870)
inline void ITeeCustomShape::PutTransparency ( long Value ) {
    HRESULT _hr = put_Transparency(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1871)
inline ITeeRectPtr ITeeCustomShape::GetShapeBounds ( ) {
    struct ITeeRect * _result = 0;
    HRESULT _hr = get_ShapeBounds(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITeeRectPtr(_result, false);
}

#pragma implementation_key(1872)
inline enum EPanelBevel ITeeCustomShape::GetBevel ( ) {
    enum EPanelBevel _result;
    HRESULT _hr = get_Bevel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1873)
inline void ITeeCustomShape::PutBevel ( enum EPanelBevel Value ) {
    HRESULT _hr = put_Bevel(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1874)
inline long ITeeCustomShape::GetBevelWidth ( ) {
    long _result = 0;
    HRESULT _hr = get_BevelWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1875)
inline void ITeeCustomShape::PutBevelWidth ( long Value ) {
    HRESULT _hr = put_BevelWidth(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1876)
inline HRESULT ITeeCustomShape::ShowEditorShape ( ) {
    HRESULT _hr = raw_ShowEditorShape();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1877)
inline ITeeShadowPtr ITeeCustomShape::GetShadow ( ) {
    struct ITeeShadow * _result = 0;
    HRESULT _hr = get_Shadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITeeShadowPtr(_result, false);
}

#pragma implementation_key(1878)
inline long ITeeCustomShape::GetRoundSize ( ) {
    long _result = 0;
    HRESULT _hr = get_RoundSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1879)
inline void ITeeCustomShape::PutRoundSize ( long Value ) {
    HRESULT _hr = put_RoundSize(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1880)
inline IPenPtr ITeeCustomShape::GetPen ( ) {
    struct IPen * _result = 0;
    HRESULT _hr = get_Pen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPenPtr(_result, false);
}

#pragma implementation_key(1881)
inline IBackImagePtr ITeeCustomShape::GetPicture ( ) {
    struct IBackImage * _result = 0;
    HRESULT _hr = get_Picture(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IBackImagePtr(_result, false);
}

#pragma implementation_key(1882)
inline HRESULT ITeeCustomShape::Show ( ) {
    HRESULT _hr = raw_Show();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1883)
inline HRESULT ITeeCustomShape::Hide ( ) {
    HRESULT _hr = raw_Hide();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface ITeeShapePosition wrapper method implementations
//

#pragma implementation_key(1884)
inline VARIANT_BOOL ITeeShapePosition::GetCustomPosition ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CustomPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1885)
inline void ITeeShapePosition::PutCustomPosition ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_CustomPosition(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1886)
inline long ITeeShapePosition::GetLeft ( ) {
    long _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1887)
inline void ITeeShapePosition::PutLeft ( long Value ) {
    HRESULT _hr = put_Left(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1888)
inline long ITeeShapePosition::GetTop ( ) {
    long _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1889)
inline void ITeeShapePosition::PutTop ( long Value ) {
    HRESULT _hr = put_Top(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ITitles wrapper method implementations
//

#pragma implementation_key(1890)
inline VARIANT_BOOL ITitles::GetAdjustFrame ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AdjustFrame(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1891)
inline void ITitles::PutAdjustFrame ( VARIANT_BOOL AdjustFrame ) {
    HRESULT _hr = put_AdjustFrame(AdjustFrame);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1892)
inline enum ETitleAlignment ITitles::GetAlignment ( ) {
    enum ETitleAlignment _result;
    HRESULT _hr = get_Alignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1893)
inline void ITitles::PutAlignment ( enum ETitleAlignment Alignment ) {
    HRESULT _hr = put_Alignment(Alignment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1894)
inline IBrushPtr ITitles::GetBrush ( ) {
    struct IBrush * _result = 0;
    HRESULT _hr = get_Brush(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IBrushPtr(_result, false);
}

#pragma implementation_key(1895)
inline IPenPtr ITitles::GetFrame ( ) {
    struct IPen * _result = 0;
    HRESULT _hr = get_Frame(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPenPtr(_result, false);
}

#pragma implementation_key(1896)
inline IStringsPtr ITitles::GetText ( ) {
    struct IStrings * _result = 0;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IStringsPtr(_result, false);
}

#pragma implementation_key(1897)
inline VARIANT_BOOL ITitles::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1898)
inline void ITitles::PutVisible ( VARIANT_BOOL Visible ) {
    HRESULT _hr = put_Visible(Visible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1899)
inline VARIANT_BOOL ITitles::Clicked ( long X, long Y ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Clicked(X, Y, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1900)
inline HRESULT ITitles::Clear ( ) {
    HRESULT _hr = raw_Clear();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1901)
inline _bstr_t ITitles::GetCaption ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1902)
inline void ITitles::PutCaption ( _bstr_t Value ) {
    HRESULT _hr = put_Caption(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1903)
inline long ITitles::GetVertMargin ( ) {
    long _result = 0;
    HRESULT _hr = get_VertMargin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1904)
inline void ITitles::PutVertMargin ( long Value ) {
    HRESULT _hr = put_VertMargin(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ICalendarCell wrapper method implementations
//

#pragma implementation_key(1905)
inline VARIANT_BOOL ICalendarCell::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1906)
inline void ICalendarCell::PutVisible ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Visible(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ICalendarCellUpper wrapper method implementations
//

#pragma implementation_key(1907)
inline _bstr_t ICalendarCellUpper::GetFormat ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Format(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1908)
inline void ICalendarCellUpper::PutFormat ( _bstr_t Value ) {
    HRESULT _hr = put_Format(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1909)
inline VARIANT_BOOL ICalendarCellUpper::GetUpperCase ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UpperCase(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1910)
inline void ICalendarCellUpper::PutUpperCase ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_UpperCase(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ICalendarSeries wrapper method implementations
//

#pragma implementation_key(1911)
inline double ICalendarSeries::GetDate ( ) {
    double _result = 0;
    HRESULT _hr = get_Date(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1912)
inline void ICalendarSeries::PutDate ( double Value ) {
    HRESULT _hr = put_Date(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1913)
inline ICalendarCellPtr ICalendarSeries::GetDays ( ) {
    struct ICalendarCell * _result = 0;
    HRESULT _hr = get_Days(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ICalendarCellPtr(_result, false);
}

#pragma implementation_key(1914)
inline ICalendarCellUpperPtr ICalendarSeries::GetMonths ( ) {
    struct ICalendarCellUpper * _result = 0;
    HRESULT _hr = get_Months(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ICalendarCellUpperPtr(_result, false);
}

#pragma implementation_key(1915)
inline ICalendarCellPtr ICalendarSeries::GetTrailing ( ) {
    struct ICalendarCell * _result = 0;
    HRESULT _hr = get_Trailing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ICalendarCellPtr(_result, false);
}

#pragma implementation_key(1916)
inline ICalendarCellPtr ICalendarSeries::GetSunday ( ) {
    struct ICalendarCell * _result = 0;
    HRESULT _hr = get_Sunday(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ICalendarCellPtr(_result, false);
}

#pragma implementation_key(1917)
inline ICalendarCellPtr ICalendarSeries::GetToday ( ) {
    struct ICalendarCell * _result = 0;
    HRESULT _hr = get_Today(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ICalendarCellPtr(_result, false);
}

#pragma implementation_key(1918)
inline ICalendarCellUpperPtr ICalendarSeries::GetWeekdays ( ) {
    struct ICalendarCellUpper * _result = 0;
    HRESULT _hr = get_Weekdays(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ICalendarCellUpperPtr(_result, false);
}

#pragma implementation_key(1919)
inline HRESULT ICalendarSeries::NextMonth ( ) {
    HRESULT _hr = raw_NextMonth();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1920)
inline HRESULT ICalendarSeries::PreviousMonth ( ) {
    HRESULT _hr = raw_PreviousMonth();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1921)
inline struct TeeRect ICalendarSeries::RectCell ( long Column, long Row ) {
    struct TeeRect _result;
    HRESULT _hr = raw_RectCell(Column, Row, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1922)
inline long ICalendarSeries::Rows ( ) {
    long _result = 0;
    HRESULT _hr = raw_Rows(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1923)
inline struct TeeRect ICalendarSeries::SeriesRect ( ) {
    struct TeeRect _result;
    HRESULT _hr = raw_SeriesRect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1924)
inline VARIANT_BOOL ICalendarSeries::GetNextButtonVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_NextButtonVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1925)
inline void ICalendarSeries::PutNextButtonVisible ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_NextButtonVisible(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1926)
inline VARIANT_BOOL ICalendarSeries::GetPreviousButtonVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PreviousButtonVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1927)
inline void ICalendarSeries::PutPreviousButtonVisible ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_PreviousButtonVisible(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1928)
inline VARIANT_BOOL ICalendarSeries::ClickedDate ( long X, long Y, DATE * ADate ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_ClickedDate(X, Y, ADate, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ITeeShapePanel wrapper method implementations
//

#pragma implementation_key(1929)
inline IPenPtr ITeeShapePanel::GetFrame ( ) {
    struct IPen * _result = 0;
    HRESULT _hr = get_Frame(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPenPtr(_result, false);
}

//
// interface IAxisLabelsItem wrapper method implementations
//

#pragma implementation_key(1930)
inline double IAxisLabelsItem::GetValue ( ) {
    double _result = 0;
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1931)
inline void IAxisLabelsItem::PutValue ( double Value ) {
    HRESULT _hr = put_Value(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1932)
inline _bstr_t IAxisLabelsItem::GetText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1933)
inline void IAxisLabelsItem::PutText ( _bstr_t Value ) {
    HRESULT _hr = put_Text(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1934)
inline VARIANT_BOOL IAxisLabelsItem::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1935)
inline void IAxisLabelsItem::PutVisible ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Visible(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IMarksItem wrapper method implementations
//

#pragma implementation_key(1936)
inline IStringsPtr IMarksItem::GetText ( ) {
    struct IStrings * _result = 0;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IStringsPtr(_result, false);
}

#pragma implementation_key(1937)
inline VARIANT_BOOL IMarksItem::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1938)
inline void IMarksItem::PutVisible ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Visible(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1939)
inline IBrushPtr IMarksItem::GetBrush ( ) {
    struct IBrush * _result = 0;
    HRESULT _hr = get_Brush(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IBrushPtr(_result, false);
}

//
// interface IOrgItem wrapper method implementations
//

#pragma implementation_key(1940)
inline long IOrgItem::AddChild ( _bstr_t Text ) {
    long _result = 0;
    HRESULT _hr = raw_AddChild(Text, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1941)
inline long IOrgItem::AddBrother ( _bstr_t Text ) {
    long _result = 0;
    HRESULT _hr = raw_AddBrother(Text, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1942)
inline _variant_t IOrgItem::GetSeries ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Series(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1943)
inline long IOrgItem::GetSuperior ( ) {
    long _result = 0;
    HRESULT _hr = get_Superior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1944)
inline void IOrgItem::PutSuperior ( long Value ) {
    HRESULT _hr = put_Superior(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1945)
inline _bstr_t IOrgItem::GetText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1946)
inline void IOrgItem::PutText ( _bstr_t Value ) {
    HRESULT _hr = put_Text(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1947)
inline IOrgShapePtr IOrgItem::GetFormat ( ) {
    struct IOrgShape * _result = 0;
    HRESULT _hr = get_Format(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IOrgShapePtr(_result, false);
}

//
// interface IOrgItemCollection wrapper method implementations
//

#pragma implementation_key(1948)
inline IOrgItemPtr IOrgItemCollection::GetItems ( long Index ) {
    struct IOrgItem * _result = 0;
    HRESULT _hr = get_Items(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IOrgItemPtr(_result, false);
}

//
// interface IOrgSeries wrapper method implementations
//

#pragma implementation_key(1949)
inline long IOrgSeries::Add ( _bstr_t Text, long Superior ) {
    long _result = 0;
    HRESULT _hr = raw_Add(Text, Superior, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1950)
inline long IOrgSeries::FirstChild ( long ValueIndex ) {
    long _result = 0;
    HRESULT _hr = raw_FirstChild(ValueIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1951)
inline struct TeeRect IOrgSeries::GetBounds ( ) {
    struct TeeRect _result;
    HRESULT _hr = get_Bounds(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1952)
inline IOrgItemPtr IOrgSeries::GetItem ( long Index ) {
    struct IOrgItem * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IOrgItemPtr(_result, false);
}

#pragma implementation_key(1953)
inline IOrgShapePtr IOrgSeries::GetFormat ( ) {
    struct IOrgShape * _result = 0;
    HRESULT _hr = get_Format(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IOrgShapePtr(_result, false);
}

#pragma implementation_key(1954)
inline IOrgItemCollectionPtr IOrgSeries::GetItems ( ) {
    struct IOrgItemCollection * _result = 0;
    HRESULT _hr = get_Items(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IOrgItemCollectionPtr(_result, false);
}

#pragma implementation_key(1955)
inline enum EOrgLineStyle IOrgSeries::GetLineStyle ( ) {
    enum EOrgLineStyle _result;
    HRESULT _hr = get_LineStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1956)
inline void IOrgSeries::PutLineStyle ( enum EOrgLineStyle Value ) {
    HRESULT _hr = put_LineStyle(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1957)
inline ISpacingPtr IOrgSeries::GetSpacing ( ) {
    struct ISpacing * _result = 0;
    HRESULT _hr = get_Spacing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISpacingPtr(_result, false);
}

//
// interface ITextShape wrapper method implementations
//

#pragma implementation_key(1958)
inline VARIANT_BOOL ITextShape::GetAutoSize ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1959)
inline void ITextShape::PutAutoSize ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_AutoSize(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1960)
inline VARIANT_BOOL ITextShape::GetClipText ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ClipText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1961)
inline void ITextShape::PutClipText ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_ClipText(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1962)
inline short ITextShape::GetCursor ( ) {
    short _result = 0;
    HRESULT _hr = get_Cursor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1963)
inline void ITextShape::PutCursor ( short Value ) {
    HRESULT _hr = put_Cursor(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1964)
inline _bstr_t ITextShape::GetText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1965)
inline void ITextShape::PutText ( _bstr_t Value ) {
    HRESULT _hr = put_Text(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1966)
inline enum ETitleAlignment ITextShape::GetTextAlignment ( ) {
    enum ETitleAlignment _result;
    HRESULT _hr = get_TextAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1967)
inline void ITextShape::PutTextAlignment ( enum ETitleAlignment Value ) {
    HRESULT _hr = put_TextAlignment(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1968)
inline IMarginsPtr ITextShape::GetMargins ( ) {
    struct IMargins * _result = 0;
    HRESULT _hr = get_Margins(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMarginsPtr(_result, false);
}

//
// interface IWall wrapper method implementations
//

#pragma implementation_key(1969)
inline IBrushPtr IWall::GetBrush ( ) {
    struct IBrush * _result = 0;
    HRESULT _hr = get_Brush(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IBrushPtr(_result, false);
}

#pragma implementation_key(1970)
inline OLE_COLOR IWall::GetColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1971)
inline void IWall::PutColor ( OLE_COLOR Color ) {
    HRESULT _hr = put_Color(Color);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1972)
inline IPenPtr IWall::GetPen ( ) {
    struct IPen * _result = 0;
    HRESULT _hr = get_Pen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPenPtr(_result, false);
}

#pragma implementation_key(1973)
inline long IWall::GetSize ( ) {
    long _result = 0;
    HRESULT _hr = get_Size(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1974)
inline void IWall::PutSize ( long Size ) {
    HRESULT _hr = put_Size(Size);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1975)
inline VARIANT_BOOL IWall::GetTransparent ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Transparent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1976)
inline void IWall::PutTransparent ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Transparent(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1977)
inline VARIANT_BOOL IWall::GetDark3D ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Dark3D(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1978)
inline void IWall::PutDark3D ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Dark3D(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1979)
inline IGradientPtr IWall::GetGradient ( ) {
    struct IGradient * _result = 0;
    HRESULT _hr = get_Gradient(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGradientPtr(_result, false);
}

#pragma implementation_key(1980)
inline VARIANT_BOOL IWall::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1981)
inline void IWall::PutVisible ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Visible(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1982)
inline long IWall::GetTransparency ( ) {
    long _result = 0;
    HRESULT _hr = get_Transparency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1983)
inline void IWall::PutTransparency ( long Value ) {
    HRESULT _hr = put_Transparency(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1984)
inline VARIANT_BOOL IWall::GetAutoHide ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoHide(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1985)
inline void IWall::PutAutoHide ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_AutoHide(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1986)
inline IBackImagePtr IWall::GetPicture ( ) {
    struct IBackImage * _result = 0;
    HRESULT _hr = get_Picture(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IBackImagePtr(_result, false);
}

//
// interface IWalls wrapper method implementations
//

#pragma implementation_key(1987)
inline IWallPtr IWalls::GetBottom ( ) {
    struct IWall * _result = 0;
    HRESULT _hr = get_Bottom(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IWallPtr(_result, false);
}

#pragma implementation_key(1988)
inline IWallPtr IWalls::GetLeft ( ) {
    struct IWall * _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IWallPtr(_result, false);
}

#pragma implementation_key(1989)
inline VARIANT_BOOL IWalls::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1990)
inline void IWalls::PutVisible ( VARIANT_BOOL Visible ) {
    HRESULT _hr = put_Visible(Visible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1991)
inline OLE_COLOR IWalls::GetBackColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_BackColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1992)
inline void IWalls::PutBackColor ( OLE_COLOR BackColor ) {
    HRESULT _hr = put_BackColor(BackColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1993)
inline IWallPtr IWalls::GetBack ( ) {
    struct IWall * _result = 0;
    HRESULT _hr = get_Back(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IWallPtr(_result, false);
}

#pragma implementation_key(1994)
inline IWallPtr IWalls::GetRight ( ) {
    struct IWall * _result = 0;
    HRESULT _hr = get_Right(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IWallPtr(_result, false);
}

#pragma implementation_key(1995)
inline void IWalls::PutSize ( long _arg1 ) {
    HRESULT _hr = put_Size(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IGradient wrapper method implementations
//

#pragma implementation_key(1996)
inline enum EGradientDirection IGradient::GetDirection ( ) {
    enum EGradientDirection _result;
    HRESULT _hr = get_Direction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1997)
inline void IGradient::PutDirection ( enum EGradientDirection Direction ) {
    HRESULT _hr = put_Direction(Direction);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1998)
inline OLE_COLOR IGradient::GetStartColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_StartColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1999)
inline void IGradient::PutStartColor ( OLE_COLOR StartColor ) {
    HRESULT _hr = put_StartColor(StartColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2000)
inline OLE_COLOR IGradient::GetEndColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_EndColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2001)
inline void IGradient::PutEndColor ( OLE_COLOR EndColor ) {
    HRESULT _hr = put_EndColor(EndColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2002)
inline VARIANT_BOOL IGradient::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2003)
inline void IGradient::PutVisible ( VARIANT_BOOL Visible ) {
    HRESULT _hr = put_Visible(Visible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2004)
inline OLE_COLOR IGradient::GetMidColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_MidColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2005)
inline void IGradient::PutMidColor ( OLE_COLOR Value ) {
    HRESULT _hr = put_MidColor(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2006)
inline long IGradient::GetRadialX ( ) {
    long _result = 0;
    HRESULT _hr = get_RadialX(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2007)
inline void IGradient::PutRadialX ( long Value ) {
    HRESULT _hr = put_RadialX(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2008)
inline long IGradient::GetRadialY ( ) {
    long _result = 0;
    HRESULT _hr = get_RadialY(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2009)
inline void IGradient::PutRadialY ( long Value ) {
    HRESULT _hr = put_RadialY(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2010)
inline long IGradient::GetBalance ( ) {
    long _result = 0;
    HRESULT _hr = get_Balance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2011)
inline void IGradient::PutBalance ( long Value ) {
    HRESULT _hr = put_Balance(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2012)
inline HRESULT IGradient::ShowEditor ( VARIANT_BOOL OnlyStartColor ) {
    HRESULT _hr = raw_ShowEditor(OnlyStartColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2013)
inline long IGradient::GetAngle ( ) {
    long _result = 0;
    HRESULT _hr = get_Angle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2014)
inline void IGradient::PutAngle ( long Value ) {
    HRESULT _hr = put_Angle(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2015)
inline ISubGradientPtr IGradient::GetSubGradient ( ) {
    struct ISubGradient * _result = 0;
    HRESULT _hr = get_SubGradient(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISubGradientPtr(_result, false);
}

//
// interface IPanel wrapper method implementations
//

#pragma implementation_key(2016)
inline VARIANT_BOOL IPanel::GetBackImageInside ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_BackImageInside(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2017)
inline void IPanel::PutBackImageInside ( VARIANT_BOOL BackImageInside ) {
    HRESULT _hr = put_BackImageInside(BackImageInside);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2018)
inline enum EBackImageMode IPanel::GetBackImageMode ( ) {
    enum EBackImageMode _result;
    HRESULT _hr = get_BackImageMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2019)
inline void IPanel::PutBackImageMode ( enum EBackImageMode BackImageMode ) {
    HRESULT _hr = put_BackImageMode(BackImageMode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2020)
inline enum EPanelBevel IPanel::GetBevelInner ( ) {
    enum EPanelBevel _result;
    HRESULT _hr = get_BevelInner(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2021)
inline void IPanel::PutBevelInner ( enum EPanelBevel BevelInner ) {
    HRESULT _hr = put_BevelInner(BevelInner);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2022)
inline enum EPanelBevel IPanel::GetBevelOuter ( ) {
    enum EPanelBevel _result;
    HRESULT _hr = get_BevelOuter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2023)
inline void IPanel::PutBevelOuter ( enum EPanelBevel BevelOuter ) {
    HRESULT _hr = put_BevelOuter(BevelOuter);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2024)
inline long IPanel::GetBevelWidth ( ) {
    long _result = 0;
    HRESULT _hr = get_BevelWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2025)
inline void IPanel::PutBevelWidth ( long BevelWidth ) {
    HRESULT _hr = put_BevelWidth(BevelWidth);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2026)
inline long IPanel::GetBevelOffset ( ) {
    long _result = 0;
    HRESULT _hr = get_BevelOffset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2027)
inline void IPanel::PutBevelOffset ( long BevelOffset ) {
    HRESULT _hr = put_BevelOffset(BevelOffset);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2028)
inline enum EBorderStyle IPanel::GetBorderStyle ( ) {
    enum EBorderStyle _result;
    HRESULT _hr = get_BorderStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2029)
inline void IPanel::PutBorderStyle ( enum EBorderStyle BorderStyle ) {
    HRESULT _hr = put_BorderStyle(BorderStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2030)
inline OLE_COLOR IPanel::GetColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2031)
inline void IPanel::PutColor ( OLE_COLOR Color ) {
    HRESULT _hr = put_Color(Color);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2032)
inline IGradientPtr IPanel::GetGradient ( ) {
    struct IGradient * _result = 0;
    HRESULT _hr = get_Gradient(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGradientPtr(_result, false);
}

#pragma implementation_key(2033)
inline long IPanel::GetMarginLeft ( ) {
    long _result = 0;
    HRESULT _hr = get_MarginLeft(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2034)
inline void IPanel::PutMarginLeft ( long MarginLeft ) {
    HRESULT _hr = put_MarginLeft(MarginLeft);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2035)
inline long IPanel::GetMarginTop ( ) {
    long _result = 0;
    HRESULT _hr = get_MarginTop(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2036)
inline void IPanel::PutMarginTop ( long MarginTop ) {
    HRESULT _hr = put_MarginTop(MarginTop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2037)
inline long IPanel::GetMarginRight ( ) {
    long _result = 0;
    HRESULT _hr = get_MarginRight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2038)
inline void IPanel::PutMarginRight ( long MarginRight ) {
    HRESULT _hr = put_MarginRight(MarginRight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2039)
inline long IPanel::GetMarginBottom ( ) {
    long _result = 0;
    HRESULT _hr = get_MarginBottom(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2040)
inline void IPanel::PutMarginBottom ( long MarginBottom ) {
    HRESULT _hr = put_MarginBottom(MarginBottom);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2041)
inline HRESULT IPanel::BackImageClear ( ) {
    HRESULT _hr = raw_BackImageClear();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2042)
inline HRESULT IPanel::BackImageLoad ( _bstr_t FileName ) {
    HRESULT _hr = raw_BackImageLoad(FileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2043)
inline enum EMarginUnits IPanel::GetMarginUnits ( ) {
    enum EMarginUnits _result;
    HRESULT _hr = get_MarginUnits(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2044)
inline void IPanel::PutMarginUnits ( enum EMarginUnits Value ) {
    HRESULT _hr = put_MarginUnits(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2045)
inline ITeeShadowPtr IPanel::GetShadow ( ) {
    struct ITeeShadow * _result = 0;
    HRESULT _hr = get_Shadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITeeShadowPtr(_result, false);
}

#pragma implementation_key(2046)
inline long IPanel::GetBorderRound ( ) {
    long _result = 0;
    HRESULT _hr = get_BorderRound(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2047)
inline void IPanel::PutBorderRound ( long Value ) {
    HRESULT _hr = put_BorderRound(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2048)
inline IPenPtr IPanel::GetBorder ( ) {
    struct IPen * _result = 0;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPenPtr(_result, false);
}

#pragma implementation_key(2049)
inline VARIANT_BOOL IPanel::GetBackImageTransparent ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_BackImageTransparent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2050)
inline void IPanel::PutBackImageTransparent ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_BackImageTransparent(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2051)
inline IBackImagePtr IPanel::GetBackImage ( ) {
    struct IBackImage * _result = 0;
    HRESULT _hr = get_BackImage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IBackImagePtr(_result, false);
}

//
// interface IPointer wrapper method implementations
//

#pragma implementation_key(2052)
inline IBrushPtr IPointer::GetBrush ( ) {
    struct IBrush * _result = 0;
    HRESULT _hr = get_Brush(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IBrushPtr(_result, false);
}

#pragma implementation_key(2053)
inline VARIANT_BOOL IPointer::GetDraw3D ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Draw3D(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2054)
inline void IPointer::PutDraw3D ( VARIANT_BOOL Draw3D ) {
    HRESULT _hr = put_Draw3D(Draw3D);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2055)
inline long IPointer::GetHorizontalSize ( ) {
    long _result = 0;
    HRESULT _hr = get_HorizontalSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2056)
inline void IPointer::PutHorizontalSize ( long HorizontalSize ) {
    HRESULT _hr = put_HorizontalSize(HorizontalSize);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2057)
inline long IPointer::GetVerticalSize ( ) {
    long _result = 0;
    HRESULT _hr = get_VerticalSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2058)
inline void IPointer::PutVerticalSize ( long VerticalSize ) {
    HRESULT _hr = put_VerticalSize(VerticalSize);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2059)
inline VARIANT_BOOL IPointer::GetInflateMargins ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_InflateMargins(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2060)
inline void IPointer::PutInflateMargins ( VARIANT_BOOL InflateMargins ) {
    HRESULT _hr = put_InflateMargins(InflateMargins);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2061)
inline IPenPtr IPointer::GetPen ( ) {
    struct IPen * _result = 0;
    HRESULT _hr = get_Pen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPenPtr(_result, false);
}

#pragma implementation_key(2062)
inline enum EPointerStyle IPointer::GetStyle ( ) {
    enum EPointerStyle _result;
    HRESULT _hr = get_Style(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2063)
inline void IPointer::PutStyle ( enum EPointerStyle Style ) {
    HRESULT _hr = put_Style(Style);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2064)
inline VARIANT_BOOL IPointer::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2065)
inline void IPointer::PutVisible ( VARIANT_BOOL Visible ) {
    HRESULT _hr = put_Visible(Visible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2066)
inline VARIANT_BOOL IPointer::GetDark3D ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Dark3D(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2067)
inline void IPointer::PutDark3D ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Dark3D(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2068)
inline HRESULT IPointer::DrawPointer ( long DC, VARIANT_BOOL Is3D, long px, long py, long tmpHoriz, long tmpVert, OLE_COLOR AColor, enum EPointerStyle AStyle ) {
    HRESULT _hr = raw_DrawPointer(DC, Is3D, px, py, tmpHoriz, tmpVert, AColor, AStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2069)
inline IGradientPtr IPointer::GetGradient ( ) {
    struct IGradient * _result = 0;
    HRESULT _hr = get_Gradient(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGradientPtr(_result, false);
}

#pragma implementation_key(2070)
inline long IPointer::GetTransparency ( ) {
    long _result = 0;
    HRESULT _hr = get_Transparency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2071)
inline void IPointer::PutTransparency ( long Value ) {
    HRESULT _hr = put_Transparency(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2072)
inline ITeeShadowPtr IPointer::GetShadow ( ) {
    struct ITeeShadow * _result = 0;
    HRESULT _hr = get_Shadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITeeShadowPtr(_result, false);
}

//
// interface ICustomSeries wrapper method implementations
//

#pragma implementation_key(2073)
inline IPointerPtr ICustomSeries::GetPointer ( ) {
    struct IPointer * _result = 0;
    HRESULT _hr = get_Pointer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPointerPtr(_result, false);
}

#pragma implementation_key(2074)
inline VARIANT_BOOL ICustomSeries::GetStairs ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Stairs(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2075)
inline void ICustomSeries::PutStairs ( VARIANT_BOOL Stairs ) {
    HRESULT _hr = put_Stairs(Stairs);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2076)
inline VARIANT_BOOL ICustomSeries::GetInvertedStairs ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_InvertedStairs(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2077)
inline void ICustomSeries::PutInvertedStairs ( VARIANT_BOOL InvertedStairs ) {
    HRESULT _hr = put_InvertedStairs(InvertedStairs);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2078)
inline IPenPtr ICustomSeries::GetLinePen ( ) {
    struct IPen * _result = 0;
    HRESULT _hr = get_LinePen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPenPtr(_result, false);
}

#pragma implementation_key(2079)
inline enum EBrushStyle ICustomSeries::GetLineBrush ( ) {
    enum EBrushStyle _result;
    HRESULT _hr = get_LineBrush(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2080)
inline void ICustomSeries::PutLineBrush ( enum EBrushStyle LineBrush ) {
    HRESULT _hr = put_LineBrush(LineBrush);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2081)
inline VARIANT_BOOL ICustomSeries::GetClickableLine ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ClickableLine(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2082)
inline void ICustomSeries::PutClickableLine ( VARIANT_BOOL ClickableLine ) {
    HRESULT _hr = put_ClickableLine(ClickableLine);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2083)
inline long ICustomSeries::GetLineHeight ( ) {
    long _result = 0;
    HRESULT _hr = get_LineHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2084)
inline void ICustomSeries::PutLineHeight ( long Value ) {
    HRESULT _hr = put_LineHeight(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2085)
inline VARIANT_BOOL ICustomSeries::GetDark3D ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Dark3D(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2086)
inline void ICustomSeries::PutDark3D ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Dark3D(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2087)
inline IBrushPtr ICustomSeries::GetBrush ( ) {
    struct IBrush * _result = 0;
    HRESULT _hr = get_Brush(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IBrushPtr(_result, false);
}

#pragma implementation_key(2088)
inline VARIANT_BOOL ICustomSeries::GetColorEachLine ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ColorEachLine(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2089)
inline void ICustomSeries::PutColorEachLine ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_ColorEachLine(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2090)
inline IPenPtr ICustomSeries::GetOutline ( ) {
    struct IPen * _result = 0;
    HRESULT _hr = get_Outline(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPenPtr(_result, false);
}

#pragma implementation_key(2091)
inline long ICustomSeries::GetTransparency ( ) {
    long _result = 0;
    HRESULT _hr = get_Transparency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2092)
inline void ICustomSeries::PutTransparency ( long Value ) {
    HRESULT _hr = put_Transparency(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2093)
inline ITeeShadowPtr ICustomSeries::GetShadow ( ) {
    struct ITeeShadow * _result = 0;
    HRESULT _hr = get_Shadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITeeShadowPtr(_result, false);
}

#pragma implementation_key(2094)
inline enum ETreatNullsStyle ICustomSeries::GetTreatNulls ( ) {
    enum ETreatNullsStyle _result;
    HRESULT _hr = get_TreatNulls(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2095)
inline void ICustomSeries::PutTreatNulls ( enum ETreatNullsStyle Value ) {
    HRESULT _hr = put_TreatNulls(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAreaSeries wrapper method implementations
//

#pragma implementation_key(2096)
inline enum EBrushStyle IAreaSeries::GetAreaBrush ( ) {
    enum EBrushStyle _result;
    HRESULT _hr = get_AreaBrush(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2097)
inline void IAreaSeries::PutAreaBrush ( enum EBrushStyle AreaBrush ) {
    HRESULT _hr = put_AreaBrush(AreaBrush);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2098)
inline IPenPtr IAreaSeries::GetAreaPen ( ) {
    struct IPen * _result = 0;
    HRESULT _hr = get_AreaPen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPenPtr(_result, false);
}

#pragma implementation_key(2099)
inline enum EMultiArea IAreaSeries::GetMultiArea ( ) {
    enum EMultiArea _result;
    HRESULT _hr = get_MultiArea(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2100)
inline void IAreaSeries::PutMultiArea ( enum EMultiArea MultiArea ) {
    HRESULT _hr = put_MultiArea(MultiArea);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2101)
inline long IAreaSeries::GetOriginPos ( long AValueIndex ) {
    long _result = 0;
    HRESULT _hr = raw_GetOriginPos(AValueIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2102)
inline VARIANT_BOOL IAreaSeries::GetUseYOrigin ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseYOrigin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2103)
inline void IAreaSeries::PutUseYOrigin ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_UseYOrigin(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2104)
inline double IAreaSeries::GetYOrigin ( ) {
    double _result = 0;
    HRESULT _hr = get_YOrigin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2105)
inline void IAreaSeries::PutYOrigin ( double Value ) {
    HRESULT _hr = put_YOrigin(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2106)
inline IGradientPtr IAreaSeries::GetGradient ( ) {
    struct IGradient * _result = 0;
    HRESULT _hr = get_Gradient(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGradientPtr(_result, false);
}

#pragma implementation_key(2107)
inline OLE_COLOR IAreaSeries::GetAreaColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_AreaColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2108)
inline void IAreaSeries::PutAreaColor ( OLE_COLOR Value ) {
    HRESULT _hr = put_AreaColor(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2109)
inline IBrushPtr IAreaSeries::GetAreaChartBrush ( ) {
    struct IBrush * _result = 0;
    HRESULT _hr = get_AreaChartBrush(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IBrushPtr(_result, false);
}

#pragma implementation_key(2110)
inline long IAreaSeries::GetStackGroup ( ) {
    long _result = 0;
    HRESULT _hr = get_StackGroup(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2111)
inline void IAreaSeries::PutStackGroup ( long Value ) {
    HRESULT _hr = put_StackGroup(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IPointSeries wrapper method implementations
//

#pragma implementation_key(2112)
inline IPointerPtr IPointSeries::GetPointer ( ) {
    struct IPointer * _result = 0;
    HRESULT _hr = get_Pointer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPointerPtr(_result, false);
}

#pragma implementation_key(2113)
inline VARIANT_BOOL IPointSeries::GetDark3D ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Dark3D(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2114)
inline void IPointSeries::PutDark3D ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Dark3D(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2115)
inline long IPointSeries::GetTransparency ( ) {
    long _result = 0;
    HRESULT _hr = get_Transparency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2116)
inline void IPointSeries::PutTransparency ( long Value ) {
    HRESULT _hr = put_Transparency(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2117)
inline VARIANT_BOOL IPointSeries::GetFastPoint ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_FastPoint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2118)
inline void IPointSeries::PutFastPoint ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_FastPoint(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2119)
inline enum ETreatNullsStyle IPointSeries::GetTreatNulls ( ) {
    enum ETreatNullsStyle _result;
    HRESULT _hr = get_TreatNulls(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2120)
inline void IPointSeries::PutTreatNulls ( enum ETreatNullsStyle Value ) {
    HRESULT _hr = put_TreatNulls(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ILineSeries wrapper method implementations
//

#pragma implementation_key(2121)
inline enum ECustomSeriesStack ILineSeries::GetStacked ( ) {
    enum ECustomSeriesStack _result;
    HRESULT _hr = get_Stacked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2122)
inline void ILineSeries::PutStacked ( enum ECustomSeriesStack Value ) {
    HRESULT _hr = put_Stacked(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2123)
inline IGradientPtr ILineSeries::GetGradient ( ) {
    struct IGradient * _result = 0;
    HRESULT _hr = get_Gradient(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGradientPtr(_result, false);
}

//
// interface IBubbleSeries wrapper method implementations
//

#pragma implementation_key(2124)
inline IValueListPtr IBubbleSeries::GetRadiusValues ( ) {
    struct IValueList * _result = 0;
    HRESULT _hr = get_RadiusValues(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IValueListPtr(_result, false);
}

#pragma implementation_key(2125)
inline VARIANT_BOOL IBubbleSeries::GetSquared ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Squared(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2126)
inline void IBubbleSeries::PutSquared ( VARIANT_BOOL Squared ) {
    HRESULT _hr = put_Squared(Squared);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2127)
inline long IBubbleSeries::AddBubble ( double AX, double AY, double ARadius, _bstr_t AXLabel, OLE_COLOR Value ) {
    long _result = 0;
    HRESULT _hr = raw_AddBubble(AX, AY, ARadius, AXLabel, Value, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IGanttSeries wrapper method implementations
//

#pragma implementation_key(2128)
inline IPenPtr IGanttSeries::GetConnectingPen ( ) {
    struct IPen * _result = 0;
    HRESULT _hr = get_ConnectingPen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPenPtr(_result, false);
}

#pragma implementation_key(2129)
inline IValueListPtr IGanttSeries::GetEndValues ( ) {
    struct IValueList * _result = 0;
    HRESULT _hr = get_EndValues(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IValueListPtr(_result, false);
}

#pragma implementation_key(2130)
inline IValueListPtr IGanttSeries::GetStartValues ( ) {
    struct IValueList * _result = 0;
    HRESULT _hr = get_StartValues(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IValueListPtr(_result, false);
}

#pragma implementation_key(2131)
inline IValueListPtr IGanttSeries::GetNextTask ( ) {
    struct IValueList * _result = 0;
    HRESULT _hr = get_NextTask(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IValueListPtr(_result, false);
}

#pragma implementation_key(2132)
inline long IGanttSeries::AddGantt ( double AStart, double AEnd, double AY, _bstr_t SomeLabel ) {
    long _result = 0;
    HRESULT _hr = raw_AddGantt(AStart, AEnd, AY, SomeLabel, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2133)
inline long IGanttSeries::AddGanttColor ( double AStart, double AEnd, double AY, _bstr_t AXLabel, OLE_COLOR Value ) {
    long _result = 0;
    HRESULT _hr = raw_AddGanttColor(AStart, AEnd, AY, AXLabel, Value, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IShapeSeries wrapper method implementations
//

#pragma implementation_key(2134)
inline enum ETextAlignment IShapeSeries::GetAlignment ( ) {
    enum ETextAlignment _result;
    HRESULT _hr = get_Alignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2135)
inline void IShapeSeries::PutAlignment ( enum ETextAlignment Alignment ) {
    HRESULT _hr = put_Alignment(Alignment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2136)
inline IBrushPtr IShapeSeries::GetBrush ( ) {
    struct IBrush * _result = 0;
    HRESULT _hr = get_Brush(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IBrushPtr(_result, false);
}

#pragma implementation_key(2137)
inline IChartFontPtr IShapeSeries::GetFont ( ) {
    struct IChartFont * _result = 0;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IChartFontPtr(_result, false);
}

#pragma implementation_key(2138)
inline IPenPtr IShapeSeries::GetPen ( ) {
    struct IPen * _result = 0;
    HRESULT _hr = get_Pen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPenPtr(_result, false);
}

#pragma implementation_key(2139)
inline VARIANT_BOOL IShapeSeries::GetRoundRectangle ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_RoundRectangle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2140)
inline void IShapeSeries::PutRoundRectangle ( VARIANT_BOOL RoundRectangle ) {
    HRESULT _hr = put_RoundRectangle(RoundRectangle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2141)
inline enum EShapeStyle IShapeSeries::GetStyle ( ) {
    enum EShapeStyle _result;
    HRESULT _hr = get_Style(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2142)
inline void IShapeSeries::PutStyle ( enum EShapeStyle Style ) {
    HRESULT _hr = put_Style(Style);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2143)
inline IStringsPtr IShapeSeries::GetText ( ) {
    struct IStrings * _result = 0;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IStringsPtr(_result, false);
}

#pragma implementation_key(2144)
inline VARIANT_BOOL IShapeSeries::GetTransparent ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Transparent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2145)
inline void IShapeSeries::PutTransparent ( VARIANT_BOOL Transparent ) {
    HRESULT _hr = put_Transparent(Transparent);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2146)
inline double IShapeSeries::GetX0 ( ) {
    double _result = 0;
    HRESULT _hr = get_X0(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2147)
inline void IShapeSeries::PutX0 ( double X0 ) {
    HRESULT _hr = put_X0(X0);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2148)
inline double IShapeSeries::GetX1 ( ) {
    double _result = 0;
    HRESULT _hr = get_X1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2149)
inline void IShapeSeries::PutX1 ( double X1 ) {
    HRESULT _hr = put_X1(X1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2150)
inline enum EShapeXYStyle IShapeSeries::GetXYStyle ( ) {
    enum EShapeXYStyle _result;
    HRESULT _hr = get_XYStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2151)
inline void IShapeSeries::PutXYStyle ( enum EShapeXYStyle XYStyle ) {
    HRESULT _hr = put_XYStyle(XYStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2152)
inline double IShapeSeries::GetY0 ( ) {
    double _result = 0;
    HRESULT _hr = get_Y0(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2153)
inline void IShapeSeries::PutY0 ( double Y0 ) {
    HRESULT _hr = put_Y0(Y0);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2154)
inline double IShapeSeries::GetY1 ( ) {
    double _result = 0;
    HRESULT _hr = get_Y1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2155)
inline void IShapeSeries::PutY1 ( double Y1 ) {
    HRESULT _hr = put_Y1(Y1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2156)
inline HRESULT IShapeSeries::ShapeImageLoad ( _bstr_t FileName ) {
    HRESULT _hr = raw_ShapeImageLoad(FileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2157)
inline HRESULT IShapeSeries::ShapeImageClear ( ) {
    HRESULT _hr = raw_ShapeImageClear();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2158)
inline enum ETeeVertAlign IShapeSeries::GetVertAlign ( ) {
    enum ETeeVertAlign _result;
    HRESULT _hr = get_VertAlign(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2159)
inline void IShapeSeries::PutVertAlign ( enum ETeeVertAlign Value ) {
    HRESULT _hr = put_VertAlign(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2160)
inline IGradientPtr IShapeSeries::GetGradient ( ) {
    struct IGradient * _result = 0;
    HRESULT _hr = get_Gradient(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGradientPtr(_result, false);
}

#pragma implementation_key(2161)
inline long IShapeSeries::GetTransparency ( ) {
    long _result = 0;
    HRESULT _hr = get_Transparency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2162)
inline void IShapeSeries::PutTransparency ( long Value ) {
    HRESULT _hr = put_Transparency(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IArrowSeries wrapper method implementations
//

#pragma implementation_key(2163)
inline long IArrowSeries::GetArrowHeight ( ) {
    long _result = 0;
    HRESULT _hr = get_ArrowHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2164)
inline void IArrowSeries::PutArrowHeight ( long ArrowHeight ) {
    HRESULT _hr = put_ArrowHeight(ArrowHeight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2165)
inline long IArrowSeries::GetArrowWidth ( ) {
    long _result = 0;
    HRESULT _hr = get_ArrowWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2166)
inline void IArrowSeries::PutArrowWidth ( long ArrowWidth ) {
    HRESULT _hr = put_ArrowWidth(ArrowWidth);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2167)
inline IValueListPtr IArrowSeries::GetEndXValues ( ) {
    struct IValueList * _result = 0;
    HRESULT _hr = get_EndXValues(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IValueListPtr(_result, false);
}

#pragma implementation_key(2168)
inline IValueListPtr IArrowSeries::GetEndYValues ( ) {
    struct IValueList * _result = 0;
    HRESULT _hr = get_EndYValues(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IValueListPtr(_result, false);
}

#pragma implementation_key(2169)
inline IValueListPtr IArrowSeries::GetStartXValues ( ) {
    struct IValueList * _result = 0;
    HRESULT _hr = get_StartXValues(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IValueListPtr(_result, false);
}

#pragma implementation_key(2170)
inline IValueListPtr IArrowSeries::GetStartYValues ( ) {
    struct IValueList * _result = 0;
    HRESULT _hr = get_StartYValues(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IValueListPtr(_result, false);
}

#pragma implementation_key(2171)
inline long IArrowSeries::AddArrow ( double X0, double Y0, double X1, double Y1, _bstr_t ALabel, OLE_COLOR Value ) {
    long _result = 0;
    HRESULT _hr = raw_AddArrow(X0, Y0, X1, Y1, ALabel, Value, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2172)
inline long IArrowSeries::GetArrowPercent ( ) {
    long _result = 0;
    HRESULT _hr = get_ArrowPercent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2173)
inline void IArrowSeries::PutArrowPercent ( long Value ) {
    HRESULT _hr = put_ArrowPercent(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ICustomBarSeries wrapper method implementations
//

#pragma implementation_key(2174)
inline enum EMultiBar ICustomBarSeries::GetMultiBar ( ) {
    enum EMultiBar _result;
    HRESULT _hr = get_MultiBar(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2175)
inline void ICustomBarSeries::PutMultiBar ( enum EMultiBar MultiBar ) {
    HRESULT _hr = put_MultiBar(MultiBar);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2176)
inline VARIANT_BOOL ICustomBarSeries::GetAutoMarkPosition ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoMarkPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2177)
inline void ICustomBarSeries::PutAutoMarkPosition ( VARIANT_BOOL AutoMarkPosition ) {
    HRESULT _hr = put_AutoMarkPosition(AutoMarkPosition);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2178)
inline IBrushPtr ICustomBarSeries::GetBarBrush ( ) {
    struct IBrush * _result = 0;
    HRESULT _hr = get_BarBrush(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IBrushPtr(_result, false);
}

#pragma implementation_key(2179)
inline IPenPtr ICustomBarSeries::GetBarPen ( ) {
    struct IPen * _result = 0;
    HRESULT _hr = get_BarPen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPenPtr(_result, false);
}

#pragma implementation_key(2180)
inline enum EBarStyle ICustomBarSeries::GetBarStyle ( ) {
    enum EBarStyle _result;
    HRESULT _hr = get_BarStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2181)
inline void ICustomBarSeries::PutBarStyle ( enum EBarStyle BarStyle ) {
    HRESULT _hr = put_BarStyle(BarStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2182)
inline long ICustomBarSeries::GetBarWidthPercent ( ) {
    long _result = 0;
    HRESULT _hr = get_BarWidthPercent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2183)
inline void ICustomBarSeries::PutBarWidthPercent ( long BarWidthPercent ) {
    HRESULT _hr = put_BarWidthPercent(BarWidthPercent);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2184)
inline VARIANT_BOOL ICustomBarSeries::GetDark3D ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Dark3D(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2185)
inline void ICustomBarSeries::PutDark3D ( VARIANT_BOOL Dark3D ) {
    HRESULT _hr = put_Dark3D(Dark3D);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2186)
inline long ICustomBarSeries::GetOffsetPercent ( ) {
    long _result = 0;
    HRESULT _hr = get_OffsetPercent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2187)
inline void ICustomBarSeries::PutOffsetPercent ( long OffsetPercent ) {
    HRESULT _hr = put_OffsetPercent(OffsetPercent);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2188)
inline VARIANT_BOOL ICustomBarSeries::GetSideMargins ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SideMargins(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2189)
inline void ICustomBarSeries::PutSideMargins ( VARIANT_BOOL SideMargins ) {
    HRESULT _hr = put_SideMargins(SideMargins);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2190)
inline VARIANT_BOOL ICustomBarSeries::GetUseOrigin ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseOrigin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2191)
inline void ICustomBarSeries::PutUseOrigin ( VARIANT_BOOL UseOrigin ) {
    HRESULT _hr = put_UseOrigin(UseOrigin);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2192)
inline double ICustomBarSeries::GetOrigin ( ) {
    double _result = 0;
    HRESULT _hr = get_Origin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2193)
inline void ICustomBarSeries::PutOrigin ( double Origin ) {
    HRESULT _hr = put_Origin(Origin);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2194)
inline long ICustomBarSeries::GetOriginPos ( long SomeValueIndex ) {
    long _result = 0;
    HRESULT _hr = raw_GetOriginPos(SomeValueIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2195)
inline VARIANT_BOOL ICustomBarSeries::GetAutoBarSize ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoBarSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2196)
inline void ICustomBarSeries::PutAutoBarSize ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_AutoBarSize(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2197)
inline HRESULT ICustomBarSeries::BarImageLoad ( _bstr_t FileName ) {
    HRESULT _hr = raw_BarImageLoad(FileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2198)
inline HRESULT ICustomBarSeries::BarImageClear ( ) {
    HRESULT _hr = raw_BarImageClear();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2199)
inline IGradientPtr ICustomBarSeries::GetGradient ( ) {
    struct IGradient * _result = 0;
    HRESULT _hr = get_Gradient(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGradientPtr(_result, false);
}

#pragma implementation_key(2200)
inline long ICustomBarSeries::GetStackGroup ( ) {
    long _result = 0;
    HRESULT _hr = get_StackGroup(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2201)
inline void ICustomBarSeries::PutStackGroup ( long Value ) {
    HRESULT _hr = put_StackGroup(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2202)
inline long ICustomBarSeries::GetConePercent ( ) {
    long _result = 0;
    HRESULT _hr = get_ConePercent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2203)
inline void ICustomBarSeries::PutConePercent ( long Value ) {
    HRESULT _hr = put_ConePercent(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2204)
inline IPenPtr ICustomBarSeries::GetTickLines ( ) {
    struct IPen * _result = 0;
    HRESULT _hr = get_TickLines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPenPtr(_result, false);
}

#pragma implementation_key(2205)
inline long ICustomBarSeries::GetDepthPercent ( ) {
    long _result = 0;
    HRESULT _hr = get_DepthPercent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2206)
inline void ICustomBarSeries::PutDepthPercent ( long Value ) {
    HRESULT _hr = put_DepthPercent(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2207)
inline ITeeShadowPtr ICustomBarSeries::GetShadow ( ) {
    struct ITeeShadow * _result = 0;
    HRESULT _hr = get_Shadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITeeShadowPtr(_result, false);
}

#pragma implementation_key(2208)
inline long ICustomBarSeries::GetTransparency ( ) {
    long _result = 0;
    HRESULT _hr = get_Transparency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2209)
inline void ICustomBarSeries::PutTransparency ( long Value ) {
    HRESULT _hr = put_Transparency(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2210)
inline long ICustomBarSeries::GetBevelSize ( ) {
    long _result = 0;
    HRESULT _hr = get_BevelSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2211)
inline void ICustomBarSeries::PutBevelSize ( long Value ) {
    HRESULT _hr = put_BevelSize(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2212)
inline long ICustomBarSeries::GetDarkPen ( ) {
    long _result = 0;
    HRESULT _hr = get_DarkPen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2213)
inline void ICustomBarSeries::PutDarkPen ( long Value ) {
    HRESULT _hr = put_DarkPen(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IBarSeries wrapper method implementations
//

#pragma implementation_key(2214)
inline long IBarSeries::GetBarWidth ( ) {
    long _result = 0;
    HRESULT _hr = get_BarWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2215)
inline void IBarSeries::PutBarWidth ( long BarWidth ) {
    HRESULT _hr = put_BarWidth(BarWidth);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2216)
inline HRESULT IBarSeries::CalcBarBounds ( long ValueIndex ) {
    HRESULT _hr = raw_CalcBarBounds(ValueIndex);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IHorizBarSeries wrapper method implementations
//

#pragma implementation_key(2217)
inline long IHorizBarSeries::GetBarHeight ( ) {
    long _result = 0;
    HRESULT _hr = get_BarHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2218)
inline void IHorizBarSeries::PutBarHeight ( long BarHeight ) {
    HRESULT _hr = put_BarHeight(BarHeight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2219)
inline HRESULT IHorizBarSeries::CalcBarBounds ( long ValueIndex ) {
    HRESULT _hr = raw_CalcBarBounds(ValueIndex);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface ICandleSeries wrapper method implementations
//

#pragma implementation_key(2220)
inline enum ECandleStyle ICandleSeries::GetCandleStyle ( ) {
    enum ECandleStyle _result;
    HRESULT _hr = get_CandleStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2221)
inline void ICandleSeries::PutCandleStyle ( enum ECandleStyle CandleStyle ) {
    HRESULT _hr = put_CandleStyle(CandleStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2222)
inline long ICandleSeries::GetCandleWidth ( ) {
    long _result = 0;
    HRESULT _hr = get_CandleWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2223)
inline void ICandleSeries::PutCandleWidth ( long CandleWidth ) {
    HRESULT _hr = put_CandleWidth(CandleWidth);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2224)
inline IValueListPtr ICandleSeries::GetCloseValues ( ) {
    struct IValueList * _result = 0;
    HRESULT _hr = get_CloseValues(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IValueListPtr(_result, false);
}

#pragma implementation_key(2225)
inline IValueListPtr ICandleSeries::GetDateValues ( ) {
    struct IValueList * _result = 0;
    HRESULT _hr = get_DateValues(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IValueListPtr(_result, false);
}

#pragma implementation_key(2226)
inline OLE_COLOR ICandleSeries::GetDownCloseColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_DownCloseColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2227)
inline void ICandleSeries::PutDownCloseColor ( OLE_COLOR Value ) {
    HRESULT _hr = put_DownCloseColor(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2228)
inline IValueListPtr ICandleSeries::GetHighValues ( ) {
    struct IValueList * _result = 0;
    HRESULT _hr = get_HighValues(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IValueListPtr(_result, false);
}

#pragma implementation_key(2229)
inline IValueListPtr ICandleSeries::GetLowValues ( ) {
    struct IValueList * _result = 0;
    HRESULT _hr = get_LowValues(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IValueListPtr(_result, false);
}

#pragma implementation_key(2230)
inline IValueListPtr ICandleSeries::GetOpenValues ( ) {
    struct IValueList * _result = 0;
    HRESULT _hr = get_OpenValues(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IValueListPtr(_result, false);
}

#pragma implementation_key(2231)
inline VARIANT_BOOL ICandleSeries::GetShowCloseTick ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowCloseTick(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2232)
inline void ICandleSeries::PutShowCloseTick ( VARIANT_BOOL ShowCloseTick ) {
    HRESULT _hr = put_ShowCloseTick(ShowCloseTick);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2233)
inline VARIANT_BOOL ICandleSeries::GetShowOpenTick ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowOpenTick(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2234)
inline void ICandleSeries::PutShowOpenTick ( VARIANT_BOOL ShowOpenTick ) {
    HRESULT _hr = put_ShowOpenTick(ShowOpenTick);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2235)
inline OLE_COLOR ICandleSeries::GetUpCloseColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_UpCloseColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2236)
inline void ICandleSeries::PutUpCloseColor ( OLE_COLOR Value ) {
    HRESULT _hr = put_UpCloseColor(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2237)
inline long ICandleSeries::AddCandle ( double DateValue, double OpenValue, double HighValue, double LowValue, double CloseValue ) {
    long _result = 0;
    HRESULT _hr = raw_AddCandle(DateValue, OpenValue, HighValue, LowValue, CloseValue, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2238)
inline IPenPtr ICandleSeries::GetHighLowPen ( ) {
    struct IPen * _result = 0;
    HRESULT _hr = get_HighLowPen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPenPtr(_result, false);
}

#pragma implementation_key(2239)
inline enum ECandleColorStyle ICandleSeries::GetColorStyle ( ) {
    enum ECandleColorStyle _result;
    HRESULT _hr = get_ColorStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2240)
inline void ICandleSeries::PutColorStyle ( enum ECandleColorStyle Value ) {
    HRESULT _hr = put_ColorStyle(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2241)
inline IGradientPtr ICandleSeries::GetUpCloseGradient ( ) {
    struct IGradient * _result = 0;
    HRESULT _hr = get_UpCloseGradient(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGradientPtr(_result, false);
}

#pragma implementation_key(2242)
inline IGradientPtr ICandleSeries::GetDownCloseGradient ( ) {
    struct IGradient * _result = 0;
    HRESULT _hr = get_DownCloseGradient(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGradientPtr(_result, false);
}

//
// interface ICustomPolarSeries wrapper method implementations
//

#pragma implementation_key(2243)
inline double ICustomPolarSeries::GetAngleIncrement ( ) {
    double _result = 0;
    HRESULT _hr = get_AngleIncrement(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2244)
inline void ICustomPolarSeries::PutAngleIncrement ( double AngleIncrement ) {
    HRESULT _hr = put_AngleIncrement(AngleIncrement);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2245)
inline VARIANT_BOOL ICustomPolarSeries::GetCloseCircle ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CloseCircle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2246)
inline void ICustomPolarSeries::PutCloseCircle ( VARIANT_BOOL CloseCircle ) {
    HRESULT _hr = put_CloseCircle(CloseCircle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2247)
inline IPenPtr ICustomPolarSeries::GetPen ( ) {
    struct IPen * _result = 0;
    HRESULT _hr = get_Pen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPenPtr(_result, false);
}

#pragma implementation_key(2248)
inline IPointerPtr ICustomPolarSeries::GetPointer ( ) {
    struct IPointer * _result = 0;
    HRESULT _hr = get_Pointer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPointerPtr(_result, false);
}

#pragma implementation_key(2249)
inline double ICustomPolarSeries::GetRadiusIncrement ( ) {
    double _result = 0;
    HRESULT _hr = get_RadiusIncrement(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2250)
inline void ICustomPolarSeries::PutRadiusIncrement ( double RadiusIncrement ) {
    HRESULT _hr = put_RadiusIncrement(RadiusIncrement);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2251)
inline IValueListPtr ICustomPolarSeries::GetAngleValues ( ) {
    struct IValueList * _result = 0;
    HRESULT _hr = get_AngleValues(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IValueListPtr(_result, false);
}

#pragma implementation_key(2252)
inline IValueListPtr ICustomPolarSeries::GetRadiusValues ( ) {
    struct IValueList * _result = 0;
    HRESULT _hr = get_RadiusValues(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IValueListPtr(_result, false);
}

#pragma implementation_key(2253)
inline HRESULT ICustomPolarSeries::DrawRing ( double Value, long Z ) {
    HRESULT _hr = raw_DrawRing(Value, Z);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2254)
inline IPenPtr ICustomPolarSeries::GetCirclePen ( ) {
    struct IPen * _result = 0;
    HRESULT _hr = get_CirclePen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPenPtr(_result, false);
}

#pragma implementation_key(2255)
inline ICircleLabelsPtr ICustomPolarSeries::GetCircleLabels ( ) {
    struct ICircleLabels * _result = 0;
    HRESULT _hr = get_CircleLabels(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ICircleLabelsPtr(_result, false);
}

#pragma implementation_key(2256)
inline IBrushPtr ICustomPolarSeries::GetBrush ( ) {
    struct IBrush * _result = 0;
    HRESULT _hr = get_Brush(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IBrushPtr(_result, false);
}

#pragma implementation_key(2257)
inline HRESULT ICustomPolarSeries::LoadBackImage ( _bstr_t FileName ) {
    HRESULT _hr = raw_LoadBackImage(FileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2258)
inline HRESULT ICustomPolarSeries::ClearBackImage ( ) {
    HRESULT _hr = raw_ClearBackImage();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2259)
inline VARIANT_BOOL ICustomPolarSeries::GetClockWiseLabels ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ClockWiseLabels(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2260)
inline void ICustomPolarSeries::PutClockWiseLabels ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_ClockWiseLabels(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2261)
inline VARIANT_BOOL ICustomPolarSeries::GetCircleLabelsInside ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CircleLabelsInside(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2262)
inline void ICustomPolarSeries::PutCircleLabelsInside ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_CircleLabelsInside(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2263)
inline long ICustomPolarSeries::GetTransparency ( ) {
    long _result = 0;
    HRESULT _hr = get_Transparency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2264)
inline void ICustomPolarSeries::PutTransparency ( long Value ) {
    HRESULT _hr = put_Transparency(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2265)
inline IGradientPtr ICustomPolarSeries::GetCircleGradient ( ) {
    struct IGradient * _result = 0;
    HRESULT _hr = get_CircleGradient(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGradientPtr(_result, false);
}

#pragma implementation_key(2266)
inline HRESULT ICustomPolarSeries::DrawZone ( double Min, double Max, long Z ) {
    HRESULT _hr = raw_DrawZone(Min, Max, Z);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2267)
inline long ICustomPolarSeries::GetLabelsMargin ( ) {
    long _result = 0;
    HRESULT _hr = get_LabelsMargin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2268)
inline void ICustomPolarSeries::PutLabelsMargin ( long Value ) {
    HRESULT _hr = put_LabelsMargin(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2269)
inline enum ETreatNullsStyle ICustomPolarSeries::GetTreatNulls ( ) {
    enum ETreatNullsStyle _result;
    HRESULT _hr = get_TreatNulls(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2270)
inline void ICustomPolarSeries::PutTreatNulls ( enum ETreatNullsStyle Value ) {
    HRESULT _hr = put_TreatNulls(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IErrorBarSeries wrapper method implementations
//

#pragma implementation_key(2271)
inline IPenPtr IErrorBarSeries::GetErrorPen ( ) {
    struct IPen * _result = 0;
    HRESULT _hr = get_ErrorPen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPenPtr(_result, false);
}

#pragma implementation_key(2272)
inline IValueListPtr IErrorBarSeries::GetErrorValues ( ) {
    struct IValueList * _result = 0;
    HRESULT _hr = get_ErrorValues(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IValueListPtr(_result, false);
}

#pragma implementation_key(2273)
inline long IErrorBarSeries::GetErrorWidth ( ) {
    long _result = 0;
    HRESULT _hr = get_ErrorWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2274)
inline void IErrorBarSeries::PutErrorWidth ( long ErrorWidth ) {
    HRESULT _hr = put_ErrorWidth(ErrorWidth);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2275)
inline enum EErrorWidthUnits IErrorBarSeries::GetErrorWidthUnits ( ) {
    enum EErrorWidthUnits _result;
    HRESULT _hr = get_ErrorWidthUnits(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2276)
inline void IErrorBarSeries::PutErrorWidthUnits ( enum EErrorWidthUnits ErrorWidthUnits ) {
    HRESULT _hr = put_ErrorWidthUnits(ErrorWidthUnits);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2277)
inline long IErrorBarSeries::AddErrorBar ( double AX, double AY, double AError, _bstr_t AXLabel, OLE_COLOR Value ) {
    long _result = 0;
    HRESULT _hr = raw_AddErrorBar(AX, AY, AError, AXLabel, Value, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IBezierSeries wrapper method implementations
//

#pragma implementation_key(2278)
inline long IBezierSeries::GetNumBezierPoints ( ) {
    long _result = 0;
    HRESULT _hr = get_NumBezierPoints(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2279)
inline void IBezierSeries::PutNumBezierPoints ( long Value ) {
    HRESULT _hr = put_NumBezierPoints(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2280)
inline enum EBezierStyle IBezierSeries::GetBezierStyle ( ) {
    enum EBezierStyle _result;
    HRESULT _hr = get_BezierStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2281)
inline void IBezierSeries::PutBezierStyle ( enum EBezierStyle Value ) {
    HRESULT _hr = put_BezierStyle(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IErrorSeries wrapper method implementations
//

#pragma implementation_key(2282)
inline enum EErrorSeriesStyle IErrorSeries::GetErrorStyle ( ) {
    enum EErrorSeriesStyle _result;
    HRESULT _hr = get_ErrorStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2283)
inline void IErrorSeries::PutErrorStyle ( enum EErrorSeriesStyle Value ) {
    HRESULT _hr = put_ErrorStyle(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IPoint3DSeries wrapper method implementations
//

#pragma implementation_key(2284)
inline double IPoint3DSeries::GetDepthSize ( ) {
    double _result = 0;
    HRESULT _hr = get_DepthSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2285)
inline void IPoint3DSeries::PutDepthSize ( double Value ) {
    HRESULT _hr = put_DepthSize(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2286)
inline IPointerPtr IPoint3DSeries::GetPointer ( ) {
    struct IPointer * _result = 0;
    HRESULT _hr = get_Pointer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPointerPtr(_result, false);
}

#pragma implementation_key(2287)
inline IPenPtr IPoint3DSeries::GetLinePen ( ) {
    struct IPen * _result = 0;
    HRESULT _hr = get_LinePen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPenPtr(_result, false);
}

#pragma implementation_key(2288)
inline IPenPtr IPoint3DSeries::GetBaseLine ( ) {
    struct IPen * _result = 0;
    HRESULT _hr = get_BaseLine(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPenPtr(_result, false);
}

//
// interface IPolarSeries wrapper method implementations
//

#pragma implementation_key(2289)
inline long IPolarSeries::AddPolar ( double Angle, double Value, _bstr_t ALabel, OLE_COLOR Valu ) {
    long _result = 0;
    HRESULT _hr = raw_AddPolar(Angle, Value, ALabel, Valu, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ITeeCommander wrapper method implementations
//

#pragma implementation_key(2290)
inline VARIANT_BOOL ITeeCommander::GetLabelValues ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_LabelValues(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2291)
inline void ITeeCommander::PutLabelValues ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_LabelValues(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2292)
inline OLE_COLOR ITeeCommander::GetColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2293)
inline void ITeeCommander::PutColor ( OLE_COLOR Value ) {
    HRESULT _hr = put_Color(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2294)
inline VARIANT_BOOL ITeeCommander::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2295)
inline void ITeeCommander::PutEnabled ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Enabled(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2296)
inline void ITeeCommander::PutEditor ( struct ITeeEditor * _arg1 ) {
    HRESULT _hr = put_Editor(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2297)
inline void ITeeCommander::PutPreviewer ( struct ITeePreviewer * _arg1 ) {
    HRESULT _hr = put_Previewer(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2298)
inline void ITeeCommander::PutEditorLink ( long _arg1 ) {
    HRESULT _hr = put_EditorLink(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2299)
inline void ITeeCommander::PutPreviewerLink ( long _arg1 ) {
    HRESULT _hr = put_PreviewerLink(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2300)
inline VARIANT_BOOL ITeeCommander::GetVertical ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Vertical(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2301)
inline void ITeeCommander::PutVertical ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Vertical(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2302)
inline _variant_t ITeeCommander::GetControls ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Controls(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2303)
inline void ITeeCommander::PutControls ( const _variant_t & Value ) {
    HRESULT _hr = put_Controls(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2304)
inline _variant_t ITeeCommander::GetButtons ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Buttons(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2305)
inline void ITeeCommander::PutButtons ( const _variant_t & Value ) {
    HRESULT _hr = put_Buttons(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2306)
inline enum EPanelBevel ITeeCommander::GetBevelInner ( ) {
    enum EPanelBevel _result;
    HRESULT _hr = get_BevelInner(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2307)
inline void ITeeCommander::PutBevelInner ( enum EPanelBevel Value ) {
    HRESULT _hr = put_BevelInner(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2308)
inline enum EPanelBevel ITeeCommander::GetBevelOuter ( ) {
    enum EPanelBevel _result;
    HRESULT _hr = get_BevelOuter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2309)
inline void ITeeCommander::PutBevelOuter ( enum EPanelBevel Value ) {
    HRESULT _hr = put_BevelOuter(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2310)
inline long ITeeCommander::GetBevelWidth ( ) {
    long _result = 0;
    HRESULT _hr = get_BevelWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2311)
inline void ITeeCommander::PutBevelWidth ( long Value ) {
    HRESULT _hr = put_BevelWidth(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2312)
inline long ITeeCommander::GetBevelOffset ( ) {
    long _result = 0;
    HRESULT _hr = get_BevelOffset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2313)
inline void ITeeCommander::PutBevelOffset ( long Value ) {
    HRESULT _hr = put_BevelOffset(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2314)
inline enum EBorderStyle ITeeCommander::GetBorderStyle ( ) {
    enum EBorderStyle _result;
    HRESULT _hr = get_BorderStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2315)
inline void ITeeCommander::PutBorderStyle ( enum EBorderStyle Value ) {
    HRESULT _hr = put_BorderStyle(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2316)
inline enum ETeeCommanderControls ITeeCommander::GetDefaultButton ( ) {
    enum ETeeCommanderControls _result;
    HRESULT _hr = get_DefaultButton(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2317)
inline void ITeeCommander::PutDefaultButton ( enum ETeeCommanderControls Value ) {
    HRESULT _hr = put_DefaultButton(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2318)
inline ITeeCommanderButtonPtr ITeeCommander::GetButton3D ( ) {
    struct ITeeCommanderButton * _result = 0;
    HRESULT _hr = get_Button3D(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITeeCommanderButtonPtr(_result, false);
}

#pragma implementation_key(2319)
inline ITeeCommanderButtonPtr ITeeCommander::GetButtonCopy ( ) {
    struct ITeeCommanderButton * _result = 0;
    HRESULT _hr = get_ButtonCopy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITeeCommanderButtonPtr(_result, false);
}

#pragma implementation_key(2320)
inline ITeeCommanderButtonPtr ITeeCommander::GetButtonDepth ( ) {
    struct ITeeCommanderButton * _result = 0;
    HRESULT _hr = get_ButtonDepth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITeeCommanderButtonPtr(_result, false);
}

#pragma implementation_key(2321)
inline ITeeCommanderButtonPtr ITeeCommander::GetButtonEdit ( ) {
    struct ITeeCommanderButton * _result = 0;
    HRESULT _hr = get_ButtonEdit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITeeCommanderButtonPtr(_result, false);
}

#pragma implementation_key(2322)
inline ITeeCommanderButtonPtr ITeeCommander::GetButtonMove ( ) {
    struct ITeeCommanderButton * _result = 0;
    HRESULT _hr = get_ButtonMove(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITeeCommanderButtonPtr(_result, false);
}

#pragma implementation_key(2323)
inline ITeeCommanderButtonPtr ITeeCommander::GetButtonNormal ( ) {
    struct ITeeCommanderButton * _result = 0;
    HRESULT _hr = get_ButtonNormal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITeeCommanderButtonPtr(_result, false);
}

#pragma implementation_key(2324)
inline ITeeCommanderButtonPtr ITeeCommander::GetButtonPrint ( ) {
    struct ITeeCommanderButton * _result = 0;
    HRESULT _hr = get_ButtonPrint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITeeCommanderButtonPtr(_result, false);
}

#pragma implementation_key(2325)
inline ITeeCommanderButtonPtr ITeeCommander::GetButtonRotate ( ) {
    struct ITeeCommanderButton * _result = 0;
    HRESULT _hr = get_ButtonRotate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITeeCommanderButtonPtr(_result, false);
}

#pragma implementation_key(2326)
inline ITeeCommanderButtonPtr ITeeCommander::GetButtonSave ( ) {
    struct ITeeCommanderButton * _result = 0;
    HRESULT _hr = get_ButtonSave(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITeeCommanderButtonPtr(_result, false);
}

#pragma implementation_key(2327)
inline ITeeCommanderButtonPtr ITeeCommander::GetButtonZoom ( ) {
    struct ITeeCommanderButton * _result = 0;
    HRESULT _hr = get_ButtonZoom(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITeeCommanderButtonPtr(_result, false);
}

#pragma implementation_key(2328)
inline HRESULT ITeeCommander::RepositionControls ( ) {
    HRESULT _hr = raw_RepositionControls();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2329)
inline IGradientPtr ITeeCommander::GetGradient ( ) {
    struct IGradient * _result = 0;
    HRESULT _hr = get_Gradient(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGradientPtr(_result, false);
}

#pragma implementation_key(2330)
inline VARIANT_BOOL ITeeCommander::GetFullRotation ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_FullRotation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2331)
inline void ITeeCommander::PutFullRotation ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_FullRotation(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IClockSeries wrapper method implementations
//

#pragma implementation_key(2332)
inline VARIANT_BOOL IClockSeries::GetRomanNumbers ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_RomanNumbers(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2333)
inline void IClockSeries::PutRomanNumbers ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_RomanNumbers(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2334)
inline IPenPtr IClockSeries::GetPenHours ( ) {
    struct IPen * _result = 0;
    HRESULT _hr = get_PenHours(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPenPtr(_result, false);
}

#pragma implementation_key(2335)
inline IPenPtr IClockSeries::GetPenMinutes ( ) {
    struct IPen * _result = 0;
    HRESULT _hr = get_PenMinutes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPenPtr(_result, false);
}

#pragma implementation_key(2336)
inline IPenPtr IClockSeries::GetPenSeconds ( ) {
    struct IPen * _result = 0;
    HRESULT _hr = get_PenSeconds(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPenPtr(_result, false);
}

//
// interface IWindRoseSeries wrapper method implementations
//

#pragma implementation_key(2337)
inline VARIANT_BOOL IWindRoseSeries::GetMirrorAngles ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_MirrorAngles(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2338)
inline void IWindRoseSeries::PutMirrorAngles ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_MirrorAngles(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2339)
inline VARIANT_BOOL IWindRoseSeries::GetMirrorLabels ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_MirrorLabels(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2340)
inline void IWindRoseSeries::PutMirrorLabels ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_MirrorLabels(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IBar3DSeries wrapper method implementations
//

#pragma implementation_key(2341)
inline long IBar3DSeries::AddBar ( double AX, double AY, double AOffset, _bstr_t ALabel, OLE_COLOR AColor ) {
    long _result = 0;
    HRESULT _hr = raw_AddBar(AX, AY, AOffset, ALabel, AColor, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2342)
inline IValueListPtr IBar3DSeries::GetOffsetValues ( ) {
    struct IValueList * _result = 0;
    HRESULT _hr = get_OffsetValues(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IValueListPtr(_result, false);
}

//
// interface IImageBarSeries wrapper method implementations
//

#pragma implementation_key(2343)
inline VARIANT_BOOL IImageBarSeries::LoadImage ( _bstr_t FileName ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_LoadImage(FileName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2344)
inline HRESULT IImageBarSeries::ClearImage ( ) {
    HRESULT _hr = raw_ClearImage();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2345)
inline VARIANT_BOOL IImageBarSeries::GetImageTiled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ImageTiled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2346)
inline void IImageBarSeries::PutImageTiled ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_ImageTiled(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IColorBandTool wrapper method implementations
//

#pragma implementation_key(2347)
inline IBrushPtr IColorBandTool::GetBrush ( ) {
    struct IBrush * _result = 0;
    HRESULT _hr = get_Brush(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IBrushPtr(_result, false);
}

#pragma implementation_key(2348)
inline IPenPtr IColorBandTool::GetPen ( ) {
    struct IPen * _result = 0;
    HRESULT _hr = get_Pen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPenPtr(_result, false);
}

#pragma implementation_key(2349)
inline double IColorBandTool::GetEndValue ( ) {
    double _result = 0;
    HRESULT _hr = get_EndValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2350)
inline void IColorBandTool::PutEndValue ( double Value ) {
    HRESULT _hr = put_EndValue(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2351)
inline double IColorBandTool::GetStartValue ( ) {
    double _result = 0;
    HRESULT _hr = get_StartValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2352)
inline void IColorBandTool::PutStartValue ( double Value ) {
    HRESULT _hr = put_StartValue(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2353)
inline VARIANT_BOOL IColorBandTool::GetDrawBehind ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DrawBehind(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2354)
inline void IColorBandTool::PutDrawBehind ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_DrawBehind(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2355)
inline OLE_COLOR IColorBandTool::GetColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2356)
inline void IColorBandTool::PutColor ( OLE_COLOR Value ) {
    HRESULT _hr = put_Color(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2357)
inline IGradientPtr IColorBandTool::GetGradient ( ) {
    struct IGradient * _result = 0;
    HRESULT _hr = get_Gradient(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGradientPtr(_result, false);
}

#pragma implementation_key(2358)
inline long IColorBandTool::GetTransparency ( ) {
    long _result = 0;
    HRESULT _hr = get_Transparency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2359)
inline void IColorBandTool::PutTransparency ( long Value ) {
    HRESULT _hr = put_Transparency(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2360)
inline VARIANT_BOOL IColorBandTool::Clicked ( long X, long Y ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Clicked(X, Y, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2361)
inline VARIANT_BOOL IColorBandTool::GetResizeStart ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ResizeStart(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2362)
inline void IColorBandTool::PutResizeStart ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_ResizeStart(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2363)
inline VARIANT_BOOL IColorBandTool::GetResizeEnd ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ResizeEnd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2364)
inline void IColorBandTool::PutResizeEnd ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_ResizeEnd(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2365)
inline IPenPtr IColorBandTool::GetStartLinePen ( ) {
    struct IPen * _result = 0;
    HRESULT _hr = get_StartLinePen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPenPtr(_result, false);
}

#pragma implementation_key(2366)
inline IPenPtr IColorBandTool::GetEndLinePen ( ) {
    struct IPen * _result = 0;
    HRESULT _hr = get_EndLinePen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPenPtr(_result, false);
}

#pragma implementation_key(2367)
inline VARIANT_BOOL IColorBandTool::GetDrawBehindAxes ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DrawBehindAxes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2368)
inline void IColorBandTool::PutDrawBehindAxes ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_DrawBehindAxes(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2369)
inline short IColorBandTool::GetCursor ( ) {
    short _result = 0;
    HRESULT _hr = get_Cursor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2370)
inline void IColorBandTool::PutCursor ( short Value ) {
    HRESULT _hr = put_Cursor(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2371)
inline ITeePicturePtr IColorBandTool::GetPicture ( ) {
    struct ITeePicture * _result = 0;
    HRESULT _hr = get_Picture(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITeePicturePtr(_result, false);
}

//
// interface ILegendSymbol wrapper method implementations
//

#pragma implementation_key(2372)
inline VARIANT_BOOL ILegendSymbol::GetContinuous ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Continuous(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2373)
inline void ILegendSymbol::PutContinuous ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Continuous(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2374)
inline enum ELegendSymbolPosition ILegendSymbol::GetPosition ( ) {
    enum ELegendSymbolPosition _result;
    HRESULT _hr = get_Position(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2375)
inline void ILegendSymbol::PutPosition ( enum ELegendSymbolPosition Value ) {
    HRESULT _hr = put_Position(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2376)
inline long ILegendSymbol::GetWidth ( ) {
    long _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2377)
inline void ILegendSymbol::PutWidth ( long Value ) {
    HRESULT _hr = put_Width(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2378)
inline enum ELegendSymbolSize ILegendSymbol::GetWidthUnits ( ) {
    enum ELegendSymbolSize _result;
    HRESULT _hr = get_WidthUnits(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2379)
inline void ILegendSymbol::PutWidthUnits ( enum ELegendSymbolSize Value ) {
    HRESULT _hr = put_WidthUnits(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2380)
inline VARIANT_BOOL ILegendSymbol::GetDefaultPen ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DefaultPen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2381)
inline void ILegendSymbol::PutDefaultPen ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_DefaultPen(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2382)
inline IPenPtr ILegendSymbol::GetPen ( ) {
    struct IPen * _result = 0;
    HRESULT _hr = get_Pen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPenPtr(_result, false);
}

#pragma implementation_key(2383)
inline VARIANT_BOOL ILegendSymbol::GetSquared ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Squared(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2384)
inline void ILegendSymbol::PutSquared ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Squared(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2385)
inline VARIANT_BOOL ILegendSymbol::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2386)
inline void ILegendSymbol::PutVisible ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Visible(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2387)
inline IGradientPtr ILegendSymbol::GetGradient ( ) {
    struct IGradient * _result = 0;
    HRESULT _hr = get_Gradient(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGradientPtr(_result, false);
}

#pragma implementation_key(2388)
inline ITeeShadowPtr ILegendSymbol::GetShadow ( ) {
    struct ITeeShadow * _result = 0;
    HRESULT _hr = get_Shadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITeeShadowPtr(_result, false);
}

//
// interface ITeeFont wrapper method implementations
//

#pragma implementation_key(2389)
inline long ITeeFont::GetInterCharSize ( ) {
    long _result = 0;
    HRESULT _hr = get_InterCharSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2390)
inline void ITeeFont::PutInterCharSize ( long Value ) {
    HRESULT _hr = put_InterCharSize(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2391)
inline ITeeShadowPtr ITeeFont::GetShadow ( ) {
    struct ITeeShadow * _result = 0;
    HRESULT _hr = get_Shadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITeeShadowPtr(_result, false);
}

#pragma implementation_key(2392)
inline IPenPtr ITeeFont::GetOutline ( ) {
    struct IPen * _result = 0;
    HRESULT _hr = get_Outline(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPenPtr(_result, false);
}

#pragma implementation_key(2393)
inline IGradientPtr ITeeFont::GetGradient ( ) {
    struct IGradient * _result = 0;
    HRESULT _hr = get_Gradient(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGradientPtr(_result, false);
}

#pragma implementation_key(2394)
inline HRESULT ITeeFont::ShowEditor ( ) {
    HRESULT _hr = raw_ShowEditor();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2395)
inline ITeePicturePtr ITeeFont::GetPicture ( ) {
    struct ITeePicture * _result = 0;
    HRESULT _hr = get_Picture(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITeePicturePtr(_result, false);
}

//
// interface ITeePreviewPanel wrapper method implementations
//

#pragma implementation_key(2396)
inline VARIANT_BOOL ITeePreviewPanel::GetAllowResize ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AllowResize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2397)
inline void ITeePreviewPanel::PutAllowResize ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_AllowResize(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2398)
inline VARIANT_BOOL ITeePreviewPanel::GetAllowMove ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AllowMove(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2399)
inline void ITeePreviewPanel::PutAllowMove ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_AllowMove(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2400)
inline VARIANT_BOOL ITeePreviewPanel::GetAsBitmap ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AsBitmap(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2401)
inline void ITeePreviewPanel::PutAsBitmap ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_AsBitmap(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2402)
inline VARIANT_BOOL ITeePreviewPanel::GetDragImage ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DragImage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2403)
inline void ITeePreviewPanel::PutDragImage ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_DragImage(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2404)
inline enum ETeePreviewPanelOrientation ITeePreviewPanel::GetOrientation ( ) {
    enum ETeePreviewPanelOrientation _result;
    HRESULT _hr = get_Orientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2405)
inline void ITeePreviewPanel::PutOrientation ( enum ETeePreviewPanelOrientation Value ) {
    HRESULT _hr = put_Orientation(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2406)
inline OLE_COLOR ITeePreviewPanel::GetPaperColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_PaperColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2407)
inline void ITeePreviewPanel::PutPaperColor ( OLE_COLOR Value ) {
    HRESULT _hr = put_PaperColor(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2408)
inline OLE_COLOR ITeePreviewPanel::GetShadowColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_ShadowColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2409)
inline void ITeePreviewPanel::PutShadowColor ( OLE_COLOR Value ) {
    HRESULT _hr = put_ShadowColor(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2410)
inline long ITeePreviewPanel::GetShadowSize ( ) {
    long _result = 0;
    HRESULT _hr = get_ShadowSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2411)
inline void ITeePreviewPanel::PutShadowSize ( long Value ) {
    HRESULT _hr = put_ShadowSize(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2412)
inline VARIANT_BOOL ITeePreviewPanel::GetShowImage ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowImage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2413)
inline void ITeePreviewPanel::PutShowImage ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_ShowImage(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2414)
inline _bstr_t ITeePreviewPanel::GetTitle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Title(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2415)
inline void ITeePreviewPanel::PutTitle ( _bstr_t Value ) {
    HRESULT _hr = put_Title(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2416)
inline HRESULT ITeePreviewPanel::Repaint ( ) {
    HRESULT _hr = raw_Repaint();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2417)
inline ITeePanelsListPtr ITeePreviewPanel::GetPanels ( ) {
    struct ITeePanelsList * _result = 0;
    HRESULT _hr = get_Panels(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITeePanelsListPtr(_result, false);
}

#pragma implementation_key(2418)
inline HRESULT ITeePreviewPanel::AddChart ( struct ITChart * Value ) {
    HRESULT _hr = raw_AddChart(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2419)
inline IGradientPtr ITeePreviewPanel::GetGradient ( ) {
    struct IGradient * _result = 0;
    HRESULT _hr = get_Gradient(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGradientPtr(_result, false);
}

#pragma implementation_key(2420)
inline IPenPtr ITeePreviewPanel::GetMargins ( ) {
    struct IPen * _result = 0;
    HRESULT _hr = get_Margins(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPenPtr(_result, false);
}

#pragma implementation_key(2421)
inline HRESULT ITeePreviewPanel::PrintPage ( ) {
    HRESULT _hr = raw_PrintPage();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2422)
inline HRESULT ITeePreviewPanel::AddChartLink ( long Value ) {
    HRESULT _hr = raw_AddChartLink(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2423)
inline ICanvasPtr ITeePreviewPanel::GetCanvas ( ) {
    struct ICanvas * _result = 0;
    HRESULT _hr = get_Canvas(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ICanvasPtr(_result, false);
}

#pragma implementation_key(2424)
inline ITeeRectPtr ITeePreviewPanel::GetPaperRect ( ) {
    struct ITeeRect * _result = 0;
    HRESULT _hr = get_PaperRect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITeeRectPtr(_result, false);
}

//
// interface ICustomBoxSeries wrapper method implementations
//

#pragma implementation_key(2425)
inline IPointerPtr ICustomBoxSeries::GetExtrOut ( ) {
    struct IPointer * _result = 0;
    HRESULT _hr = get_ExtrOut(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPointerPtr(_result, false);
}

#pragma implementation_key(2426)
inline IPenPtr ICustomBoxSeries::GetMedianPen ( ) {
    struct IPen * _result = 0;
    HRESULT _hr = get_MedianPen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPenPtr(_result, false);
}

#pragma implementation_key(2427)
inline IPointerPtr ICustomBoxSeries::GetMildOut ( ) {
    struct IPointer * _result = 0;
    HRESULT _hr = get_MildOut(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPointerPtr(_result, false);
}

#pragma implementation_key(2428)
inline double ICustomBoxSeries::GetPosition ( ) {
    double _result = 0;
    HRESULT _hr = get_Position(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2429)
inline void ICustomBoxSeries::PutPosition ( double Value ) {
    HRESULT _hr = put_Position(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2430)
inline double ICustomBoxSeries::GetWhiskerLength ( ) {
    double _result = 0;
    HRESULT _hr = get_WhiskerLength(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2431)
inline void ICustomBoxSeries::PutWhiskerLength ( double Value ) {
    HRESULT _hr = put_WhiskerLength(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2432)
inline IPenPtr ICustomBoxSeries::GetWhiskerPen ( ) {
    struct IPen * _result = 0;
    HRESULT _hr = get_WhiskerPen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPenPtr(_result, false);
}

#pragma implementation_key(2433)
inline IPointerPtr ICustomBoxSeries::GetBox ( ) {
    struct IPointer * _result = 0;
    HRESULT _hr = get_Box(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPointerPtr(_result, false);
}

#pragma implementation_key(2434)
inline double ICustomBoxSeries::GetMedian ( ) {
    double _result = 0;
    HRESULT _hr = get_Median(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2435)
inline void ICustomBoxSeries::PutMedian ( double Value ) {
    HRESULT _hr = put_Median(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2436)
inline double ICustomBoxSeries::GetQuartile1 ( ) {
    double _result = 0;
    HRESULT _hr = get_Quartile1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2437)
inline void ICustomBoxSeries::PutQuartile1 ( double Value ) {
    HRESULT _hr = put_Quartile1(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2438)
inline double ICustomBoxSeries::GetQuartile3 ( ) {
    double _result = 0;
    HRESULT _hr = get_Quartile3(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2439)
inline void ICustomBoxSeries::PutQuartile3 ( double Value ) {
    HRESULT _hr = put_Quartile3(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2440)
inline double ICustomBoxSeries::GetInnerFence1 ( ) {
    double _result = 0;
    HRESULT _hr = get_InnerFence1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2441)
inline void ICustomBoxSeries::PutInnerFence1 ( double Value ) {
    HRESULT _hr = put_InnerFence1(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2442)
inline double ICustomBoxSeries::GetInnerFence3 ( ) {
    double _result = 0;
    HRESULT _hr = get_InnerFence3(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2443)
inline void ICustomBoxSeries::PutInnerFence3 ( double Value ) {
    HRESULT _hr = put_InnerFence3(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2444)
inline double ICustomBoxSeries::GetOuterFence1 ( ) {
    double _result = 0;
    HRESULT _hr = get_OuterFence1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2445)
inline void ICustomBoxSeries::PutOuterFence1 ( double Value ) {
    HRESULT _hr = put_OuterFence1(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2446)
inline double ICustomBoxSeries::GetOuterFence3 ( ) {
    double _result = 0;
    HRESULT _hr = get_OuterFence3(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2447)
inline void ICustomBoxSeries::PutOuterFence3 ( double Value ) {
    HRESULT _hr = put_OuterFence3(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2448)
inline double ICustomBoxSeries::GetAdjacentPoint1 ( ) {
    double _result = 0;
    HRESULT _hr = get_AdjacentPoint1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2449)
inline void ICustomBoxSeries::PutAdjacentPoint1 ( double Value ) {
    HRESULT _hr = put_AdjacentPoint1(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2450)
inline double ICustomBoxSeries::GetAdjacentPoint3 ( ) {
    double _result = 0;
    HRESULT _hr = get_AdjacentPoint3(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2451)
inline void ICustomBoxSeries::PutAdjacentPoint3 ( double Value ) {
    HRESULT _hr = put_AdjacentPoint3(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2452)
inline VARIANT_BOOL ICustomBoxSeries::GetUseCustomValues ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseCustomValues(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2453)
inline void ICustomBoxSeries::PutUseCustomValues ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_UseCustomValues(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IHorizBoxPlotSeries wrapper method implementations
//

#pragma implementation_key(2454)
inline double IHorizBoxPlotSeries::MaxYValue ( ) {
    double _result = 0;
    HRESULT _hr = raw_MaxYValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2455)
inline double IHorizBoxPlotSeries::MinYValue ( ) {
    double _result = 0;
    HRESULT _hr = raw_MinYValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IBarJoinSeries wrapper method implementations
//

#pragma implementation_key(2456)
inline IPenPtr IBarJoinSeries::GetJoinPen ( ) {
    struct IPen * _result = 0;
    HRESULT _hr = get_JoinPen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPenPtr(_result, false);
}

//
// interface ISmithSeries wrapper method implementations
//

#pragma implementation_key(2457)
inline IPenPtr ISmithSeries::GetCCirclePen ( ) {
    struct IPen * _result = 0;
    HRESULT _hr = get_CCirclePen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPenPtr(_result, false);
}

#pragma implementation_key(2458)
inline IPenPtr ISmithSeries::GetCirclePen ( ) {
    struct IPen * _result = 0;
    HRESULT _hr = get_CirclePen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPenPtr(_result, false);
}

#pragma implementation_key(2459)
inline VARIANT_BOOL ISmithSeries::GetCLabels ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CLabels(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2460)
inline void ISmithSeries::PutCLabels ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_CLabels(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2461)
inline ITeeFontPtr ISmithSeries::GetCLabelsFont ( ) {
    struct ITeeFont * _result = 0;
    HRESULT _hr = get_CLabelsFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITeeFontPtr(_result, false);
}

#pragma implementation_key(2462)
inline IValueListPtr ISmithSeries::GetResistenceValues ( ) {
    struct IValueList * _result = 0;
    HRESULT _hr = get_ResistenceValues(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IValueListPtr(_result, false);
}

#pragma implementation_key(2463)
inline IValueListPtr ISmithSeries::GetReactanceValues ( ) {
    struct IValueList * _result = 0;
    HRESULT _hr = get_ReactanceValues(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IValueListPtr(_result, false);
}

#pragma implementation_key(2464)
inline IPointerPtr ISmithSeries::GetPointer ( ) {
    struct IPointer * _result = 0;
    HRESULT _hr = get_Pointer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPointerPtr(_result, false);
}

#pragma implementation_key(2465)
inline IPenPtr ISmithSeries::GetRCirclePen ( ) {
    struct IPen * _result = 0;
    HRESULT _hr = get_RCirclePen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPenPtr(_result, false);
}

#pragma implementation_key(2466)
inline VARIANT_BOOL ISmithSeries::GetRLabels ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_RLabels(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2467)
inline void ISmithSeries::PutRLabels ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_RLabels(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2468)
inline ITeeFontPtr ISmithSeries::GetRLabelsFont ( ) {
    struct ITeeFont * _result = 0;
    HRESULT _hr = get_RLabelsFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITeeFontPtr(_result, false);
}

#pragma implementation_key(2469)
inline _bstr_t ISmithSeries::GetImagSymbol ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ImagSymbol(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2470)
inline void ISmithSeries::PutImagSymbol ( _bstr_t Value ) {
    HRESULT _hr = put_ImagSymbol(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IContourSeries wrapper method implementations
//

#pragma implementation_key(2471)
inline long IContourSeries::GetNumLevels ( ) {
    long _result = 0;
    HRESULT _hr = get_NumLevels(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2472)
inline void IContourSeries::PutNumLevels ( long Value ) {
    HRESULT _hr = put_NumLevels(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2473)
inline VARIANT_BOOL IContourSeries::GetYPositionLevel ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_YPositionLevel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2474)
inline void IContourSeries::PutYPositionLevel ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_YPositionLevel(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2475)
inline double IContourSeries::GetYPosition ( ) {
    double _result = 0;
    HRESULT _hr = get_YPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2476)
inline void IContourSeries::PutYPosition ( double Value ) {
    HRESULT _hr = put_YPosition(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2477)
inline IContourLevelsPtr IContourSeries::GetLevels ( ) {
    struct IContourLevels * _result = 0;
    HRESULT _hr = get_Levels(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IContourLevelsPtr(_result, false);
}

#pragma implementation_key(2478)
inline VARIANT_BOOL IContourSeries::GetAutomaticLevels ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutomaticLevels(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2479)
inline void IContourSeries::PutAutomaticLevels ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_AutomaticLevels(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2480)
inline HRESULT IContourSeries::CreateAutoLevels ( ) {
    HRESULT _hr = raw_CreateAutoLevels();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2481)
inline ISmoothPointsPtr IContourSeries::GetSmoothing ( ) {
    struct ISmoothPoints * _result = 0;
    HRESULT _hr = get_Smoothing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISmoothPointsPtr(_result, false);
}

#pragma implementation_key(2482)
inline IContourMarksPtr IContourSeries::GetContourMarks ( ) {
    struct IContourMarks * _result = 0;
    HRESULT _hr = get_ContourMarks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IContourMarksPtr(_result, false);
}

#pragma implementation_key(2483)
inline IChartHiddenPenPtr IContourSeries::GetFrame ( ) {
    struct IChartHiddenPen * _result = 0;
    HRESULT _hr = get_Frame(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IChartHiddenPenPtr(_result, false);
}

#pragma implementation_key(2484)
inline IPointerPtr IContourSeries::GetPointer ( ) {
    struct IPointer * _result = 0;
    HRESULT _hr = get_Pointer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPointerPtr(_result, false);
}

#pragma implementation_key(2485)
inline long IContourSeries::GetTransparency ( ) {
    long _result = 0;
    HRESULT _hr = get_Transparency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2486)
inline void IContourSeries::PutTransparency ( long Value ) {
    HRESULT _hr = put_Transparency(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2487)
inline VARIANT_BOOL IContourSeries::GetLegendLines ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_LegendLines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2488)
inline void IContourSeries::PutLegendLines ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_LegendLines(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2489)
inline OLE_COLOR IContourSeries::GetLinesColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_LinesColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2490)
inline void IContourSeries::PutLinesColor ( OLE_COLOR Value ) {
    HRESULT _hr = put_LinesColor(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IBoxPlotSeries wrapper method implementations
//

#pragma implementation_key(2491)
inline double IBoxPlotSeries::MaxXValue ( ) {
    double _result = 0;
    HRESULT _hr = raw_MaxXValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2492)
inline double IBoxPlotSeries::MinXValue ( ) {
    double _result = 0;
    HRESULT _hr = raw_MinXValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IMapPolygon wrapper method implementations
//

#pragma implementation_key(2493)
inline IBrushPtr IMapPolygon::GetBrush ( ) {
    struct IBrush * _result = 0;
    HRESULT _hr = get_Brush(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IBrushPtr(_result, false);
}

#pragma implementation_key(2494)
inline OLE_COLOR IMapPolygon::GetColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2495)
inline void IMapPolygon::PutColor ( OLE_COLOR Value ) {
    HRESULT _hr = put_Color(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2496)
inline IGradientPtr IMapPolygon::GetGradient ( ) {
    struct IGradient * _result = 0;
    HRESULT _hr = get_Gradient(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGradientPtr(_result, false);
}

#pragma implementation_key(2497)
inline VARIANT_BOOL IMapPolygon::GetParentBrush ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ParentBrush(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2498)
inline void IMapPolygon::PutParentBrush ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_ParentBrush(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2499)
inline VARIANT_BOOL IMapPolygon::GetParentPen ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ParentPen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2500)
inline void IMapPolygon::PutParentPen ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_ParentPen(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2501)
inline IPenPtr IMapPolygon::GetPen ( ) {
    struct IPen * _result = 0;
    HRESULT _hr = get_Pen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPenPtr(_result, false);
}

#pragma implementation_key(2502)
inline _bstr_t IMapPolygon::GetText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2503)
inline void IMapPolygon::PutText ( _bstr_t Value ) {
    HRESULT _hr = put_Text(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2504)
inline double IMapPolygon::GetZ ( ) {
    double _result = 0;
    HRESULT _hr = get_Z(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2505)
inline void IMapPolygon::PutZ ( double Value ) {
    HRESULT _hr = put_Z(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2506)
inline long IMapPolygon::AddXY ( double X, double Y ) {
    long _result = 0;
    HRESULT _hr = raw_AddXY(X, Y, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2507)
inline long IMapPolygon::GetTransparency ( ) {
    long _result = 0;
    HRESULT _hr = get_Transparency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2508)
inline void IMapPolygon::PutTransparency ( long Value ) {
    HRESULT _hr = put_Transparency(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2509)
inline VARIANT_BOOL IMapPolygon::Visible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2510)
inline VARIANT_BOOL IMapPolygon::GetClosed ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Closed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2511)
inline void IMapPolygon::PutClosed ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Closed(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2512)
inline IPointArrayPtr IMapPolygon::GetGetPoints ( ) {
    struct IPointArray * _result = 0;
    HRESULT _hr = get_GetPoints(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPointArrayPtr(_result, false);
}

#pragma implementation_key(2513)
inline long IMapPolygon::GetIndex ( ) {
    long _result = 0;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2514)
inline void IMapPolygon::PutIndex ( long Value ) {
    HRESULT _hr = put_Index(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2515)
inline VARIANT_BOOL IMapPolygon::GetActive ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Active(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2516)
inline void IMapPolygon::PutActive ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Active(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IMapPolygonList wrapper method implementations
//

#pragma implementation_key(2517)
inline long IMapPolygonList::Add ( ) {
    long _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2518)
inline IMapPolygonPtr IMapPolygonList::GetPolygon ( long Index ) {
    struct IMapPolygon * _result = 0;
    HRESULT _hr = get_Polygon(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMapPolygonPtr(_result, false);
}

#pragma implementation_key(2519)
inline long IMapPolygonList::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IMapSeries wrapper method implementations
//

#pragma implementation_key(2520)
inline IMapPolygonListPtr IMapSeries::GetShapes ( ) {
    struct IMapPolygonList * _result = 0;
    HRESULT _hr = get_Shapes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMapPolygonListPtr(_result, false);
}

#pragma implementation_key(2521)
inline long IMapSeries::GetPointSize ( ) {
    long _result = 0;
    HRESULT _hr = get_PointSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2522)
inline void IMapSeries::PutPointSize ( long Value ) {
    HRESULT _hr = put_PointSize(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2523)
inline ITeeShadowPtr IMapSeries::GetShadow ( ) {
    struct ITeeShadow * _result = 0;
    HRESULT _hr = get_Shadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITeeShadowPtr(_result, false);
}

#pragma implementation_key(2524)
inline VARIANT_BOOL IMapSeries::GetTransparent ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Transparent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2525)
inline void IMapSeries::PutTransparent ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Transparent(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2526)
inline long IMapSeries::GetTransparency ( ) {
    long _result = 0;
    HRESULT _hr = get_Transparency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2527)
inline void IMapSeries::PutTransparency ( long Value ) {
    HRESULT _hr = put_Transparency(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ICallout wrapper method implementations
//

#pragma implementation_key(2528)
inline IPenPtr ICallout::GetArrow ( ) {
    struct IPen * _result = 0;
    HRESULT _hr = get_Arrow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPenPtr(_result, false);
}

#pragma implementation_key(2529)
inline enum EArrowHeadStyle ICallout::GetArrowHead ( ) {
    enum EArrowHeadStyle _result;
    HRESULT _hr = get_ArrowHead(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2530)
inline void ICallout::PutArrowHead ( enum EArrowHeadStyle Value ) {
    HRESULT _hr = put_ArrowHead(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2531)
inline long ICallout::GetArrowHeadSize ( ) {
    long _result = 0;
    HRESULT _hr = get_ArrowHeadSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2532)
inline void ICallout::PutArrowHeadSize ( long Value ) {
    HRESULT _hr = put_ArrowHeadSize(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2533)
inline long ICallout::GetDistance ( ) {
    long _result = 0;
    HRESULT _hr = get_Distance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2534)
inline void ICallout::PutDistance ( long Value ) {
    HRESULT _hr = put_Distance(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAnnotationCallout wrapper method implementations
//

#pragma implementation_key(2535)
inline long IAnnotationCallout::GetXPosition ( ) {
    long _result = 0;
    HRESULT _hr = get_XPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2536)
inline void IAnnotationCallout::PutXPosition ( long Value ) {
    HRESULT _hr = put_XPosition(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2537)
inline long IAnnotationCallout::GetYPosition ( ) {
    long _result = 0;
    HRESULT _hr = get_YPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2538)
inline void IAnnotationCallout::PutYPosition ( long Value ) {
    HRESULT _hr = put_YPosition(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2539)
inline long IAnnotationCallout::GetZPosition ( ) {
    long _result = 0;
    HRESULT _hr = get_ZPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2540)
inline void IAnnotationCallout::PutZPosition ( long Value ) {
    HRESULT _hr = put_ZPosition(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAnnotationTool wrapper method implementations
//

#pragma implementation_key(2541)
inline enum EAnnotationPosition IAnnotationTool::GetPosition ( ) {
    enum EAnnotationPosition _result;
    HRESULT _hr = get_Position(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2542)
inline void IAnnotationTool::PutPosition ( enum EAnnotationPosition Value ) {
    HRESULT _hr = put_Position(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2543)
inline ITeeShapePanelPtr IAnnotationTool::GetShape ( ) {
    struct ITeeShapePanel * _result = 0;
    HRESULT _hr = get_Shape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITeeShapePanelPtr(_result, false);
}

#pragma implementation_key(2544)
inline _bstr_t IAnnotationTool::GetText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2545)
inline void IAnnotationTool::PutText ( _bstr_t Value ) {
    HRESULT _hr = put_Text(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2546)
inline IAnnotationCalloutPtr IAnnotationTool::GetCallout ( ) {
    struct IAnnotationCallout * _result = 0;
    HRESULT _hr = get_Callout(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAnnotationCalloutPtr(_result, false);
}

#pragma implementation_key(2547)
inline enum ETextAlignment IAnnotationTool::GetTextAlignment ( ) {
    enum ETextAlignment _result;
    HRESULT _hr = get_TextAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2548)
inline void IAnnotationTool::PutTextAlignment ( enum ETextAlignment Value ) {
    HRESULT _hr = put_TextAlignment(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2549)
inline VARIANT_BOOL IAnnotationTool::Clicked ( long X, long Y ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Clicked(X, Y, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2550)
inline long IAnnotationTool::GetWidth ( ) {
    long _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2551)
inline void IAnnotationTool::PutWidth ( long Value ) {
    HRESULT _hr = put_Width(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2552)
inline long IAnnotationTool::GetHeight ( ) {
    long _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2553)
inline void IAnnotationTool::PutHeight ( long Value ) {
    HRESULT _hr = put_Height(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2554)
inline short IAnnotationTool::GetCursor ( ) {
    short _result = 0;
    HRESULT _hr = get_Cursor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2555)
inline void IAnnotationTool::PutCursor ( short Value ) {
    HRESULT _hr = put_Cursor(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2556)
inline long IAnnotationTool::GetLeft ( ) {
    long _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2557)
inline void IAnnotationTool::PutLeft ( long Value ) {
    HRESULT _hr = put_Left(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2558)
inline long IAnnotationTool::GetTop ( ) {
    long _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2559)
inline void IAnnotationTool::PutTop ( long Value ) {
    HRESULT _hr = put_Top(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2560)
inline VARIANT_BOOL IAnnotationTool::GetAutoSize ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2561)
inline void IAnnotationTool::PutAutoSize ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_AutoSize(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2562)
inline IBrushPtr IAnnotationTool::GetBrush ( ) {
    struct IBrush * _result = 0;
    HRESULT _hr = get_Brush(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IBrushPtr(_result, false);
}

#pragma implementation_key(2563)
inline struct TeeRect IAnnotationTool::GetBounds ( ) {
    struct TeeRect _result;
    HRESULT _hr = get_Bounds(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2564)
inline HRESULT IAnnotationTool::SetBounds ( long Left, long Top, long Right, long Bottom ) {
    HRESULT _hr = raw_SetBounds(Left, Top, Right, Bottom);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2565)
inline enum EPositionUnits IAnnotationTool::GetPositionUnits ( ) {
    enum EPositionUnits _result;
    HRESULT _hr = get_PositionUnits(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2566)
inline void IAnnotationTool::PutPositionUnits ( enum EPositionUnits Value ) {
    HRESULT _hr = put_PositionUnits(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IPageNumTool wrapper method implementations
//

#pragma implementation_key(2567)
inline _bstr_t IPageNumTool::GetFormat ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Format(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2568)
inline void IPageNumTool::PutFormat ( _bstr_t Value ) {
    HRESULT _hr = put_Format(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2569)
inline VARIANT_BOOL IPageNumTool::GetShowButtons ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowButtons(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2570)
inline void IPageNumTool::PutShowButtons ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_ShowButtons(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2571)
inline IPenPtr IPageNumTool::GetButtonPen ( ) {
    struct IPen * _result = 0;
    HRESULT _hr = get_ButtonPen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPenPtr(_result, false);
}

#pragma implementation_key(2572)
inline long IPageNumTool::GetButtonWidth ( ) {
    long _result = 0;
    HRESULT _hr = get_ButtonWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2573)
inline void IPageNumTool::PutButtonWidth ( long Value ) {
    HRESULT _hr = put_ButtonWidth(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2574)
inline IGradientPtr IPageNumTool::GetDisabledButton ( ) {
    struct IGradient * _result = 0;
    HRESULT _hr = get_DisabledButton(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGradientPtr(_result, false);
}

#pragma implementation_key(2575)
inline IGradientPtr IPageNumTool::GetEnabledButton ( ) {
    struct IGradient * _result = 0;
    HRESULT _hr = get_EnabledButton(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGradientPtr(_result, false);
}

//
// interface IMarksCallout wrapper method implementations
//

#pragma implementation_key(2576)
inline long IMarksCallout::GetLength ( ) {
    long _result = 0;
    HRESULT _hr = get_Length(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2577)
inline void IMarksCallout::PutLength ( long Value ) {
    HRESULT _hr = put_Length(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IGanttTool wrapper method implementations
//

#pragma implementation_key(2578)
inline VARIANT_BOOL IGanttTool::GetAllowDrag ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AllowDrag(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2579)
inline void IGanttTool::PutAllowDrag ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_AllowDrag(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2580)
inline VARIANT_BOOL IGanttTool::GetAllowResize ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AllowResize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2581)
inline void IGanttTool::PutAllowResize ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_AllowResize(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2582)
inline short IGanttTool::GetCursorDrag ( ) {
    short _result = 0;
    HRESULT _hr = get_CursorDrag(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2583)
inline void IGanttTool::PutCursorDrag ( short Value ) {
    HRESULT _hr = put_CursorDrag(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2584)
inline short IGanttTool::GetCursorResize ( ) {
    short _result = 0;
    HRESULT _hr = get_CursorResize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2585)
inline void IGanttTool::PutCursorResize ( short Value ) {
    HRESULT _hr = put_CursorResize(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2586)
inline long IGanttTool::GetMinPixels ( ) {
    long _result = 0;
    HRESULT _hr = get_MinPixels(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2587)
inline void IGanttTool::PutMinPixels ( long Value ) {
    HRESULT _hr = put_MinPixels(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2588)
inline IGanttSeriesPtr IGanttTool::GetGantt ( ) {
    struct IGanttSeries * _result = 0;
    HRESULT _hr = get_Gantt(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGanttSeriesPtr(_result, false);
}

//
// interface IPointFigureSeries wrapper method implementations
//

#pragma implementation_key(2589)
inline IValueListPtr IPointFigureSeries::GetCloseValues ( ) {
    struct IValueList * _result = 0;
    HRESULT _hr = get_CloseValues(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IValueListPtr(_result, false);
}

#pragma implementation_key(2590)
inline IValueListPtr IPointFigureSeries::GetDateValues ( ) {
    struct IValueList * _result = 0;
    HRESULT _hr = get_DateValues(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IValueListPtr(_result, false);
}

#pragma implementation_key(2591)
inline IValueListPtr IPointFigureSeries::GetHighValues ( ) {
    struct IValueList * _result = 0;
    HRESULT _hr = get_HighValues(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IValueListPtr(_result, false);
}

#pragma implementation_key(2592)
inline IValueListPtr IPointFigureSeries::GetLowValues ( ) {
    struct IValueList * _result = 0;
    HRESULT _hr = get_LowValues(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IValueListPtr(_result, false);
}

#pragma implementation_key(2593)
inline IValueListPtr IPointFigureSeries::GetOpenValues ( ) {
    struct IValueList * _result = 0;
    HRESULT _hr = get_OpenValues(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IValueListPtr(_result, false);
}

#pragma implementation_key(2594)
inline long IPointFigureSeries::AddOHLC ( double DateValue, double OpenValue, double HighValue, double LowValue, double CloseValue ) {
    long _result = 0;
    HRESULT _hr = raw_AddOHLC(DateValue, OpenValue, HighValue, LowValue, CloseValue, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2595)
inline double IPointFigureSeries::GetBoxSize ( ) {
    double _result = 0;
    HRESULT _hr = get_BoxSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2596)
inline void IPointFigureSeries::PutBoxSize ( double Value ) {
    HRESULT _hr = put_BoxSize(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2597)
inline double IPointFigureSeries::GetReversalAmount ( ) {
    double _result = 0;
    HRESULT _hr = get_ReversalAmount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2598)
inline void IPointFigureSeries::PutReversalAmount ( double Value ) {
    HRESULT _hr = put_ReversalAmount(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2599)
inline IPointerPtr IPointFigureSeries::GetDownSymbol ( ) {
    struct IPointer * _result = 0;
    HRESULT _hr = get_DownSymbol(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPointerPtr(_result, false);
}

#pragma implementation_key(2600)
inline IPointerPtr IPointFigureSeries::GetUpSymbol ( ) {
    struct IPointer * _result = 0;
    HRESULT _hr = get_UpSymbol(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPointerPtr(_result, false);
}

#pragma implementation_key(2601)
inline long IPointFigureSeries::GetInversionColumn ( long Index ) {
    long _result = 0;
    HRESULT _hr = raw_GetInversionColumn(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IGaugeSeries wrapper method implementations
//

#pragma implementation_key(2602)
inline IPointerPtr IGaugeSeries::GetCenter ( ) {
    struct IPointer * _result = 0;
    HRESULT _hr = get_Center(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPointerPtr(_result, false);
}

#pragma implementation_key(2603)
inline IGradientPtr IGaugeSeries::GetCircleGradient ( ) {
    struct IGradient * _result = 0;
    HRESULT _hr = get_CircleGradient(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGradientPtr(_result, false);
}

#pragma implementation_key(2604)
inline IPointerPtr IGaugeSeries::GetEndPoint ( ) {
    struct IPointer * _result = 0;
    HRESULT _hr = get_EndPoint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPointerPtr(_result, false);
}

#pragma implementation_key(2605)
inline VARIANT_BOOL IGaugeSeries::GetFullRepaint ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_FullRepaint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2606)
inline void IGaugeSeries::PutFullRepaint ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_FullRepaint(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2607)
inline double IGaugeSeries::GetMaximum ( ) {
    double _result = 0;
    HRESULT _hr = get_Maximum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2608)
inline void IGaugeSeries::PutMaximum ( double Value ) {
    HRESULT _hr = put_Maximum(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2609)
inline double IGaugeSeries::GetMinimum ( ) {
    double _result = 0;
    HRESULT _hr = get_Minimum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2610)
inline void IGaugeSeries::PutMinimum ( double Value ) {
    HRESULT _hr = put_Minimum(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2611)
inline long IGaugeSeries::GetMinorTickDistance ( ) {
    long _result = 0;
    HRESULT _hr = get_MinorTickDistance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2612)
inline void IGaugeSeries::PutMinorTickDistance ( long Value ) {
    HRESULT _hr = put_MinorTickDistance(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2613)
inline long IGaugeSeries::GetHandDistance ( ) {
    long _result = 0;
    HRESULT _hr = get_HandDistance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2614)
inline void IGaugeSeries::PutHandDistance ( long Value ) {
    HRESULT _hr = put_HandDistance(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2615)
inline enum EHandStyle IGaugeSeries::GetHandStyle ( ) {
    enum EHandStyle _result;
    HRESULT _hr = get_HandStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2616)
inline void IGaugeSeries::PutHandStyle ( enum EHandStyle Value ) {
    HRESULT _hr = put_HandStyle(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2617)
inline VARIANT_BOOL IGaugeSeries::GetLabelsInside ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_LabelsInside(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2618)
inline void IGaugeSeries::PutLabelsInside ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_LabelsInside(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2619)
inline double IGaugeSeries::GetTotalAngle ( ) {
    double _result = 0;
    HRESULT _hr = get_TotalAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2620)
inline void IGaugeSeries::PutTotalAngle ( double Value ) {
    HRESULT _hr = put_TotalAngle(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2621)
inline double IGaugeSeries::GetValue ( ) {
    double _result = 0;
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2622)
inline void IGaugeSeries::PutValue ( double Value ) {
    HRESULT _hr = put_Value(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IGridBandBrush wrapper method implementations
//

#pragma implementation_key(2623)
inline long IGridBandBrush::GetTransparency ( ) {
    long _result = 0;
    HRESULT _hr = get_Transparency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2624)
inline void IGridBandBrush::PutTransparency ( long Value ) {
    HRESULT _hr = put_Transparency(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2625)
inline IGradientPtr IGridBandBrush::GetGradient ( ) {
    struct IGradient * _result = 0;
    HRESULT _hr = get_Gradient(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGradientPtr(_result, false);
}

//
// interface IGridBandTool wrapper method implementations
//

#pragma implementation_key(2626)
inline IGridBandBrushPtr IGridBandTool::GetBand1 ( ) {
    struct IGridBandBrush * _result = 0;
    HRESULT _hr = get_Band1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGridBandBrushPtr(_result, false);
}

#pragma implementation_key(2627)
inline IGridBandBrushPtr IGridBandTool::GetBand2 ( ) {
    struct IGridBandBrush * _result = 0;
    HRESULT _hr = get_Band2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGridBandBrushPtr(_result, false);
}

#pragma implementation_key(2628)
inline OLE_COLOR IGridBandTool::GetBandBackColor ( long ABand ) {
    OLE_COLOR _result;
    HRESULT _hr = get_BandBackColor(ABand, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ITeeShape wrapper method implementations
//

#pragma implementation_key(2629)
inline long ITeeShape::GetTransparency ( ) {
    long _result = 0;
    HRESULT _hr = get_Transparency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2630)
inline void ITeeShape::PutTransparency ( long Value ) {
    HRESULT _hr = put_Transparency(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2631)
inline enum EPanelBevel ITeeShape::GetBevel ( ) {
    enum EPanelBevel _result;
    HRESULT _hr = get_Bevel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2632)
inline void ITeeShape::PutBevel ( enum EPanelBevel Value ) {
    HRESULT _hr = put_Bevel(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2633)
inline long ITeeShape::GetBevelWidth ( ) {
    long _result = 0;
    HRESULT _hr = get_BevelWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2634)
inline void ITeeShape::PutBevelWidth ( long Value ) {
    HRESULT _hr = put_BevelWidth(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2635)
inline OLE_COLOR ITeeShape::GetColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2636)
inline void ITeeShape::PutColor ( OLE_COLOR Value ) {
    HRESULT _hr = put_Color(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2637)
inline IGradientPtr ITeeShape::GetGradient ( ) {
    struct IGradient * _result = 0;
    HRESULT _hr = get_Gradient(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGradientPtr(_result, false);
}

#pragma implementation_key(2638)
inline IChartFontPtr ITeeShape::GetFont ( ) {
    struct IChartFont * _result = 0;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IChartFontPtr(_result, false);
}

#pragma implementation_key(2639)
inline ITeeShadowPtr ITeeShape::GetShadow ( ) {
    struct ITeeShadow * _result = 0;
    HRESULT _hr = get_Shadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITeeShadowPtr(_result, false);
}

#pragma implementation_key(2640)
inline enum EChartObjectShapeStyle ITeeShape::GetShapeStyle ( ) {
    enum EChartObjectShapeStyle _result;
    HRESULT _hr = get_ShapeStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2641)
inline void ITeeShape::PutShapeStyle ( enum EChartObjectShapeStyle Value ) {
    HRESULT _hr = put_ShapeStyle(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ILegendTitle wrapper method implementations
//

#pragma implementation_key(2642)
inline IStringsPtr ILegendTitle::GetText ( ) {
    struct IStrings * _result = 0;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IStringsPtr(_result, false);
}

#pragma implementation_key(2643)
inline enum ETitleAlignment ILegendTitle::GetTextAlignment ( ) {
    enum ETitleAlignment _result;
    HRESULT _hr = get_TextAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2644)
inline void ILegendTitle::PutTextAlignment ( enum ETitleAlignment Value ) {
    HRESULT _hr = put_TextAlignment(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2645)
inline VARIANT_BOOL ILegendTitle::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2646)
inline void ILegendTitle::PutVisible ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Visible(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2647)
inline VARIANT_BOOL ILegendTitle::GetTransparent ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Transparent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2648)
inline void ILegendTitle::PutTransparent ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Transparent(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2649)
inline _bstr_t ILegendTitle::GetCaption ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2650)
inline void ILegendTitle::PutCaption ( _bstr_t Value ) {
    HRESULT _hr = put_Caption(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ILegend wrapper method implementations
//

#pragma implementation_key(2651)
inline enum ELegendAlignment ILegend::GetAlignment ( ) {
    enum ELegendAlignment _result;
    HRESULT _hr = get_Alignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2652)
inline void ILegend::PutAlignment ( enum ELegendAlignment Alignment ) {
    HRESULT _hr = put_Alignment(Alignment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2653)
inline long ILegend::GetColorWidth ( ) {
    long _result = 0;
    HRESULT _hr = get_ColorWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2654)
inline void ILegend::PutColorWidth ( long ColorWidth ) {
    HRESULT _hr = put_ColorWidth(ColorWidth);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2655)
inline IPenPtr ILegend::GetDividingLines ( ) {
    struct IPen * _result = 0;
    HRESULT _hr = get_DividingLines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPenPtr(_result, false);
}

#pragma implementation_key(2656)
inline long ILegend::GetFirstValue ( ) {
    long _result = 0;
    HRESULT _hr = get_FirstValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2657)
inline void ILegend::PutFirstValue ( long FirstValue ) {
    HRESULT _hr = put_FirstValue(FirstValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2658)
inline IPenPtr ILegend::GetFrame ( ) {
    struct IPen * _result = 0;
    HRESULT _hr = get_Frame(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPenPtr(_result, false);
}

#pragma implementation_key(2659)
inline long ILegend::GetHorizMargin ( ) {
    long _result = 0;
    HRESULT _hr = get_HorizMargin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2660)
inline void ILegend::PutHorizMargin ( long HorizMargin ) {
    HRESULT _hr = put_HorizMargin(HorizMargin);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2661)
inline VARIANT_BOOL ILegend::GetInverted ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Inverted(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2662)
inline void ILegend::PutInverted ( VARIANT_BOOL Inverted ) {
    HRESULT _hr = put_Inverted(Inverted);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2663)
inline enum ELegendStyle ILegend::GetLegendStyle ( ) {
    enum ELegendStyle _result;
    HRESULT _hr = get_LegendStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2664)
inline void ILegend::PutLegendStyle ( enum ELegendStyle LegendStyle ) {
    HRESULT _hr = put_LegendStyle(LegendStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2665)
inline VARIANT_BOOL ILegend::GetResizeChart ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ResizeChart(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2666)
inline void ILegend::PutResizeChart ( VARIANT_BOOL ResizeChart ) {
    HRESULT _hr = put_ResizeChart(ResizeChart);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2667)
inline enum ELegendTextStyle ILegend::GetTextStyle ( ) {
    enum ELegendTextStyle _result;
    HRESULT _hr = get_TextStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2668)
inline void ILegend::PutTextStyle ( enum ELegendTextStyle TextStyle ) {
    HRESULT _hr = put_TextStyle(TextStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2669)
inline long ILegend::GetTopPos ( ) {
    long _result = 0;
    HRESULT _hr = get_TopPos(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2670)
inline void ILegend::PutTopPos ( long TopPos ) {
    HRESULT _hr = put_TopPos(TopPos);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2671)
inline long ILegend::GetVertMargin ( ) {
    long _result = 0;
    HRESULT _hr = get_VertMargin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2672)
inline void ILegend::PutVertMargin ( long VertMargin ) {
    HRESULT _hr = put_VertMargin(VertMargin);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2673)
inline VARIANT_BOOL ILegend::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2674)
inline void ILegend::PutVisible ( VARIANT_BOOL Visible ) {
    HRESULT _hr = put_Visible(Visible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2675)
inline _bstr_t ILegend::Formatted ( long SomeSeriesOrValueIndex ) {
    BSTR _result = 0;
    HRESULT _hr = raw_Formatted(SomeSeriesOrValueIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2676)
inline _bstr_t ILegend::FormattedValue ( long aSeries, long SomeValueIndex ) {
    BSTR _result = 0;
    HRESULT _hr = raw_FormattedValue(aSeries, SomeValueIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2677)
inline long ILegend::Clicked ( long X, long Y ) {
    long _result = 0;
    HRESULT _hr = raw_Clicked(X, Y, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2678)
inline long ILegend::GetMaxNumRows ( ) {
    long _result = 0;
    HRESULT _hr = get_MaxNumRows(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2679)
inline void ILegend::PutMaxNumRows ( long Value ) {
    HRESULT _hr = put_MaxNumRows(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2680)
inline HRESULT ILegend::BackImageLoad ( _bstr_t FileName ) {
    HRESULT _hr = raw_BackImageLoad(FileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2681)
inline HRESULT ILegend::BackImageClear ( ) {
    HRESULT _hr = raw_BackImageClear();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2682)
inline IBrushPtr ILegend::GetBrush ( ) {
    struct IBrush * _result = 0;
    HRESULT _hr = get_Brush(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IBrushPtr(_result, false);
}

#pragma implementation_key(2683)
inline _variant_t ILegend::GetSeries ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Series(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2684)
inline void ILegend::PutSeries ( const _variant_t & Value ) {
    HRESULT _hr = put_Series(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2685)
inline HRESULT ILegend::DrawLegend ( ) {
    HRESULT _hr = raw_DrawLegend();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2686)
inline VARIANT_BOOL ILegend::GetFontSeriesColor ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_FontSeriesColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2687)
inline void ILegend::PutFontSeriesColor ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_FontSeriesColor(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2688)
inline VARIANT_BOOL ILegend::GetCurrentPage ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CurrentPage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2689)
inline void ILegend::PutCurrentPage ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_CurrentPage(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2690)
inline ILegendSymbolPtr ILegend::GetSymbol ( ) {
    struct ILegendSymbol * _result = 0;
    HRESULT _hr = get_Symbol(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ILegendSymbolPtr(_result, false);
}

#pragma implementation_key(2691)
inline VARIANT_BOOL ILegend::GetCheckBoxes ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CheckBoxes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2692)
inline void ILegend::PutCheckBoxes ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_CheckBoxes(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2693)
inline VARIANT_BOOL ILegend::GetColumnWidthAuto ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ColumnWidthAuto(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2694)
inline void ILegend::PutColumnWidthAuto ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_ColumnWidthAuto(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2695)
inline long ILegend::GetColumnWidths ( long Index ) {
    long _result = 0;
    HRESULT _hr = get_ColumnWidths(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2696)
inline void ILegend::PutColumnWidths ( long Index, long Value ) {
    HRESULT _hr = put_ColumnWidths(Index, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2697)
inline long ILegend::GetVertspacing ( ) {
    long _result = 0;
    HRESULT _hr = get_Vertspacing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2698)
inline void ILegend::PutVertspacing ( long Value ) {
    HRESULT _hr = put_Vertspacing(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2699)
inline VARIANT_BOOL ILegend::GetVertical ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Vertical(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2700)
inline HRESULT ILegend::ShowEditorLegend ( ) {
    HRESULT _hr = raw_ShowEditorLegend();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2701)
inline ILegendTitlePtr ILegend::GetTitle ( ) {
    struct ILegendTitle * _result = 0;
    HRESULT _hr = get_Title(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ILegendTitlePtr(_result, false);
}

#pragma implementation_key(2702)
inline enum ECheckBoxesStyle ILegend::GetCheckBoxesStyle ( ) {
    enum ECheckBoxesStyle _result;
    HRESULT _hr = get_CheckBoxesStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2703)
inline void ILegend::PutCheckBoxesStyle ( enum ECheckBoxesStyle Value ) {
    HRESULT _hr = put_CheckBoxesStyle(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2704)
inline long ILegend::GetLastValue ( ) {
    long _result = 0;
    HRESULT _hr = get_LastValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2705)
inline enum EPositionUnits ILegend::GetPositionUnits ( ) {
    enum EPositionUnits _result;
    HRESULT _hr = get_PositionUnits(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2706)
inline void ILegend::PutPositionUnits ( enum EPositionUnits Value ) {
    HRESULT _hr = put_PositionUnits(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2707)
inline long ILegend::GetLeftPercent ( ) {
    long _result = 0;
    HRESULT _hr = get_LeftPercent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2708)
inline void ILegend::PutLeftPercent ( long Value ) {
    HRESULT _hr = put_LeftPercent(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2709)
inline long ILegend::GetTopPercent ( ) {
    long _result = 0;
    HRESULT _hr = get_TopPercent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2710)
inline void ILegend::PutTopPercent ( long Value ) {
    HRESULT _hr = put_TopPercent(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2711)
inline ILegendItemPtr ILegend::GetItem ( long Index ) {
    struct ILegendItem * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ILegendItemPtr(_result, false);
}

#pragma implementation_key(2712)
inline ILegendItemsPtr ILegend::GetItems ( ) {
    struct ILegendItems * _result = 0;
    HRESULT _hr = get_Items(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ILegendItemsPtr(_result, false);
}

//
// interface IPieOtherSlice wrapper method implementations
//

#pragma implementation_key(2713)
inline enum EPieOtherStyle IPieOtherSlice::GetStyle ( ) {
    enum EPieOtherStyle _result;
    HRESULT _hr = get_Style(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2714)
inline void IPieOtherSlice::PutStyle ( enum EPieOtherStyle Value ) {
    HRESULT _hr = put_Style(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2715)
inline _bstr_t IPieOtherSlice::GetText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2716)
inline void IPieOtherSlice::PutText ( _bstr_t Value ) {
    HRESULT _hr = put_Text(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2717)
inline double IPieOtherSlice::GetValue ( ) {
    double _result = 0;
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2718)
inline void IPieOtherSlice::PutValue ( double Value ) {
    HRESULT _hr = put_Value(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2719)
inline ILegendPtr IPieOtherSlice::GetLegend ( ) {
    struct ILegend * _result = 0;
    HRESULT _hr = get_Legend(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ILegendPtr(_result, false);
}

//
// interface IPieSeries wrapper method implementations
//

#pragma implementation_key(2720)
inline VARIANT_BOOL IPieSeries::GetUsePatterns ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UsePatterns(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2721)
inline void IPieSeries::PutUsePatterns ( VARIANT_BOOL UsePatterns ) {
    HRESULT _hr = put_UsePatterns(UsePatterns);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2722)
inline IValueListPtr IPieSeries::GetPieValues ( ) {
    struct IValueList * _result = 0;
    HRESULT _hr = get_PieValues(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IValueListPtr(_result, false);
}

#pragma implementation_key(2723)
inline VARIANT_BOOL IPieSeries::GetDark3D ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Dark3D(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2724)
inline void IPieSeries::PutDark3D ( VARIANT_BOOL Dark3D ) {
    HRESULT _hr = put_Dark3D(Dark3D);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2725)
inline long IPieSeries::GetExplodeBiggest ( ) {
    long _result = 0;
    HRESULT _hr = get_ExplodeBiggest(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2726)
inline void IPieSeries::PutExplodeBiggest ( long Value ) {
    HRESULT _hr = put_ExplodeBiggest(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2727)
inline IPieOtherSlicePtr IPieSeries::GetOtherSlice ( ) {
    struct IPieOtherSlice * _result = 0;
    HRESULT _hr = get_OtherSlice(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPieOtherSlicePtr(_result, false);
}

#pragma implementation_key(2728)
inline IExplodedSlicesPtr IPieSeries::GetExplodedSlice ( ) {
    struct IExplodedSlices * _result = 0;
    HRESULT _hr = get_ExplodedSlice(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IExplodedSlicesPtr(_result, false);
}

#pragma implementation_key(2729)
inline IPenPtr IPieSeries::GetPiePen ( ) {
    struct IPen * _result = 0;
    HRESULT _hr = get_PiePen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPenPtr(_result, false);
}

#pragma implementation_key(2730)
inline ITeeShadowPtr IPieSeries::GetShadow ( ) {
    struct ITeeShadow * _result = 0;
    HRESULT _hr = get_Shadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITeeShadowPtr(_result, false);
}

#pragma implementation_key(2731)
inline long IPieSeries::GetAngleSize ( ) {
    long _result = 0;
    HRESULT _hr = get_AngleSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2732)
inline void IPieSeries::PutAngleSize ( long Value ) {
    HRESULT _hr = put_AngleSize(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2733)
inline VARIANT_BOOL IPieSeries::GetAutoMarkPosition ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoMarkPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2734)
inline void IPieSeries::PutAutoMarkPosition ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_AutoMarkPosition(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2735)
inline IGradientPtr IPieSeries::GetGradient ( ) {
    struct IGradient * _result = 0;
    HRESULT _hr = get_Gradient(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGradientPtr(_result, false);
}

#pragma implementation_key(2736)
inline long IPieSeries::GetSliceHeight ( long Index ) {
    long _result = 0;
    HRESULT _hr = get_SliceHeight(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2737)
inline void IPieSeries::PutSliceHeight ( long Index, long Value ) {
    HRESULT _hr = put_SliceHeight(Index, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2738)
inline long IPieSeries::GetDarkPen ( ) {
    long _result = 0;
    HRESULT _hr = get_DarkPen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2739)
inline void IPieSeries::PutDarkPen ( long Value ) {
    HRESULT _hr = put_DarkPen(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2740)
inline enum EMultiPie IPieSeries::GetMultiPie ( ) {
    enum EMultiPie _result;
    HRESULT _hr = get_MultiPie(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2741)
inline void IPieSeries::PutMultiPie ( enum EMultiPie Value ) {
    HRESULT _hr = put_MultiPie(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2742)
inline IPieMarksPtr IPieSeries::GetPieMarks ( ) {
    struct IPieMarks * _result = 0;
    HRESULT _hr = get_PieMarks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPieMarksPtr(_result, false);
}

#pragma implementation_key(2743)
inline long IPieSeries::GetGradientBright ( ) {
    long _result = 0;
    HRESULT _hr = get_GradientBright(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2744)
inline void IPieSeries::PutGradientBright ( long Value ) {
    HRESULT _hr = put_GradientBright(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IDonutSeries wrapper method implementations
//

#pragma implementation_key(2745)
inline long IDonutSeries::GetDonutPercent ( ) {
    long _result = 0;
    HRESULT _hr = get_DonutPercent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2746)
inline void IDonutSeries::PutDonutPercent ( long Value ) {
    HRESULT _hr = put_DonutPercent(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IExtraLegendTool wrapper method implementations
//

#pragma implementation_key(2747)
inline ILegendPtr IExtraLegendTool::GetLegend ( ) {
    struct ILegend * _result = 0;
    HRESULT _hr = get_Legend(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ILegendPtr(_result, false);
}

//
// interface IMarksSymbol wrapper method implementations
//

#pragma implementation_key(2748)
inline enum EPanelBevel IMarksSymbol::GetBevel ( ) {
    enum EPanelBevel _result;
    HRESULT _hr = get_Bevel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2749)
inline void IMarksSymbol::PutBevel ( enum EPanelBevel Value ) {
    HRESULT _hr = put_Bevel(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2750)
inline long IMarksSymbol::GetBevelWidth ( ) {
    long _result = 0;
    HRESULT _hr = get_BevelWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2751)
inline void IMarksSymbol::PutBevelWidth ( long Value ) {
    HRESULT _hr = put_BevelWidth(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2752)
inline IPenPtr IMarksSymbol::GetFrame ( ) {
    struct IPen * _result = 0;
    HRESULT _hr = get_Frame(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPenPtr(_result, false);
}

#pragma implementation_key(2753)
inline IGradientPtr IMarksSymbol::GetGradient ( ) {
    struct IGradient * _result = 0;
    HRESULT _hr = get_Gradient(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGradientPtr(_result, false);
}

#pragma implementation_key(2754)
inline ITeeShadowPtr IMarksSymbol::GetShadow ( ) {
    struct ITeeShadow * _result = 0;
    HRESULT _hr = get_Shadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITeeShadowPtr(_result, false);
}

#pragma implementation_key(2755)
inline enum EChartObjectShapeStyle IMarksSymbol::GetShapeStyle ( ) {
    enum EChartObjectShapeStyle _result;
    HRESULT _hr = get_ShapeStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2756)
inline void IMarksSymbol::PutShapeStyle ( enum EChartObjectShapeStyle Value ) {
    HRESULT _hr = put_ShapeStyle(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2757)
inline long IMarksSymbol::GetTransparency ( ) {
    long _result = 0;
    HRESULT _hr = get_Transparency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2758)
inline void IMarksSymbol::PutTransparency ( long Value ) {
    HRESULT _hr = put_Transparency(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2759)
inline VARIANT_BOOL IMarksSymbol::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2760)
inline void IMarksSymbol::PutVisible ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Visible(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2761)
inline IPenPtr IMarksSymbol::GetPen ( ) {
    struct IPen * _result = 0;
    HRESULT _hr = get_Pen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPenPtr(_result, false);
}

#pragma implementation_key(2762)
inline IBrushPtr IMarksSymbol::GetBrush ( ) {
    struct IBrush * _result = 0;
    HRESULT _hr = get_Brush(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IBrushPtr(_result, false);
}

//
// interface IMarks wrapper method implementations
//

#pragma implementation_key(2763)
inline IPenPtr IMarks::GetArrow ( ) {
    struct IPen * _result = 0;
    HRESULT _hr = get_Arrow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPenPtr(_result, false);
}

#pragma implementation_key(2764)
inline long IMarks::GetArrowLength ( ) {
    long _result = 0;
    HRESULT _hr = get_ArrowLength(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2765)
inline void IMarks::PutArrowLength ( long ArrowLength ) {
    HRESULT _hr = put_ArrowLength(ArrowLength);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2766)
inline OLE_COLOR IMarks::GetBackColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_BackColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2767)
inline void IMarks::PutBackColor ( OLE_COLOR BackColor ) {
    HRESULT _hr = put_BackColor(BackColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2768)
inline VARIANT_BOOL IMarks::GetClip ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Clip(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2769)
inline void IMarks::PutClip ( VARIANT_BOOL Clip ) {
    HRESULT _hr = put_Clip(Clip);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2770)
inline IPenPtr IMarks::GetFrame ( ) {
    struct IPen * _result = 0;
    HRESULT _hr = get_Frame(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPenPtr(_result, false);
}

#pragma implementation_key(2771)
inline enum EMarkStyle IMarks::GetStyle ( ) {
    enum EMarkStyle _result;
    HRESULT _hr = get_Style(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2772)
inline void IMarks::PutStyle ( enum EMarkStyle Style ) {
    HRESULT _hr = put_Style(Style);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2773)
inline VARIANT_BOOL IMarks::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2774)
inline void IMarks::PutVisible ( VARIANT_BOOL Visible ) {
    HRESULT _hr = put_Visible(Visible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2775)
inline ISeriesMarksPositionsPtr IMarks::GetPositions ( ) {
    struct ISeriesMarksPositions * _result = 0;
    HRESULT _hr = get_Positions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISeriesMarksPositionsPtr(_result, false);
}

#pragma implementation_key(2776)
inline long IMarks::Clicked ( long X, long Y ) {
    long _result = 0;
    HRESULT _hr = raw_Clicked(X, Y, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2777)
inline long IMarks::GetZPosition ( ) {
    long _result = 0;
    HRESULT _hr = get_ZPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2778)
inline void IMarks::PutZPosition ( long Value ) {
    HRESULT _hr = put_ZPosition(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2779)
inline long IMarks::GetAngle ( ) {
    long _result = 0;
    HRESULT _hr = get_Angle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2780)
inline void IMarks::PutAngle ( long Value ) {
    HRESULT _hr = put_Angle(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2781)
inline long IMarks::GetDrawEvery ( ) {
    long _result = 0;
    HRESULT _hr = get_DrawEvery(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2782)
inline void IMarks::PutDrawEvery ( long Value ) {
    HRESULT _hr = put_DrawEvery(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2783)
inline VARIANT_BOOL IMarks::GetMultiline ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Multiline(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2784)
inline void IMarks::PutMultiline ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Multiline(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2785)
inline HRESULT IMarks::ResetPositions ( ) {
    HRESULT _hr = raw_ResetPositions();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2786)
inline IMarksCalloutPtr IMarks::GetCallout ( ) {
    struct IMarksCallout * _result = 0;
    HRESULT _hr = get_Callout(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMarksCalloutPtr(_result, false);
}

#pragma implementation_key(2787)
inline HRESULT IMarks::ShowEditorMarks ( ) {
    HRESULT _hr = raw_ShowEditorMarks();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2788)
inline IMarksItemPtr IMarks::GetItem ( long Index ) {
    struct IMarksItem * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMarksItemPtr(_result, false);
}

#pragma implementation_key(2789)
inline HRESULT IMarks::Clear ( ) {
    HRESULT _hr = raw_Clear();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2790)
inline IMarksSymbolPtr IMarks::GetSymbol ( ) {
    struct IMarksSymbol * _result = 0;
    HRESULT _hr = get_Symbol(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMarksSymbolPtr(_result, false);
}

#pragma implementation_key(2791)
inline enum ETextAlignment IMarks::GetTextAlign ( ) {
    enum ETextAlignment _result;
    HRESULT _hr = get_TextAlign(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2792)
inline void IMarks::PutTextAlign ( enum ETextAlignment Value ) {
    HRESULT _hr = put_TextAlign(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2793)
inline IMarginsPtr IMarks::GetMargins ( ) {
    struct IMargins * _result = 0;
    HRESULT _hr = get_Margins(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMarginsPtr(_result, false);
}

//
// interface IBubble3DSeries wrapper method implementations
//

#pragma implementation_key(2794)
inline long IBubble3DSeries::AddBubble ( double AX, double AY, double AZ, double ARadius, _bstr_t AXLabel, OLE_COLOR Value ) {
    long _result = 0;
    HRESULT _hr = raw_AddBubble(AX, AY, AZ, ARadius, AXLabel, Value, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2795)
inline IValueListPtr IBubble3DSeries::GetRadiusValues ( ) {
    struct IValueList * _result = 0;
    HRESULT _hr = get_RadiusValues(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IValueListPtr(_result, false);
}

//
// interface ISeriesBandTool wrapper method implementations
//

#pragma implementation_key(2796)
inline IBrushPtr ISeriesBandTool::GetBrush ( ) {
    struct IBrush * _result = 0;
    HRESULT _hr = get_Brush(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IBrushPtr(_result, false);
}

#pragma implementation_key(2797)
inline VARIANT_BOOL ISeriesBandTool::GetDrawBehindSeries ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DrawBehindSeries(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2798)
inline void ISeriesBandTool::PutDrawBehindSeries ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_DrawBehindSeries(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2799)
inline IGradientPtr ISeriesBandTool::GetGradient ( ) {
    struct IGradient * _result = 0;
    HRESULT _hr = get_Gradient(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGradientPtr(_result, false);
}

#pragma implementation_key(2800)
inline IPenPtr ISeriesBandTool::GetPen ( ) {
    struct IPen * _result = 0;
    HRESULT _hr = get_Pen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPenPtr(_result, false);
}

#pragma implementation_key(2801)
inline _variant_t ISeriesBandTool::GetSeries2 ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Series2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2802)
inline void ISeriesBandTool::PutSeries2 ( const _variant_t & Value ) {
    HRESULT _hr = put_Series2(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2803)
inline long ISeriesBandTool::GetTransparency ( ) {
    long _result = 0;
    HRESULT _hr = get_Transparency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2804)
inline void ISeriesBandTool::PutTransparency ( long Value ) {
    HRESULT _hr = put_Transparency(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IRectangleTool wrapper method implementations
//

#pragma implementation_key(2805)
inline VARIANT_BOOL IRectangleTool::GetDragging ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Dragging(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2806)
inline VARIANT_BOOL IRectangleTool::GetResizing ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Resizing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2807)
inline long IRectangleTool::ClickedEdge ( long X, long Y ) {
    long _result = 0;
    HRESULT _hr = raw_ClickedEdge(X, Y, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2808)
inline VARIANT_BOOL IRectangleTool::GetAllowDrag ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AllowDrag(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2809)
inline void IRectangleTool::PutAllowDrag ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_AllowDrag(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2810)
inline VARIANT_BOOL IRectangleTool::GetAllowResize ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AllowResize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2811)
inline void IRectangleTool::PutAllowResize ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_AllowResize(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ITableLegend wrapper method implementations
//

#pragma implementation_key(2812)
inline ILegendSymbolPtr ITableLegend::GetSymbol ( ) {
    struct ILegendSymbol * _result = 0;
    HRESULT _hr = get_Symbol(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ILegendSymbolPtr(_result, false);
}

#pragma implementation_key(2813)
inline VARIANT_BOOL ITableLegend::GetFontSeriesColor ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_FontSeriesColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2814)
inline void ITableLegend::PutFontSeriesColor ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_FontSeriesColor(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2815)
inline VARIANT_BOOL ITableLegend::GetOtherside ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Otherside(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2816)
inline void ITableLegend::PutOtherside ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Otherside(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IDataTableTool wrapper method implementations
//

#pragma implementation_key(2817)
inline VARIANT_BOOL IDataTableTool::GetAutoPosition ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2818)
inline void IDataTableTool::PutAutoPosition ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_AutoPosition(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2819)
inline IBrushPtr IDataTableTool::GetBrush ( ) {
    struct IBrush * _result = 0;
    HRESULT _hr = get_Brush(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IBrushPtr(_result, false);
}

#pragma implementation_key(2820)
inline VARIANT_BOOL IDataTableTool::GetClipText ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ClipText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2821)
inline void IDataTableTool::PutClipText ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_ClipText(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2822)
inline IPenPtr IDataTableTool::GetColumnPen ( ) {
    struct IPen * _result = 0;
    HRESULT _hr = get_ColumnPen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPenPtr(_result, false);
}

#pragma implementation_key(2823)
inline IChartFontPtr IDataTableTool::GetFont ( ) {
    struct IChartFont * _result = 0;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IChartFontPtr(_result, false);
}

#pragma implementation_key(2824)
inline VARIANT_BOOL IDataTableTool::GetInverted ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Inverted(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2825)
inline void IDataTableTool::PutInverted ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Inverted(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2826)
inline long IDataTableTool::GetLeft ( ) {
    long _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2827)
inline void IDataTableTool::PutLeft ( long Value ) {
    HRESULT _hr = put_Left(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2828)
inline ITableLegendPtr IDataTableTool::GetLegend ( ) {
    struct ITableLegend * _result = 0;
    HRESULT _hr = get_Legend(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITableLegendPtr(_result, false);
}

#pragma implementation_key(2829)
inline IPenPtr IDataTableTool::GetRowPen ( ) {
    struct IPen * _result = 0;
    HRESULT _hr = get_RowPen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPenPtr(_result, false);
}

#pragma implementation_key(2830)
inline long IDataTableTool::GetTop ( ) {
    long _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2831)
inline void IDataTableTool::PutTop ( long Value ) {
    HRESULT _hr = put_Top(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IVolumePipeSeries wrapper method implementations
//

#pragma implementation_key(2832)
inline long IVolumePipeSeries::GetConePercent ( ) {
    long _result = 0;
    HRESULT _hr = get_ConePercent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2833)
inline void IVolumePipeSeries::PutConePercent ( long Value ) {
    HRESULT _hr = put_ConePercent(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2834)
inline IGradientPtr IVolumePipeSeries::GetGradient ( ) {
    struct IGradient * _result = 0;
    HRESULT _hr = get_Gradient(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGradientPtr(_result, false);
}

#pragma implementation_key(2835)
inline IPenPtr IVolumePipeSeries::GetLinesPen ( ) {
    struct IPen * _result = 0;
    HRESULT _hr = get_LinesPen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPenPtr(_result, false);
}

//
// interface IDarvasSeries wrapper method implementations
//

#pragma implementation_key(2836)
inline IBrushPtr IDarvasSeries::GetBoxBrush ( ) {
    struct IBrush * _result = 0;
    HRESULT _hr = get_BoxBrush(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IBrushPtr(_result, false);
}

#pragma implementation_key(2837)
inline IPenPtr IDarvasSeries::GetBoxPen ( ) {
    struct IPen * _result = 0;
    HRESULT _hr = get_BoxPen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPenPtr(_result, false);
}

#pragma implementation_key(2838)
inline long IDarvasSeries::GetNumBoxes ( ) {
    long _result = 0;
    HRESULT _hr = get_NumBoxes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2839)
inline long IDarvasSeries::ClickedBox ( long X, long Y ) {
    long _result = 0;
    HRESULT _hr = raw_ClickedBox(X, Y, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2840)
inline ITeeRectPtr IDarvasSeries::GetBoxesRect ( long Index ) {
    struct ITeeRect * _result = 0;
    HRESULT _hr = get_BoxesRect(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITeeRectPtr(_result, false);
}

//
// interface ISeriesRegionTool wrapper method implementations
//

#pragma implementation_key(2841)
inline VARIANT_BOOL ISeriesRegionTool::GetDrawBehind ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DrawBehind(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2842)
inline void ISeriesRegionTool::PutDrawBehind ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_DrawBehind(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2843)
inline IGradientPtr ISeriesRegionTool::GetGradient ( ) {
    struct IGradient * _result = 0;
    HRESULT _hr = get_Gradient(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGradientPtr(_result, false);
}

#pragma implementation_key(2844)
inline double ISeriesRegionTool::GetLowerBound ( ) {
    double _result = 0;
    HRESULT _hr = get_LowerBound(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2845)
inline void ISeriesRegionTool::PutLowerBound ( double Value ) {
    HRESULT _hr = put_LowerBound(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2846)
inline double ISeriesRegionTool::GetOrigin ( ) {
    double _result = 0;
    HRESULT _hr = get_Origin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2847)
inline void ISeriesRegionTool::PutOrigin ( double Value ) {
    HRESULT _hr = put_Origin(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2848)
inline long ISeriesRegionTool::GetTransparency ( ) {
    long _result = 0;
    HRESULT _hr = get_Transparency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2849)
inline void ISeriesRegionTool::PutTransparency ( long Value ) {
    HRESULT _hr = put_Transparency(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2850)
inline double ISeriesRegionTool::GetUpperBound ( ) {
    double _result = 0;
    HRESULT _hr = get_UpperBound(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2851)
inline void ISeriesRegionTool::PutUpperBound ( double Value ) {
    HRESULT _hr = put_UpperBound(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2852)
inline VARIANT_BOOL ISeriesRegionTool::GetAutoBounds ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoBounds(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2853)
inline void ISeriesRegionTool::PutAutoBounds ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_AutoBounds(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2854)
inline VARIANT_BOOL ISeriesRegionTool::GetUseOrigin ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseOrigin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2855)
inline void ISeriesRegionTool::PutUseOrigin ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_UseOrigin(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2856)
inline IBrushPtr ISeriesRegionTool::GetBrush ( ) {
    struct IBrush * _result = 0;
    HRESULT _hr = get_Brush(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IBrushPtr(_result, false);
}

#pragma implementation_key(2857)
inline OLE_COLOR ISeriesRegionTool::GetColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2858)
inline void ISeriesRegionTool::PutColor ( OLE_COLOR Value ) {
    HRESULT _hr = put_Color(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2859)
inline IPenPtr ISeriesRegionTool::GetPen ( ) {
    struct IPen * _result = 0;
    HRESULT _hr = get_Pen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPenPtr(_result, false);
}

//
// interface ISubGradient wrapper method implementations
//

#pragma implementation_key(2860)
inline long ISubGradient::GetTransparency ( ) {
    long _result = 0;
    HRESULT _hr = get_Transparency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2861)
inline void ISubGradient::PutTransparency ( long Value ) {
    HRESULT _hr = put_Transparency(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IMagnifyTool wrapper method implementations
//

#pragma implementation_key(2862)
inline VARIANT_BOOL IMagnifyTool::GetCircled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Circled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2863)
inline void IMagnifyTool::PutCircled ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Circled(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2864)
inline VARIANT_BOOL IMagnifyTool::GetFollowMouse ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_FollowMouse(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2865)
inline void IMagnifyTool::PutFollowMouse ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_FollowMouse(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2866)
inline double IMagnifyTool::GetPercent ( ) {
    double _result = 0;
    HRESULT _hr = get_Percent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2867)
inline void IMagnifyTool::PutPercent ( double Value ) {
    HRESULT _hr = put_Percent(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2868)
inline VARIANT_BOOL IMagnifyTool::GetSmooth ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Smooth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2869)
inline void IMagnifyTool::PutSmooth ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Smooth(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ILegendPaletteTool wrapper method implementations
//

#pragma implementation_key(2870)
inline IChartHiddenPenPtr ILegendPaletteTool::GetBorder ( ) {
    struct IChartHiddenPen * _result = 0;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IChartHiddenPenPtr(_result, false);
}

#pragma implementation_key(2871)
inline long ILegendPaletteTool::GetHeight ( ) {
    long _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2872)
inline void ILegendPaletteTool::PutHeight ( long Value ) {
    HRESULT _hr = put_Height(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2873)
inline VARIANT_BOOL ILegendPaletteTool::GetInverted ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Inverted(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2874)
inline void ILegendPaletteTool::PutInverted ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Inverted(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2875)
inline long ILegendPaletteTool::GetLeft ( ) {
    long _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2876)
inline void ILegendPaletteTool::PutLeft ( long Value ) {
    HRESULT _hr = put_Left(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2877)
inline VARIANT_BOOL ILegendPaletteTool::GetSmooth ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Smooth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2878)
inline void ILegendPaletteTool::PutSmooth ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Smooth(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2879)
inline long ILegendPaletteTool::GetTop ( ) {
    long _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2880)
inline void ILegendPaletteTool::PutTop ( long Value ) {
    HRESULT _hr = put_Top(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2881)
inline VARIANT_BOOL ILegendPaletteTool::GetTransparent ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Transparent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2882)
inline void ILegendPaletteTool::PutTransparent ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Transparent(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2883)
inline VARIANT_BOOL ILegendPaletteTool::GetVertical ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Vertical(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2884)
inline void ILegendPaletteTool::PutVertical ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Vertical(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2885)
inline long ILegendPaletteTool::GetWidth ( ) {
    long _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2886)
inline void ILegendPaletteTool::PutWidth ( long Value ) {
    HRESULT _hr = put_Width(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2887)
inline enum ELegendPaletteAxis ILegendPaletteTool::GetAxis ( ) {
    enum ELegendPaletteAxis _result;
    HRESULT _hr = get_Axis(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2888)
inline void ILegendPaletteTool::PutAxis ( enum ELegendPaletteAxis Value ) {
    HRESULT _hr = put_Axis(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2889)
inline enum EPositionUnits ILegendPaletteTool::GetPositionUnits ( ) {
    enum EPositionUnits _result;
    HRESULT _hr = get_PositionUnits(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2890)
inline void ILegendPaletteTool::PutPositionUnits ( enum EPositionUnits Value ) {
    HRESULT _hr = put_PositionUnits(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2891)
inline IPenPtr ILegendPaletteTool::GetPen ( ) {
    struct IPen * _result = 0;
    HRESULT _hr = get_Pen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPenPtr(_result, false);
}

#pragma implementation_key(2892)
inline OLE_COLOR ILegendPaletteTool::GetColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2893)
inline void ILegendPaletteTool::PutColor ( OLE_COLOR Value ) {
    HRESULT _hr = put_Color(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2894)
inline IGradientPtr ILegendPaletteTool::GetGradient ( ) {
    struct IGradient * _result = 0;
    HRESULT _hr = get_Gradient(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGradientPtr(_result, false);
}

#pragma implementation_key(2895)
inline ITeeShadowPtr ILegendPaletteTool::GetShadow ( ) {
    struct ITeeShadow * _result = 0;
    HRESULT _hr = get_Shadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITeeShadowPtr(_result, false);
}

//
// interface IBannerTool wrapper method implementations
//

#pragma implementation_key(2896)
inline VARIANT_BOOL IBannerTool::GetBlink ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Blink(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2897)
inline void IBannerTool::PutBlink ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Blink(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2898)
inline long IBannerTool::GetBlinkDelayOff ( ) {
    long _result = 0;
    HRESULT _hr = get_BlinkDelayOff(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2899)
inline void IBannerTool::PutBlinkDelayOff ( long Value ) {
    HRESULT _hr = put_BlinkDelayOff(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2900)
inline long IBannerTool::GetBlinkDelayOn ( ) {
    long _result = 0;
    HRESULT _hr = get_BlinkDelayOn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2901)
inline void IBannerTool::PutBlinkDelayOn ( long Value ) {
    HRESULT _hr = put_BlinkDelayOn(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2902)
inline long IBannerTool::GetScrollDelay ( ) {
    long _result = 0;
    HRESULT _hr = get_ScrollDelay(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2903)
inline void IBannerTool::PutScrollDelay ( long Value ) {
    HRESULT _hr = put_ScrollDelay(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2904)
inline enum EScrollDirection IBannerTool::GetScrollDirection ( ) {
    enum EScrollDirection _result;
    HRESULT _hr = get_ScrollDirection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2905)
inline void IBannerTool::PutScrollDirection ( enum EScrollDirection Value ) {
    HRESULT _hr = put_ScrollDirection(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2906)
inline VARIANT_BOOL IBannerTool::GetScroll ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Scroll(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2907)
inline void IBannerTool::PutScroll ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Scroll(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IText3DTool wrapper method implementations
//

#pragma implementation_key(2908)
inline double IText3DTool::GetAngle ( ) {
    double _result = 0;
    HRESULT _hr = get_Angle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2909)
inline void IText3DTool::PutAngle ( double Value ) {
    HRESULT _hr = put_Angle(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2910)
inline ITeeFontPtr IText3DTool::GetFont ( ) {
    struct ITeeFont * _result = 0;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITeeFontPtr(_result, false);
}

#pragma implementation_key(2911)
inline IFloatXYZPtr IText3DTool::GetPosition ( ) {
    struct IFloatXYZ * _result = 0;
    HRESULT _hr = get_Position(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IFloatXYZPtr(_result, false);
}

#pragma implementation_key(2912)
inline IFloatXYZPtr IText3DTool::GetRotation ( ) {
    struct IFloatXYZ * _result = 0;
    HRESULT _hr = get_Rotation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IFloatXYZPtr(_result, false);
}

#pragma implementation_key(2913)
inline _bstr_t IText3DTool::GetText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2914)
inline void IText3DTool::PutText ( _bstr_t Value ) {
    HRESULT _hr = put_Text(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IScrollBarThumb wrapper method implementations
//

#pragma implementation_key(2915)
inline IBrushPtr IScrollBarThumb::GetBrush ( ) {
    struct IBrush * _result = 0;
    HRESULT _hr = get_Brush(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IBrushPtr(_result, false);
}

#pragma implementation_key(2916)
inline IGradientPtr IScrollBarThumb::GetGradient ( ) {
    struct IGradient * _result = 0;
    HRESULT _hr = get_Gradient(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGradientPtr(_result, false);
}

#pragma implementation_key(2917)
inline ITeePicturePtr IScrollBarThumb::GetImage ( ) {
    struct ITeePicture * _result = 0;
    HRESULT _hr = get_Image(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITeePicturePtr(_result, false);
}

#pragma implementation_key(2918)
inline long IScrollBarThumb::GetSize ( ) {
    long _result = 0;
    HRESULT _hr = get_Size(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2919)
inline void IScrollBarThumb::PutSize ( long Value ) {
    HRESULT _hr = put_Size(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2920)
inline enum EScrollThumbStyle IScrollBarThumb::GetStyle ( ) {
    enum EScrollThumbStyle _result;
    HRESULT _hr = get_Style(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2921)
inline void IScrollBarThumb::PutStyle ( enum EScrollThumbStyle Value ) {
    HRESULT _hr = put_Style(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ILegendScrollBarTool wrapper method implementations
//

#pragma implementation_key(2922)
inline VARIANT_BOOL ILegendScrollBarTool::GetHorizontal ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Horizontal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2923)
inline void ILegendScrollBarTool::PutHorizontal ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Horizontal(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2924)
inline long ILegendScrollBarTool::GetPosition ( ) {
    long _result = 0;
    HRESULT _hr = get_Position(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2925)
inline void ILegendScrollBarTool::PutPosition ( long Value ) {
    HRESULT _hr = put_Position(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2926)
inline IBrushPtr ILegendScrollBarTool::GetArrowBrush ( ) {
    struct IBrush * _result = 0;
    HRESULT _hr = get_ArrowBrush(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IBrushPtr(_result, false);
}

#pragma implementation_key(2927)
inline VARIANT_BOOL ILegendScrollBarTool::GetAutoRepeat ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoRepeat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2928)
inline void ILegendScrollBarTool::PutAutoRepeat ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_AutoRepeat(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2929)
inline OLE_COLOR ILegendScrollBarTool::GetBackColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_BackColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2930)
inline void ILegendScrollBarTool::PutBackColor ( OLE_COLOR Value ) {
    HRESULT _hr = put_BackColor(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2931)
inline enum EPanelBevel ILegendScrollBarTool::GetBevel ( ) {
    enum EPanelBevel _result;
    HRESULT _hr = get_Bevel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2932)
inline void ILegendScrollBarTool::PutBevel ( enum EPanelBevel Value ) {
    HRESULT _hr = put_Bevel(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2933)
inline IBrushPtr ILegendScrollBarTool::GetBrush ( ) {
    struct IBrush * _result = 0;
    HRESULT _hr = get_Brush(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IBrushPtr(_result, false);
}

#pragma implementation_key(2934)
inline long ILegendScrollBarTool::GetInitialDelay ( ) {
    long _result = 0;
    HRESULT _hr = get_InitialDelay(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2935)
inline void ILegendScrollBarTool::PutInitialDelay ( long Value ) {
    HRESULT _hr = put_InitialDelay(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2936)
inline IPenPtr ILegendScrollBarTool::GetPen ( ) {
    struct IPen * _result = 0;
    HRESULT _hr = get_Pen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPenPtr(_result, false);
}

#pragma implementation_key(2937)
inline long ILegendScrollBarTool::GetSize ( ) {
    long _result = 0;
    HRESULT _hr = get_Size(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2938)
inline void ILegendScrollBarTool::PutSize ( long Value ) {
    HRESULT _hr = put_Size(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2939)
inline IBrushPtr ILegendScrollBarTool::GetThumbBrush ( ) {
    struct IBrush * _result = 0;
    HRESULT _hr = get_ThumbBrush(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IBrushPtr(_result, false);
}

#pragma implementation_key(2940)
inline enum EScrollBarDrawStyle ILegendScrollBarTool::GetDrawStyle ( ) {
    enum EScrollBarDrawStyle _result;
    HRESULT _hr = get_DrawStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2941)
inline void ILegendScrollBarTool::PutDrawStyle ( enum EScrollBarDrawStyle Value ) {
    HRESULT _hr = put_DrawStyle(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2942)
inline IGradientPtr ILegendScrollBarTool::GetGradient ( ) {
    struct IGradient * _result = 0;
    HRESULT _hr = get_Gradient(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGradientPtr(_result, false);
}

#pragma implementation_key(2943)
inline long ILegendScrollBarTool::GetMinThumbSize ( ) {
    long _result = 0;
    HRESULT _hr = get_MinThumbSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2944)
inline void ILegendScrollBarTool::PutMinThumbSize ( long Value ) {
    HRESULT _hr = put_MinThumbSize(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2945)
inline long ILegendScrollBarTool::GetThumbSize ( ) {
    long _result = 0;
    HRESULT _hr = get_ThumbSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2946)
inline void ILegendScrollBarTool::PutThumbSize ( long Value ) {
    HRESULT _hr = put_ThumbSize(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2947)
inline IScrollBarThumbPtr ILegendScrollBarTool::GetThumb ( ) {
    struct IScrollBarThumb * _result = 0;
    HRESULT _hr = get_Thumb(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IScrollBarThumbPtr(_result, false);
}

//
// interface IHighLowLineSeries wrapper method implementations
//

#pragma implementation_key(2948)
inline IPointerPtr IHighLowLineSeries::GetHighPointer ( ) {
    struct IPointer * _result = 0;
    HRESULT _hr = get_HighPointer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPointerPtr(_result, false);
}

#pragma implementation_key(2949)
inline IPointerPtr IHighLowLineSeries::GetLowPointer ( ) {
    struct IPointer * _result = 0;
    HRESULT _hr = get_LowPointer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPointerPtr(_result, false);
}

#pragma implementation_key(2950)
inline long IHighLowLineSeries::Clicked ( long X, long Y ) {
    long _result = 0;
    HRESULT _hr = raw_Clicked(X, Y, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IPolarGridSeries wrapper method implementations
//

#pragma implementation_key(2951)
inline IValueListPtr IPolarGridSeries::GetCellValues ( ) {
    struct IValueList * _result = 0;
    HRESULT _hr = get_CellValues(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IValueListPtr(_result, false);
}

#pragma implementation_key(2952)
inline VARIANT_BOOL IPolarGridSeries::GetCentered ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Centered(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2953)
inline void IPolarGridSeries::PutCentered ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Centered(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2954)
inline long IPolarGridSeries::GetNumSectors ( ) {
    long _result = 0;
    HRESULT _hr = get_NumSectors(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2955)
inline void IPolarGridSeries::PutNumSectors ( long Value ) {
    HRESULT _hr = put_NumSectors(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2956)
inline long IPolarGridSeries::GetNumTracks ( ) {
    long _result = 0;
    HRESULT _hr = get_NumTracks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2957)
inline void IPolarGridSeries::PutNumTracks ( long Value ) {
    HRESULT _hr = put_NumTracks(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2958)
inline long IPolarGridSeries::AddCell ( long Sector, long Track, double Value ) {
    long _result = 0;
    HRESULT _hr = raw_AddCell(Sector, Track, Value, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2959)
inline long IPolarGridSeries::CalcXPos ( long ValueIndex ) {
    long _result = 0;
    HRESULT _hr = raw_CalcXPos(ValueIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2960)
inline long IPolarGridSeries::CalcYPos ( long ValueIndex ) {
    long _result = 0;
    HRESULT _hr = raw_CalcYPos(ValueIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2961)
inline long IPolarGridSeries::Clicked ( long X, long Y ) {
    long _result = 0;
    HRESULT _hr = raw_Clicked(X, Y, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2962)
inline long IPolarGridSeries::CountLegendItems ( ) {
    long _result = 0;
    HRESULT _hr = raw_CountLegendItems(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2963)
inline OLE_COLOR IPolarGridSeries::GetCellColor ( double Value ) {
    OLE_COLOR _result;
    HRESULT _hr = raw_GetCellColor(Value, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2964)
inline OLE_COLOR IPolarGridSeries::LegendItemColor ( long LegendIndex ) {
    OLE_COLOR _result;
    HRESULT _hr = raw_LegendItemColor(LegendIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2965)
inline _bstr_t IPolarGridSeries::LegendString ( long LegendIndex, enum ELegendTextStyle LegendTextStyle ) {
    BSTR _result = 0;
    HRESULT _hr = raw_LegendString(LegendIndex, LegendTextStyle, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2966)
inline ICustom3DPaletteSeriesPtr IPolarGridSeries::GetPalette ( ) {
    struct ICustom3DPaletteSeries * _result = 0;
    HRESULT _hr = get_Palette(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ICustom3DPaletteSeriesPtr(_result, false);
}

//
// interface ICustomImagePointSeries wrapper method implementations
//

#pragma implementation_key(2967)
inline ITeePicturePtr ICustomImagePointSeries::GetImagePoint ( ) {
    struct ITeePicture * _result = 0;
    HRESULT _hr = get_ImagePoint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITeePicturePtr(_result, false);
}

#pragma implementation_key(2968)
inline VARIANT_BOOL ICustomImagePointSeries::GetImageTransparent ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ImageTransparent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2969)
inline void ICustomImagePointSeries::PutImageTransparent ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_ImageTransparent(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IDeltaPointSeries wrapper method implementations
//

#pragma implementation_key(2970)
inline ITeePicturePtr IDeltaPointSeries::GetEqualImage ( ) {
    struct ITeePicture * _result = 0;
    HRESULT _hr = get_EqualImage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITeePicturePtr(_result, false);
}

#pragma implementation_key(2971)
inline ITeePicturePtr IDeltaPointSeries::GetGreaterImage ( ) {
    struct ITeePicture * _result = 0;
    HRESULT _hr = get_GreaterImage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITeePicturePtr(_result, false);
}

#pragma implementation_key(2972)
inline enum EDeltaImageStyle IDeltaPointSeries::GetImageStyle ( ) {
    enum EDeltaImageStyle _result;
    HRESULT _hr = get_ImageStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2973)
inline void IDeltaPointSeries::PutImageStyle ( enum EDeltaImageStyle Value ) {
    HRESULT _hr = put_ImageStyle(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2974)
inline ITeePicturePtr IDeltaPointSeries::GetLowerImage ( ) {
    struct ITeePicture * _result = 0;
    HRESULT _hr = get_LowerImage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITeePicturePtr(_result, false);
}

//
// interface IWorldSeries wrapper method implementations
//

#pragma implementation_key(2975)
inline enum EWorldMap IWorldSeries::GetMap ( ) {
    enum EWorldMap _result;
    HRESULT _hr = get_Map(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2976)
inline void IWorldSeries::PutMap ( enum EWorldMap Value ) {
    HRESULT _hr = put_Map(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ITagCloudSeries wrapper method implementations
//

#pragma implementation_key(2977)
inline long ITagCloudSeries::AddTag ( _bstr_t Text, double Value ) {
    long _result = 0;
    HRESULT _hr = raw_AddTag(Text, Value, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2978)
inline long ITagCloudSeries::GetTagFontSize ( long ValueIndex ) {
    long _result = 0;
    HRESULT _hr = raw_GetTagFontSize(ValueIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2979)
inline HRESULT ITagCloudSeries::Sort ( enum ETagCloudOrder SortBy, enum EValueListOrder Order ) {
    HRESULT _hr = raw_Sort(SortBy, Order);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2980)
inline _bstr_t ITagCloudSeries::GetFilter ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Filter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2981)
inline void ITagCloudSeries::PutFilter ( _bstr_t Value ) {
    HRESULT _hr = put_Filter(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2982)
inline ITeeFontPtr ITagCloudSeries::GetFont ( ) {
    struct ITeeFont * _result = 0;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITeeFontPtr(_result, false);
}

#pragma implementation_key(2983)
inline IGradientPtr ITagCloudSeries::GetGradient ( ) {
    struct IGradient * _result = 0;
    HRESULT _hr = get_Gradient(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGradientPtr(_result, false);
}

#pragma implementation_key(2984)
inline long ITagCloudSeries::GetTagSeparation ( ) {
    long _result = 0;
    HRESULT _hr = get_TagSeparation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2985)
inline void ITagCloudSeries::PutTagSeparation ( long Value ) {
    HRESULT _hr = put_TagSeparation(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IKagiSeries wrapper method implementations
//

#pragma implementation_key(2986)
inline IValueListPtr IKagiSeries::GetCloseValues ( ) {
    struct IValueList * _result = 0;
    HRESULT _hr = get_CloseValues(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IValueListPtr(_result, false);
}

#pragma implementation_key(2987)
inline VARIANT_BOOL IKagiSeries::GetAbsoluteReversal ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AbsoluteReversal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2988)
inline void IKagiSeries::PutAbsoluteReversal ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_AbsoluteReversal(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2989)
inline IPointerPtr IKagiSeries::GetBuySymbol ( ) {
    struct IPointer * _result = 0;
    HRESULT _hr = get_BuySymbol(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPointerPtr(_result, false);
}

#pragma implementation_key(2990)
inline IPenPtr IKagiSeries::GetDownSwing ( ) {
    struct IPen * _result = 0;
    HRESULT _hr = get_DownSwing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPenPtr(_result, false);
}

#pragma implementation_key(2991)
inline double IKagiSeries::GetReversalAmount ( ) {
    double _result = 0;
    HRESULT _hr = get_ReversalAmount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2992)
inline void IKagiSeries::PutReversalAmount ( double Value ) {
    HRESULT _hr = put_ReversalAmount(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2993)
inline IPointerPtr IKagiSeries::GetSellSymbol ( ) {
    struct IPointer * _result = 0;
    HRESULT _hr = get_SellSymbol(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPointerPtr(_result, false);
}

#pragma implementation_key(2994)
inline IPenPtr IKagiSeries::GetUpSwing ( ) {
    struct IPen * _result = 0;
    HRESULT _hr = get_UpSwing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPenPtr(_result, false);
}

//
// interface ILinkTool wrapper method implementations
//

#pragma implementation_key(2995)
inline _bstr_t ILinkTool::GetHint ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Hint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2996)
inline void ILinkTool::PutHint ( _bstr_t Value ) {
    HRESULT _hr = put_Hint(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2997)
inline _bstr_t ILinkTool::GetURL ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_URL(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2998)
inline void ILinkTool::PutURL ( _bstr_t Value ) {
    HRESULT _hr = put_URL(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IFrameBrush wrapper method implementations
//

#pragma implementation_key(2999)
inline IGradientPtr IFrameBrush::GetGradient ( ) {
    struct IGradient * _result = 0;
    HRESULT _hr = get_Gradient(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGradientPtr(_result, false);
}

//
// interface IFramedBorder wrapper method implementations
//

#pragma implementation_key(3000)
inline IBrushPtr IFramedBorder::GetBrush ( ) {
    struct IBrush * _result = 0;
    HRESULT _hr = get_Brush(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IBrushPtr(_result, false);
}

#pragma implementation_key(3001)
inline VARIANT_BOOL IFramedBorder::GetCircled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Circled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3002)
inline void IFramedBorder::PutCircled ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Circled(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3003)
inline IFrameBrushPtr IFramedBorder::GetInnerBrush ( ) {
    struct IFrameBrush * _result = 0;
    HRESULT _hr = get_InnerBrush(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IFrameBrushPtr(_result, false);
}

#pragma implementation_key(3004)
inline IFrameBrushPtr IFramedBorder::GetMiddleBrush ( ) {
    struct IFrameBrush * _result = 0;
    HRESULT _hr = get_MiddleBrush(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IFrameBrushPtr(_result, false);
}

#pragma implementation_key(3005)
inline IFrameBrushPtr IFramedBorder::GetOuterBrush ( ) {
    struct IFrameBrush * _result = 0;
    HRESULT _hr = get_OuterBrush(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IFrameBrushPtr(_result, false);
}

#pragma implementation_key(3006)
inline ITeeShadowPtr IFramedBorder::GetShadow ( ) {
    struct ITeeShadow * _result = 0;
    HRESULT _hr = get_Shadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITeeShadowPtr(_result, false);
}

#pragma implementation_key(3007)
inline VARIANT_BOOL IFramedBorder::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3008)
inline void IFramedBorder::PutVisible ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Visible(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3009)
inline long IFramedBorder::GetWidth ( ) {
    long _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3010)
inline void IFramedBorder::PutWidth ( long Value ) {
    HRESULT _hr = put_Width(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ICustomGauge wrapper method implementations
//

#pragma implementation_key(3011)
inline ITeeShapePtr ICustomGauge::GetFace ( ) {
    struct ITeeShape * _result = 0;
    HRESULT _hr = get_Face(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITeeShapePtr(_result, false);
}

#pragma implementation_key(3012)
inline IFramedBorderPtr ICustomGauge::GetFrame ( ) {
    struct IFramedBorder * _result = 0;
    HRESULT _hr = get_Frame(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IFramedBorderPtr(_result, false);
}

#pragma implementation_key(3013)
inline double ICustomGauge::GetValue ( ) {
    double _result = 0;
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3014)
inline void ICustomGauge::PutValue ( double Value ) {
    HRESULT _hr = put_Value(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IGaugeSeriesPointer wrapper method implementations
//

#pragma implementation_key(3015)
inline enum EGaugePointerStyles IGaugeSeriesPointer::GetGaugeStyle ( ) {
    enum EGaugePointerStyles _result;
    HRESULT _hr = get_GaugeStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3016)
inline void IGaugeSeriesPointer::PutGaugeStyle ( enum EGaugePointerStyles Value ) {
    HRESULT _hr = put_GaugeStyle(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IGaugePointerRange wrapper method implementations
//

#pragma implementation_key(3017)
inline double IGaugePointerRange::GetEndValue ( ) {
    double _result = 0;
    HRESULT _hr = get_EndValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3018)
inline void IGaugePointerRange::PutEndValue ( double Value ) {
    HRESULT _hr = put_EndValue(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3019)
inline double IGaugePointerRange::GetStartValue ( ) {
    double _result = 0;
    HRESULT _hr = get_StartValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3020)
inline void IGaugePointerRange::PutStartValue ( double Value ) {
    HRESULT _hr = put_StartValue(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ICustomGaugeMinMax wrapper method implementations
//

#pragma implementation_key(3021)
inline IGaugePointerRangePtr ICustomGaugeMinMax::GetGreenLine ( ) {
    struct IGaugePointerRange * _result = 0;
    HRESULT _hr = get_GreenLine(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGaugePointerRangePtr(_result, false);
}

#pragma implementation_key(3022)
inline VARIANT_BOOL ICustomGaugeMinMax::GetHorizontal ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Horizontal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3023)
inline void ICustomGaugeMinMax::PutHorizontal ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Horizontal(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3024)
inline double ICustomGaugeMinMax::GetMaximum ( ) {
    double _result = 0;
    HRESULT _hr = get_Maximum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3025)
inline void ICustomGaugeMinMax::PutMaximum ( double Value ) {
    HRESULT _hr = put_Maximum(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3026)
inline double ICustomGaugeMinMax::GetMinimum ( ) {
    double _result = 0;
    HRESULT _hr = get_Minimum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3027)
inline void ICustomGaugeMinMax::PutMinimum ( double Value ) {
    HRESULT _hr = put_Minimum(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3028)
inline long ICustomGaugeMinMax::GetMinorTickDistance ( ) {
    long _result = 0;
    HRESULT _hr = get_MinorTickDistance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3029)
inline void ICustomGaugeMinMax::PutMinorTickDistance ( long Value ) {
    HRESULT _hr = put_MinorTickDistance(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3030)
inline IGaugeSeriesPointerPtr ICustomGaugeMinMax::GetMinorTicks ( ) {
    struct IGaugeSeriesPointer * _result = 0;
    HRESULT _hr = get_MinorTicks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGaugeSeriesPointerPtr(_result, false);
}

#pragma implementation_key(3031)
inline IGaugePointerRangePtr ICustomGaugeMinMax::GetRedLine ( ) {
    struct IGaugePointerRange * _result = 0;
    HRESULT _hr = get_RedLine(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGaugePointerRangePtr(_result, false);
}

#pragma implementation_key(3032)
inline IGaugeSeriesPointerPtr ICustomGaugeMinMax::GetTicks ( ) {
    struct IGaugeSeriesPointer * _result = 0;
    HRESULT _hr = get_Ticks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGaugeSeriesPointerPtr(_result, false);
}

//
// interface ILinearGauge wrapper method implementations
//

#pragma implementation_key(3033)
inline IGaugeSeriesPointerPtr ILinearGauge::GetMaxValueIndicator ( ) {
    struct IGaugeSeriesPointer * _result = 0;
    HRESULT _hr = get_MaxValueIndicator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGaugeSeriesPointerPtr(_result, false);
}

#pragma implementation_key(3034)
inline VARIANT_BOOL ILinearGauge::GetUseValueColorPalette ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseValueColorPalette(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3035)
inline void ILinearGauge::PutUseValueColorPalette ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_UseValueColorPalette(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3036)
inline ITeeShapePtr ILinearGauge::GetValueArea ( ) {
    struct ITeeShape * _result = 0;
    HRESULT _hr = get_ValueArea(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITeeShapePtr(_result, false);
}

//
// interface ICircularGauge wrapper method implementations
//

#pragma implementation_key(3037)
inline IGaugeSeriesPointerPtr ICircularGauge::GetCenter ( ) {
    struct IGaugeSeriesPointer * _result = 0;
    HRESULT _hr = get_Center(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGaugeSeriesPointerPtr(_result, false);
}

#pragma implementation_key(3038)
inline VARIANT_BOOL ICircularGauge::GetCircled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Circled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3039)
inline void ICircularGauge::PutCircled ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Circled(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3040)
inline IPointerPtr ICircularGauge::GetEndPoint ( ) {
    struct IPointer * _result = 0;
    HRESULT _hr = get_EndPoint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPointerPtr(_result, false);
}

#pragma implementation_key(3041)
inline VARIANT_BOOL ICircularGauge::GetLabelsInside ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_LabelsInside(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3042)
inline void ICircularGauge::PutLabelsInside ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_LabelsInside(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3043)
inline VARIANT_BOOL ICircularGauge::GetRotateLabels ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_RotateLabels(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3044)
inline void ICircularGauge::PutRotateLabels ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_RotateLabels(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3045)
inline double ICircularGauge::GetRotationAngle ( ) {
    double _result = 0;
    HRESULT _hr = get_RotationAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3046)
inline void ICircularGauge::PutRotationAngle ( double Value ) {
    HRESULT _hr = put_RotationAngle(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3047)
inline double ICircularGauge::GetTotalAngle ( ) {
    double _result = 0;
    HRESULT _hr = get_TotalAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3048)
inline void ICircularGauge::PutTotalAngle ( double Value ) {
    HRESULT _hr = put_TotalAngle(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3049)
inline IGaugeSeriesPointerPtr ICircularGauge::GetHand ( ) {
    struct IGaugeSeriesPointer * _result = 0;
    HRESULT _hr = get_Hand(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGaugeSeriesPointerPtr(_result, false);
}

//
// interface IGaugeHand wrapper method implementations
//

#pragma implementation_key(3050)
inline long IGaugeHand::GetDistance ( ) {
    long _result = 0;
    HRESULT _hr = get_Distance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3051)
inline void IGaugeHand::PutDistance ( long Value ) {
    HRESULT _hr = put_Distance(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3052)
inline long IGaugeHand::GetOffset ( ) {
    long _result = 0;
    HRESULT _hr = get_Offset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3053)
inline void IGaugeHand::PutOffset ( long Value ) {
    HRESULT _hr = put_Offset(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IFibonacciTool wrapper method implementations
//

#pragma implementation_key(3054)
inline enum EFibonacciStyle IFibonacciTool::GetDrawStyle ( ) {
    enum EFibonacciStyle _result;
    HRESULT _hr = get_DrawStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3055)
inline void IFibonacciTool::PutDrawStyle ( enum EFibonacciStyle Value ) {
    HRESULT _hr = put_DrawStyle(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3056)
inline double IFibonacciTool::GetEndX ( ) {
    double _result = 0;
    HRESULT _hr = get_EndX(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3057)
inline void IFibonacciTool::PutEndX ( double Value ) {
    HRESULT _hr = put_EndX(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3058)
inline double IFibonacciTool::GetEndY ( ) {
    double _result = 0;
    HRESULT _hr = get_EndY(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3059)
inline void IFibonacciTool::PutEndY ( double Value ) {
    HRESULT _hr = put_EndY(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3060)
inline long IFibonacciTool::GetLabelsAngle ( ) {
    long _result = 0;
    HRESULT _hr = get_LabelsAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3061)
inline void IFibonacciTool::PutLabelsAngle ( long Value ) {
    HRESULT _hr = put_LabelsAngle(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3062)
inline ITeeFontPtr IFibonacciTool::GetLabelsFont ( ) {
    struct ITeeFont * _result = 0;
    HRESULT _hr = get_LabelsFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITeeFontPtr(_result, false);
}

#pragma implementation_key(3063)
inline IFibonacciLevelsPtr IFibonacciTool::GetLevels ( ) {
    struct IFibonacciLevels * _result = 0;
    HRESULT _hr = get_Levels(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IFibonacciLevelsPtr(_result, false);
}

#pragma implementation_key(3064)
inline VARIANT_BOOL IFibonacciTool::GetShowLabels ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowLabels(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3065)
inline void IFibonacciTool::PutShowLabels ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_ShowLabels(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3066)
inline double IFibonacciTool::GetStartX ( ) {
    double _result = 0;
    HRESULT _hr = get_StartX(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3067)
inline void IFibonacciTool::PutStartX ( double Value ) {
    HRESULT _hr = put_StartX(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3068)
inline double IFibonacciTool::GetStartY ( ) {
    double _result = 0;
    HRESULT _hr = get_StartY(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3069)
inline void IFibonacciTool::PutStartY ( double Value ) {
    HRESULT _hr = put_StartY(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3070)
inline IPenPtr IFibonacciTool::GetTrendPen ( ) {
    struct IPen * _result = 0;
    HRESULT _hr = get_TrendPen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPenPtr(_result, false);
}

//
// interface ITools wrapper method implementations
//

#pragma implementation_key(3071)
inline ICursorToolPtr ITools::GetasTeeCursor ( ) {
    struct ICursorTool * _result = 0;
    HRESULT _hr = get_asTeeCursor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ICursorToolPtr(_result, false);
}

#pragma implementation_key(3072)
inline IDragMarksToolPtr ITools::GetasDragMarks ( ) {
    struct IDragMarksTool * _result = 0;
    HRESULT _hr = get_asDragMarks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDragMarksToolPtr(_result, false);
}

#pragma implementation_key(3073)
inline IAxisArrowToolPtr ITools::GetasAxisArrow ( ) {
    struct IAxisArrowTool * _result = 0;
    HRESULT _hr = get_asAxisArrow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAxisArrowToolPtr(_result, false);
}

#pragma implementation_key(3074)
inline IDrawLineToolPtr ITools::GetasDrawLine ( ) {
    struct IDrawLineTool * _result = 0;
    HRESULT _hr = get_asDrawLine(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDrawLineToolPtr(_result, false);
}

#pragma implementation_key(3075)
inline INearestToolPtr ITools::GetasNearest ( ) {
    struct INearestTool * _result = 0;
    HRESULT _hr = get_asNearest(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return INearestToolPtr(_result, false);
}

#pragma implementation_key(3076)
inline IColorBandToolPtr ITools::GetasColorband ( ) {
    struct IColorBandTool * _result = 0;
    HRESULT _hr = get_asColorband(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IColorBandToolPtr(_result, false);
}

#pragma implementation_key(3077)
inline IColorLineToolPtr ITools::GetasColorLine ( ) {
    struct IColorLineTool * _result = 0;
    HRESULT _hr = get_asColorLine(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IColorLineToolPtr(_result, false);
}

#pragma implementation_key(3078)
inline IRotateToolPtr ITools::GetasRotate ( ) {
    struct IRotateTool * _result = 0;
    HRESULT _hr = get_asRotate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IRotateToolPtr(_result, false);
}

#pragma implementation_key(3079)
inline IMarksTipToolPtr ITools::GetasMarksTip ( ) {
    struct IMarksTipTool * _result = 0;
    HRESULT _hr = get_asMarksTip(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMarksTipToolPtr(_result, false);
}

#pragma implementation_key(3080)
inline IChartImageToolPtr ITools::GetasChartImage ( ) {
    struct IChartImageTool * _result = 0;
    HRESULT _hr = get_asChartImage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IChartImageToolPtr(_result, false);
}

#pragma implementation_key(3081)
inline IAnnotationToolPtr ITools::GetasAnnotation ( ) {
    struct IAnnotationTool * _result = 0;
    HRESULT _hr = get_asAnnotation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAnnotationToolPtr(_result, false);
}

#pragma implementation_key(3082)
inline IPageNumToolPtr ITools::GetasPageNum ( ) {
    struct IPageNumTool * _result = 0;
    HRESULT _hr = get_asPageNum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPageNumToolPtr(_result, false);
}

#pragma implementation_key(3083)
inline VARIANT_BOOL ITools::GetActive ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Active(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3084)
inline void ITools::PutActive ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Active(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3085)
inline _bstr_t ITools::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3086)
inline enum EToolClass ITools::GetToolType ( ) {
    enum EToolClass _result;
    HRESULT _hr = get_ToolType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3087)
inline HRESULT ITools::ShowEditor ( ) {
    HRESULT _hr = raw_ShowEditor();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3088)
inline IGridTransposeToolPtr ITools::GetasGridTranspose ( ) {
    struct IGridTransposeTool * _result = 0;
    HRESULT _hr = get_asGridTranspose(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGridTransposeToolPtr(_result, false);
}

#pragma implementation_key(3089)
inline IExtraLegendToolPtr ITools::GetasExtraLegend ( ) {
    struct IExtraLegendTool * _result = 0;
    HRESULT _hr = get_asExtraLegend(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IExtraLegendToolPtr(_result, false);
}

#pragma implementation_key(3090)
inline ISeriesAnimationToolPtr ITools::GetasSeriesAnimation ( ) {
    struct ISeriesAnimationTool * _result = 0;
    HRESULT _hr = get_asSeriesAnimation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISeriesAnimationToolPtr(_result, false);
}

#pragma implementation_key(3091)
inline IGanttToolPtr ITools::GetasGantt ( ) {
    struct IGanttTool * _result = 0;
    HRESULT _hr = get_asGantt(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGanttToolPtr(_result, false);
}

#pragma implementation_key(3092)
inline IGridBandToolPtr ITools::GetasGridBand ( ) {
    struct IGridBandTool * _result = 0;
    HRESULT _hr = get_asGridBand(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGridBandToolPtr(_result, false);
}

#pragma implementation_key(3093)
inline IPieToolPtr ITools::GetasPie ( ) {
    struct IPieTool * _result = 0;
    HRESULT _hr = get_asPie(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPieToolPtr(_result, false);
}

#pragma implementation_key(3094)
inline IDragPointToolPtr ITools::GetasDragPoint ( ) {
    struct IDragPointTool * _result = 0;
    HRESULT _hr = get_asDragPoint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDragPointToolPtr(_result, false);
}

#pragma implementation_key(3095)
inline ILegendScrollBarToolPtr ITools::GetasLegendScrollBar ( ) {
    struct ILegendScrollBarTool * _result = 0;
    HRESULT _hr = get_asLegendScrollBar(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ILegendScrollBarToolPtr(_result, false);
}

#pragma implementation_key(3096)
inline ILightToolPtr ITools::GetasLight ( ) {
    struct ILightTool * _result = 0;
    HRESULT _hr = get_asLight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ILightToolPtr(_result, false);
}

#pragma implementation_key(3097)
inline ISurfaceNearestToolPtr ITools::GetasSurfaceNearest ( ) {
    struct ISurfaceNearestTool * _result = 0;
    HRESULT _hr = get_asSurfaceNearest(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISurfaceNearestToolPtr(_result, false);
}

#pragma implementation_key(3098)
inline IAxisScrollToolPtr ITools::GetasAxisScroll ( ) {
    struct IAxisScrollTool * _result = 0;
    HRESULT _hr = get_asAxisScroll(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAxisScrollToolPtr(_result, false);
}

#pragma implementation_key(3099)
inline ISeriesBandToolPtr ITools::GetasSeriesBand ( ) {
    struct ISeriesBandTool * _result = 0;
    HRESULT _hr = get_asSeriesBand(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISeriesBandToolPtr(_result, false);
}

#pragma implementation_key(3100)
inline ISelectorToolPtr ITools::GetasSelector ( ) {
    struct ISelectorTool * _result = 0;
    HRESULT _hr = get_asSelector(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISelectorToolPtr(_result, false);
}

#pragma implementation_key(3101)
inline IRectangleToolPtr ITools::GetasRectangle ( ) {
    struct IRectangleTool * _result = 0;
    HRESULT _hr = get_asRectangle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IRectangleToolPtr(_result, false);
}

#pragma implementation_key(3102)
inline VARIANT_BOOL ITools::GetShowInEditor ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowInEditor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3103)
inline void ITools::PutShowInEditor ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_ShowInEditor(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3104)
inline IDataTableToolPtr ITools::GetasDataTable ( ) {
    struct IDataTableTool * _result = 0;
    HRESULT _hr = get_asDataTable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDataTableToolPtr(_result, false);
}

#pragma implementation_key(3105)
inline IVideoToolPtr ITools::GetasVideo ( ) {
    struct IVideoTool * _result = 0;
    HRESULT _hr = get_asVideo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVideoToolPtr(_result, false);
}

#pragma implementation_key(3106)
inline IVideoPlayerToolPtr ITools::GetasVideoPlayer ( ) {
    struct IVideoPlayerTool * _result = 0;
    HRESULT _hr = get_asVideoPlayer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVideoPlayerToolPtr(_result, false);
}

#pragma implementation_key(3107)
inline ITransposeSeriesToolPtr ITools::GetasTransposeSeries ( ) {
    struct ITransposeSeriesTool * _result = 0;
    HRESULT _hr = get_asTransposeSeries(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITransposeSeriesToolPtr(_result, false);
}

#pragma implementation_key(3108)
inline ISeriesRegionToolPtr ITools::GetasSeriesRegion ( ) {
    struct ISeriesRegionTool * _result = 0;
    HRESULT _hr = get_asSeriesRegion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISeriesRegionToolPtr(_result, false);
}

#pragma implementation_key(3109)
inline IAntiAliasToolPtr ITools::GetasAntiAlias ( ) {
    struct IAntiAliasTool * _result = 0;
    HRESULT _hr = get_asAntiAlias(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAntiAliasToolPtr(_result, false);
}

#pragma implementation_key(3110)
inline IClipSeriesToolPtr ITools::GetasClipSeries ( ) {
    struct IClipSeriesTool * _result = 0;
    HRESULT _hr = get_asClipSeries(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IClipSeriesToolPtr(_result, false);
}

#pragma implementation_key(3111)
inline IFaderToolPtr ITools::GetasFader ( ) {
    struct IFaderTool * _result = 0;
    HRESULT _hr = get_asFader(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IFaderToolPtr(_result, false);
}

#pragma implementation_key(3112)
inline IFrameToolPtr ITools::GetasFrame ( ) {
    struct IFrameTool * _result = 0;
    HRESULT _hr = get_asFrame(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IFrameToolPtr(_result, false);
}

#pragma implementation_key(3113)
inline IMagnifyToolPtr ITools::GetasMagnify ( ) {
    struct IMagnifyTool * _result = 0;
    HRESULT _hr = get_asMagnify(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMagnifyToolPtr(_result, false);
}

#pragma implementation_key(3114)
inline ILegendPaletteToolPtr ITools::GetasLegendPalette ( ) {
    struct ILegendPaletteTool * _result = 0;
    HRESULT _hr = get_asLegendPalette(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ILegendPaletteToolPtr(_result, false);
}

#pragma implementation_key(3115)
inline IBannerToolPtr ITools::GetasBanner ( ) {
    struct IBannerTool * _result = 0;
    HRESULT _hr = get_asBanner(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IBannerToolPtr(_result, false);
}

#pragma implementation_key(3116)
inline IText3DToolPtr ITools::GetasText3D ( ) {
    struct IText3DTool * _result = 0;
    HRESULT _hr = get_asText3D(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IText3DToolPtr(_result, false);
}

#pragma implementation_key(3117)
inline ISeriesStatsToolPtr ITools::GetasSeriesStats ( ) {
    struct ISeriesStatsTool * _result = 0;
    HRESULT _hr = get_asSeriesStats(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISeriesStatsToolPtr(_result, false);
}

#pragma implementation_key(3118)
inline ILinkToolPtr ITools::GetasLink ( ) {
    struct ILinkTool * _result = 0;
    HRESULT _hr = get_asLink(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ILinkToolPtr(_result, false);
}

#pragma implementation_key(3119)
inline IFibonacciToolPtr ITools::GetasFibonacci ( ) {
    struct IFibonacciTool * _result = 0;
    HRESULT _hr = get_asFibonacci(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IFibonacciToolPtr(_result, false);
}

#pragma implementation_key(3120)
inline IFullScreenToolPtr ITools::GetasFullScreen ( ) {
    struct IFullScreenTool * _result = 0;
    HRESULT _hr = get_asFullScreen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IFullScreenToolPtr(_result, false);
}

//
// interface IToolList wrapper method implementations
//

#pragma implementation_key(3121)
inline long IToolList::Add ( enum EToolClass ToolClass ) {
    long _result = 0;
    HRESULT _hr = raw_Add(ToolClass, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3122)
inline IToolsPtr IToolList::GetItems ( long Index ) {
    struct ITools * _result = 0;
    HRESULT _hr = get_Items(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IToolsPtr(_result, false);
}

#pragma implementation_key(3123)
inline _variant_t IToolList::GetControlDefault ( long Index ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ControlDefault(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3124)
inline HRESULT IToolList::Clear ( ) {
    HRESULT _hr = raw_Clear();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3125)
inline HRESULT IToolList::Delete ( long Index ) {
    HRESULT _hr = raw_Delete(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3126)
inline long IToolList::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3127)
inline void IToolList::PutActive ( VARIANT_BOOL _arg1 ) {
    HRESULT _hr = put_Active(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3128)
inline HRESULT IToolList::Exchange ( long Index1, long Index2 ) {
    HRESULT _hr = raw_Exchange(Index1, Index2);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3129)
inline HRESULT IToolList::ShowGallery ( ) {
    HRESULT _hr = raw_ShowGallery();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface INumericGauge wrapper method implementations
//

#pragma implementation_key(3130)
inline enum EDigitalFont INumericGauge::GetDigitalFont ( ) {
    enum EDigitalFont _result;
    HRESULT _hr = get_DigitalFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3131)
inline void INumericGauge::PutDigitalFont ( enum EDigitalFont Value ) {
    HRESULT _hr = put_DigitalFont(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3132)
inline INumericMarkerPtr INumericGauge::GetTextMarker ( ) {
    struct INumericMarker * _result = 0;
    HRESULT _hr = get_TextMarker(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return INumericMarkerPtr(_result, false);
}

#pragma implementation_key(3133)
inline INumericMarkerPtr INumericGauge::GetUnitsMarker ( ) {
    struct INumericMarker * _result = 0;
    HRESULT _hr = get_UnitsMarker(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return INumericMarkerPtr(_result, false);
}

#pragma implementation_key(3134)
inline INumericMarkerPtr INumericGauge::GetValueMarker ( ) {
    struct INumericMarker * _result = 0;
    HRESULT _hr = get_ValueMarker(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return INumericMarkerPtr(_result, false);
}

//
// interface ISeries wrapper method implementations
//

#pragma implementation_key(3135)
inline VARIANT_BOOL ISeries::GetActive ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Active(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3136)
inline void ISeries::PutActive ( VARIANT_BOOL Active ) {
    HRESULT _hr = put_Active(Active);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3137)
inline IAreaSeriesPtr ISeries::GetasArea ( ) {
    struct IAreaSeries * _result = 0;
    HRESULT _hr = get_asArea(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAreaSeriesPtr(_result, false);
}

#pragma implementation_key(3138)
inline IArrowSeriesPtr ISeries::GetasArrow ( ) {
    struct IArrowSeries * _result = 0;
    HRESULT _hr = get_asArrow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IArrowSeriesPtr(_result, false);
}

#pragma implementation_key(3139)
inline IBarSeriesPtr ISeries::GetasBar ( ) {
    struct IBarSeries * _result = 0;
    HRESULT _hr = get_asBar(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IBarSeriesPtr(_result, false);
}

#pragma implementation_key(3140)
inline IBubbleSeriesPtr ISeries::GetasBubble ( ) {
    struct IBubbleSeries * _result = 0;
    HRESULT _hr = get_asBubble(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IBubbleSeriesPtr(_result, false);
}

#pragma implementation_key(3141)
inline ICandleSeriesPtr ISeries::GetasCandle ( ) {
    struct ICandleSeries * _result = 0;
    HRESULT _hr = get_asCandle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ICandleSeriesPtr(_result, false);
}

#pragma implementation_key(3142)
inline IErrorBarSeriesPtr ISeries::GetasErrorBar ( ) {
    struct IErrorBarSeries * _result = 0;
    HRESULT _hr = get_asErrorBar(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IErrorBarSeriesPtr(_result, false);
}

#pragma implementation_key(3143)
inline IFastLineSeriesPtr ISeries::GetasFastLine ( ) {
    struct IFastLineSeries * _result = 0;
    HRESULT _hr = get_asFastLine(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IFastLineSeriesPtr(_result, false);
}

#pragma implementation_key(3144)
inline IGanttSeriesPtr ISeries::GetasGantt ( ) {
    struct IGanttSeries * _result = 0;
    HRESULT _hr = get_asGantt(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGanttSeriesPtr(_result, false);
}

#pragma implementation_key(3145)
inline IHorizBarSeriesPtr ISeries::GetasHorizBar ( ) {
    struct IHorizBarSeries * _result = 0;
    HRESULT _hr = get_asHorizBar(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IHorizBarSeriesPtr(_result, false);
}

#pragma implementation_key(3146)
inline ILineSeriesPtr ISeries::GetasLine ( ) {
    struct ILineSeries * _result = 0;
    HRESULT _hr = get_asLine(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ILineSeriesPtr(_result, false);
}

#pragma implementation_key(3147)
inline IPieSeriesPtr ISeries::GetasPie ( ) {
    struct IPieSeries * _result = 0;
    HRESULT _hr = get_asPie(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPieSeriesPtr(_result, false);
}

#pragma implementation_key(3148)
inline IPointSeriesPtr ISeries::GetasPoint ( ) {
    struct IPointSeries * _result = 0;
    HRESULT _hr = get_asPoint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPointSeriesPtr(_result, false);
}

#pragma implementation_key(3149)
inline IPolarSeriesPtr ISeries::GetasPolar ( ) {
    struct IPolarSeries * _result = 0;
    HRESULT _hr = get_asPolar(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPolarSeriesPtr(_result, false);
}

#pragma implementation_key(3150)
inline IShapeSeriesPtr ISeries::GetasShape ( ) {
    struct IShapeSeries * _result = 0;
    HRESULT _hr = get_asShape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IShapeSeriesPtr(_result, false);
}

#pragma implementation_key(3151)
inline ISurfaceSeriesPtr ISeries::GetasSurface ( ) {
    struct ISurfaceSeries * _result = 0;
    HRESULT _hr = get_asSurface(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISurfaceSeriesPtr(_result, false);
}

#pragma implementation_key(3152)
inline IVolumeSeriesPtr ISeries::GetasVolume ( ) {
    struct IVolumeSeries * _result = 0;
    HRESULT _hr = get_asVolume(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVolumeSeriesPtr(_result, false);
}

#pragma implementation_key(3153)
inline OLE_COLOR ISeries::GetColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3154)
inline void ISeries::PutColor ( OLE_COLOR Color ) {
    HRESULT _hr = put_Color(Color);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3155)
inline VARIANT_BOOL ISeries::GetColorEachPoint ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ColorEachPoint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3156)
inline void ISeries::PutColorEachPoint ( VARIANT_BOOL ColorEachPoint ) {
    HRESULT _hr = put_ColorEachPoint(ColorEachPoint);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3157)
inline long ISeries::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3158)
inline short ISeries::GetCursor ( ) {
    short _result = 0;
    HRESULT _hr = get_Cursor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3159)
inline void ISeries::PutCursor ( short Cursor ) {
    HRESULT _hr = put_Cursor(Cursor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3160)
inline _variant_t ISeries::GetDataSource ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_DataSource(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3161)
inline void ISeries::PutDataSource ( const _variant_t & DataSource ) {
    HRESULT _hr = put_DataSource(DataSource);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3162)
inline long ISeries::GetFirstValueIndex ( ) {
    long _result = 0;
    HRESULT _hr = get_FirstValueIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3163)
inline ITeeFunctionPtr ISeries::GetFunctionType ( ) {
    struct ITeeFunction * _result = 0;
    HRESULT _hr = get_FunctionType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITeeFunctionPtr(_result, false);
}

#pragma implementation_key(3164)
inline enum EHorizontalAxis ISeries::GetHorizontalAxis ( ) {
    enum EHorizontalAxis _result;
    HRESULT _hr = get_HorizontalAxis(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3165)
inline void ISeries::PutHorizontalAxis ( enum EHorizontalAxis HorizontalAxis ) {
    HRESULT _hr = put_HorizontalAxis(HorizontalAxis);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3166)
inline _bstr_t ISeries::GetLabelsSource ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LabelsSource(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3167)
inline void ISeries::PutLabelsSource ( _bstr_t LabelsSource ) {
    HRESULT _hr = put_LabelsSource(LabelsSource);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3168)
inline long ISeries::GetLastValueIndex ( ) {
    long _result = 0;
    HRESULT _hr = get_LastValueIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3169)
inline IMarksPtr ISeries::GetMarks ( ) {
    struct IMarks * _result = 0;
    HRESULT _hr = get_Marks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMarksPtr(_result, false);
}

#pragma implementation_key(3170)
inline _bstr_t ISeries::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3171)
inline void ISeries::PutName ( _bstr_t Name ) {
    HRESULT _hr = put_Name(Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3172)
inline _bstr_t ISeries::GetPercentFormat ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PercentFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3173)
inline void ISeries::PutPercentFormat ( _bstr_t PercentFormat ) {
    HRESULT _hr = put_PercentFormat(PercentFormat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3174)
inline OLE_COLOR ISeries::GetPointColor ( long Index ) {
    OLE_COLOR _result;
    HRESULT _hr = get_PointColor(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3175)
inline void ISeries::PutPointColor ( long Index, OLE_COLOR Value ) {
    HRESULT _hr = put_PointColor(Index, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3176)
inline _bstr_t ISeries::GetPointLabel ( long Index ) {
    BSTR _result = 0;
    HRESULT _hr = get_PointLabel(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3177)
inline void ISeries::PutPointLabel ( long Index, _bstr_t Value ) {
    HRESULT _hr = put_PointLabel(Index, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3178)
inline double ISeries::GetPointValue ( long Index ) {
    double _result = 0;
    HRESULT _hr = get_PointValue(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3179)
inline void ISeries::PutPointValue ( long Index, double Value ) {
    HRESULT _hr = put_PointValue(Index, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3180)
inline enum ESeriesClass ISeries::GetSeriesType ( ) {
    enum ESeriesClass _result;
    HRESULT _hr = get_SeriesType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3181)
inline VARIANT_BOOL ISeries::GetShowInLegend ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowInLegend(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3182)
inline void ISeries::PutShowInLegend ( VARIANT_BOOL ShowInLegend ) {
    HRESULT _hr = put_ShowInLegend(ShowInLegend);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3183)
inline _bstr_t ISeries::GetTitle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Title(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3184)
inline void ISeries::PutTitle ( _bstr_t Title ) {
    HRESULT _hr = put_Title(Title);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3185)
inline _bstr_t ISeries::GetValueFormat ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ValueFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3186)
inline void ISeries::PutValueFormat ( _bstr_t ValueFormat ) {
    HRESULT _hr = put_ValueFormat(ValueFormat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3187)
inline _bstr_t ISeries::GetValueMarkText ( long ValueIndex ) {
    BSTR _result = 0;
    HRESULT _hr = get_ValueMarkText(ValueIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3188)
inline enum EVerticalAxis ISeries::GetVerticalAxis ( ) {
    enum EVerticalAxis _result;
    HRESULT _hr = get_VerticalAxis(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3189)
inline void ISeries::PutVerticalAxis ( enum EVerticalAxis VerticalAxis ) {
    HRESULT _hr = put_VerticalAxis(VerticalAxis);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3190)
inline IValueListPtr ISeries::GetXValues ( ) {
    struct IValueList * _result = 0;
    HRESULT _hr = get_XValues(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IValueListPtr(_result, false);
}

#pragma implementation_key(3191)
inline IValueListPtr ISeries::GetYValues ( ) {
    struct IValueList * _result = 0;
    HRESULT _hr = get_YValues(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IValueListPtr(_result, false);
}

#pragma implementation_key(3192)
inline long ISeries::Add ( double AValue, _bstr_t ALabel, OLE_COLOR Value ) {
    long _result = 0;
    HRESULT _hr = raw_Add(AValue, ALabel, Value, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3193)
inline long ISeries::AddNull ( _bstr_t SomeLabel ) {
    long _result = 0;
    HRESULT _hr = raw_AddNull(SomeLabel, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3194)
inline long ISeries::AddXY ( double AX, double AY, _bstr_t ALabel, OLE_COLOR Value ) {
    long _result = 0;
    HRESULT _hr = raw_AddXY(AX, AY, ALabel, Value, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3195)
inline long ISeries::CalcXPos ( long SomeValueIndex ) {
    long _result = 0;
    HRESULT _hr = raw_CalcXPos(SomeValueIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3196)
inline long ISeries::CalcXPosValue ( double SomeValue ) {
    long _result = 0;
    HRESULT _hr = raw_CalcXPosValue(SomeValue, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3197)
inline long ISeries::CalcXSizeValue ( double SomeValue ) {
    long _result = 0;
    HRESULT _hr = raw_CalcXSizeValue(SomeValue, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3198)
inline long ISeries::CalcYPos ( long SomeValueIndex ) {
    long _result = 0;
    HRESULT _hr = raw_CalcYPos(SomeValueIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3199)
inline long ISeries::CalcYPosValue ( double SomeValue ) {
    long _result = 0;
    HRESULT _hr = raw_CalcYPosValue(SomeValue, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3200)
inline long ISeries::CalcYSizeValue ( double SomeValue ) {
    long _result = 0;
    HRESULT _hr = raw_CalcYSizeValue(SomeValue, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3201)
inline HRESULT ISeries::CheckDataSource ( ) {
    HRESULT _hr = raw_CheckDataSource();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3202)
inline HRESULT ISeries::Clear ( ) {
    HRESULT _hr = raw_Clear();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3203)
inline long ISeries::Clicked ( long XCoord, long YCoord ) {
    long _result = 0;
    HRESULT _hr = raw_Clicked(XCoord, YCoord, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3204)
inline HRESULT ISeries::Delete ( long Index ) {
    HRESULT _hr = raw_Delete(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3205)
inline HRESULT ISeries::FillSampleValues ( long NumValues ) {
    HRESULT _hr = raw_FillSampleValues(NumValues);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3206)
inline long ISeries::GetMousePoint ( ) {
    long _result = 0;
    HRESULT _hr = raw_GetMousePoint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3207)
inline VARIANT_BOOL ISeries::IsNull ( long ValueIndex ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsNull(ValueIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3208)
inline HRESULT ISeries::RefreshSeries ( ) {
    HRESULT _hr = raw_RefreshSeries();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3209)
inline HRESULT ISeries::SetFunction ( enum EFunctionType AFunction ) {
    HRESULT _hr = raw_SetFunction(AFunction);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3210)
inline HRESULT ISeries::SwapValues ( long a, long b ) {
    HRESULT _hr = raw_SwapValues(a, b);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3211)
inline double ISeries::XScreenToValue ( long ScreenCoord ) {
    double _result = 0;
    HRESULT _hr = raw_XScreenToValue(ScreenCoord, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3212)
inline _bstr_t ISeries::XValueToText ( double SomeValue ) {
    BSTR _result = 0;
    HRESULT _hr = raw_XValueToText(SomeValue, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3213)
inline double ISeries::YScreenToValue ( long ScreenCoord ) {
    double _result = 0;
    HRESULT _hr = raw_YScreenToValue(ScreenCoord, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3214)
inline _bstr_t ISeries::YValueToText ( double SomeValue ) {
    BSTR _result = 0;
    HRESULT _hr = raw_YValueToText(SomeValue, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3215)
inline IBezierSeriesPtr ISeries::GetasBezier ( ) {
    struct IBezierSeries * _result = 0;
    HRESULT _hr = get_asBezier(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IBezierSeriesPtr(_result, false);
}

#pragma implementation_key(3216)
inline IContourSeriesPtr ISeries::GetasContour ( ) {
    struct IContourSeries * _result = 0;
    HRESULT _hr = get_asContour(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IContourSeriesPtr(_result, false);
}

#pragma implementation_key(3217)
inline IErrorSeriesPtr ISeries::GetasError ( ) {
    struct IErrorSeries * _result = 0;
    HRESULT _hr = get_asError(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IErrorSeriesPtr(_result, false);
}

#pragma implementation_key(3218)
inline IPoint3DSeriesPtr ISeries::GetasPoint3D ( ) {
    struct IPoint3DSeries * _result = 0;
    HRESULT _hr = get_asPoint3D(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPoint3DSeriesPtr(_result, false);
}

#pragma implementation_key(3219)
inline IRadarSeriesPtr ISeries::GetasRadar ( ) {
    struct IRadarSeries * _result = 0;
    HRESULT _hr = get_asRadar(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IRadarSeriesPtr(_result, false);
}

#pragma implementation_key(3220)
inline long ISeries::AddNullXY ( double X, double Y, _bstr_t ALabel ) {
    long _result = 0;
    HRESULT _hr = raw_AddNullXY(X, Y, ALabel, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3221)
inline _bstr_t ISeries::LegendString ( long LegendIndex, enum ELegendTextStyle LegendTextStyle ) {
    BSTR _result = 0;
    HRESULT _hr = raw_LegendString(LegendIndex, LegendTextStyle, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3222)
inline OLE_COLOR ISeries::LegendItemColor ( long LegendIndex ) {
    OLE_COLOR _result;
    HRESULT _hr = raw_LegendItemColor(LegendIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3223)
inline long ISeries::CountLegendItems ( ) {
    long _result = 0;
    HRESULT _hr = raw_CountLegendItems(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3224)
inline long ISeries::LegendToValueIndex ( long LegendIndex ) {
    long _result = 0;
    HRESULT _hr = raw_LegendToValueIndex(LegendIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3225)
inline long ISeries::VisibleCount ( ) {
    long _result = 0;
    HRESULT _hr = raw_VisibleCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3226)
inline HRESULT ISeries::AssignValues ( long SeriesIndex ) {
    HRESULT _hr = raw_AssignValues(SeriesIndex);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3227)
inline long ISeries::GetHorizontalAxisCustom ( ) {
    long _result = 0;
    HRESULT _hr = get_HorizontalAxisCustom(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3228)
inline void ISeries::PutHorizontalAxisCustom ( long Value ) {
    HRESULT _hr = put_HorizontalAxisCustom(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3229)
inline long ISeries::GetVerticalAxisCustom ( ) {
    long _result = 0;
    HRESULT _hr = get_VerticalAxisCustom(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3230)
inline void ISeries::PutVerticalAxisCustom ( long Value ) {
    HRESULT _hr = put_VerticalAxisCustom(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3231)
inline IClockSeriesPtr ISeries::GetasClock ( ) {
    struct IClockSeries * _result = 0;
    HRESULT _hr = get_asClock(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IClockSeriesPtr(_result, false);
}

#pragma implementation_key(3232)
inline IWindRoseSeriesPtr ISeries::GetasWindRose ( ) {
    struct IWindRoseSeries * _result = 0;
    HRESULT _hr = get_asWindRose(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IWindRoseSeriesPtr(_result, false);
}

#pragma implementation_key(3233)
inline IBar3DSeriesPtr ISeries::GetasBar3D ( ) {
    struct IBar3DSeries * _result = 0;
    HRESULT _hr = get_asBar3D(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IBar3DSeriesPtr(_result, false);
}

#pragma implementation_key(3234)
inline IImageBarSeriesPtr ISeries::GetasImageBar ( ) {
    struct IImageBarSeries * _result = 0;
    HRESULT _hr = get_asImageBar(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IImageBarSeriesPtr(_result, false);
}

#pragma implementation_key(3235)
inline HRESULT ISeries::DisconnectAxisCustom ( VARIANT_BOOL IsHorizontal ) {
    HRESULT _hr = raw_DisconnectAxisCustom(IsHorizontal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3236)
inline ITeePoint2DPtr ISeries::GetMouseValues ( ) {
    struct ITeePoint2D * _result = 0;
    HRESULT _hr = get_MouseValues(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITeePoint2DPtr(_result, false);
}

#pragma implementation_key(3237)
inline HRESULT ISeries::AddArray ( long ArraySize, const _variant_t & YArray, const _variant_t & XArray ) {
    HRESULT _hr = raw_AddArray(ArraySize, YArray, XArray);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3238)
inline long ISeries::GetDepth ( ) {
    long _result = 0;
    HRESULT _hr = get_Depth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3239)
inline void ISeries::PutDepth ( long Value ) {
    HRESULT _hr = put_Depth(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3240)
inline IDonutSeriesPtr ISeries::GetasDonut ( ) {
    struct IDonutSeries * _result = 0;
    HRESULT _hr = get_asDonut(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDonutSeriesPtr(_result, false);
}

#pragma implementation_key(3241)
inline ITriSurfaceSeriesPtr ISeries::GetasTriSurface ( ) {
    struct ITriSurfaceSeries * _result = 0;
    HRESULT _hr = get_asTriSurface(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITriSurfaceSeriesPtr(_result, false);
}

#pragma implementation_key(3242)
inline IBoxPlotSeriesPtr ISeries::GetasBoxPlot ( ) {
    struct IBoxPlotSeries * _result = 0;
    HRESULT _hr = get_asBoxPlot(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IBoxPlotSeriesPtr(_result, false);
}

#pragma implementation_key(3243)
inline IHorizBoxPlotSeriesPtr ISeries::GetasHorizBoxPlot ( ) {
    struct IHorizBoxPlotSeries * _result = 0;
    HRESULT _hr = get_asHorizBoxPlot(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IHorizBoxPlotSeriesPtr(_result, false);
}

#pragma implementation_key(3244)
inline IHistogramSeriesPtr ISeries::GetasHistogram ( ) {
    struct IHistogramSeries * _result = 0;
    HRESULT _hr = get_asHistogram(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IHistogramSeriesPtr(_result, false);
}

#pragma implementation_key(3245)
inline IColorGridSeriesPtr ISeries::GetasColorGrid ( ) {
    struct IColorGridSeries * _result = 0;
    HRESULT _hr = get_asColorGrid(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IColorGridSeriesPtr(_result, false);
}

#pragma implementation_key(3246)
inline IHorizLineSeriesPtr ISeries::GetasHorizLine ( ) {
    struct IHorizLineSeries * _result = 0;
    HRESULT _hr = get_asHorizLine(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IHorizLineSeriesPtr(_result, false);
}

#pragma implementation_key(3247)
inline IBarJoinSeriesPtr ISeries::GetasBarJoin ( ) {
    struct IBarJoinSeries * _result = 0;
    HRESULT _hr = get_asBarJoin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IBarJoinSeriesPtr(_result, false);
}

#pragma implementation_key(3248)
inline IHighLowSeriesPtr ISeries::GetasHighLow ( ) {
    struct IHighLowSeries * _result = 0;
    HRESULT _hr = get_asHighLow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IHighLowSeriesPtr(_result, false);
}

#pragma implementation_key(3249)
inline IWaterfallSeriesPtr ISeries::GetasWaterfall ( ) {
    struct IWaterfallSeries * _result = 0;
    HRESULT _hr = get_asWaterfall(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IWaterfallSeriesPtr(_result, false);
}

#pragma implementation_key(3250)
inline ISmithSeriesPtr ISeries::GetasSmith ( ) {
    struct ISmithSeries * _result = 0;
    HRESULT _hr = get_asSmith(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISmithSeriesPtr(_result, false);
}

#pragma implementation_key(3251)
inline IPyramidSeriesPtr ISeries::GetasPyramid ( ) {
    struct IPyramidSeries * _result = 0;
    HRESULT _hr = get_asPyramid(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPyramidSeriesPtr(_result, false);
}

#pragma implementation_key(3252)
inline IMapSeriesPtr ISeries::GetasMap ( ) {
    struct IMapSeries * _result = 0;
    HRESULT _hr = get_asMap(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMapSeriesPtr(_result, false);
}

#pragma implementation_key(3253)
inline IFunnelSeriesPtr ISeries::GetasFunnel ( ) {
    struct IFunnelSeries * _result = 0;
    HRESULT _hr = get_asFunnel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IFunnelSeriesPtr(_result, false);
}

#pragma implementation_key(3254)
inline ICalendarSeriesPtr ISeries::GetasCalendar ( ) {
    struct ICalendarSeries * _result = 0;
    HRESULT _hr = get_asCalendar(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ICalendarSeriesPtr(_result, false);
}

#pragma implementation_key(3255)
inline HRESULT ISeries::FreeDatasource ( VARIANT_BOOL SurePrompt ) {
    HRESULT _hr = raw_FreeDatasource(SurePrompt);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3256)
inline long ISeries::GetSeriesLink ( ) {
    long _result = 0;
    HRESULT _hr = get_SeriesLink(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3257)
inline enum EDatasourceType ISeries::GetDatasourceType ( ) {
    enum EDatasourceType _result;
    HRESULT _hr = get_DatasourceType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3258)
inline void ISeries::PutDatasourceType ( enum EDatasourceType Value ) {
    HRESULT _hr = put_DatasourceType(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3259)
inline IValueListsPtr ISeries::GetValueLists ( ) {
    struct IValueLists * _result = 0;
    HRESULT _hr = get_ValueLists(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IValueListsPtr(_result, false);
}

#pragma implementation_key(3260)
inline VARIANT_BOOL ISeries::IsNan ( double Value ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsNan(Value, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3261)
inline HRESULT ISeries::DeleteRange ( long Start, long Quantity ) {
    HRESULT _hr = raw_DeleteRange(Start, Quantity);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3262)
inline HRESULT ISeries::SortByLabels ( enum EValueListOrder Order ) {
    HRESULT _hr = raw_SortByLabels(Order);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3263)
inline HRESULT ISeries::SetNull ( long ValueIndex ) {
    HRESULT _hr = raw_SetNull(ValueIndex);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3264)
inline IHorizAreaSeriesPtr ISeries::GetasHorizArea ( ) {
    struct IHorizAreaSeries * _result = 0;
    HRESULT _hr = get_asHorizArea(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IHorizAreaSeriesPtr(_result, false);
}

#pragma implementation_key(3265)
inline IPointFigureSeriesPtr ISeries::GetasPointFigure ( ) {
    struct IPointFigureSeries * _result = 0;
    HRESULT _hr = get_asPointFigure(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPointFigureSeriesPtr(_result, false);
}

#pragma implementation_key(3266)
inline IGaugeSeriesPtr ISeries::GetasGauge ( ) {
    struct IGaugeSeries * _result = 0;
    HRESULT _hr = get_asGauge(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGaugeSeriesPtr(_result, false);
}

#pragma implementation_key(3267)
inline IPenPtr ISeries::GetPen ( ) {
    struct IPen * _result = 0;
    HRESULT _hr = get_Pen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPenPtr(_result, false);
}

#pragma implementation_key(3268)
inline IVector3DSeriesPtr ISeries::GetasVector3D ( ) {
    struct IVector3DSeries * _result = 0;
    HRESULT _hr = get_asVector3D(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVector3DSeriesPtr(_result, false);
}

#pragma implementation_key(3269)
inline ITowerSeriesPtr ISeries::GetasTower ( ) {
    struct ITowerSeries * _result = 0;
    HRESULT _hr = get_asTower(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITowerSeriesPtr(_result, false);
}

#pragma implementation_key(3270)
inline double ISeries::MaxVisibleValue ( long valueList ) {
    double _result = 0;
    HRESULT _hr = raw_MaxVisibleValue(valueList, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3271)
inline double ISeries::MinVisibleValue ( long valueList ) {
    double _result = 0;
    HRESULT _hr = raw_MinVisibleValue(valueList, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3272)
inline IPolarBarSeriesPtr ISeries::GetasPolarBar ( ) {
    struct IPolarBarSeries * _result = 0;
    HRESULT _hr = get_asPolarBar(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPolarBarSeriesPtr(_result, false);
}

#pragma implementation_key(3273)
inline IBubble3DSeriesPtr ISeries::GetasBubble3D ( ) {
    struct IBubble3DSeries * _result = 0;
    HRESULT _hr = get_asBubble3D(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IBubble3DSeriesPtr(_result, false);
}

#pragma implementation_key(3274)
inline IHorizHistogramSeriesPtr ISeries::GetasHorizHistogram ( ) {
    struct IHorizHistogramSeries * _result = 0;
    HRESULT _hr = get_asHorizHistogram(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IHorizHistogramSeriesPtr(_result, false);
}

#pragma implementation_key(3275)
inline VARIANT_BOOL ISeries::GetShowInEditor ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowInEditor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3276)
inline void ISeries::PutShowInEditor ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_ShowInEditor(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3277)
inline IVolumePipeSeriesPtr ISeries::GetasVolumePipe ( ) {
    struct IVolumePipeSeries * _result = 0;
    HRESULT _hr = get_asVolumePipe(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVolumePipeSeriesPtr(_result, false);
}

#pragma implementation_key(3278)
inline IIsoSurfaceSeriesPtr ISeries::GetasIsoSurface ( ) {
    struct IIsoSurfaceSeries * _result = 0;
    HRESULT _hr = get_asIsoSurface(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IIsoSurfaceSeriesPtr(_result, false);
}

#pragma implementation_key(3279)
inline IDarvasSeriesPtr ISeries::GetasDarvas ( ) {
    struct IDarvasSeries * _result = 0;
    HRESULT _hr = get_asDarvas(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDarvasSeriesPtr(_result, false);
}

#pragma implementation_key(3280)
inline IHighLowLineSeriesPtr ISeries::GetasHighLowLine ( ) {
    struct IHighLowLineSeries * _result = 0;
    HRESULT _hr = get_asHighLowLine(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IHighLowLineSeriesPtr(_result, false);
}

#pragma implementation_key(3281)
inline IPolarGridSeriesPtr ISeries::GetasPolarGrid ( ) {
    struct IPolarGridSeries * _result = 0;
    HRESULT _hr = get_asPolarGrid(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPolarGridSeriesPtr(_result, false);
}

#pragma implementation_key(3282)
inline VARIANT_BOOL ISeries::GetYMandatory ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_YMandatory(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3283)
inline HRESULT ISeries::BeginUpdate ( ) {
    HRESULT _hr = raw_BeginUpdate();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3284)
inline HRESULT ISeries::EndUpdate ( ) {
    HRESULT _hr = raw_EndUpdate();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3285)
inline IBrushPtr ISeries::GetBrush ( ) {
    struct IBrush * _result = 0;
    HRESULT _hr = get_Brush(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IBrushPtr(_result, false);
}

#pragma implementation_key(3286)
inline IValueListPtr ISeries::GetMandatoryValueList ( ) {
    struct IValueList * _result = 0;
    HRESULT _hr = get_MandatoryValueList(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IValueListPtr(_result, false);
}

#pragma implementation_key(3287)
inline IValueListPtr ISeries::GetNotMandatoryValueList ( ) {
    struct IValueList * _result = 0;
    HRESULT _hr = get_NotMandatoryValueList(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IValueListPtr(_result, false);
}

#pragma implementation_key(3288)
inline IDeltaPointSeriesPtr ISeries::GetasDeltaPoint ( ) {
    struct IDeltaPointSeries * _result = 0;
    HRESULT _hr = get_asDeltaPoint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDeltaPointSeriesPtr(_result, false);
}

#pragma implementation_key(3289)
inline IImagePointSeriesPtr ISeries::GetasImagePoint ( ) {
    struct IImagePointSeries * _result = 0;
    HRESULT _hr = get_asImagePoint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IImagePointSeriesPtr(_result, false);
}

#pragma implementation_key(3290)
inline IOrgSeriesPtr ISeries::GetasOrganizational ( ) {
    struct IOrgSeries * _result = 0;
    HRESULT _hr = get_asOrganizational(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IOrgSeriesPtr(_result, false);
}

#pragma implementation_key(3291)
inline IWorldSeriesPtr ISeries::GetasWorld ( ) {
    struct IWorldSeries * _result = 0;
    HRESULT _hr = get_asWorld(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IWorldSeriesPtr(_result, false);
}

#pragma implementation_key(3292)
inline ITagCloudSeriesPtr ISeries::GetasTagCloud ( ) {
    struct ITagCloudSeries * _result = 0;
    HRESULT _hr = get_asTagCloud(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITagCloudSeriesPtr(_result, false);
}

#pragma implementation_key(3293)
inline IKagiSeriesPtr ISeries::GetasKagi ( ) {
    struct IKagiSeries * _result = 0;
    HRESULT _hr = get_asKagi(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IKagiSeriesPtr(_result, false);
}

#pragma implementation_key(3294)
inline IRenkoSeriesPtr ISeries::GetasRenko ( ) {
    struct IRenkoSeries * _result = 0;
    HRESULT _hr = get_asRenko(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IRenkoSeriesPtr(_result, false);
}

#pragma implementation_key(3295)
inline VARIANT_BOOL ISeries::IsValidSourceOf ( long SeriesIndex ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsValidSourceOf(SeriesIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3296)
inline VARIANT_BOOL ISeries::IsValidSeriesSource ( long SeriesIndex ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsValidSeriesSource(SeriesIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3297)
inline VARIANT_BOOL ISeries::UseAxis ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_UseAxis(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3298)
inline _bstr_t ISeries::GetColorSource ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ColorSource(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3299)
inline void ISeries::PutColorSource ( _bstr_t Value ) {
    HRESULT _hr = put_ColorSource(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3300)
inline INumericGaugePtr ISeries::GetasNumericGauge ( ) {
    struct INumericGauge * _result = 0;
    HRESULT _hr = get_asNumericGauge(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return INumericGaugePtr(_result, false);
}

#pragma implementation_key(3301)
inline ILinearGaugePtr ISeries::GetasLinearGauge ( ) {
    struct ILinearGauge * _result = 0;
    HRESULT _hr = get_asLinearGauge(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ILinearGaugePtr(_result, false);
}

#pragma implementation_key(3302)
inline ICircularGaugePtr ISeries::GetasCircularGauge ( ) {
    struct ICircularGauge * _result = 0;
    HRESULT _hr = get_asCircularGauge(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ICircularGaugePtr(_result, false);
}

#pragma implementation_key(3303)
inline long ISeries::GetZOrder ( ) {
    long _result = 0;
    HRESULT _hr = get_ZOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3304)
inline void ISeries::PutZOrder ( long Value ) {
    HRESULT _hr = put_ZOrder(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IMACDFunction wrapper method implementations
//

#pragma implementation_key(3305)
inline double IMACDFunction::GetPeriod2 ( ) {
    double _result = 0;
    HRESULT _hr = get_Period2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3306)
inline void IMACDFunction::PutPeriod2 ( double Value ) {
    HRESULT _hr = put_Period2(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3307)
inline ISeriesPtr IMACDFunction::GetMACDExp ( ) {
    struct ISeries * _result = 0;
    HRESULT _hr = get_MACDExp(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISeriesPtr(_result, false);
}

#pragma implementation_key(3308)
inline ISeriesPtr IMACDFunction::GetHistogram ( ) {
    struct ISeries * _result = 0;
    HRESULT _hr = get_Histogram(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISeriesPtr(_result, false);
}

#pragma implementation_key(3309)
inline long IMACDFunction::GetPeriod3 ( ) {
    long _result = 0;
    HRESULT _hr = get_Period3(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3310)
inline void IMACDFunction::PutPeriod3 ( long Value ) {
    HRESULT _hr = put_Period3(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IBollingerFunction wrapper method implementations
//

#pragma implementation_key(3311)
inline double IBollingerFunction::GetDeviation ( ) {
    double _result = 0;
    HRESULT _hr = get_Deviation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3312)
inline void IBollingerFunction::PutDeviation ( double Value ) {
    HRESULT _hr = put_Deviation(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3313)
inline VARIANT_BOOL IBollingerFunction::GetExponential ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Exponential(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3314)
inline void IBollingerFunction::PutExponential ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Exponential(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3315)
inline ISeriesPtr IBollingerFunction::GetLowBand ( ) {
    struct ISeries * _result = 0;
    HRESULT _hr = get_LowBand(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISeriesPtr(_result, false);
}

//
// interface IADXFunction wrapper method implementations
//

#pragma implementation_key(3316)
inline ISeriesPtr IADXFunction::GetDMDown ( ) {
    struct ISeries * _result = 0;
    HRESULT _hr = get_DMDown(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISeriesPtr(_result, false);
}

#pragma implementation_key(3317)
inline ISeriesPtr IADXFunction::GetDMUp ( ) {
    struct ISeries * _result = 0;
    HRESULT _hr = get_DMUp(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISeriesPtr(_result, false);
}

//
// interface ITeeFunction wrapper method implementations
//

#pragma implementation_key(3318)
inline double ITeeFunction::GetPeriod ( ) {
    double _result = 0;
    HRESULT _hr = get_Period(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3319)
inline void ITeeFunction::PutPeriod ( double Period ) {
    HRESULT _hr = put_Period(Period);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3320)
inline ICurveFittingFunctionPtr ITeeFunction::GetasCurveFit ( ) {
    struct ICurveFittingFunction * _result = 0;
    HRESULT _hr = get_asCurveFit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ICurveFittingFunctionPtr(_result, false);
}

#pragma implementation_key(3321)
inline IExpAvgFunctionPtr ITeeFunction::GetasExpAvg ( ) {
    struct IExpAvgFunction * _result = 0;
    HRESULT _hr = get_asExpAvg(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IExpAvgFunctionPtr(_result, false);
}

#pragma implementation_key(3322)
inline IMovingAvgFunctionPtr ITeeFunction::GetasMovAvg ( ) {
    struct IMovingAvgFunction * _result = 0;
    HRESULT _hr = get_asMovAvg(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMovingAvgFunctionPtr(_result, false);
}

#pragma implementation_key(3323)
inline enum EFunctionPeriodStyle ITeeFunction::GetPeriodStyle ( ) {
    enum EFunctionPeriodStyle _result;
    HRESULT _hr = get_PeriodStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3324)
inline void ITeeFunction::PutPeriodStyle ( enum EFunctionPeriodStyle Value ) {
    HRESULT _hr = put_PeriodStyle(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3325)
inline enum EFunctionPeriodAlign ITeeFunction::GetPeriodAlign ( ) {
    enum EFunctionPeriodAlign _result;
    HRESULT _hr = get_PeriodAlign(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3326)
inline void ITeeFunction::PutPeriodAlign ( enum EFunctionPeriodAlign Value ) {
    HRESULT _hr = put_PeriodAlign(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3327)
inline IStdDeviationFunctionPtr ITeeFunction::GetasStdDeviation ( ) {
    struct IStdDeviationFunction * _result = 0;
    HRESULT _hr = get_asStdDeviation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IStdDeviationFunctionPtr(_result, false);
}

#pragma implementation_key(3328)
inline HRESULT ITeeFunction::BeginUpdate ( ) {
    HRESULT _hr = raw_BeginUpdate();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3329)
inline HRESULT ITeeFunction::EndUpdate ( ) {
    HRESULT _hr = raw_EndUpdate();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3330)
inline IRSIFunctionPtr ITeeFunction::GetasRSI ( ) {
    struct IRSIFunction * _result = 0;
    HRESULT _hr = get_asRSI(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IRSIFunctionPtr(_result, false);
}

#pragma implementation_key(3331)
inline IBollingerFunctionPtr ITeeFunction::GetasBollinger ( ) {
    struct IBollingerFunction * _result = 0;
    HRESULT _hr = get_asBollinger(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IBollingerFunctionPtr(_result, false);
}

#pragma implementation_key(3332)
inline IADXFunctionPtr ITeeFunction::GetasADX ( ) {
    struct IADXFunction * _result = 0;
    HRESULT _hr = get_asADX(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADXFunctionPtr(_result, false);
}

#pragma implementation_key(3333)
inline IMACDFunctionPtr ITeeFunction::GetasMACD ( ) {
    struct IMACDFunction * _result = 0;
    HRESULT _hr = get_asMACD(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMACDFunctionPtr(_result, false);
}

#pragma implementation_key(3334)
inline IRMSFunctionPtr ITeeFunction::GetasRMS ( ) {
    struct IRMSFunction * _result = 0;
    HRESULT _hr = get_asRMS(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IRMSFunctionPtr(_result, false);
}

#pragma implementation_key(3335)
inline IAverageFunctionPtr ITeeFunction::GetasAverage ( ) {
    struct IAverageFunction * _result = 0;
    HRESULT _hr = get_asAverage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAverageFunctionPtr(_result, false);
}

#pragma implementation_key(3336)
inline ISmoothingFunctionPtr ITeeFunction::GetasSmoothing ( ) {
    struct ISmoothingFunction * _result = 0;
    HRESULT _hr = get_asSmoothing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISmoothingFunctionPtr(_result, false);
}

#pragma implementation_key(3337)
inline ICustomFunctionPtr ITeeFunction::GetasCustom ( ) {
    struct ICustomFunction * _result = 0;
    HRESULT _hr = get_asCustom(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ICustomFunctionPtr(_result, false);
}

#pragma implementation_key(3338)
inline ICompressFunctionPtr ITeeFunction::GetasCompress ( ) {
    struct ICompressFunction * _result = 0;
    HRESULT _hr = get_asCompress(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ICompressFunctionPtr(_result, false);
}

#pragma implementation_key(3339)
inline ICLVFunctionPtr ITeeFunction::GetasCLV ( ) {
    struct ICLVFunction * _result = 0;
    HRESULT _hr = get_asCLV(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ICLVFunctionPtr(_result, false);
}

#pragma implementation_key(3340)
inline IOBVFunctionPtr ITeeFunction::GetasOBV ( ) {
    struct IOBVFunction * _result = 0;
    HRESULT _hr = get_asOBV(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IOBVFunctionPtr(_result, false);
}

#pragma implementation_key(3341)
inline ICCIFunctionPtr ITeeFunction::GetasCCI ( ) {
    struct ICCIFunction * _result = 0;
    HRESULT _hr = get_asCCI(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ICCIFunctionPtr(_result, false);
}

#pragma implementation_key(3342)
inline IPVOFunctionPtr ITeeFunction::GetasPVO ( ) {
    struct IPVOFunction * _result = 0;
    HRESULT _hr = get_asPVO(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPVOFunctionPtr(_result, false);
}

#pragma implementation_key(3343)
inline IPerformanceFunctionPtr ITeeFunction::GetasPerformance ( ) {
    struct IPerformanceFunction * _result = 0;
    HRESULT _hr = get_asPerformance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPerformanceFunctionPtr(_result, false);
}

#pragma implementation_key(3344)
inline IModeFunctionPtr ITeeFunction::GetasMode ( ) {
    struct IModeFunction * _result = 0;
    HRESULT _hr = get_asMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModeFunctionPtr(_result, false);
}

#pragma implementation_key(3345)
inline IMedianFunctionPtr ITeeFunction::GetasMedian ( ) {
    struct IMedianFunction * _result = 0;
    HRESULT _hr = get_asMedian(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMedianFunctionPtr(_result, false);
}

#pragma implementation_key(3346)
inline HRESULT ITeeFunction::Recalculate ( ) {
    HRESULT _hr = raw_Recalculate();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3347)
inline IDownSamplingFunctionPtr ITeeFunction::GetasDownSampling ( ) {
    struct IDownSamplingFunction * _result = 0;
    HRESULT _hr = get_asDownSampling(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDownSamplingFunctionPtr(_result, false);
}

#pragma implementation_key(3348)
inline ITrendFunctionPtr ITeeFunction::GetasTrend ( ) {
    struct ITrendFunction * _result = 0;
    HRESULT _hr = get_asTrend(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITrendFunctionPtr(_result, false);
}

#pragma implementation_key(3349)
inline ISubsetTeeFunctionPtr ITeeFunction::GetasSubset ( ) {
    struct ISubsetTeeFunction * _result = 0;
    HRESULT _hr = get_asSubset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISubsetTeeFunctionPtr(_result, false);
}

#pragma implementation_key(3350)
inline IExpMovAvgFunctionPtr ITeeFunction::GetasExpMovAvg ( ) {
    struct IExpMovAvgFunction * _result = 0;
    HRESULT _hr = get_asExpMovAvg(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IExpMovAvgFunctionPtr(_result, false);
}

#pragma implementation_key(3351)
inline ISARFunctionPtr ITeeFunction::GetasSAR ( ) {
    struct ISARFunction * _result = 0;
    HRESULT _hr = get_asSAR(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISARFunctionPtr(_result, false);
}

#pragma implementation_key(3352)
inline IHistogramFunctionPtr ITeeFunction::GetasHistogram ( ) {
    struct IHistogramFunction * _result = 0;
    HRESULT _hr = get_asHistogram(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IHistogramFunctionPtr(_result, false);
}

//
// interface ICustomSeriesList wrapper method implementations
//

#pragma implementation_key(3353)
inline HRESULT ICustomSeriesList::ClearValues ( ) {
    HRESULT _hr = raw_ClearValues();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3354)
inline long ICustomSeriesList::First ( ) {
    long _result = 0;
    HRESULT _hr = raw_First(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3355)
inline long ICustomSeriesList::Last ( ) {
    long _result = 0;
    HRESULT _hr = raw_Last(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3356)
inline ISeriesPtr ICustomSeriesList::GetItems ( long Index ) {
    struct ISeries * _result = 0;
    HRESULT _hr = get_Items(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISeriesPtr(_result, false);
}

//
// interface ISeriesGroup wrapper method implementations
//

#pragma implementation_key(3357)
inline HRESULT ISeriesGroup::Add ( long SeriesIndex ) {
    HRESULT _hr = raw_Add(SeriesIndex);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3358)
inline HRESULT ISeriesGroup::Hide ( ) {
    HRESULT _hr = raw_Hide();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3359)
inline HRESULT ISeriesGroup::Show ( ) {
    HRESULT _hr = raw_Show();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3360)
inline enum ESeriesGroupActive ISeriesGroup::GetActive ( ) {
    enum ESeriesGroupActive _result;
    HRESULT _hr = get_Active(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3361)
inline void ISeriesGroup::PutActive ( enum ESeriesGroupActive Value ) {
    HRESULT _hr = put_Active(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3362)
inline _bstr_t ISeriesGroup::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3363)
inline void ISeriesGroup::PutName ( _bstr_t Value ) {
    HRESULT _hr = put_Name(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3364)
inline _variant_t ISeriesGroup::GetSeriesCount ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_SeriesCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3365)
inline long ISeriesGroup::GetGroupLink ( ) {
    long _result = 0;
    HRESULT _hr = get_GroupLink(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3366)
inline HRESULT ISeriesGroup::Delete ( long Index ) {
    HRESULT _hr = raw_Delete(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3367)
inline HRESULT ISeriesGroup::Insert ( long IndexInGroup, long SeriesIndex ) {
    HRESULT _hr = raw_Insert(IndexInGroup, SeriesIndex);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3368)
inline ICustomSeriesListPtr ISeriesGroup::GetSeries ( ) {
    struct ICustomSeriesList * _result = 0;
    HRESULT _hr = get_Series(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ICustomSeriesListPtr(_result, false);
}

//
// interface ITeeListBox wrapper method implementations
//

#pragma implementation_key(3369)
inline OLE_COLOR ITeeListBox::GetColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3370)
inline void ITeeListBox::PutColor ( OLE_COLOR Value ) {
    HRESULT _hr = put_Color(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3371)
inline HRESULT ITeeListBox::UpdateSeries ( ) {
    HRESULT _hr = raw_UpdateSeries();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3372)
inline long ITeeListBox::GetSelectedSeries ( ) {
    long _result = 0;
    HRESULT _hr = get_SelectedSeries(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3373)
inline void ITeeListBox::PutSelectedSeries ( long Value ) {
    HRESULT _hr = put_SelectedSeries(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3374)
inline VARIANT_BOOL ITeeListBox::GetShowActive ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowActive(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3375)
inline void ITeeListBox::PutShowActive ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_ShowActive(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3376)
inline VARIANT_BOOL ITeeListBox::GetShowColor ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3377)
inline void ITeeListBox::PutShowColor ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_ShowColor(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3378)
inline VARIANT_BOOL ITeeListBox::GetShowTitle ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowTitle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3379)
inline void ITeeListBox::PutShowTitle ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_ShowTitle(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3380)
inline VARIANT_BOOL ITeeListBox::GetShowIcon ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowIcon(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3381)
inline void ITeeListBox::PutShowIcon ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_ShowIcon(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3382)
inline ISeriesGroupPtr ITeeListBox::GetSeriesGroup ( ) {
    struct ISeriesGroup * _result = 0;
    HRESULT _hr = get_SeriesGroup(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISeriesGroupPtr(_result, false);
}

#pragma implementation_key(3383)
inline void ITeeListBox::PutSeriesGroup ( struct ISeriesGroup * Value ) {
    HRESULT _hr = put_SeriesGroup(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3384)
inline enum ECheckBoxesStyle ITeeListBox::GetCheckStyle ( ) {
    enum ECheckBoxesStyle _result;
    HRESULT _hr = get_CheckStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3385)
inline void ITeeListBox::PutCheckStyle ( enum ECheckBoxesStyle Value ) {
    HRESULT _hr = put_CheckStyle(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3386)
inline HRESULT ITeeListBox::ShowEditor ( ) {
    HRESULT _hr = raw_ShowEditor();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3387)
inline HRESULT ITeeListBox::HideEditor ( ) {
    HRESULT _hr = raw_HideEditor();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3388)
inline long ITeeListBox::GetItemHeight ( ) {
    long _result = 0;
    HRESULT _hr = get_ItemHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3389)
inline void ITeeListBox::PutItemHeight ( long Value ) {
    HRESULT _hr = put_ItemHeight(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3390)
inline HRESULT ITeeListBox::ClearItems ( ) {
    HRESULT _hr = raw_ClearItems();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3391)
inline HRESULT ITeeListBox::Repaint ( ) {
    HRESULT _hr = raw_Repaint();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3392)
inline VARIANT_BOOL ITeeListBox::GetSorted ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Sorted(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3393)
inline void ITeeListBox::PutSorted ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Sorted(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3394)
inline VARIANT_BOOL ITeeListBox::GetAskDelete ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AskDelete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3395)
inline void ITeeListBox::PutAskDelete ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_AskDelete(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3396)
inline VARIANT_BOOL ITeeListBox::GetAllowDeleteSeries ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AllowDeleteSeries(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3397)
inline void ITeeListBox::PutAllowDeleteSeries ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_AllowDeleteSeries(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3398)
inline VARIANT_BOOL ITeeListBox::GetAllowAddSeries ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AllowAddSeries(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3399)
inline void ITeeListBox::PutAllowAddSeries ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_AllowAddSeries(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3400)
inline ITeeListBoxSectionPtr ITeeListBox::GetSections ( long Index ) {
    struct ITeeListBoxSection * _result = 0;
    HRESULT _hr = get_Sections(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITeeListBoxSectionPtr(_result, false);
}

#pragma implementation_key(3401)
inline VARIANT_BOOL ITeeListBox::GetFontSeriesColor ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_FontSeriesColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3402)
inline void ITeeListBox::PutFontSeriesColor ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_FontSeriesColor(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3403)
inline IStringsPtr ITeeListBox::GetItems ( ) {
    struct IStrings * _result = 0;
    HRESULT _hr = get_Items(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IStringsPtr(_result, false);
}

//
// interface ISeriesGroups wrapper method implementations
//

#pragma implementation_key(3404)
inline ISeriesGroupPtr ISeriesGroups::GetItems ( long Index ) {
    struct ISeriesGroup * _result = 0;
    HRESULT _hr = get_Items(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISeriesGroupPtr(_result, false);
}

#pragma implementation_key(3405)
inline long ISeriesGroups::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3406)
inline HRESULT ISeriesGroups::Delete ( long Index ) {
    HRESULT _hr = raw_Delete(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3407)
inline long ISeriesGroups::Contains ( long SeriesIndex ) {
    long _result = 0;
    HRESULT _hr = raw_Contains(SeriesIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3408)
inline long ISeriesGroups::FindByName ( _bstr_t Name, VARIANT_BOOL CaseSensitive ) {
    long _result = 0;
    HRESULT _hr = raw_FindByName(Name, CaseSensitive, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ISeriesList wrapper method implementations
//

#pragma implementation_key(3409)
inline HRESULT ISeriesList::AddGroup ( _bstr_t Name ) {
    HRESULT _hr = raw_AddGroup(Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3410)
inline VARIANT_BOOL ISeriesList::GetAllActive ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AllActive(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3411)
inline void ISeriesList::PutAllActive ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_AllActive(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3412)
inline ISeriesGroupsPtr ISeriesList::GetGroups ( ) {
    struct ISeriesGroups * _result = 0;
    HRESULT _hr = get_Groups(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISeriesGroupsPtr(_result, false);
}

#pragma implementation_key(3413)
inline HRESULT ISeriesList::ClearValues ( ) {
    HRESULT _hr = raw_ClearValues();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3414)
inline long ISeriesList::First ( ) {
    long _result = 0;
    HRESULT _hr = raw_First(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3415)
inline long ISeriesList::Last ( ) {
    long _result = 0;
    HRESULT _hr = raw_Last(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3416)
inline ISeriesPtr ISeriesList::GetItems ( long Index ) {
    struct ISeries * _result = 0;
    HRESULT _hr = get_Items(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISeriesPtr(_result, false);
}
